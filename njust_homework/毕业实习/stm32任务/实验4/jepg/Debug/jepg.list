
jepg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001faac  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000021c0  0801fc40  0801fc40  0002fc40  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021e00  08021e00  00040070  2**0
                  CONTENTS
  4 .ARM          00000008  08021e00  08021e00  00031e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021e08  08021e08  00040070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021e08  08021e08  00031e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08021e0c  08021e0c  00031e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08021e10  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00040070  2**0
                  CONTENTS
 10 .bss          00000080  20000070  20000070  00040070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000f0  200000f0  00040070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00040070  2**0
                  CONTENTS, READONLY
 13 .debug_info   0004504c  00000000  00000000  000400a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006338  00000000  00000000  000850ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001108  00000000  00000000  0008b428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef0  00000000  00000000  0008c530  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f86  00000000  00000000  0008d420  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00027796  00000000  00000000  000b23a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c9f50  00000000  00000000  000d9b3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001a3a8c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004844  00000000  00000000  001a3ae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0801fc24 	.word	0x0801fc24

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	0801fc24 	.word	0x0801fc24

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	3c01      	subs	r4, #1
 80003ac:	bf28      	it	cs
 80003ae:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003b2:	d2e9      	bcs.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_uldivmod>:
 8000aac:	b953      	cbnz	r3, 8000ac4 <__aeabi_uldivmod+0x18>
 8000aae:	b94a      	cbnz	r2, 8000ac4 <__aeabi_uldivmod+0x18>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bf08      	it	eq
 8000ab4:	2800      	cmpeq	r0, #0
 8000ab6:	bf1c      	itt	ne
 8000ab8:	f04f 31ff 	movne.w	r1, #4294967295
 8000abc:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac0:	f000 b96e 	b.w	8000da0 <__aeabi_idiv0>
 8000ac4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ac8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000acc:	f000 f806 	bl	8000adc <__udivmoddi4>
 8000ad0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ad8:	b004      	add	sp, #16
 8000ada:	4770      	bx	lr

08000adc <__udivmoddi4>:
 8000adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae0:	9d08      	ldr	r5, [sp, #32]
 8000ae2:	4604      	mov	r4, r0
 8000ae4:	468c      	mov	ip, r1
 8000ae6:	2b00      	cmp	r3, #0
 8000ae8:	f040 8083 	bne.w	8000bf2 <__udivmoddi4+0x116>
 8000aec:	428a      	cmp	r2, r1
 8000aee:	4617      	mov	r7, r2
 8000af0:	d947      	bls.n	8000b82 <__udivmoddi4+0xa6>
 8000af2:	fab2 f282 	clz	r2, r2
 8000af6:	b142      	cbz	r2, 8000b0a <__udivmoddi4+0x2e>
 8000af8:	f1c2 0020 	rsb	r0, r2, #32
 8000afc:	fa24 f000 	lsr.w	r0, r4, r0
 8000b00:	4091      	lsls	r1, r2
 8000b02:	4097      	lsls	r7, r2
 8000b04:	ea40 0c01 	orr.w	ip, r0, r1
 8000b08:	4094      	lsls	r4, r2
 8000b0a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000b0e:	0c23      	lsrs	r3, r4, #16
 8000b10:	fbbc f6f8 	udiv	r6, ip, r8
 8000b14:	fa1f fe87 	uxth.w	lr, r7
 8000b18:	fb08 c116 	mls	r1, r8, r6, ip
 8000b1c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000b20:	fb06 f10e 	mul.w	r1, r6, lr
 8000b24:	4299      	cmp	r1, r3
 8000b26:	d909      	bls.n	8000b3c <__udivmoddi4+0x60>
 8000b28:	18fb      	adds	r3, r7, r3
 8000b2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000b2e:	f080 8119 	bcs.w	8000d64 <__udivmoddi4+0x288>
 8000b32:	4299      	cmp	r1, r3
 8000b34:	f240 8116 	bls.w	8000d64 <__udivmoddi4+0x288>
 8000b38:	3e02      	subs	r6, #2
 8000b3a:	443b      	add	r3, r7
 8000b3c:	1a5b      	subs	r3, r3, r1
 8000b3e:	b2a4      	uxth	r4, r4
 8000b40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b44:	fb08 3310 	mls	r3, r8, r0, r3
 8000b48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b50:	45a6      	cmp	lr, r4
 8000b52:	d909      	bls.n	8000b68 <__udivmoddi4+0x8c>
 8000b54:	193c      	adds	r4, r7, r4
 8000b56:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b5a:	f080 8105 	bcs.w	8000d68 <__udivmoddi4+0x28c>
 8000b5e:	45a6      	cmp	lr, r4
 8000b60:	f240 8102 	bls.w	8000d68 <__udivmoddi4+0x28c>
 8000b64:	3802      	subs	r0, #2
 8000b66:	443c      	add	r4, r7
 8000b68:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b6c:	eba4 040e 	sub.w	r4, r4, lr
 8000b70:	2600      	movs	r6, #0
 8000b72:	b11d      	cbz	r5, 8000b7c <__udivmoddi4+0xa0>
 8000b74:	40d4      	lsrs	r4, r2
 8000b76:	2300      	movs	r3, #0
 8000b78:	e9c5 4300 	strd	r4, r3, [r5]
 8000b7c:	4631      	mov	r1, r6
 8000b7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b82:	b902      	cbnz	r2, 8000b86 <__udivmoddi4+0xaa>
 8000b84:	deff      	udf	#255	; 0xff
 8000b86:	fab2 f282 	clz	r2, r2
 8000b8a:	2a00      	cmp	r2, #0
 8000b8c:	d150      	bne.n	8000c30 <__udivmoddi4+0x154>
 8000b8e:	1bcb      	subs	r3, r1, r7
 8000b90:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000b94:	fa1f f887 	uxth.w	r8, r7
 8000b98:	2601      	movs	r6, #1
 8000b9a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000b9e:	0c21      	lsrs	r1, r4, #16
 8000ba0:	fb0e 331c 	mls	r3, lr, ip, r3
 8000ba4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ba8:	fb08 f30c 	mul.w	r3, r8, ip
 8000bac:	428b      	cmp	r3, r1
 8000bae:	d907      	bls.n	8000bc0 <__udivmoddi4+0xe4>
 8000bb0:	1879      	adds	r1, r7, r1
 8000bb2:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000bb6:	d202      	bcs.n	8000bbe <__udivmoddi4+0xe2>
 8000bb8:	428b      	cmp	r3, r1
 8000bba:	f200 80e9 	bhi.w	8000d90 <__udivmoddi4+0x2b4>
 8000bbe:	4684      	mov	ip, r0
 8000bc0:	1ac9      	subs	r1, r1, r3
 8000bc2:	b2a3      	uxth	r3, r4
 8000bc4:	fbb1 f0fe 	udiv	r0, r1, lr
 8000bc8:	fb0e 1110 	mls	r1, lr, r0, r1
 8000bcc:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000bd0:	fb08 f800 	mul.w	r8, r8, r0
 8000bd4:	45a0      	cmp	r8, r4
 8000bd6:	d907      	bls.n	8000be8 <__udivmoddi4+0x10c>
 8000bd8:	193c      	adds	r4, r7, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	d202      	bcs.n	8000be6 <__udivmoddi4+0x10a>
 8000be0:	45a0      	cmp	r8, r4
 8000be2:	f200 80d9 	bhi.w	8000d98 <__udivmoddi4+0x2bc>
 8000be6:	4618      	mov	r0, r3
 8000be8:	eba4 0408 	sub.w	r4, r4, r8
 8000bec:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000bf0:	e7bf      	b.n	8000b72 <__udivmoddi4+0x96>
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0x12e>
 8000bf6:	2d00      	cmp	r5, #0
 8000bf8:	f000 80b1 	beq.w	8000d5e <__udivmoddi4+0x282>
 8000bfc:	2600      	movs	r6, #0
 8000bfe:	e9c5 0100 	strd	r0, r1, [r5]
 8000c02:	4630      	mov	r0, r6
 8000c04:	4631      	mov	r1, r6
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f683 	clz	r6, r3
 8000c0e:	2e00      	cmp	r6, #0
 8000c10:	d14a      	bne.n	8000ca8 <__udivmoddi4+0x1cc>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0x140>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80b8 	bhi.w	8000d8c <__udivmoddi4+0x2b0>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0103 	sbc.w	r1, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	468c      	mov	ip, r1
 8000c26:	2d00      	cmp	r5, #0
 8000c28:	d0a8      	beq.n	8000b7c <__udivmoddi4+0xa0>
 8000c2a:	e9c5 4c00 	strd	r4, ip, [r5]
 8000c2e:	e7a5      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000c30:	f1c2 0320 	rsb	r3, r2, #32
 8000c34:	fa20 f603 	lsr.w	r6, r0, r3
 8000c38:	4097      	lsls	r7, r2
 8000c3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000c3e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c42:	40d9      	lsrs	r1, r3
 8000c44:	4330      	orrs	r0, r6
 8000c46:	0c03      	lsrs	r3, r0, #16
 8000c48:	fbb1 f6fe 	udiv	r6, r1, lr
 8000c4c:	fa1f f887 	uxth.w	r8, r7
 8000c50:	fb0e 1116 	mls	r1, lr, r6, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb06 f108 	mul.w	r1, r6, r8
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	fa04 f402 	lsl.w	r4, r4, r2
 8000c62:	d909      	bls.n	8000c78 <__udivmoddi4+0x19c>
 8000c64:	18fb      	adds	r3, r7, r3
 8000c66:	f106 3cff 	add.w	ip, r6, #4294967295
 8000c6a:	f080 808d 	bcs.w	8000d88 <__udivmoddi4+0x2ac>
 8000c6e:	4299      	cmp	r1, r3
 8000c70:	f240 808a 	bls.w	8000d88 <__udivmoddi4+0x2ac>
 8000c74:	3e02      	subs	r6, #2
 8000c76:	443b      	add	r3, r7
 8000c78:	1a5b      	subs	r3, r3, r1
 8000c7a:	b281      	uxth	r1, r0
 8000c7c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c80:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c88:	fb00 f308 	mul.w	r3, r0, r8
 8000c8c:	428b      	cmp	r3, r1
 8000c8e:	d907      	bls.n	8000ca0 <__udivmoddi4+0x1c4>
 8000c90:	1879      	adds	r1, r7, r1
 8000c92:	f100 3cff 	add.w	ip, r0, #4294967295
 8000c96:	d273      	bcs.n	8000d80 <__udivmoddi4+0x2a4>
 8000c98:	428b      	cmp	r3, r1
 8000c9a:	d971      	bls.n	8000d80 <__udivmoddi4+0x2a4>
 8000c9c:	3802      	subs	r0, #2
 8000c9e:	4439      	add	r1, r7
 8000ca0:	1acb      	subs	r3, r1, r3
 8000ca2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000ca6:	e778      	b.n	8000b9a <__udivmoddi4+0xbe>
 8000ca8:	f1c6 0c20 	rsb	ip, r6, #32
 8000cac:	fa03 f406 	lsl.w	r4, r3, r6
 8000cb0:	fa22 f30c 	lsr.w	r3, r2, ip
 8000cb4:	431c      	orrs	r4, r3
 8000cb6:	fa20 f70c 	lsr.w	r7, r0, ip
 8000cba:	fa01 f306 	lsl.w	r3, r1, r6
 8000cbe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000cc2:	fa21 f10c 	lsr.w	r1, r1, ip
 8000cc6:	431f      	orrs	r7, r3
 8000cc8:	0c3b      	lsrs	r3, r7, #16
 8000cca:	fbb1 f9fe 	udiv	r9, r1, lr
 8000cce:	fa1f f884 	uxth.w	r8, r4
 8000cd2:	fb0e 1119 	mls	r1, lr, r9, r1
 8000cd6:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000cda:	fb09 fa08 	mul.w	sl, r9, r8
 8000cde:	458a      	cmp	sl, r1
 8000ce0:	fa02 f206 	lsl.w	r2, r2, r6
 8000ce4:	fa00 f306 	lsl.w	r3, r0, r6
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x220>
 8000cea:	1861      	adds	r1, r4, r1
 8000cec:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cf0:	d248      	bcs.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf2:	458a      	cmp	sl, r1
 8000cf4:	d946      	bls.n	8000d84 <__udivmoddi4+0x2a8>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4421      	add	r1, r4
 8000cfc:	eba1 010a 	sub.w	r1, r1, sl
 8000d00:	b2bf      	uxth	r7, r7
 8000d02:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d06:	fb0e 1110 	mls	r1, lr, r0, r1
 8000d0a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000d0e:	fb00 f808 	mul.w	r8, r0, r8
 8000d12:	45b8      	cmp	r8, r7
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x24a>
 8000d16:	19e7      	adds	r7, r4, r7
 8000d18:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d1c:	d22e      	bcs.n	8000d7c <__udivmoddi4+0x2a0>
 8000d1e:	45b8      	cmp	r8, r7
 8000d20:	d92c      	bls.n	8000d7c <__udivmoddi4+0x2a0>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4427      	add	r7, r4
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	eba7 0708 	sub.w	r7, r7, r8
 8000d2e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d32:	454f      	cmp	r7, r9
 8000d34:	46c6      	mov	lr, r8
 8000d36:	4649      	mov	r1, r9
 8000d38:	d31a      	bcc.n	8000d70 <__udivmoddi4+0x294>
 8000d3a:	d017      	beq.n	8000d6c <__udivmoddi4+0x290>
 8000d3c:	b15d      	cbz	r5, 8000d56 <__udivmoddi4+0x27a>
 8000d3e:	ebb3 020e 	subs.w	r2, r3, lr
 8000d42:	eb67 0701 	sbc.w	r7, r7, r1
 8000d46:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000d4a:	40f2      	lsrs	r2, r6
 8000d4c:	ea4c 0202 	orr.w	r2, ip, r2
 8000d50:	40f7      	lsrs	r7, r6
 8000d52:	e9c5 2700 	strd	r2, r7, [r5]
 8000d56:	2600      	movs	r6, #0
 8000d58:	4631      	mov	r1, r6
 8000d5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d5e:	462e      	mov	r6, r5
 8000d60:	4628      	mov	r0, r5
 8000d62:	e70b      	b.n	8000b7c <__udivmoddi4+0xa0>
 8000d64:	4606      	mov	r6, r0
 8000d66:	e6e9      	b.n	8000b3c <__udivmoddi4+0x60>
 8000d68:	4618      	mov	r0, r3
 8000d6a:	e6fd      	b.n	8000b68 <__udivmoddi4+0x8c>
 8000d6c:	4543      	cmp	r3, r8
 8000d6e:	d2e5      	bcs.n	8000d3c <__udivmoddi4+0x260>
 8000d70:	ebb8 0e02 	subs.w	lr, r8, r2
 8000d74:	eb69 0104 	sbc.w	r1, r9, r4
 8000d78:	3801      	subs	r0, #1
 8000d7a:	e7df      	b.n	8000d3c <__udivmoddi4+0x260>
 8000d7c:	4608      	mov	r0, r1
 8000d7e:	e7d2      	b.n	8000d26 <__udivmoddi4+0x24a>
 8000d80:	4660      	mov	r0, ip
 8000d82:	e78d      	b.n	8000ca0 <__udivmoddi4+0x1c4>
 8000d84:	4681      	mov	r9, r0
 8000d86:	e7b9      	b.n	8000cfc <__udivmoddi4+0x220>
 8000d88:	4666      	mov	r6, ip
 8000d8a:	e775      	b.n	8000c78 <__udivmoddi4+0x19c>
 8000d8c:	4630      	mov	r0, r6
 8000d8e:	e74a      	b.n	8000c26 <__udivmoddi4+0x14a>
 8000d90:	f1ac 0c02 	sub.w	ip, ip, #2
 8000d94:	4439      	add	r1, r7
 8000d96:	e713      	b.n	8000bc0 <__udivmoddi4+0xe4>
 8000d98:	3802      	subs	r0, #2
 8000d9a:	443c      	add	r4, r7
 8000d9c:	e724      	b.n	8000be8 <__udivmoddi4+0x10c>
 8000d9e:	bf00      	nop

08000da0 <__aeabi_idiv0>:
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop

08000da4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b08a      	sub	sp, #40	; 0x28
 8000da8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000daa:	f107 0314 	add.w	r3, r7, #20
 8000dae:	2200      	movs	r2, #0
 8000db0:	601a      	str	r2, [r3, #0]
 8000db2:	605a      	str	r2, [r3, #4]
 8000db4:	609a      	str	r2, [r3, #8]
 8000db6:	60da      	str	r2, [r3, #12]
 8000db8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dba:	2300      	movs	r3, #0
 8000dbc:	613b      	str	r3, [r7, #16]
 8000dbe:	4b26      	ldr	r3, [pc, #152]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc2:	4a25      	ldr	r2, [pc, #148]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000dc4:	f043 0304 	orr.w	r3, r3, #4
 8000dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dca:	4b23      	ldr	r3, [pc, #140]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dce:	f003 0304 	and.w	r3, r3, #4
 8000dd2:	613b      	str	r3, [r7, #16]
 8000dd4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	60fb      	str	r3, [r7, #12]
 8000dda:	4b1f      	ldr	r3, [pc, #124]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a1e      	ldr	r2, [pc, #120]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000de0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b1c      	ldr	r3, [pc, #112]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000dee:	60fb      	str	r3, [r7, #12]
 8000df0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000df2:	2300      	movs	r3, #0
 8000df4:	60bb      	str	r3, [r7, #8]
 8000df6:	4b18      	ldr	r3, [pc, #96]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000df8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dfa:	4a17      	ldr	r2, [pc, #92]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000dfc:	f043 0301 	orr.w	r3, r3, #1
 8000e00:	6313      	str	r3, [r2, #48]	; 0x30
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e06:	f003 0301 	and.w	r3, r3, #1
 8000e0a:	60bb      	str	r3, [r7, #8]
 8000e0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e0e:	2300      	movs	r3, #0
 8000e10:	607b      	str	r3, [r7, #4]
 8000e12:	4b11      	ldr	r3, [pc, #68]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000e14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e16:	4a10      	ldr	r2, [pc, #64]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000e18:	f043 0302 	orr.w	r3, r3, #2
 8000e1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	; (8000e58 <MX_GPIO_Init+0xb4>)
 8000e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e22:	f003 0302 	and.w	r3, r3, #2
 8000e26:	607b      	str	r3, [r7, #4]
 8000e28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, led1_Pin|led2_Pin, GPIO_PIN_RESET);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	21c0      	movs	r1, #192	; 0xc0
 8000e2e:	480b      	ldr	r0, [pc, #44]	; (8000e5c <MX_GPIO_Init+0xb8>)
 8000e30:	f000 fff2 	bl	8001e18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = led1_Pin|led2_Pin;
 8000e34:	23c0      	movs	r3, #192	; 0xc0
 8000e36:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e38:	2301      	movs	r3, #1
 8000e3a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e40:	2300      	movs	r3, #0
 8000e42:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e44:	f107 0314 	add.w	r3, r7, #20
 8000e48:	4619      	mov	r1, r3
 8000e4a:	4804      	ldr	r0, [pc, #16]	; (8000e5c <MX_GPIO_Init+0xb8>)
 8000e4c:	f000 fe48 	bl	8001ae0 <HAL_GPIO_Init>

}
 8000e50:	bf00      	nop
 8000e52:	3728      	adds	r7, #40	; 0x28
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	40023800 	.word	0x40023800
 8000e5c:	40020000 	.word	0x40020000

08000e60 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8000e60:	b580      	push	{r7, lr}
 8000e62:	f5ad 7d3c 	sub.w	sp, sp, #752	; 0x2f0
 8000e66:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8000e68:	f000 fc00 	bl	800166c <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8000e6c:	f000 fa52 	bl	8001314 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8000e70:	f7ff ff98 	bl	8000da4 <MX_GPIO_Init>
	MX_LIBJPEG_Init();
 8000e74:	f002 fc56 	bl	8003724 <MX_LIBJPEG_Init>
	MX_USART1_UART_Init();
 8000e78:	f000 fb54 	bl	8001524 <MX_USART1_UART_Init>
	while (1) {
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		// 读取图片大小
		HAL_UART_Receive(&huart1, (uint8_t*) getLen, 8, 0xffff);
 8000e7c:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 8000e80:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e84:	2208      	movs	r2, #8
 8000e86:	48df      	ldr	r0, [pc, #892]	; (8001204 <main+0x3a4>)
 8000e88:	f001 fd21 	bl	80028ce <HAL_UART_Receive>
		// 输出图片大小
		HAL_UART_Transmit(&huart1, (uint8_t*) getLen, 8, 0xffff);
 8000e8c:	f507 712d 	add.w	r1, r7, #692	; 0x2b4
 8000e90:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000e94:	2208      	movs	r2, #8
 8000e96:	48db      	ldr	r0, [pc, #876]	; (8001204 <main+0x3a4>)
 8000e98:	f001 fc87 	bl	80027aa <HAL_UART_Transmit>
		int imgLen = 0, i = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
		for (i = 0; i < 8; ++i) {
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8000eae:	e015      	b.n	8000edc <main+0x7c>
			imgLen = imgLen * 10 + getLen[i] - '0';
 8000eb0:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	4413      	add	r3, r2
 8000eba:	005b      	lsls	r3, r3, #1
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	f507 722d 	add.w	r2, r7, #692	; 0x2b4
 8000ec2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000ec6:	4413      	add	r3, r2
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	440b      	add	r3, r1
 8000ecc:	3b30      	subs	r3, #48	; 0x30
 8000ece:	f8c7 32ec 	str.w	r3, [r7, #748]	; 0x2ec
		for (i = 0; i < 8; ++i) {
 8000ed2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8000edc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000ee0:	2b07      	cmp	r3, #7
 8000ee2:	dde5      	ble.n	8000eb0 <main+0x50>
		}
		// 建立缓冲区
		unsigned char *imgData = malloc(imgLen);
 8000ee4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f01e fa57 	bl	801f39c <malloc>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	f8c7 32e4 	str.w	r3, [r7, #740]	; 0x2e4
		memset(imgData, 0, imgLen);
 8000ef4:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8000ef8:	461a      	mov	r2, r3
 8000efa:	2100      	movs	r1, #0
 8000efc:	f8d7 02e4 	ldr.w	r0, [r7, #740]	; 0x2e4
 8000f00:	f01e fa6a 	bl	801f3d8 <memset>
		// 不断接收
		for (i = 0; i < imgLen; i += 256) {
 8000f04:	2300      	movs	r3, #0
 8000f06:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8000f0a:	e02b      	b.n	8000f64 <main+0x104>
			if (imgLen - i < 256) {
 8000f0c:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8000f10:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000f14:	1ad3      	subs	r3, r2, r3
 8000f16:	2bff      	cmp	r3, #255	; 0xff
 8000f18:	dc12      	bgt.n	8000f40 <main+0xe0>
				HAL_UART_Receive(&huart1, (uint8_t*) (imgData + i), imgLen - i,
 8000f1a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000f1e:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8000f22:	18d1      	adds	r1, r2, r3
 8000f24:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8000f28:	b29a      	uxth	r2, r3
 8000f2a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000f2e:	b29b      	uxth	r3, r3
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	b29a      	uxth	r2, r3
 8000f34:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f38:	48b2      	ldr	r0, [pc, #712]	; (8001204 <main+0x3a4>)
 8000f3a:	f001 fcc8 	bl	80028ce <HAL_UART_Receive>
 8000f3e:	e00b      	b.n	8000f58 <main+0xf8>
						0xffff);
			} else {
				HAL_UART_Receive(&huart1, (uint8_t*) (imgData + i), 256,
 8000f40:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000f44:	f8d7 22e4 	ldr.w	r2, [r7, #740]	; 0x2e4
 8000f48:	18d1      	adds	r1, r2, r3
 8000f4a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000f4e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000f52:	48ac      	ldr	r0, [pc, #688]	; (8001204 <main+0x3a4>)
 8000f54:	f001 fcbb 	bl	80028ce <HAL_UART_Receive>
		for (i = 0; i < imgLen; i += 256) {
 8000f58:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8000f5c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000f60:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8000f64:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 8000f68:	f8d7 32ec 	ldr.w	r3, [r7, #748]	; 0x2ec
 8000f6c:	429a      	cmp	r2, r3
 8000f6e:	dbcd      	blt.n	8000f0c <main+0xac>
			}
		}
		// libjpeg使用
		struct jpeg_decompress_struct info; //for our jpeg info
		struct jpeg_error_mgr err; //the error handler
		info.err = jpeg_std_error(&err);
 8000f70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000f74:	4618      	mov	r0, r3
 8000f76:	f00d fee3 	bl	800ed40 <jpeg_std_error>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f80:	601a      	str	r2, [r3, #0]
		jpeg_create_decompress(&info); //fills info structure
 8000f82:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f86:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8000f8a:	2150      	movs	r1, #80	; 0x50
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	f002 fc3d 	bl	800380c <jpeg_CreateDecompress>
		jpeg_mem_src(&info, imgData, imgLen);
 8000f92:	f8d7 22ec 	ldr.w	r2, [r7, #748]	; 0x2ec
 8000f96:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f9a:	f8d7 12e4 	ldr.w	r1, [r7, #740]	; 0x2e4
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	f004 f96a 	bl	8005278 <jpeg_mem_src>
		jpeg_read_header(&info, 1);
 8000fa4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fa8:	2101      	movs	r1, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f002 fde4 	bl	8003b78 <jpeg_read_header>
		jpeg_start_decompress(&info);
 8000fb0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 feec 	bl	8003d92 <jpeg_start_decompress>
		unsigned int w = info.output_width;
 8000fba:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fc0:	f8c7 32e0 	str.w	r3, [r7, #736]	; 0x2e0
		unsigned int h = info.output_height;
 8000fc4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000fca:	f8c7 32dc 	str.w	r3, [r7, #732]	; 0x2dc
		unsigned int numChannels = info.num_components; // 3 = RGB, 4 = RGBA
 8000fce:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fd4:	f8c7 32d8 	str.w	r3, [r7, #728]	; 0x2d8
		unsigned long dataSize = w * h * numChannels;
 8000fd8:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 8000fdc:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8000fe0:	fb02 f203 	mul.w	r2, r2, r3
 8000fe4:	f8d7 32d8 	ldr.w	r3, [r7, #728]	; 0x2d8
 8000fe8:	fb02 f303 	mul.w	r3, r2, r3
 8000fec:	f8c7 32d4 	str.w	r3, [r7, #724]	; 0x2d4
		unsigned char *data = (unsigned char*) malloc(dataSize);
 8000ff0:	f8d7 02d4 	ldr.w	r0, [r7, #724]	; 0x2d4
 8000ff4:	f01e f9d2 	bl	801f39c <malloc>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	f8c7 32d0 	str.w	r3, [r7, #720]	; 0x2d0
		unsigned char *rowptr;
		while (info.output_scanline < h) {
 8000ffe:	e051      	b.n	80010a4 <main+0x244>
			rowptr = data + (h - info.output_scanline - 1) * w * numChannels;
 8001000:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001004:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8001008:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	3b01      	subs	r3, #1
 8001010:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8001014:	fb02 f303 	mul.w	r3, r2, r3
 8001018:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 800101c:	fb02 f303 	mul.w	r3, r2, r3
 8001020:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 8001024:	4413      	add	r3, r2
 8001026:	f8c7 32b0 	str.w	r3, [r7, #688]	; 0x2b0
//			rowptr = data + info.output_scanline * w * numChannels;
			jpeg_read_scanlines(&info, &rowptr, 1);
 800102a:	f507 712c 	add.w	r1, r7, #688	; 0x2b0
 800102e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001032:	2201      	movs	r2, #1
 8001034:	4618      	mov	r0, r3
 8001036:	f002 ff94 	bl	8003f62 <jpeg_read_scanlines>
			unsigned char tmpDataSwap;
			int colIdnex = w*numChannels;
 800103a:	f8d7 32e0 	ldr.w	r3, [r7, #736]	; 0x2e0
 800103e:	f8d7 22d8 	ldr.w	r2, [r7, #728]	; 0x2d8
 8001042:	fb02 f303 	mul.w	r3, r2, r3
 8001046:	f8c7 32c0 	str.w	r3, [r7, #704]	; 0x2c0
			for (i = 0; i < colIdnex; i+=3) {
 800104a:	2300      	movs	r3, #0
 800104c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8001050:	e022      	b.n	8001098 <main+0x238>
				tmpDataSwap = rowptr[i];
 8001052:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001056:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800105a:	4413      	add	r3, r2
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	f887 32bf 	strb.w	r3, [r7, #703]	; 0x2bf
				rowptr[i] = rowptr[i + 2];
 8001062:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001066:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800106a:	3302      	adds	r3, #2
 800106c:	441a      	add	r2, r3
 800106e:	f8d7 12b0 	ldr.w	r1, [r7, #688]	; 0x2b0
 8001072:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001076:	440b      	add	r3, r1
 8001078:	7812      	ldrb	r2, [r2, #0]
 800107a:	701a      	strb	r2, [r3, #0]
				rowptr[i + 2] = tmpDataSwap;
 800107c:	f8d7 22b0 	ldr.w	r2, [r7, #688]	; 0x2b0
 8001080:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001084:	3302      	adds	r3, #2
 8001086:	4413      	add	r3, r2
 8001088:	f897 22bf 	ldrb.w	r2, [r7, #703]	; 0x2bf
 800108c:	701a      	strb	r2, [r3, #0]
			for (i = 0; i < colIdnex; i+=3) {
 800108e:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001092:	3303      	adds	r3, #3
 8001094:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8001098:	f8d7 22e8 	ldr.w	r2, [r7, #744]	; 0x2e8
 800109c:	f8d7 32c0 	ldr.w	r3, [r7, #704]	; 0x2c0
 80010a0:	429a      	cmp	r2, r3
 80010a2:	dbd6      	blt.n	8001052 <main+0x1f2>
		while (info.output_scanline < h) {
 80010a4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80010ac:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 80010b0:	429a      	cmp	r2, r3
 80010b2:	d8a5      	bhi.n	8001000 <main+0x1a0>
			}
		}
		jpeg_finish_decompress(&info);
 80010b4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010b8:	4618      	mov	r0, r3
 80010ba:	f002 fe07 	bl	8003ccc <jpeg_finish_decompress>
		jpeg_destroy_decompress(&info);
 80010be:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80010c2:	4618      	mov	r0, r3
 80010c4:	f002 fc2b 	bl	800391e <jpeg_destroy_decompress>

		struct bmp_file bmp1;
		unsigned fileHeaderSize = sizeof(bmp1.fileHeader);
 80010c8:	230e      	movs	r3, #14
 80010ca:	f8c7 32cc 	str.w	r3, [r7, #716]	; 0x2cc
		unsigned infoHeaderSize = sizeof(bmp1.infoHeader);
 80010ce:	2328      	movs	r3, #40	; 0x28
 80010d0:	f8c7 32c8 	str.w	r3, [r7, #712]	; 0x2c8
		unsigned img_size = dataSize + 4
				- ((bmp1.fileHeader.offset_bits + dataSize) % 4);
 80010d4:	1d3b      	adds	r3, r7, #4
 80010d6:	f8d3 200a 	ldr.w	r2, [r3, #10]
 80010da:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80010de:	4413      	add	r3, r2
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80010e8:	1ad3      	subs	r3, r2, r3
		unsigned img_size = dataSize + 4
 80010ea:	3304      	adds	r3, #4
 80010ec:	f8c7 32c4 	str.w	r3, [r7, #708]	; 0x2c4
		bmp1.fileHeader.offset_bits = fileHeaderSize + infoHeaderSize;
 80010f0:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 80010f4:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 80010f8:	441a      	add	r2, r3
 80010fa:	1d3b      	adds	r3, r7, #4
 80010fc:	f8c3 200a 	str.w	r2, [r3, #10]
		bmp1.fileHeader.file_type = ('M' << 8) | 'B';
 8001100:	1d3b      	adds	r3, r7, #4
 8001102:	f644 5242 	movw	r2, #19778	; 0x4d42
 8001106:	801a      	strh	r2, [r3, #0]
		bmp1.fileHeader.file_size = bmp1.fileHeader.offset_bits + img_size;
 8001108:	1d3b      	adds	r3, r7, #4
 800110a:	f8d3 200a 	ldr.w	r2, [r3, #10]
 800110e:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 8001112:	441a      	add	r2, r3
 8001114:	1d3b      	adds	r3, r7, #4
 8001116:	f8c3 2002 	str.w	r2, [r3, #2]
		bmp1.infoHeader.image_depth = 24;
 800111a:	1d3b      	adds	r3, r7, #4
 800111c:	2218      	movs	r2, #24
 800111e:	839a      	strh	r2, [r3, #28]
		bmp1.infoHeader.color_important = 0;
 8001120:	1d3b      	adds	r3, r7, #4
 8001122:	2200      	movs	r2, #0
 8001124:	865a      	strh	r2, [r3, #50]	; 0x32
 8001126:	2200      	movs	r2, #0
 8001128:	869a      	strh	r2, [r3, #52]	; 0x34
		bmp1.infoHeader.planes = 1;
 800112a:	1d3b      	adds	r3, r7, #4
 800112c:	2201      	movs	r2, #1
 800112e:	835a      	strh	r2, [r3, #26]
		bmp1.infoHeader.compression = 0;
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2200      	movs	r2, #0
 8001134:	83da      	strh	r2, [r3, #30]
 8001136:	2200      	movs	r2, #0
 8001138:	841a      	strh	r2, [r3, #32]
		bmp1.infoHeader.x_pels_permeter = 100;
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8001142:	84da      	strh	r2, [r3, #38]	; 0x26
 8001144:	2200      	movs	r2, #0
 8001146:	851a      	strh	r2, [r3, #40]	; 0x28
		bmp1.infoHeader.y_pels_permeter = 100;
 8001148:	1d3b      	adds	r3, r7, #4
 800114a:	2200      	movs	r2, #0
 800114c:	f042 0264 	orr.w	r2, r2, #100	; 0x64
 8001150:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001152:	2200      	movs	r2, #0
 8001154:	859a      	strh	r2, [r3, #44]	; 0x2c
		bmp1.infoHeader.color_used = 0;
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	2200      	movs	r2, #0
 800115a:	85da      	strh	r2, [r3, #46]	; 0x2e
 800115c:	2200      	movs	r2, #0
 800115e:	861a      	strh	r2, [r3, #48]	; 0x30
		bmp1.infoHeader.color_important = 0;
 8001160:	1d3b      	adds	r3, r7, #4
 8001162:	2200      	movs	r2, #0
 8001164:	865a      	strh	r2, [r3, #50]	; 0x32
 8001166:	2200      	movs	r2, #0
 8001168:	869a      	strh	r2, [r3, #52]	; 0x34
		bmp1.infoHeader.bitmap_info_size = infoHeaderSize;
 800116a:	1d3b      	adds	r3, r7, #4
 800116c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001170:	f8c3 200e 	str.w	r2, [r3, #14]
		bmp1.infoHeader.bitmap_width = w;
 8001174:	f8d7 22e0 	ldr.w	r2, [r7, #736]	; 0x2e0
 8001178:	1d3b      	adds	r3, r7, #4
 800117a:	f8c3 2012 	str.w	r2, [r3, #18]
		bmp1.infoHeader.bitmap_height = h;
 800117e:	f8d7 22dc 	ldr.w	r2, [r7, #732]	; 0x2dc
 8001182:	1d3b      	adds	r3, r7, #4
 8001184:	f8c3 2016 	str.w	r2, [r3, #22]
		bmp1.infoHeader.image_size = img_size;
 8001188:	1d3b      	adds	r3, r7, #4
 800118a:	f8d7 22c4 	ldr.w	r2, [r7, #708]	; 0x2c4
 800118e:	f8c3 2022 	str.w	r2, [r3, #34]	; 0x22

		// 传输头
		for (i = 0; i < fileHeaderSize; i += 256) {
 8001192:	2300      	movs	r3, #0
 8001194:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8001198:	e029      	b.n	80011ee <main+0x38e>
			if (fileHeaderSize - i < 256) {
 800119a:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800119e:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 80011a2:	1ad3      	subs	r3, r2, r3
 80011a4:	2bff      	cmp	r3, #255	; 0xff
 80011a6:	d811      	bhi.n	80011cc <main+0x36c>
				HAL_UART_Transmit(&huart1,
 80011a8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80011ac:	1d3a      	adds	r2, r7, #4
 80011ae:	18d1      	adds	r1, r2, r3
 80011b0:	f8d7 32cc 	ldr.w	r3, [r7, #716]	; 0x2cc
 80011b4:	b29a      	uxth	r2, r3
 80011b6:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80011ba:	b29b      	uxth	r3, r3
 80011bc:	1ad3      	subs	r3, r2, r3
 80011be:	b29a      	uxth	r2, r3
 80011c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011c4:	480f      	ldr	r0, [pc, #60]	; (8001204 <main+0x3a4>)
 80011c6:	f001 faf0 	bl	80027aa <HAL_UART_Transmit>
 80011ca:	e00a      	b.n	80011e2 <main+0x382>
						(uint8_t*) ((char*) &bmp1.fileHeader + i),
						fileHeaderSize - i, 0xffff);
			} else {
				HAL_UART_Transmit(&huart1,
 80011cc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80011d0:	1d3a      	adds	r2, r7, #4
 80011d2:	18d1      	adds	r1, r2, r3
 80011d4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80011d8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011dc:	4809      	ldr	r0, [pc, #36]	; (8001204 <main+0x3a4>)
 80011de:	f001 fae4 	bl	80027aa <HAL_UART_Transmit>
		for (i = 0; i < fileHeaderSize; i += 256) {
 80011e2:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80011e6:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80011ea:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80011ee:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80011f2:	f8d7 22cc 	ldr.w	r2, [r7, #716]	; 0x2cc
 80011f6:	429a      	cmp	r2, r3
 80011f8:	d8cf      	bhi.n	800119a <main+0x33a>
						(uint8_t*) ((char*) &bmp1.fileHeader + i), 256, 0xffff);
			}
		}
		for (i = 0; i < infoHeaderSize; i += 256) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8001200:	e02e      	b.n	8001260 <main+0x400>
 8001202:	bf00      	nop
 8001204:	20000098 	.word	0x20000098
			if (infoHeaderSize - i < 256) {
 8001208:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800120c:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	2bff      	cmp	r3, #255	; 0xff
 8001214:	d812      	bhi.n	800123c <main+0x3dc>
				HAL_UART_Transmit(&huart1,
 8001216:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800121a:	1d3a      	adds	r2, r7, #4
 800121c:	320e      	adds	r2, #14
 800121e:	18d1      	adds	r1, r2, r3
 8001220:	f8d7 32c8 	ldr.w	r3, [r7, #712]	; 0x2c8
 8001224:	b29a      	uxth	r2, r3
 8001226:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 800122a:	b29b      	uxth	r3, r3
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	b29a      	uxth	r2, r3
 8001230:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001234:	4834      	ldr	r0, [pc, #208]	; (8001308 <main+0x4a8>)
 8001236:	f001 fab8 	bl	80027aa <HAL_UART_Transmit>
 800123a:	e00b      	b.n	8001254 <main+0x3f4>
						(uint8_t*) ((char*) &bmp1.infoHeader + i),
						infoHeaderSize - i, 0xffff);
			} else {
				HAL_UART_Transmit(&huart1,
 800123c:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001240:	1d3a      	adds	r2, r7, #4
 8001242:	320e      	adds	r2, #14
 8001244:	18d1      	adds	r1, r2, r3
 8001246:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800124a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800124e:	482e      	ldr	r0, [pc, #184]	; (8001308 <main+0x4a8>)
 8001250:	f001 faab 	bl	80027aa <HAL_UART_Transmit>
		for (i = 0; i < infoHeaderSize; i += 256) {
 8001254:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001258:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800125c:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8001260:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001264:	f8d7 22c8 	ldr.w	r2, [r7, #712]	; 0x2c8
 8001268:	429a      	cmp	r2, r3
 800126a:	d8cd      	bhi.n	8001208 <main+0x3a8>
						(uint8_t*) ((char*) &bmp1.infoHeader + i), 256, 0xffff);
			}
		}

		// 传输data
		for (i = 0; i < dataSize; i += 256) {
 800126c:	2300      	movs	r3, #0
 800126e:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 8001272:	e02b      	b.n	80012cc <main+0x46c>
			if (dataSize - i < 256) {
 8001274:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001278:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 800127c:	1ad3      	subs	r3, r2, r3
 800127e:	2bff      	cmp	r3, #255	; 0xff
 8001280:	d812      	bhi.n	80012a8 <main+0x448>
				HAL_UART_Transmit(&huart1, (uint8_t*) (data + i), dataSize - i,
 8001282:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001286:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 800128a:	18d1      	adds	r1, r2, r3
 800128c:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 8001290:	b29a      	uxth	r2, r3
 8001292:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 8001296:	b29b      	uxth	r3, r3
 8001298:	1ad3      	subs	r3, r2, r3
 800129a:	b29a      	uxth	r2, r3
 800129c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012a0:	4819      	ldr	r0, [pc, #100]	; (8001308 <main+0x4a8>)
 80012a2:	f001 fa82 	bl	80027aa <HAL_UART_Transmit>
 80012a6:	e00b      	b.n	80012c0 <main+0x460>
						0xffff);
			} else {
				HAL_UART_Transmit(&huart1, (uint8_t*) (data + i), 256, 0xffff);
 80012a8:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80012ac:	f8d7 22d0 	ldr.w	r2, [r7, #720]	; 0x2d0
 80012b0:	18d1      	adds	r1, r2, r3
 80012b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012ba:	4813      	ldr	r0, [pc, #76]	; (8001308 <main+0x4a8>)
 80012bc:	f001 fa75 	bl	80027aa <HAL_UART_Transmit>
		for (i = 0; i < dataSize; i += 256) {
 80012c0:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80012c4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 80012c8:	f8c7 32e8 	str.w	r3, [r7, #744]	; 0x2e8
 80012cc:	f8d7 32e8 	ldr.w	r3, [r7, #744]	; 0x2e8
 80012d0:	f8d7 22d4 	ldr.w	r2, [r7, #724]	; 0x2d4
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d8cd      	bhi.n	8001274 <main+0x414>
			}
		}
		HAL_UART_Transmit(&huart1, (uint8_t*) "\0", img_size - dataSize,
 80012d8:	f8d7 32c4 	ldr.w	r3, [r7, #708]	; 0x2c4
 80012dc:	b29a      	uxth	r2, r3
 80012de:	f8d7 32d4 	ldr.w	r3, [r7, #724]	; 0x2d4
 80012e2:	b29b      	uxth	r3, r3
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	b29a      	uxth	r2, r3
 80012e8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80012ec:	4907      	ldr	r1, [pc, #28]	; (800130c <main+0x4ac>)
 80012ee:	4806      	ldr	r0, [pc, #24]	; (8001308 <main+0x4a8>)
 80012f0:	f001 fa5b 	bl	80027aa <HAL_UART_Transmit>
				0xffff);

		HAL_GPIO_TogglePin(GPIOA, led1_Pin);
 80012f4:	2140      	movs	r1, #64	; 0x40
 80012f6:	4806      	ldr	r0, [pc, #24]	; (8001310 <main+0x4b0>)
 80012f8:	f000 fda7 	bl	8001e4a <HAL_GPIO_TogglePin>
		HAL_Delay(800);
 80012fc:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001300:	f000 fa26 	bl	8001750 <HAL_Delay>
	while (1) {
 8001304:	e5ba      	b.n	8000e7c <main+0x1c>
 8001306:	bf00      	nop
 8001308:	20000098 	.word	0x20000098
 800130c:	0801fc40 	.word	0x0801fc40
 8001310:	40020000 	.word	0x40020000

08001314 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001314:	b580      	push	{r7, lr}
 8001316:	b094      	sub	sp, #80	; 0x50
 8001318:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 800131a:	f107 0320 	add.w	r3, r7, #32
 800131e:	2230      	movs	r2, #48	; 0x30
 8001320:	2100      	movs	r1, #0
 8001322:	4618      	mov	r0, r3
 8001324:	f01e f858 	bl	801f3d8 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001328:	f107 030c 	add.w	r3, r7, #12
 800132c:	2200      	movs	r2, #0
 800132e:	601a      	str	r2, [r3, #0]
 8001330:	605a      	str	r2, [r3, #4]
 8001332:	609a      	str	r2, [r3, #8]
 8001334:	60da      	str	r2, [r3, #12]
 8001336:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001338:	2300      	movs	r3, #0
 800133a:	60bb      	str	r3, [r7, #8]
 800133c:	4b22      	ldr	r3, [pc, #136]	; (80013c8 <SystemClock_Config+0xb4>)
 800133e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001340:	4a21      	ldr	r2, [pc, #132]	; (80013c8 <SystemClock_Config+0xb4>)
 8001342:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001346:	6413      	str	r3, [r2, #64]	; 0x40
 8001348:	4b1f      	ldr	r3, [pc, #124]	; (80013c8 <SystemClock_Config+0xb4>)
 800134a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800134c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001354:	2300      	movs	r3, #0
 8001356:	607b      	str	r3, [r7, #4]
 8001358:	4b1c      	ldr	r3, [pc, #112]	; (80013cc <SystemClock_Config+0xb8>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	4a1b      	ldr	r2, [pc, #108]	; (80013cc <SystemClock_Config+0xb8>)
 800135e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001362:	6013      	str	r3, [r2, #0]
 8001364:	4b19      	ldr	r3, [pc, #100]	; (80013cc <SystemClock_Config+0xb8>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001370:	2302      	movs	r3, #2
 8001372:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001374:	2301      	movs	r3, #1
 8001376:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001378:	2310      	movs	r3, #16
 800137a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800137c:	2300      	movs	r3, #0
 800137e:	63bb      	str	r3, [r7, #56]	; 0x38
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001380:	f107 0320 	add.w	r3, r7, #32
 8001384:	4618      	mov	r0, r3
 8001386:	f000 fd7b 	bl	8001e80 <HAL_RCC_OscConfig>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <SystemClock_Config+0x80>
		Error_Handler();
 8001390:	f000 f81e 	bl	80013d0 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001394:	230f      	movs	r3, #15
 8001396:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001398:	2300      	movs	r3, #0
 800139a:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800139c:	2300      	movs	r3, #0
 800139e:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013a0:	2300      	movs	r3, #0
 80013a2:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013a4:	2300      	movs	r3, #0
 80013a6:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK) {
 80013a8:	f107 030c 	add.w	r3, r7, #12
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 ffde 	bl	8002370 <HAL_RCC_ClockConfig>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <SystemClock_Config+0xaa>
		Error_Handler();
 80013ba:	f000 f809 	bl	80013d0 <Error_Handler>
	}
}
 80013be:	bf00      	nop
 80013c0:	3750      	adds	r7, #80	; 0x50
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40023800 	.word	0x40023800
 80013cc:	40007000 	.word	0x40007000

080013d0 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013d4:	b672      	cpsid	i
}
 80013d6:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80013d8:	e7fe      	b.n	80013d8 <Error_Handler+0x8>
	...

080013dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <HAL_MspInit+0x4c>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a0f      	ldr	r2, [pc, #60]	; (8001428 <HAL_MspInit+0x4c>)
 80013ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b0d      	ldr	r3, [pc, #52]	; (8001428 <HAL_MspInit+0x4c>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	603b      	str	r3, [r7, #0]
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <HAL_MspInit+0x4c>)
 8001404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001406:	4a08      	ldr	r2, [pc, #32]	; (8001428 <HAL_MspInit+0x4c>)
 8001408:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800140c:	6413      	str	r3, [r2, #64]	; 0x40
 800140e:	4b06      	ldr	r3, [pc, #24]	; (8001428 <HAL_MspInit+0x4c>)
 8001410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001412:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001416:	603b      	str	r3, [r7, #0]
 8001418:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800141a:	bf00      	nop
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	40023800 	.word	0x40023800

0800142c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001430:	e7fe      	b.n	8001430 <NMI_Handler+0x4>

08001432 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001432:	b480      	push	{r7}
 8001434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001436:	e7fe      	b.n	8001436 <HardFault_Handler+0x4>

08001438 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800143c:	e7fe      	b.n	800143c <MemManage_Handler+0x4>

0800143e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800143e:	b480      	push	{r7}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001442:	e7fe      	b.n	8001442 <BusFault_Handler+0x4>

08001444 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001444:	b480      	push	{r7}
 8001446:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001448:	e7fe      	b.n	8001448 <UsageFault_Handler+0x4>

0800144a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800144a:	b480      	push	{r7}
 800144c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr

08001458 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001458:	b480      	push	{r7}
 800145a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	46bd      	mov	sp, r7
 8001460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001464:	4770      	bx	lr

08001466 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001478:	f000 f94a 	bl	8001710 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800147c:	bf00      	nop
 800147e:	bd80      	pop	{r7, pc}

08001480 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001484:	4802      	ldr	r0, [pc, #8]	; (8001490 <USART1_IRQHandler+0x10>)
 8001486:	f001 fac5 	bl	8002a14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	20000098 	.word	0x20000098

08001494 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b086      	sub	sp, #24
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800149c:	4a14      	ldr	r2, [pc, #80]	; (80014f0 <_sbrk+0x5c>)
 800149e:	4b15      	ldr	r3, [pc, #84]	; (80014f4 <_sbrk+0x60>)
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a8:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <_sbrk+0x64>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d102      	bne.n	80014b6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014b0:	4b11      	ldr	r3, [pc, #68]	; (80014f8 <_sbrk+0x64>)
 80014b2:	4a12      	ldr	r2, [pc, #72]	; (80014fc <_sbrk+0x68>)
 80014b4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014b6:	4b10      	ldr	r3, [pc, #64]	; (80014f8 <_sbrk+0x64>)
 80014b8:	681a      	ldr	r2, [r3, #0]
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	4413      	add	r3, r2
 80014be:	693a      	ldr	r2, [r7, #16]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d207      	bcs.n	80014d4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014c4:	f01d ff3e 	bl	801f344 <__errno>
 80014c8:	4603      	mov	r3, r0
 80014ca:	220c      	movs	r2, #12
 80014cc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014ce:	f04f 33ff 	mov.w	r3, #4294967295
 80014d2:	e009      	b.n	80014e8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014d4:	4b08      	ldr	r3, [pc, #32]	; (80014f8 <_sbrk+0x64>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014da:	4b07      	ldr	r3, [pc, #28]	; (80014f8 <_sbrk+0x64>)
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	4a05      	ldr	r2, [pc, #20]	; (80014f8 <_sbrk+0x64>)
 80014e4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014e6:	68fb      	ldr	r3, [r7, #12]
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3718      	adds	r7, #24
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	20020000 	.word	0x20020000
 80014f4:	00000400 	.word	0x00000400
 80014f8:	2000008c 	.word	0x2000008c
 80014fc:	200000f0 	.word	0x200000f0

08001500 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001500:	b480      	push	{r7}
 8001502:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <SystemInit+0x20>)
 8001506:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800150a:	4a05      	ldr	r2, [pc, #20]	; (8001520 <SystemInit+0x20>)
 800150c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001510:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001514:	bf00      	nop
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000ed00 	.word	0xe000ed00

08001524 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART1_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART1_UART_Init+0x4c>)
 800155c:	f001 f8d8 	bl	8002710 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f7ff ff33 	bl	80013d0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000098 	.word	0x20000098
 8001574:	40011000 	.word	0x40011000

08001578 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b08a      	sub	sp, #40	; 0x28
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001580:	f107 0314 	add.w	r3, r7, #20
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]
 8001588:	605a      	str	r2, [r3, #4]
 800158a:	609a      	str	r2, [r3, #8]
 800158c:	60da      	str	r2, [r3, #12]
 800158e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	4a1d      	ldr	r2, [pc, #116]	; (800160c <HAL_UART_MspInit+0x94>)
 8001596:	4293      	cmp	r3, r2
 8001598:	d134      	bne.n	8001604 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
 800159e:	4b1c      	ldr	r3, [pc, #112]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015a2:	4a1b      	ldr	r2, [pc, #108]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015a4:	f043 0310 	orr.w	r3, r3, #16
 80015a8:	6453      	str	r3, [r2, #68]	; 0x44
 80015aa:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ae:	f003 0310 	and.w	r3, r3, #16
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60fb      	str	r3, [r7, #12]
 80015ba:	4b15      	ldr	r3, [pc, #84]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a14      	ldr	r2, [pc, #80]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_UART_MspInit+0x98>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0301 	and.w	r3, r3, #1
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80015d2:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80015d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015e0:	2303      	movs	r3, #3
 80015e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80015e4:	2307      	movs	r3, #7
 80015e6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e8:	f107 0314 	add.w	r3, r7, #20
 80015ec:	4619      	mov	r1, r3
 80015ee:	4809      	ldr	r0, [pc, #36]	; (8001614 <HAL_UART_MspInit+0x9c>)
 80015f0:	f000 fa76 	bl	8001ae0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80015f4:	2200      	movs	r2, #0
 80015f6:	2100      	movs	r1, #0
 80015f8:	2025      	movs	r0, #37	; 0x25
 80015fa:	f000 f9a8 	bl	800194e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80015fe:	2025      	movs	r0, #37	; 0x25
 8001600:	f000 f9c1 	bl	8001986 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40011000 	.word	0x40011000
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001618:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001650 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800161c:	480d      	ldr	r0, [pc, #52]	; (8001654 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800161e:	490e      	ldr	r1, [pc, #56]	; (8001658 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001620:	4a0e      	ldr	r2, [pc, #56]	; (800165c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001622:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001624:	e002      	b.n	800162c <LoopCopyDataInit>

08001626 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001626:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001628:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800162a:	3304      	adds	r3, #4

0800162c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800162c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800162e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001630:	d3f9      	bcc.n	8001626 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001632:	4a0b      	ldr	r2, [pc, #44]	; (8001660 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001634:	4c0b      	ldr	r4, [pc, #44]	; (8001664 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001636:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001638:	e001      	b.n	800163e <LoopFillZerobss>

0800163a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800163a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800163c:	3204      	adds	r2, #4

0800163e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800163e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001640:	d3fb      	bcc.n	800163a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001642:	f7ff ff5d 	bl	8001500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001646:	f01d fe83 	bl	801f350 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800164a:	f7ff fc09 	bl	8000e60 <main>
  bx  lr    
 800164e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001650:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001654:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001658:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 800165c:	08021e10 	.word	0x08021e10
  ldr r2, =_sbss
 8001660:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8001664:	200000f0 	.word	0x200000f0

08001668 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001668:	e7fe      	b.n	8001668 <ADC_IRQHandler>
	...

0800166c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_Init+0x40>)
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a0d      	ldr	r2, [pc, #52]	; (80016ac <HAL_Init+0x40>)
 8001676:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800167a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800167c:	4b0b      	ldr	r3, [pc, #44]	; (80016ac <HAL_Init+0x40>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	4a0a      	ldr	r2, [pc, #40]	; (80016ac <HAL_Init+0x40>)
 8001682:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001686:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001688:	4b08      	ldr	r3, [pc, #32]	; (80016ac <HAL_Init+0x40>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	4a07      	ldr	r2, [pc, #28]	; (80016ac <HAL_Init+0x40>)
 800168e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001692:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001694:	2003      	movs	r0, #3
 8001696:	f000 f94f 	bl	8001938 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800169a:	200f      	movs	r0, #15
 800169c:	f000 f808 	bl	80016b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016a0:	f7ff fe9c 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016a4:	2300      	movs	r3, #0
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	40023c00 	.word	0x40023c00

080016b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b082      	sub	sp, #8
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016b8:	4b12      	ldr	r3, [pc, #72]	; (8001704 <HAL_InitTick+0x54>)
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	4b12      	ldr	r3, [pc, #72]	; (8001708 <HAL_InitTick+0x58>)
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4619      	mov	r1, r3
 80016c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80016c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80016ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80016ce:	4618      	mov	r0, r3
 80016d0:	f000 f967 	bl	80019a2 <HAL_SYSTICK_Config>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016da:	2301      	movs	r3, #1
 80016dc:	e00e      	b.n	80016fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2b0f      	cmp	r3, #15
 80016e2:	d80a      	bhi.n	80016fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016e4:	2200      	movs	r2, #0
 80016e6:	6879      	ldr	r1, [r7, #4]
 80016e8:	f04f 30ff 	mov.w	r0, #4294967295
 80016ec:	f000 f92f 	bl	800194e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016f0:	4a06      	ldr	r2, [pc, #24]	; (800170c <HAL_InitTick+0x5c>)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016f6:	2300      	movs	r3, #0
 80016f8:	e000      	b.n	80016fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016fa:	2301      	movs	r3, #1
}
 80016fc:	4618      	mov	r0, r3
 80016fe:	3708      	adds	r7, #8
 8001700:	46bd      	mov	sp, r7
 8001702:	bd80      	pop	{r7, pc}
 8001704:	20000000 	.word	0x20000000
 8001708:	20000008 	.word	0x20000008
 800170c:	20000004 	.word	0x20000004

08001710 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001710:	b480      	push	{r7}
 8001712:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001714:	4b06      	ldr	r3, [pc, #24]	; (8001730 <HAL_IncTick+0x20>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	4b06      	ldr	r3, [pc, #24]	; (8001734 <HAL_IncTick+0x24>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4413      	add	r3, r2
 8001720:	4a04      	ldr	r2, [pc, #16]	; (8001734 <HAL_IncTick+0x24>)
 8001722:	6013      	str	r3, [r2, #0]
}
 8001724:	bf00      	nop
 8001726:	46bd      	mov	sp, r7
 8001728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800172c:	4770      	bx	lr
 800172e:	bf00      	nop
 8001730:	20000008 	.word	0x20000008
 8001734:	200000dc 	.word	0x200000dc

08001738 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  return uwTick;
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <HAL_GetTick+0x14>)
 800173e:	681b      	ldr	r3, [r3, #0]
}
 8001740:	4618      	mov	r0, r3
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	200000dc 	.word	0x200000dc

08001750 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001758:	f7ff ffee 	bl	8001738 <HAL_GetTick>
 800175c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d005      	beq.n	8001776 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <HAL_Delay+0x44>)
 800176c:	781b      	ldrb	r3, [r3, #0]
 800176e:	461a      	mov	r2, r3
 8001770:	68fb      	ldr	r3, [r7, #12]
 8001772:	4413      	add	r3, r2
 8001774:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001776:	bf00      	nop
 8001778:	f7ff ffde 	bl	8001738 <HAL_GetTick>
 800177c:	4602      	mov	r2, r0
 800177e:	68bb      	ldr	r3, [r7, #8]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	68fa      	ldr	r2, [r7, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d8f7      	bhi.n	8001778 <HAL_Delay+0x28>
  {
  }
}
 8001788:	bf00      	nop
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	20000008 	.word	0x20000008

08001798 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017a8:	4b0c      	ldr	r3, [pc, #48]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ae:	68ba      	ldr	r2, [r7, #8]
 80017b0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017b4:	4013      	ands	r3, r2
 80017b6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017c0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017ca:	4a04      	ldr	r2, [pc, #16]	; (80017dc <__NVIC_SetPriorityGrouping+0x44>)
 80017cc:	68bb      	ldr	r3, [r7, #8]
 80017ce:	60d3      	str	r3, [r2, #12]
}
 80017d0:	bf00      	nop
 80017d2:	3714      	adds	r7, #20
 80017d4:	46bd      	mov	sp, r7
 80017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017da:	4770      	bx	lr
 80017dc:	e000ed00 	.word	0xe000ed00

080017e0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017e4:	4b04      	ldr	r3, [pc, #16]	; (80017f8 <__NVIC_GetPriorityGrouping+0x18>)
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	0a1b      	lsrs	r3, r3, #8
 80017ea:	f003 0307 	and.w	r3, r3, #7
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001806:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180a:	2b00      	cmp	r3, #0
 800180c:	db0b      	blt.n	8001826 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800180e:	79fb      	ldrb	r3, [r7, #7]
 8001810:	f003 021f 	and.w	r2, r3, #31
 8001814:	4907      	ldr	r1, [pc, #28]	; (8001834 <__NVIC_EnableIRQ+0x38>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	095b      	lsrs	r3, r3, #5
 800181c:	2001      	movs	r0, #1
 800181e:	fa00 f202 	lsl.w	r2, r0, r2
 8001822:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001826:	bf00      	nop
 8001828:	370c      	adds	r7, #12
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr
 8001832:	bf00      	nop
 8001834:	e000e100 	.word	0xe000e100

08001838 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	4603      	mov	r3, r0
 8001840:	6039      	str	r1, [r7, #0]
 8001842:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001844:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001848:	2b00      	cmp	r3, #0
 800184a:	db0a      	blt.n	8001862 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	b2da      	uxtb	r2, r3
 8001850:	490c      	ldr	r1, [pc, #48]	; (8001884 <__NVIC_SetPriority+0x4c>)
 8001852:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001856:	0112      	lsls	r2, r2, #4
 8001858:	b2d2      	uxtb	r2, r2
 800185a:	440b      	add	r3, r1
 800185c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001860:	e00a      	b.n	8001878 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	b2da      	uxtb	r2, r3
 8001866:	4908      	ldr	r1, [pc, #32]	; (8001888 <__NVIC_SetPriority+0x50>)
 8001868:	79fb      	ldrb	r3, [r7, #7]
 800186a:	f003 030f 	and.w	r3, r3, #15
 800186e:	3b04      	subs	r3, #4
 8001870:	0112      	lsls	r2, r2, #4
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	440b      	add	r3, r1
 8001876:	761a      	strb	r2, [r3, #24]
}
 8001878:	bf00      	nop
 800187a:	370c      	adds	r7, #12
 800187c:	46bd      	mov	sp, r7
 800187e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001882:	4770      	bx	lr
 8001884:	e000e100 	.word	0xe000e100
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800188c:	b480      	push	{r7}
 800188e:	b089      	sub	sp, #36	; 0x24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a0:	69fb      	ldr	r3, [r7, #28]
 80018a2:	f1c3 0307 	rsb	r3, r3, #7
 80018a6:	2b04      	cmp	r3, #4
 80018a8:	bf28      	it	cs
 80018aa:	2304      	movcs	r3, #4
 80018ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018ae:	69fb      	ldr	r3, [r7, #28]
 80018b0:	3304      	adds	r3, #4
 80018b2:	2b06      	cmp	r3, #6
 80018b4:	d902      	bls.n	80018bc <NVIC_EncodePriority+0x30>
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3b03      	subs	r3, #3
 80018ba:	e000      	b.n	80018be <NVIC_EncodePriority+0x32>
 80018bc:	2300      	movs	r3, #0
 80018be:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c0:	f04f 32ff 	mov.w	r2, #4294967295
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	43da      	mvns	r2, r3
 80018cc:	68bb      	ldr	r3, [r7, #8]
 80018ce:	401a      	ands	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018d4:	f04f 31ff 	mov.w	r1, #4294967295
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	fa01 f303 	lsl.w	r3, r1, r3
 80018de:	43d9      	mvns	r1, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e4:	4313      	orrs	r3, r2
         );
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3724      	adds	r7, #36	; 0x24
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
	...

080018f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f4:	b580      	push	{r7, lr}
 80018f6:	b082      	sub	sp, #8
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	3b01      	subs	r3, #1
 8001900:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001904:	d301      	bcc.n	800190a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001906:	2301      	movs	r3, #1
 8001908:	e00f      	b.n	800192a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800190a:	4a0a      	ldr	r2, [pc, #40]	; (8001934 <SysTick_Config+0x40>)
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3b01      	subs	r3, #1
 8001910:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001912:	210f      	movs	r1, #15
 8001914:	f04f 30ff 	mov.w	r0, #4294967295
 8001918:	f7ff ff8e 	bl	8001838 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800191c:	4b05      	ldr	r3, [pc, #20]	; (8001934 <SysTick_Config+0x40>)
 800191e:	2200      	movs	r2, #0
 8001920:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001922:	4b04      	ldr	r3, [pc, #16]	; (8001934 <SysTick_Config+0x40>)
 8001924:	2207      	movs	r2, #7
 8001926:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001928:	2300      	movs	r3, #0
}
 800192a:	4618      	mov	r0, r3
 800192c:	3708      	adds	r7, #8
 800192e:	46bd      	mov	sp, r7
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	e000e010 	.word	0xe000e010

08001938 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff ff29 	bl	8001798 <__NVIC_SetPriorityGrouping>
}
 8001946:	bf00      	nop
 8001948:	3708      	adds	r7, #8
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800194e:	b580      	push	{r7, lr}
 8001950:	b086      	sub	sp, #24
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	60b9      	str	r1, [r7, #8]
 8001958:	607a      	str	r2, [r7, #4]
 800195a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800195c:	2300      	movs	r3, #0
 800195e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001960:	f7ff ff3e 	bl	80017e0 <__NVIC_GetPriorityGrouping>
 8001964:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	68b9      	ldr	r1, [r7, #8]
 800196a:	6978      	ldr	r0, [r7, #20]
 800196c:	f7ff ff8e 	bl	800188c <NVIC_EncodePriority>
 8001970:	4602      	mov	r2, r0
 8001972:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001976:	4611      	mov	r1, r2
 8001978:	4618      	mov	r0, r3
 800197a:	f7ff ff5d 	bl	8001838 <__NVIC_SetPriority>
}
 800197e:	bf00      	nop
 8001980:	3718      	adds	r7, #24
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	b082      	sub	sp, #8
 800198a:	af00      	add	r7, sp, #0
 800198c:	4603      	mov	r3, r0
 800198e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001990:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001994:	4618      	mov	r0, r3
 8001996:	f7ff ff31 	bl	80017fc <__NVIC_EnableIRQ>
}
 800199a:	bf00      	nop
 800199c:	3708      	adds	r7, #8
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd80      	pop	{r7, pc}

080019a2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019a2:	b580      	push	{r7, lr}
 80019a4:	b082      	sub	sp, #8
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019aa:	6878      	ldr	r0, [r7, #4]
 80019ac:	f7ff ffa2 	bl	80018f4 <SysTick_Config>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3708      	adds	r7, #8
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b084      	sub	sp, #16
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019c6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80019c8:	f7ff feb6 	bl	8001738 <HAL_GetTick>
 80019cc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80019d4:	b2db      	uxtb	r3, r3
 80019d6:	2b02      	cmp	r3, #2
 80019d8:	d008      	beq.n	80019ec <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	2280      	movs	r2, #128	; 0x80
 80019de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2200      	movs	r2, #0
 80019e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e052      	b.n	8001a92 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0216 	bic.w	r2, r2, #22
 80019fa:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	695a      	ldr	r2, [r3, #20]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001a0a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d103      	bne.n	8001a1c <HAL_DMA_Abort+0x62>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d007      	beq.n	8001a2c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f022 0208 	bic.w	r2, r2, #8
 8001a2a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	681a      	ldr	r2, [r3, #0]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a3c:	e013      	b.n	8001a66 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001a3e:	f7ff fe7b 	bl	8001738 <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	68bb      	ldr	r3, [r7, #8]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b05      	cmp	r3, #5
 8001a4a:	d90c      	bls.n	8001a66 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2220      	movs	r2, #32
 8001a50:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2203      	movs	r2, #3
 8001a56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001a62:	2303      	movs	r3, #3
 8001a64:	e015      	b.n	8001a92 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f003 0301 	and.w	r3, r3, #1
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d1e4      	bne.n	8001a3e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a78:	223f      	movs	r2, #63	; 0x3f
 8001a7a:	409a      	lsls	r2, r3
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001a90:	2300      	movs	r3, #0
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3710      	adds	r7, #16
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001a9a:	b480      	push	{r7}
 8001a9c:	b083      	sub	sp, #12
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001aa8:	b2db      	uxtb	r3, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d004      	beq.n	8001ab8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e00c      	b.n	8001ad2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	2205      	movs	r2, #5
 8001abc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f022 0201 	bic.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr
	...

08001ae0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b089      	sub	sp, #36	; 0x24
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
 8001ae8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001af6:	2300      	movs	r3, #0
 8001af8:	61fb      	str	r3, [r7, #28]
 8001afa:	e16b      	b.n	8001dd4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001afc:	2201      	movs	r2, #1
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	fa02 f303 	lsl.w	r3, r2, r3
 8001b04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b06:	683b      	ldr	r3, [r7, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	697a      	ldr	r2, [r7, #20]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b10:	693a      	ldr	r2, [r7, #16]
 8001b12:	697b      	ldr	r3, [r7, #20]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	f040 815a 	bne.w	8001dce <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f003 0303 	and.w	r3, r3, #3
 8001b22:	2b01      	cmp	r3, #1
 8001b24:	d005      	beq.n	8001b32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b2e:	2b02      	cmp	r3, #2
 8001b30:	d130      	bne.n	8001b94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	689b      	ldr	r3, [r3, #8]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	69ba      	ldr	r2, [r7, #24]
 8001b46:	4013      	ands	r3, r2
 8001b48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	68da      	ldr	r2, [r3, #12]
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	69ba      	ldr	r2, [r7, #24]
 8001b60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b68:	2201      	movs	r2, #1
 8001b6a:	69fb      	ldr	r3, [r7, #28]
 8001b6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b70:	43db      	mvns	r3, r3
 8001b72:	69ba      	ldr	r2, [r7, #24]
 8001b74:	4013      	ands	r3, r2
 8001b76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	685b      	ldr	r3, [r3, #4]
 8001b7c:	091b      	lsrs	r3, r3, #4
 8001b7e:	f003 0201 	and.w	r2, r3, #1
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	fa02 f303 	lsl.w	r3, r2, r3
 8001b88:	69ba      	ldr	r2, [r7, #24]
 8001b8a:	4313      	orrs	r3, r2
 8001b8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69ba      	ldr	r2, [r7, #24]
 8001b92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b94:	683b      	ldr	r3, [r7, #0]
 8001b96:	685b      	ldr	r3, [r3, #4]
 8001b98:	f003 0303 	and.w	r3, r3, #3
 8001b9c:	2b03      	cmp	r3, #3
 8001b9e:	d017      	beq.n	8001bd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	005b      	lsls	r3, r3, #1
 8001baa:	2203      	movs	r2, #3
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	69ba      	ldr	r2, [r7, #24]
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	689a      	ldr	r2, [r3, #8]
 8001bbc:	69fb      	ldr	r3, [r7, #28]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc4:	69ba      	ldr	r2, [r7, #24]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	f003 0303 	and.w	r3, r3, #3
 8001bd8:	2b02      	cmp	r3, #2
 8001bda:	d123      	bne.n	8001c24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bdc:	69fb      	ldr	r3, [r7, #28]
 8001bde:	08da      	lsrs	r2, r3, #3
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	3208      	adds	r2, #8
 8001be4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001be8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bea:	69fb      	ldr	r3, [r7, #28]
 8001bec:	f003 0307 	and.w	r3, r3, #7
 8001bf0:	009b      	lsls	r3, r3, #2
 8001bf2:	220f      	movs	r2, #15
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	43db      	mvns	r3, r3
 8001bfa:	69ba      	ldr	r2, [r7, #24]
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	691a      	ldr	r2, [r3, #16]
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c10:	69ba      	ldr	r2, [r7, #24]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	08da      	lsrs	r2, r3, #3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	3208      	adds	r2, #8
 8001c1e:	69b9      	ldr	r1, [r7, #24]
 8001c20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c2a:	69fb      	ldr	r3, [r7, #28]
 8001c2c:	005b      	lsls	r3, r3, #1
 8001c2e:	2203      	movs	r2, #3
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	43db      	mvns	r3, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4013      	ands	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f003 0203 	and.w	r2, r3, #3
 8001c44:	69fb      	ldr	r3, [r7, #28]
 8001c46:	005b      	lsls	r3, r3, #1
 8001c48:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4c:	69ba      	ldr	r2, [r7, #24]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	69ba      	ldr	r2, [r7, #24]
 8001c56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	f000 80b4 	beq.w	8001dce <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	60fb      	str	r3, [r7, #12]
 8001c6a:	4b60      	ldr	r3, [pc, #384]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c6e:	4a5f      	ldr	r2, [pc, #380]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001c70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c74:	6453      	str	r3, [r2, #68]	; 0x44
 8001c76:	4b5d      	ldr	r3, [pc, #372]	; (8001dec <HAL_GPIO_Init+0x30c>)
 8001c78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c7e:	60fb      	str	r3, [r7, #12]
 8001c80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c82:	4a5b      	ldr	r2, [pc, #364]	; (8001df0 <HAL_GPIO_Init+0x310>)
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	089b      	lsrs	r3, r3, #2
 8001c88:	3302      	adds	r3, #2
 8001c8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c90:	69fb      	ldr	r3, [r7, #28]
 8001c92:	f003 0303 	and.w	r3, r3, #3
 8001c96:	009b      	lsls	r3, r3, #2
 8001c98:	220f      	movs	r2, #15
 8001c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	69ba      	ldr	r2, [r7, #24]
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a52      	ldr	r2, [pc, #328]	; (8001df4 <HAL_GPIO_Init+0x314>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d02b      	beq.n	8001d06 <HAL_GPIO_Init+0x226>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a51      	ldr	r2, [pc, #324]	; (8001df8 <HAL_GPIO_Init+0x318>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d025      	beq.n	8001d02 <HAL_GPIO_Init+0x222>
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	4a50      	ldr	r2, [pc, #320]	; (8001dfc <HAL_GPIO_Init+0x31c>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d01f      	beq.n	8001cfe <HAL_GPIO_Init+0x21e>
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	4a4f      	ldr	r2, [pc, #316]	; (8001e00 <HAL_GPIO_Init+0x320>)
 8001cc2:	4293      	cmp	r3, r2
 8001cc4:	d019      	beq.n	8001cfa <HAL_GPIO_Init+0x21a>
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4a4e      	ldr	r2, [pc, #312]	; (8001e04 <HAL_GPIO_Init+0x324>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d013      	beq.n	8001cf6 <HAL_GPIO_Init+0x216>
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	4a4d      	ldr	r2, [pc, #308]	; (8001e08 <HAL_GPIO_Init+0x328>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d00d      	beq.n	8001cf2 <HAL_GPIO_Init+0x212>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	4a4c      	ldr	r2, [pc, #304]	; (8001e0c <HAL_GPIO_Init+0x32c>)
 8001cda:	4293      	cmp	r3, r2
 8001cdc:	d007      	beq.n	8001cee <HAL_GPIO_Init+0x20e>
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	4a4b      	ldr	r2, [pc, #300]	; (8001e10 <HAL_GPIO_Init+0x330>)
 8001ce2:	4293      	cmp	r3, r2
 8001ce4:	d101      	bne.n	8001cea <HAL_GPIO_Init+0x20a>
 8001ce6:	2307      	movs	r3, #7
 8001ce8:	e00e      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cea:	2308      	movs	r3, #8
 8001cec:	e00c      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cee:	2306      	movs	r3, #6
 8001cf0:	e00a      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cf2:	2305      	movs	r3, #5
 8001cf4:	e008      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cf6:	2304      	movs	r3, #4
 8001cf8:	e006      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e004      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001cfe:	2302      	movs	r3, #2
 8001d00:	e002      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001d02:	2301      	movs	r3, #1
 8001d04:	e000      	b.n	8001d08 <HAL_GPIO_Init+0x228>
 8001d06:	2300      	movs	r3, #0
 8001d08:	69fa      	ldr	r2, [r7, #28]
 8001d0a:	f002 0203 	and.w	r2, r2, #3
 8001d0e:	0092      	lsls	r2, r2, #2
 8001d10:	4093      	lsls	r3, r2
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d18:	4935      	ldr	r1, [pc, #212]	; (8001df0 <HAL_GPIO_Init+0x310>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	089b      	lsrs	r3, r3, #2
 8001d1e:	3302      	adds	r3, #2
 8001d20:	69ba      	ldr	r2, [r7, #24]
 8001d22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d26:	4b3b      	ldr	r3, [pc, #236]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d2c:	693b      	ldr	r3, [r7, #16]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	69ba      	ldr	r2, [r7, #24]
 8001d32:	4013      	ands	r3, r2
 8001d34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d42:	69ba      	ldr	r2, [r7, #24]
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d4a:	4a32      	ldr	r2, [pc, #200]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001d50:	4b30      	ldr	r3, [pc, #192]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d56:	693b      	ldr	r3, [r7, #16]
 8001d58:	43db      	mvns	r3, r3
 8001d5a:	69ba      	ldr	r2, [r7, #24]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d003      	beq.n	8001d74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d6c:	69ba      	ldr	r2, [r7, #24]
 8001d6e:	693b      	ldr	r3, [r7, #16]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d74:	4a27      	ldr	r2, [pc, #156]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d76:	69bb      	ldr	r3, [r7, #24]
 8001d78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7a:	4b26      	ldr	r3, [pc, #152]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001d7c:	689b      	ldr	r3, [r3, #8]
 8001d7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d80:	693b      	ldr	r3, [r7, #16]
 8001d82:	43db      	mvns	r3, r3
 8001d84:	69ba      	ldr	r2, [r7, #24]
 8001d86:	4013      	ands	r3, r2
 8001d88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8a:	683b      	ldr	r3, [r7, #0]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d96:	69ba      	ldr	r2, [r7, #24]
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d9e:	4a1d      	ldr	r2, [pc, #116]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001da0:	69bb      	ldr	r3, [r7, #24]
 8001da2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da4:	4b1b      	ldr	r3, [pc, #108]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001daa:	693b      	ldr	r3, [r7, #16]
 8001dac:	43db      	mvns	r3, r3
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	4013      	ands	r3, r2
 8001db2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d003      	beq.n	8001dc8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	693b      	ldr	r3, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dc8:	4a12      	ldr	r2, [pc, #72]	; (8001e14 <HAL_GPIO_Init+0x334>)
 8001dca:	69bb      	ldr	r3, [r7, #24]
 8001dcc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	3301      	adds	r3, #1
 8001dd2:	61fb      	str	r3, [r7, #28]
 8001dd4:	69fb      	ldr	r3, [r7, #28]
 8001dd6:	2b0f      	cmp	r3, #15
 8001dd8:	f67f ae90 	bls.w	8001afc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ddc:	bf00      	nop
 8001dde:	bf00      	nop
 8001de0:	3724      	adds	r7, #36	; 0x24
 8001de2:	46bd      	mov	sp, r7
 8001de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de8:	4770      	bx	lr
 8001dea:	bf00      	nop
 8001dec:	40023800 	.word	0x40023800
 8001df0:	40013800 	.word	0x40013800
 8001df4:	40020000 	.word	0x40020000
 8001df8:	40020400 	.word	0x40020400
 8001dfc:	40020800 	.word	0x40020800
 8001e00:	40020c00 	.word	0x40020c00
 8001e04:	40021000 	.word	0x40021000
 8001e08:	40021400 	.word	0x40021400
 8001e0c:	40021800 	.word	0x40021800
 8001e10:	40021c00 	.word	0x40021c00
 8001e14:	40013c00 	.word	0x40013c00

08001e18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	460b      	mov	r3, r1
 8001e22:	807b      	strh	r3, [r7, #2]
 8001e24:	4613      	mov	r3, r2
 8001e26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e28:	787b      	ldrb	r3, [r7, #1]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e2e:	887a      	ldrh	r2, [r7, #2]
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e34:	e003      	b.n	8001e3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e36:	887b      	ldrh	r3, [r7, #2]
 8001e38:	041a      	lsls	r2, r3, #16
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	619a      	str	r2, [r3, #24]
}
 8001e3e:	bf00      	nop
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	6078      	str	r0, [r7, #4]
 8001e52:	460b      	mov	r3, r1
 8001e54:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	695b      	ldr	r3, [r3, #20]
 8001e5a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001e5c:	887a      	ldrh	r2, [r7, #2]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	4013      	ands	r3, r2
 8001e62:	041a      	lsls	r2, r3, #16
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	43d9      	mvns	r1, r3
 8001e68:	887b      	ldrh	r3, [r7, #2]
 8001e6a:	400b      	ands	r3, r1
 8001e6c:	431a      	orrs	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	619a      	str	r2, [r3, #24]
}
 8001e72:	bf00      	nop
 8001e74:	3714      	adds	r7, #20
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
	...

08001e80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d101      	bne.n	8001e92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e264      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f003 0301 	and.w	r3, r3, #1
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d075      	beq.n	8001f8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001e9e:	4ba3      	ldr	r3, [pc, #652]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b04      	cmp	r3, #4
 8001ea8:	d00c      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eaa:	4ba0      	ldr	r3, [pc, #640]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001eb2:	2b08      	cmp	r3, #8
 8001eb4:	d112      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001eb6:	4b9d      	ldr	r3, [pc, #628]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ebe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001ec2:	d10b      	bne.n	8001edc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ec4:	4b99      	ldr	r3, [pc, #612]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d05b      	beq.n	8001f88 <HAL_RCC_OscConfig+0x108>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d157      	bne.n	8001f88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e23f      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ee4:	d106      	bne.n	8001ef4 <HAL_RCC_OscConfig+0x74>
 8001ee6:	4b91      	ldr	r3, [pc, #580]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	4a90      	ldr	r2, [pc, #576]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ef0:	6013      	str	r3, [r2, #0]
 8001ef2:	e01d      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001efc:	d10c      	bne.n	8001f18 <HAL_RCC_OscConfig+0x98>
 8001efe:	4b8b      	ldr	r3, [pc, #556]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4a8a      	ldr	r2, [pc, #552]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f04:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001f08:	6013      	str	r3, [r2, #0]
 8001f0a:	4b88      	ldr	r3, [pc, #544]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	4a87      	ldr	r2, [pc, #540]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f14:	6013      	str	r3, [r2, #0]
 8001f16:	e00b      	b.n	8001f30 <HAL_RCC_OscConfig+0xb0>
 8001f18:	4b84      	ldr	r3, [pc, #528]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a83      	ldr	r2, [pc, #524]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	4b81      	ldr	r3, [pc, #516]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a80      	ldr	r2, [pc, #512]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f2a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d013      	beq.n	8001f60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f38:	f7ff fbfe 	bl	8001738 <HAL_GetTick>
 8001f3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f3e:	e008      	b.n	8001f52 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f40:	f7ff fbfa 	bl	8001738 <HAL_GetTick>
 8001f44:	4602      	mov	r2, r0
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	1ad3      	subs	r3, r2, r3
 8001f4a:	2b64      	cmp	r3, #100	; 0x64
 8001f4c:	d901      	bls.n	8001f52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001f4e:	2303      	movs	r3, #3
 8001f50:	e204      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f52:	4b76      	ldr	r3, [pc, #472]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d0f0      	beq.n	8001f40 <HAL_RCC_OscConfig+0xc0>
 8001f5e:	e014      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f60:	f7ff fbea 	bl	8001738 <HAL_GetTick>
 8001f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f66:	e008      	b.n	8001f7a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f68:	f7ff fbe6 	bl	8001738 <HAL_GetTick>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	693b      	ldr	r3, [r7, #16]
 8001f70:	1ad3      	subs	r3, r2, r3
 8001f72:	2b64      	cmp	r3, #100	; 0x64
 8001f74:	d901      	bls.n	8001f7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001f76:	2303      	movs	r3, #3
 8001f78:	e1f0      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f7a:	4b6c      	ldr	r3, [pc, #432]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d1f0      	bne.n	8001f68 <HAL_RCC_OscConfig+0xe8>
 8001f86:	e000      	b.n	8001f8a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d063      	beq.n	800205e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001f96:	4b65      	ldr	r3, [pc, #404]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f003 030c 	and.w	r3, r3, #12
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00b      	beq.n	8001fba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fa2:	4b62      	ldr	r3, [pc, #392]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fa4:	689b      	ldr	r3, [r3, #8]
 8001fa6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001faa:	2b08      	cmp	r3, #8
 8001fac:	d11c      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001fae:	4b5f      	ldr	r3, [pc, #380]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d116      	bne.n	8001fe8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fba:	4b5c      	ldr	r3, [pc, #368]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f003 0302 	and.w	r3, r3, #2
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d005      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	68db      	ldr	r3, [r3, #12]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d001      	beq.n	8001fd2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001fce:	2301      	movs	r3, #1
 8001fd0:	e1c4      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fd2:	4b56      	ldr	r3, [pc, #344]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4952      	ldr	r1, [pc, #328]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8001fe2:	4313      	orrs	r3, r2
 8001fe4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001fe6:	e03a      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d020      	beq.n	8002032 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ff0:	4b4f      	ldr	r3, [pc, #316]	; (8002130 <HAL_RCC_OscConfig+0x2b0>)
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ff6:	f7ff fb9f 	bl	8001738 <HAL_GetTick>
 8001ffa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ffc:	e008      	b.n	8002010 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ffe:	f7ff fb9b 	bl	8001738 <HAL_GetTick>
 8002002:	4602      	mov	r2, r0
 8002004:	693b      	ldr	r3, [r7, #16]
 8002006:	1ad3      	subs	r3, r2, r3
 8002008:	2b02      	cmp	r3, #2
 800200a:	d901      	bls.n	8002010 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800200c:	2303      	movs	r3, #3
 800200e:	e1a5      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002010:	4b46      	ldr	r3, [pc, #280]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0f0      	beq.n	8001ffe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800201c:	4b43      	ldr	r3, [pc, #268]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	691b      	ldr	r3, [r3, #16]
 8002028:	00db      	lsls	r3, r3, #3
 800202a:	4940      	ldr	r1, [pc, #256]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 800202c:	4313      	orrs	r3, r2
 800202e:	600b      	str	r3, [r1, #0]
 8002030:	e015      	b.n	800205e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002032:	4b3f      	ldr	r3, [pc, #252]	; (8002130 <HAL_RCC_OscConfig+0x2b0>)
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002038:	f7ff fb7e 	bl	8001738 <HAL_GetTick>
 800203c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800203e:	e008      	b.n	8002052 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002040:	f7ff fb7a 	bl	8001738 <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	693b      	ldr	r3, [r7, #16]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d901      	bls.n	8002052 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	e184      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	4b36      	ldr	r3, [pc, #216]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0302 	and.w	r3, r3, #2
 800205a:	2b00      	cmp	r3, #0
 800205c:	d1f0      	bne.n	8002040 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	f003 0308 	and.w	r3, r3, #8
 8002066:	2b00      	cmp	r3, #0
 8002068:	d030      	beq.n	80020cc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	2b00      	cmp	r3, #0
 8002070:	d016      	beq.n	80020a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002072:	4b30      	ldr	r3, [pc, #192]	; (8002134 <HAL_RCC_OscConfig+0x2b4>)
 8002074:	2201      	movs	r2, #1
 8002076:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002078:	f7ff fb5e 	bl	8001738 <HAL_GetTick>
 800207c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800207e:	e008      	b.n	8002092 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002080:	f7ff fb5a 	bl	8001738 <HAL_GetTick>
 8002084:	4602      	mov	r2, r0
 8002086:	693b      	ldr	r3, [r7, #16]
 8002088:	1ad3      	subs	r3, r2, r3
 800208a:	2b02      	cmp	r3, #2
 800208c:	d901      	bls.n	8002092 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800208e:	2303      	movs	r3, #3
 8002090:	e164      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002092:	4b26      	ldr	r3, [pc, #152]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 8002094:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d0f0      	beq.n	8002080 <HAL_RCC_OscConfig+0x200>
 800209e:	e015      	b.n	80020cc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020a0:	4b24      	ldr	r3, [pc, #144]	; (8002134 <HAL_RCC_OscConfig+0x2b4>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb47 	bl	8001738 <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020ac:	e008      	b.n	80020c0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80020ae:	f7ff fb43 	bl	8001738 <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	2b02      	cmp	r3, #2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e14d      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80020c0:	4b1a      	ldr	r3, [pc, #104]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d1f0      	bne.n	80020ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 80a0 	beq.w	800221a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020da:	2300      	movs	r3, #0
 80020dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020de:	4b13      	ldr	r3, [pc, #76]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d10f      	bne.n	800210a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020ea:	2300      	movs	r3, #0
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	4b0f      	ldr	r3, [pc, #60]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f2:	4a0e      	ldr	r2, [pc, #56]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020f8:	6413      	str	r3, [r2, #64]	; 0x40
 80020fa:	4b0c      	ldr	r3, [pc, #48]	; (800212c <HAL_RCC_OscConfig+0x2ac>)
 80020fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002102:	60bb      	str	r3, [r7, #8]
 8002104:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002106:	2301      	movs	r3, #1
 8002108:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800210a:	4b0b      	ldr	r3, [pc, #44]	; (8002138 <HAL_RCC_OscConfig+0x2b8>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002112:	2b00      	cmp	r3, #0
 8002114:	d121      	bne.n	800215a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002116:	4b08      	ldr	r3, [pc, #32]	; (8002138 <HAL_RCC_OscConfig+0x2b8>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4a07      	ldr	r2, [pc, #28]	; (8002138 <HAL_RCC_OscConfig+0x2b8>)
 800211c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002120:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002122:	f7ff fb09 	bl	8001738 <HAL_GetTick>
 8002126:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002128:	e011      	b.n	800214e <HAL_RCC_OscConfig+0x2ce>
 800212a:	bf00      	nop
 800212c:	40023800 	.word	0x40023800
 8002130:	42470000 	.word	0x42470000
 8002134:	42470e80 	.word	0x42470e80
 8002138:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800213c:	f7ff fafc 	bl	8001738 <HAL_GetTick>
 8002140:	4602      	mov	r2, r0
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	1ad3      	subs	r3, r2, r3
 8002146:	2b02      	cmp	r3, #2
 8002148:	d901      	bls.n	800214e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800214a:	2303      	movs	r3, #3
 800214c:	e106      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800214e:	4b85      	ldr	r3, [pc, #532]	; (8002364 <HAL_RCC_OscConfig+0x4e4>)
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d0f0      	beq.n	800213c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	689b      	ldr	r3, [r3, #8]
 800215e:	2b01      	cmp	r3, #1
 8002160:	d106      	bne.n	8002170 <HAL_RCC_OscConfig+0x2f0>
 8002162:	4b81      	ldr	r3, [pc, #516]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002164:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002166:	4a80      	ldr	r2, [pc, #512]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002168:	f043 0301 	orr.w	r3, r3, #1
 800216c:	6713      	str	r3, [r2, #112]	; 0x70
 800216e:	e01c      	b.n	80021aa <HAL_RCC_OscConfig+0x32a>
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	2b05      	cmp	r3, #5
 8002176:	d10c      	bne.n	8002192 <HAL_RCC_OscConfig+0x312>
 8002178:	4b7b      	ldr	r3, [pc, #492]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800217a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800217c:	4a7a      	ldr	r2, [pc, #488]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800217e:	f043 0304 	orr.w	r3, r3, #4
 8002182:	6713      	str	r3, [r2, #112]	; 0x70
 8002184:	4b78      	ldr	r3, [pc, #480]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002188:	4a77      	ldr	r2, [pc, #476]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	6713      	str	r3, [r2, #112]	; 0x70
 8002190:	e00b      	b.n	80021aa <HAL_RCC_OscConfig+0x32a>
 8002192:	4b75      	ldr	r3, [pc, #468]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002196:	4a74      	ldr	r2, [pc, #464]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	6713      	str	r3, [r2, #112]	; 0x70
 800219e:	4b72      	ldr	r3, [pc, #456]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80021a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021a2:	4a71      	ldr	r2, [pc, #452]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80021a4:	f023 0304 	bic.w	r3, r3, #4
 80021a8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	689b      	ldr	r3, [r3, #8]
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d015      	beq.n	80021de <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021b2:	f7ff fac1 	bl	8001738 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021b8:	e00a      	b.n	80021d0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021ba:	f7ff fabd 	bl	8001738 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e0c5      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d0:	4b65      	ldr	r3, [pc, #404]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80021d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0ee      	beq.n	80021ba <HAL_RCC_OscConfig+0x33a>
 80021dc:	e014      	b.n	8002208 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021de:	f7ff faab 	bl	8001738 <HAL_GetTick>
 80021e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021e4:	e00a      	b.n	80021fc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80021e6:	f7ff faa7 	bl	8001738 <HAL_GetTick>
 80021ea:	4602      	mov	r2, r0
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	1ad3      	subs	r3, r2, r3
 80021f0:	f241 3288 	movw	r2, #5000	; 0x1388
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d901      	bls.n	80021fc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e0af      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80021fc:	4b5a      	ldr	r3, [pc, #360]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80021fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002200:	f003 0302 	and.w	r3, r3, #2
 8002204:	2b00      	cmp	r3, #0
 8002206:	d1ee      	bne.n	80021e6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002208:	7dfb      	ldrb	r3, [r7, #23]
 800220a:	2b01      	cmp	r3, #1
 800220c:	d105      	bne.n	800221a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800220e:	4b56      	ldr	r3, [pc, #344]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	4a55      	ldr	r2, [pc, #340]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002214:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002218:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	699b      	ldr	r3, [r3, #24]
 800221e:	2b00      	cmp	r3, #0
 8002220:	f000 809b 	beq.w	800235a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002224:	4b50      	ldr	r3, [pc, #320]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	f003 030c 	and.w	r3, r3, #12
 800222c:	2b08      	cmp	r3, #8
 800222e:	d05c      	beq.n	80022ea <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	2b02      	cmp	r3, #2
 8002236:	d141      	bne.n	80022bc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002238:	4b4c      	ldr	r3, [pc, #304]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 800223a:	2200      	movs	r2, #0
 800223c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800223e:	f7ff fa7b 	bl	8001738 <HAL_GetTick>
 8002242:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002244:	e008      	b.n	8002258 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002246:	f7ff fa77 	bl	8001738 <HAL_GetTick>
 800224a:	4602      	mov	r2, r0
 800224c:	693b      	ldr	r3, [r7, #16]
 800224e:	1ad3      	subs	r3, r2, r3
 8002250:	2b02      	cmp	r3, #2
 8002252:	d901      	bls.n	8002258 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002254:	2303      	movs	r3, #3
 8002256:	e081      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002258:	4b43      	ldr	r3, [pc, #268]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002260:	2b00      	cmp	r3, #0
 8002262:	d1f0      	bne.n	8002246 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	69da      	ldr	r2, [r3, #28]
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6a1b      	ldr	r3, [r3, #32]
 800226c:	431a      	orrs	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002272:	019b      	lsls	r3, r3, #6
 8002274:	431a      	orrs	r2, r3
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800227a:	085b      	lsrs	r3, r3, #1
 800227c:	3b01      	subs	r3, #1
 800227e:	041b      	lsls	r3, r3, #16
 8002280:	431a      	orrs	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002286:	061b      	lsls	r3, r3, #24
 8002288:	4937      	ldr	r1, [pc, #220]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800228e:	4b37      	ldr	r3, [pc, #220]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 8002290:	2201      	movs	r2, #1
 8002292:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002294:	f7ff fa50 	bl	8001738 <HAL_GetTick>
 8002298:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800229a:	e008      	b.n	80022ae <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800229c:	f7ff fa4c 	bl	8001738 <HAL_GetTick>
 80022a0:	4602      	mov	r2, r0
 80022a2:	693b      	ldr	r3, [r7, #16]
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	2b02      	cmp	r3, #2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e056      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b2e      	ldr	r3, [pc, #184]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d0f0      	beq.n	800229c <HAL_RCC_OscConfig+0x41c>
 80022ba:	e04e      	b.n	800235a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022bc:	4b2b      	ldr	r3, [pc, #172]	; (800236c <HAL_RCC_OscConfig+0x4ec>)
 80022be:	2200      	movs	r2, #0
 80022c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022c2:	f7ff fa39 	bl	8001738 <HAL_GetTick>
 80022c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022c8:	e008      	b.n	80022dc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022ca:	f7ff fa35 	bl	8001738 <HAL_GetTick>
 80022ce:	4602      	mov	r2, r0
 80022d0:	693b      	ldr	r3, [r7, #16]
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d901      	bls.n	80022dc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80022d8:	2303      	movs	r3, #3
 80022da:	e03f      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022dc:	4b22      	ldr	r3, [pc, #136]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d1f0      	bne.n	80022ca <HAL_RCC_OscConfig+0x44a>
 80022e8:	e037      	b.n	800235a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	699b      	ldr	r3, [r3, #24]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	d101      	bne.n	80022f6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80022f2:	2301      	movs	r3, #1
 80022f4:	e032      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80022f6:	4b1c      	ldr	r3, [pc, #112]	; (8002368 <HAL_RCC_OscConfig+0x4e8>)
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	699b      	ldr	r3, [r3, #24]
 8002300:	2b01      	cmp	r3, #1
 8002302:	d028      	beq.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800230e:	429a      	cmp	r2, r3
 8002310:	d121      	bne.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800231c:	429a      	cmp	r2, r3
 800231e:	d11a      	bne.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002320:	68fa      	ldr	r2, [r7, #12]
 8002322:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002326:	4013      	ands	r3, r2
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800232c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800232e:	4293      	cmp	r3, r2
 8002330:	d111      	bne.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800233c:	085b      	lsrs	r3, r3, #1
 800233e:	3b01      	subs	r3, #1
 8002340:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002342:	429a      	cmp	r2, r3
 8002344:	d107      	bne.n	8002356 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002350:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002352:	429a      	cmp	r2, r3
 8002354:	d001      	beq.n	800235a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e000      	b.n	800235c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800235a:	2300      	movs	r3, #0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3718      	adds	r7, #24
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	40007000 	.word	0x40007000
 8002368:	40023800 	.word	0x40023800
 800236c:	42470060 	.word	0x42470060

08002370 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
 8002376:	6078      	str	r0, [r7, #4]
 8002378:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2b00      	cmp	r3, #0
 800237e:	d101      	bne.n	8002384 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002380:	2301      	movs	r3, #1
 8002382:	e0cc      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002384:	4b68      	ldr	r3, [pc, #416]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	683a      	ldr	r2, [r7, #0]
 800238e:	429a      	cmp	r2, r3
 8002390:	d90c      	bls.n	80023ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002392:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002394:	683a      	ldr	r2, [r7, #0]
 8002396:	b2d2      	uxtb	r2, r2
 8002398:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800239a:	4b63      	ldr	r3, [pc, #396]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0307 	and.w	r3, r3, #7
 80023a2:	683a      	ldr	r2, [r7, #0]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	d001      	beq.n	80023ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	e0b8      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d020      	beq.n	80023fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f003 0304 	and.w	r3, r3, #4
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d005      	beq.n	80023d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80023c4:	4b59      	ldr	r3, [pc, #356]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	4a58      	ldr	r2, [pc, #352]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80023ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80023dc:	4b53      	ldr	r3, [pc, #332]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023de:	689b      	ldr	r3, [r3, #8]
 80023e0:	4a52      	ldr	r2, [pc, #328]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80023e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80023e8:	4b50      	ldr	r3, [pc, #320]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689b      	ldr	r3, [r3, #8]
 80023f4:	494d      	ldr	r1, [pc, #308]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f003 0301 	and.w	r3, r3, #1
 8002402:	2b00      	cmp	r3, #0
 8002404:	d044      	beq.n	8002490 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	685b      	ldr	r3, [r3, #4]
 800240a:	2b01      	cmp	r3, #1
 800240c:	d107      	bne.n	800241e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800240e:	4b47      	ldr	r3, [pc, #284]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d119      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	e07f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	2b02      	cmp	r3, #2
 8002424:	d003      	beq.n	800242e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800242a:	2b03      	cmp	r3, #3
 800242c:	d107      	bne.n	800243e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002436:	2b00      	cmp	r3, #0
 8002438:	d109      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e06f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800243e:	4b3b      	ldr	r3, [pc, #236]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f003 0302 	and.w	r3, r3, #2
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e067      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f023 0203 	bic.w	r2, r3, #3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	4934      	ldr	r1, [pc, #208]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 800245c:	4313      	orrs	r3, r2
 800245e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002460:	f7ff f96a 	bl	8001738 <HAL_GetTick>
 8002464:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002466:	e00a      	b.n	800247e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002468:	f7ff f966 	bl	8001738 <HAL_GetTick>
 800246c:	4602      	mov	r2, r0
 800246e:	68fb      	ldr	r3, [r7, #12]
 8002470:	1ad3      	subs	r3, r2, r3
 8002472:	f241 3288 	movw	r2, #5000	; 0x1388
 8002476:	4293      	cmp	r3, r2
 8002478:	d901      	bls.n	800247e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	e04f      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800247e:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	f003 020c 	and.w	r2, r3, #12
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	685b      	ldr	r3, [r3, #4]
 800248a:	009b      	lsls	r3, r3, #2
 800248c:	429a      	cmp	r2, r3
 800248e:	d1eb      	bne.n	8002468 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002490:	4b25      	ldr	r3, [pc, #148]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	f003 0307 	and.w	r3, r3, #7
 8002498:	683a      	ldr	r2, [r7, #0]
 800249a:	429a      	cmp	r2, r3
 800249c:	d20c      	bcs.n	80024b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800249e:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a0:	683a      	ldr	r2, [r7, #0]
 80024a2:	b2d2      	uxtb	r2, r2
 80024a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80024a6:	4b20      	ldr	r3, [pc, #128]	; (8002528 <HAL_RCC_ClockConfig+0x1b8>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f003 0307 	and.w	r3, r3, #7
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	429a      	cmp	r2, r3
 80024b2:	d001      	beq.n	80024b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	e032      	b.n	800251e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f003 0304 	and.w	r3, r3, #4
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 0308 	and.w	r3, r3, #8
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d009      	beq.n	80024f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	00db      	lsls	r3, r3, #3
 80024f0:	490e      	ldr	r1, [pc, #56]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80024f6:	f000 f821 	bl	800253c <HAL_RCC_GetSysClockFreq>
 80024fa:	4602      	mov	r2, r0
 80024fc:	4b0b      	ldr	r3, [pc, #44]	; (800252c <HAL_RCC_ClockConfig+0x1bc>)
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	490a      	ldr	r1, [pc, #40]	; (8002530 <HAL_RCC_ClockConfig+0x1c0>)
 8002508:	5ccb      	ldrb	r3, [r1, r3]
 800250a:	fa22 f303 	lsr.w	r3, r2, r3
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <HAL_RCC_ClockConfig+0x1c4>)
 8002510:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002512:	4b09      	ldr	r3, [pc, #36]	; (8002538 <HAL_RCC_ClockConfig+0x1c8>)
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	4618      	mov	r0, r3
 8002518:	f7ff f8ca 	bl	80016b0 <HAL_InitTick>

  return HAL_OK;
 800251c:	2300      	movs	r3, #0
}
 800251e:	4618      	mov	r0, r3
 8002520:	3710      	adds	r7, #16
 8002522:	46bd      	mov	sp, r7
 8002524:	bd80      	pop	{r7, pc}
 8002526:	bf00      	nop
 8002528:	40023c00 	.word	0x40023c00
 800252c:	40023800 	.word	0x40023800
 8002530:	08020f54 	.word	0x08020f54
 8002534:	20000000 	.word	0x20000000
 8002538:	20000004 	.word	0x20000004

0800253c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800253c:	b5b0      	push	{r4, r5, r7, lr}
 800253e:	b084      	sub	sp, #16
 8002540:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002542:	2100      	movs	r1, #0
 8002544:	6079      	str	r1, [r7, #4]
 8002546:	2100      	movs	r1, #0
 8002548:	60f9      	str	r1, [r7, #12]
 800254a:	2100      	movs	r1, #0
 800254c:	6039      	str	r1, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800254e:	2100      	movs	r1, #0
 8002550:	60b9      	str	r1, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002552:	4952      	ldr	r1, [pc, #328]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 8002554:	6889      	ldr	r1, [r1, #8]
 8002556:	f001 010c 	and.w	r1, r1, #12
 800255a:	2908      	cmp	r1, #8
 800255c:	d00d      	beq.n	800257a <HAL_RCC_GetSysClockFreq+0x3e>
 800255e:	2908      	cmp	r1, #8
 8002560:	f200 8094 	bhi.w	800268c <HAL_RCC_GetSysClockFreq+0x150>
 8002564:	2900      	cmp	r1, #0
 8002566:	d002      	beq.n	800256e <HAL_RCC_GetSysClockFreq+0x32>
 8002568:	2904      	cmp	r1, #4
 800256a:	d003      	beq.n	8002574 <HAL_RCC_GetSysClockFreq+0x38>
 800256c:	e08e      	b.n	800268c <HAL_RCC_GetSysClockFreq+0x150>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800256e:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x164>)
 8002570:	60bb      	str	r3, [r7, #8]
       break;
 8002572:	e08e      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002574:	4b4b      	ldr	r3, [pc, #300]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x168>)
 8002576:	60bb      	str	r3, [r7, #8]
      break;
 8002578:	e08b      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800257a:	4948      	ldr	r1, [pc, #288]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 800257c:	6849      	ldr	r1, [r1, #4]
 800257e:	f001 013f 	and.w	r1, r1, #63	; 0x3f
 8002582:	6079      	str	r1, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002584:	4945      	ldr	r1, [pc, #276]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 8002586:	6849      	ldr	r1, [r1, #4]
 8002588:	f401 0180 	and.w	r1, r1, #4194304	; 0x400000
 800258c:	2900      	cmp	r1, #0
 800258e:	d024      	beq.n	80025da <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002590:	4942      	ldr	r1, [pc, #264]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 8002592:	6849      	ldr	r1, [r1, #4]
 8002594:	0989      	lsrs	r1, r1, #6
 8002596:	4608      	mov	r0, r1
 8002598:	f04f 0100 	mov.w	r1, #0
 800259c:	f240 14ff 	movw	r4, #511	; 0x1ff
 80025a0:	f04f 0500 	mov.w	r5, #0
 80025a4:	ea00 0204 	and.w	r2, r0, r4
 80025a8:	ea01 0305 	and.w	r3, r1, r5
 80025ac:	493d      	ldr	r1, [pc, #244]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80025ae:	fb01 f003 	mul.w	r0, r1, r3
 80025b2:	2100      	movs	r1, #0
 80025b4:	fb01 f102 	mul.w	r1, r1, r2
 80025b8:	1844      	adds	r4, r0, r1
 80025ba:	493a      	ldr	r1, [pc, #232]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x168>)
 80025bc:	fba2 0101 	umull	r0, r1, r2, r1
 80025c0:	1863      	adds	r3, r4, r1
 80025c2:	4619      	mov	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	461a      	mov	r2, r3
 80025c8:	f04f 0300 	mov.w	r3, #0
 80025cc:	f7fe fa6e 	bl	8000aac <__aeabi_uldivmod>
 80025d0:	4602      	mov	r2, r0
 80025d2:	460b      	mov	r3, r1
 80025d4:	4613      	mov	r3, r2
 80025d6:	60fb      	str	r3, [r7, #12]
 80025d8:	e04a      	b.n	8002670 <HAL_RCC_GetSysClockFreq+0x134>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80025da:	4b30      	ldr	r3, [pc, #192]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	099b      	lsrs	r3, r3, #6
 80025e0:	461a      	mov	r2, r3
 80025e2:	f04f 0300 	mov.w	r3, #0
 80025e6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80025ea:	f04f 0100 	mov.w	r1, #0
 80025ee:	ea02 0400 	and.w	r4, r2, r0
 80025f2:	ea03 0501 	and.w	r5, r3, r1
 80025f6:	4620      	mov	r0, r4
 80025f8:	4629      	mov	r1, r5
 80025fa:	f04f 0200 	mov.w	r2, #0
 80025fe:	f04f 0300 	mov.w	r3, #0
 8002602:	014b      	lsls	r3, r1, #5
 8002604:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002608:	0142      	lsls	r2, r0, #5
 800260a:	4610      	mov	r0, r2
 800260c:	4619      	mov	r1, r3
 800260e:	1b00      	subs	r0, r0, r4
 8002610:	eb61 0105 	sbc.w	r1, r1, r5
 8002614:	f04f 0200 	mov.w	r2, #0
 8002618:	f04f 0300 	mov.w	r3, #0
 800261c:	018b      	lsls	r3, r1, #6
 800261e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002622:	0182      	lsls	r2, r0, #6
 8002624:	1a12      	subs	r2, r2, r0
 8002626:	eb63 0301 	sbc.w	r3, r3, r1
 800262a:	f04f 0000 	mov.w	r0, #0
 800262e:	f04f 0100 	mov.w	r1, #0
 8002632:	00d9      	lsls	r1, r3, #3
 8002634:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002638:	00d0      	lsls	r0, r2, #3
 800263a:	4602      	mov	r2, r0
 800263c:	460b      	mov	r3, r1
 800263e:	1912      	adds	r2, r2, r4
 8002640:	eb45 0303 	adc.w	r3, r5, r3
 8002644:	f04f 0000 	mov.w	r0, #0
 8002648:	f04f 0100 	mov.w	r1, #0
 800264c:	0299      	lsls	r1, r3, #10
 800264e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002652:	0290      	lsls	r0, r2, #10
 8002654:	4602      	mov	r2, r0
 8002656:	460b      	mov	r3, r1
 8002658:	4610      	mov	r0, r2
 800265a:	4619      	mov	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	461a      	mov	r2, r3
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	f7fe fa22 	bl	8000aac <__aeabi_uldivmod>
 8002668:	4602      	mov	r2, r0
 800266a:	460b      	mov	r3, r1
 800266c:	4613      	mov	r3, r2
 800266e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002670:	4b0a      	ldr	r3, [pc, #40]	; (800269c <HAL_RCC_GetSysClockFreq+0x160>)
 8002672:	685b      	ldr	r3, [r3, #4]
 8002674:	0c1b      	lsrs	r3, r3, #16
 8002676:	f003 0303 	and.w	r3, r3, #3
 800267a:	3301      	adds	r3, #1
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002680:	68fa      	ldr	r2, [r7, #12]
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	fbb2 f3f3 	udiv	r3, r2, r3
 8002688:	60bb      	str	r3, [r7, #8]
      break;
 800268a:	e002      	b.n	8002692 <HAL_RCC_GetSysClockFreq+0x156>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800268c:	4b04      	ldr	r3, [pc, #16]	; (80026a0 <HAL_RCC_GetSysClockFreq+0x164>)
 800268e:	60bb      	str	r3, [r7, #8]
      break;
 8002690:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002692:	68bb      	ldr	r3, [r7, #8]
}
 8002694:	4618      	mov	r0, r3
 8002696:	3710      	adds	r7, #16
 8002698:	46bd      	mov	sp, r7
 800269a:	bdb0      	pop	{r4, r5, r7, pc}
 800269c:	40023800 	.word	0x40023800
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	017d7840 	.word	0x017d7840

080026a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a8:	b480      	push	{r7}
 80026aa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026ac:	4b03      	ldr	r3, [pc, #12]	; (80026bc <HAL_RCC_GetHCLKFreq+0x14>)
 80026ae:	681b      	ldr	r3, [r3, #0]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	46bd      	mov	sp, r7
 80026b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b8:	4770      	bx	lr
 80026ba:	bf00      	nop
 80026bc:	20000000 	.word	0x20000000

080026c0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80026c4:	f7ff fff0 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026c8:	4602      	mov	r2, r0
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80026cc:	689b      	ldr	r3, [r3, #8]
 80026ce:	0a9b      	lsrs	r3, r3, #10
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	4903      	ldr	r1, [pc, #12]	; (80026e4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80026d6:	5ccb      	ldrb	r3, [r1, r3]
 80026d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80026dc:	4618      	mov	r0, r3
 80026de:	bd80      	pop	{r7, pc}
 80026e0:	40023800 	.word	0x40023800
 80026e4:	08020f64 	.word	0x08020f64

080026e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80026ec:	f7ff ffdc 	bl	80026a8 <HAL_RCC_GetHCLKFreq>
 80026f0:	4602      	mov	r2, r0
 80026f2:	4b05      	ldr	r3, [pc, #20]	; (8002708 <HAL_RCC_GetPCLK2Freq+0x20>)
 80026f4:	689b      	ldr	r3, [r3, #8]
 80026f6:	0b5b      	lsrs	r3, r3, #13
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	4903      	ldr	r1, [pc, #12]	; (800270c <HAL_RCC_GetPCLK2Freq+0x24>)
 80026fe:	5ccb      	ldrb	r3, [r1, r3]
 8002700:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002704:	4618      	mov	r0, r3
 8002706:	bd80      	pop	{r7, pc}
 8002708:	40023800 	.word	0x40023800
 800270c:	08020f64 	.word	0x08020f64

08002710 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b082      	sub	sp, #8
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	e03f      	b.n	80027a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002728:	b2db      	uxtb	r3, r3
 800272a:	2b00      	cmp	r3, #0
 800272c:	d106      	bne.n	800273c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002736:	6878      	ldr	r0, [r7, #4]
 8002738:	f7fe ff1e 	bl	8001578 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2224      	movs	r2, #36	; 0x24
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	68da      	ldr	r2, [r3, #12]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002752:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002754:	6878      	ldr	r0, [r7, #4]
 8002756:	f000 fe1d 	bl	8003394 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	691a      	ldr	r2, [r3, #16]
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002768:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	695a      	ldr	r2, [r3, #20]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002778:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	68da      	ldr	r2, [r3, #12]
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002788:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2200      	movs	r2, #0
 800278e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2220      	movs	r2, #32
 8002794:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2220      	movs	r2, #32
 800279c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80027a0:	2300      	movs	r3, #0
}
 80027a2:	4618      	mov	r0, r3
 80027a4:	3708      	adds	r7, #8
 80027a6:	46bd      	mov	sp, r7
 80027a8:	bd80      	pop	{r7, pc}

080027aa <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027aa:	b580      	push	{r7, lr}
 80027ac:	b08a      	sub	sp, #40	; 0x28
 80027ae:	af02      	add	r7, sp, #8
 80027b0:	60f8      	str	r0, [r7, #12]
 80027b2:	60b9      	str	r1, [r7, #8]
 80027b4:	603b      	str	r3, [r7, #0]
 80027b6:	4613      	mov	r3, r2
 80027b8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	2b20      	cmp	r3, #32
 80027c8:	d17c      	bne.n	80028c4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80027ca:	68bb      	ldr	r3, [r7, #8]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d002      	beq.n	80027d6 <HAL_UART_Transmit+0x2c>
 80027d0:	88fb      	ldrh	r3, [r7, #6]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d101      	bne.n	80027da <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80027d6:	2301      	movs	r3, #1
 80027d8:	e075      	b.n	80028c6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d101      	bne.n	80027e8 <HAL_UART_Transmit+0x3e>
 80027e4:	2302      	movs	r3, #2
 80027e6:	e06e      	b.n	80028c6 <HAL_UART_Transmit+0x11c>
 80027e8:	68fb      	ldr	r3, [r7, #12]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	2200      	movs	r2, #0
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	2221      	movs	r2, #33	; 0x21
 80027fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80027fe:	f7fe ff9b 	bl	8001738 <HAL_GetTick>
 8002802:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	88fa      	ldrh	r2, [r7, #6]
 8002808:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	88fa      	ldrh	r2, [r7, #6]
 800280e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	689b      	ldr	r3, [r3, #8]
 8002814:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002818:	d108      	bne.n	800282c <HAL_UART_Transmit+0x82>
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d104      	bne.n	800282c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002822:	2300      	movs	r3, #0
 8002824:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	61bb      	str	r3, [r7, #24]
 800282a:	e003      	b.n	8002834 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002830:	2300      	movs	r3, #0
 8002832:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800283c:	e02a      	b.n	8002894 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	9300      	str	r3, [sp, #0]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	2200      	movs	r2, #0
 8002846:	2180      	movs	r1, #128	; 0x80
 8002848:	68f8      	ldr	r0, [r7, #12]
 800284a:	f000 fb9b 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d001      	beq.n	8002858 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8002854:	2303      	movs	r3, #3
 8002856:	e036      	b.n	80028c6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d10b      	bne.n	8002876 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800285e:	69bb      	ldr	r3, [r7, #24]
 8002860:	881b      	ldrh	r3, [r3, #0]
 8002862:	461a      	mov	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800286c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800286e:	69bb      	ldr	r3, [r7, #24]
 8002870:	3302      	adds	r3, #2
 8002872:	61bb      	str	r3, [r7, #24]
 8002874:	e007      	b.n	8002886 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002876:	69fb      	ldr	r3, [r7, #28]
 8002878:	781a      	ldrb	r2, [r3, #0]
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	3301      	adds	r3, #1
 8002884:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800288a:	b29b      	uxth	r3, r3
 800288c:	3b01      	subs	r3, #1
 800288e:	b29a      	uxth	r2, r3
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8002898:	b29b      	uxth	r3, r3
 800289a:	2b00      	cmp	r3, #0
 800289c:	d1cf      	bne.n	800283e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	9300      	str	r3, [sp, #0]
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	2200      	movs	r2, #0
 80028a6:	2140      	movs	r1, #64	; 0x40
 80028a8:	68f8      	ldr	r0, [r7, #12]
 80028aa:	f000 fb6b 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 80028ae:	4603      	mov	r3, r0
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d001      	beq.n	80028b8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80028b4:	2303      	movs	r3, #3
 80028b6:	e006      	b.n	80028c6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2220      	movs	r2, #32
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80028c0:	2300      	movs	r3, #0
 80028c2:	e000      	b.n	80028c6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80028c4:	2302      	movs	r3, #2
  }
}
 80028c6:	4618      	mov	r0, r3
 80028c8:	3720      	adds	r7, #32
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd80      	pop	{r7, pc}

080028ce <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028ce:	b580      	push	{r7, lr}
 80028d0:	b08a      	sub	sp, #40	; 0x28
 80028d2:	af02      	add	r7, sp, #8
 80028d4:	60f8      	str	r0, [r7, #12]
 80028d6:	60b9      	str	r1, [r7, #8]
 80028d8:	603b      	str	r3, [r7, #0]
 80028da:	4613      	mov	r3, r2
 80028dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80028de:	2300      	movs	r3, #0
 80028e0:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028e8:	b2db      	uxtb	r3, r3
 80028ea:	2b20      	cmp	r3, #32
 80028ec:	f040 808c 	bne.w	8002a08 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d002      	beq.n	80028fc <HAL_UART_Receive+0x2e>
 80028f6:	88fb      	ldrh	r3, [r7, #6]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e084      	b.n	8002a0a <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002906:	2b01      	cmp	r3, #1
 8002908:	d101      	bne.n	800290e <HAL_UART_Receive+0x40>
 800290a:	2302      	movs	r3, #2
 800290c:	e07d      	b.n	8002a0a <HAL_UART_Receive+0x13c>
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	2201      	movs	r2, #1
 8002912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	2200      	movs	r2, #0
 800291a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	2222      	movs	r2, #34	; 0x22
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	2200      	movs	r2, #0
 8002928:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800292a:	f7fe ff05 	bl	8001738 <HAL_GetTick>
 800292e:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	88fa      	ldrh	r2, [r7, #6]
 8002934:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	88fa      	ldrh	r2, [r7, #6]
 800293a:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800293c:	68fb      	ldr	r3, [r7, #12]
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002944:	d108      	bne.n	8002958 <HAL_UART_Receive+0x8a>
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	691b      	ldr	r3, [r3, #16]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d104      	bne.n	8002958 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 800294e:	2300      	movs	r3, #0
 8002950:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	61bb      	str	r3, [r7, #24]
 8002956:	e003      	b.n	8002960 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8002958:	68bb      	ldr	r3, [r7, #8]
 800295a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800295c:	2300      	movs	r3, #0
 800295e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8002960:	68fb      	ldr	r3, [r7, #12]
 8002962:	2200      	movs	r2, #0
 8002964:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002968:	e043      	b.n	80029f2 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	9300      	str	r3, [sp, #0]
 800296e:	697b      	ldr	r3, [r7, #20]
 8002970:	2200      	movs	r2, #0
 8002972:	2120      	movs	r1, #32
 8002974:	68f8      	ldr	r0, [r7, #12]
 8002976:	f000 fb05 	bl	8002f84 <UART_WaitOnFlagUntilTimeout>
 800297a:	4603      	mov	r3, r0
 800297c:	2b00      	cmp	r3, #0
 800297e:	d001      	beq.n	8002984 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8002980:	2303      	movs	r3, #3
 8002982:	e042      	b.n	8002a0a <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8002984:	69fb      	ldr	r3, [r7, #28]
 8002986:	2b00      	cmp	r3, #0
 8002988:	d10c      	bne.n	80029a4 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	685b      	ldr	r3, [r3, #4]
 8002990:	b29b      	uxth	r3, r3
 8002992:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002996:	b29a      	uxth	r2, r3
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 800299c:	69bb      	ldr	r3, [r7, #24]
 800299e:	3302      	adds	r3, #2
 80029a0:	61bb      	str	r3, [r7, #24]
 80029a2:	e01f      	b.n	80029e4 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	689b      	ldr	r3, [r3, #8]
 80029a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029ac:	d007      	beq.n	80029be <HAL_UART_Receive+0xf0>
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	689b      	ldr	r3, [r3, #8]
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d10a      	bne.n	80029cc <HAL_UART_Receive+0xfe>
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	691b      	ldr	r3, [r3, #16]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d106      	bne.n	80029cc <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	701a      	strb	r2, [r3, #0]
 80029ca:	e008      	b.n	80029de <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	b2db      	uxtb	r3, r3
 80029d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80029d8:	b2da      	uxtb	r2, r3
 80029da:	69fb      	ldr	r3, [r7, #28]
 80029dc:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	3301      	adds	r3, #1
 80029e2:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029e8:	b29b      	uxth	r3, r3
 80029ea:	3b01      	subs	r3, #1
 80029ec:	b29a      	uxth	r2, r3
 80029ee:	68fb      	ldr	r3, [r7, #12]
 80029f0:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80029f6:	b29b      	uxth	r3, r3
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d1b6      	bne.n	800296a <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	2220      	movs	r2, #32
 8002a00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8002a04:	2300      	movs	r3, #0
 8002a06:	e000      	b.n	8002a0a <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8002a08:	2302      	movs	r3, #2
  }
}
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	3720      	adds	r7, #32
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	bd80      	pop	{r7, pc}
	...

08002a14 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b0ba      	sub	sp, #232	; 0xe8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	695b      	ldr	r3, [r3, #20]
 8002a36:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8002a3a:	2300      	movs	r3, #0
 8002a3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8002a40:	2300      	movs	r3, #0
 8002a42:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002a46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8002a52:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10f      	bne.n	8002a7a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a5e:	f003 0320 	and.w	r3, r3, #32
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d009      	beq.n	8002a7a <HAL_UART_IRQHandler+0x66>
 8002a66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a6a:	f003 0320 	and.w	r3, r3, #32
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d003      	beq.n	8002a7a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002a72:	6878      	ldr	r0, [r7, #4]
 8002a74:	f000 fbd3 	bl	800321e <UART_Receive_IT>
      return;
 8002a78:	e256      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002a7a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	f000 80de 	beq.w	8002c40 <HAL_UART_IRQHandler+0x22c>
 8002a84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a88:	f003 0301 	and.w	r3, r3, #1
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d106      	bne.n	8002a9e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002a90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a94:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	f000 80d1 	beq.w	8002c40 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002a9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa2:	f003 0301 	and.w	r3, r3, #1
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d00b      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xae>
 8002aaa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002aae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d005      	beq.n	8002ac2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aba:	f043 0201 	orr.w	r2, r3, #1
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ac6:	f003 0304 	and.w	r3, r3, #4
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00b      	beq.n	8002ae6 <HAL_UART_IRQHandler+0xd2>
 8002ace:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ad2:	f003 0301 	and.w	r3, r3, #1
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d005      	beq.n	8002ae6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ade:	f043 0202 	orr.w	r2, r3, #2
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aea:	f003 0302 	and.w	r3, r3, #2
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d00b      	beq.n	8002b0a <HAL_UART_IRQHandler+0xf6>
 8002af2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002af6:	f003 0301 	and.w	r3, r3, #1
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d005      	beq.n	8002b0a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b02:	f043 0204 	orr.w	r2, r3, #4
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0e:	f003 0308 	and.w	r3, r3, #8
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d011      	beq.n	8002b3a <HAL_UART_IRQHandler+0x126>
 8002b16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b1a:	f003 0320 	and.w	r3, r3, #32
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d105      	bne.n	8002b2e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002b22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f043 0208 	orr.w	r2, r3, #8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	f000 81ed 	beq.w	8002f1e <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b48:	f003 0320 	and.w	r3, r3, #32
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d008      	beq.n	8002b62 <HAL_UART_IRQHandler+0x14e>
 8002b50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b54:	f003 0320 	and.w	r3, r3, #32
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d002      	beq.n	8002b62 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 fb5e 	bl	800321e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	695b      	ldr	r3, [r3, #20]
 8002b68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b6c:	2b40      	cmp	r3, #64	; 0x40
 8002b6e:	bf0c      	ite	eq
 8002b70:	2301      	moveq	r3, #1
 8002b72:	2300      	movne	r3, #0
 8002b74:	b2db      	uxtb	r3, r3
 8002b76:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7e:	f003 0308 	and.w	r3, r3, #8
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d103      	bne.n	8002b8e <HAL_UART_IRQHandler+0x17a>
 8002b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d04f      	beq.n	8002c2e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fa66 	bl	8003060 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9e:	2b40      	cmp	r3, #64	; 0x40
 8002ba0:	d141      	bne.n	8002c26 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	3314      	adds	r3, #20
 8002ba8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bb0:	e853 3f00 	ldrex	r3, [r3]
 8002bb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	3314      	adds	r3, #20
 8002bca:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bce:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bd2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bd6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bda:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002bde:	e841 2300 	strex	r3, r2, [r1]
 8002be2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002be6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1d9      	bne.n	8002ba2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bfa:	4a7d      	ldr	r2, [pc, #500]	; (8002df0 <HAL_UART_IRQHandler+0x3dc>)
 8002bfc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c02:	4618      	mov	r0, r3
 8002c04:	f7fe ff49 	bl	8001a9a <HAL_DMA_Abort_IT>
 8002c08:	4603      	mov	r3, r0
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002c14:	687a      	ldr	r2, [r7, #4]
 8002c16:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c1c:	e00e      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c1e:	6878      	ldr	r0, [r7, #4]
 8002c20:	f000 f99a 	bl	8002f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c24:	e00a      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f996 	bl	8002f58 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c2c:	e006      	b.n	8002c3c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 f992 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8002c3a:	e170      	b.n	8002f1e <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c3c:	bf00      	nop
    return;
 8002c3e:	e16e      	b.n	8002f1e <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	f040 814a 	bne.w	8002ede <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	f000 8143 	beq.w	8002ede <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f000 813c 	beq.w	8002ede <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002c66:	2300      	movs	r3, #0
 8002c68:	60bb      	str	r3, [r7, #8]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	60bb      	str	r3, [r7, #8]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	60bb      	str	r3, [r7, #8]
 8002c7a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	695b      	ldr	r3, [r3, #20]
 8002c82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c86:	2b40      	cmp	r3, #64	; 0x40
 8002c88:	f040 80b4 	bne.w	8002df4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	685b      	ldr	r3, [r3, #4]
 8002c94:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c98:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f000 8140 	beq.w	8002f22 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8002ca6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002caa:	429a      	cmp	r2, r3
 8002cac:	f080 8139 	bcs.w	8002f22 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cb6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cc2:	f000 8088 	beq.w	8002dd6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	330c      	adds	r3, #12
 8002ccc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cd4:	e853 3f00 	ldrex	r3, [r3]
 8002cd8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002cdc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ce4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	330c      	adds	r3, #12
 8002cee:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8002cf2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8002cf6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cfa:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002cfe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d02:	e841 2300 	strex	r3, r2, [r1]
 8002d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d1d9      	bne.n	8002cc6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	3314      	adds	r3, #20
 8002d18:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d1a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d1c:	e853 3f00 	ldrex	r3, [r3]
 8002d20:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d22:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d24:	f023 0301 	bic.w	r3, r3, #1
 8002d28:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	3314      	adds	r3, #20
 8002d32:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d36:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d3a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d3c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d3e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d42:	e841 2300 	strex	r3, r2, [r1]
 8002d46:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d48:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d1e1      	bne.n	8002d12 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	3314      	adds	r3, #20
 8002d54:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d56:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d58:	e853 3f00 	ldrex	r3, [r3]
 8002d5c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d60:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d64:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	3314      	adds	r3, #20
 8002d6e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d72:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d74:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d76:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d78:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d7a:	e841 2300 	strex	r3, r2, [r1]
 8002d7e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d80:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1e3      	bne.n	8002d4e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2220      	movs	r2, #32
 8002d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	330c      	adds	r3, #12
 8002d9a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002d9e:	e853 3f00 	ldrex	r3, [r3]
 8002da2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002da4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002da6:	f023 0310 	bic.w	r3, r3, #16
 8002daa:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	330c      	adds	r3, #12
 8002db4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8002db8:	65ba      	str	r2, [r7, #88]	; 0x58
 8002dba:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dbc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dbe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc0:	e841 2300 	strex	r3, r2, [r1]
 8002dc4:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d1e3      	bne.n	8002d94 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7fe fdf2 	bl	80019ba <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	b29b      	uxth	r3, r3
 8002de4:	4619      	mov	r1, r3
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f000 f8c0 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002dec:	e099      	b.n	8002f22 <HAL_UART_IRQHandler+0x50e>
 8002dee:	bf00      	nop
 8002df0:	08003127 	.word	0x08003127
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002dfc:	b29b      	uxth	r3, r3
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8002e08:	b29b      	uxth	r3, r3
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 808b 	beq.w	8002f26 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8002e10:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	f000 8086 	beq.w	8002f26 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	330c      	adds	r3, #12
 8002e20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e24:	e853 3f00 	ldrex	r3, [r3]
 8002e28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e2c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e30:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	330c      	adds	r3, #12
 8002e3a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8002e3e:	647a      	str	r2, [r7, #68]	; 0x44
 8002e40:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e42:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e44:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e46:	e841 2300 	strex	r3, r2, [r1]
 8002e4a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e4c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d1e3      	bne.n	8002e1a <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	3314      	adds	r3, #20
 8002e58:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e5c:	e853 3f00 	ldrex	r3, [r3]
 8002e60:	623b      	str	r3, [r7, #32]
   return(result);
 8002e62:	6a3b      	ldr	r3, [r7, #32]
 8002e64:	f023 0301 	bic.w	r3, r3, #1
 8002e68:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	3314      	adds	r3, #20
 8002e72:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e76:	633a      	str	r2, [r7, #48]	; 0x30
 8002e78:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e7e:	e841 2300 	strex	r3, r2, [r1]
 8002e82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d1e3      	bne.n	8002e52 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	2220      	movs	r2, #32
 8002e8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	2200      	movs	r2, #0
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	330c      	adds	r3, #12
 8002e9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	e853 3f00 	ldrex	r3, [r3]
 8002ea6:	60fb      	str	r3, [r7, #12]
   return(result);
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f023 0310 	bic.w	r3, r3, #16
 8002eae:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	330c      	adds	r3, #12
 8002eb8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8002ebc:	61fa      	str	r2, [r7, #28]
 8002ebe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec0:	69b9      	ldr	r1, [r7, #24]
 8002ec2:	69fa      	ldr	r2, [r7, #28]
 8002ec4:	e841 2300 	strex	r3, r2, [r1]
 8002ec8:	617b      	str	r3, [r7, #20]
   return(result);
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d1e3      	bne.n	8002e98 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002ed4:	4619      	mov	r1, r3
 8002ed6:	6878      	ldr	r0, [r7, #4]
 8002ed8:	f000 f848 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002edc:	e023      	b.n	8002f26 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002ede:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d009      	beq.n	8002efe <HAL_UART_IRQHandler+0x4ea>
 8002eea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8002ef6:	6878      	ldr	r0, [r7, #4]
 8002ef8:	f000 f929 	bl	800314e <UART_Transmit_IT>
    return;
 8002efc:	e014      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002efe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00e      	beq.n	8002f28 <HAL_UART_IRQHandler+0x514>
 8002f0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d008      	beq.n	8002f28 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f000 f969 	bl	80031ee <UART_EndTransmit_IT>
    return;
 8002f1c:	e004      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
    return;
 8002f1e:	bf00      	nop
 8002f20:	e002      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
      return;
 8002f22:	bf00      	nop
 8002f24:	e000      	b.n	8002f28 <HAL_UART_IRQHandler+0x514>
      return;
 8002f26:	bf00      	nop
  }
}
 8002f28:	37e8      	adds	r7, #232	; 0xe8
 8002f2a:	46bd      	mov	sp, r7
 8002f2c:	bd80      	pop	{r7, pc}
 8002f2e:	bf00      	nop

08002f30 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr

08002f44 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8002f4c:	bf00      	nop
 8002f4e:	370c      	adds	r7, #12
 8002f50:	46bd      	mov	sp, r7
 8002f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f56:	4770      	bx	lr

08002f58 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002f60:	bf00      	nop
 8002f62:	370c      	adds	r7, #12
 8002f64:	46bd      	mov	sp, r7
 8002f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6a:	4770      	bx	lr

08002f6c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	b083      	sub	sp, #12
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
 8002f74:	460b      	mov	r3, r1
 8002f76:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002f78:	bf00      	nop
 8002f7a:	370c      	adds	r7, #12
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f82:	4770      	bx	lr

08002f84 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b090      	sub	sp, #64	; 0x40
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	60f8      	str	r0, [r7, #12]
 8002f8c:	60b9      	str	r1, [r7, #8]
 8002f8e:	603b      	str	r3, [r7, #0]
 8002f90:	4613      	mov	r3, r2
 8002f92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f94:	e050      	b.n	8003038 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f96:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002f98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f9c:	d04c      	beq.n	8003038 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d007      	beq.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x30>
 8002fa4:	f7fe fbc8 	bl	8001738 <HAL_GetTick>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	1ad3      	subs	r3, r2, r3
 8002fae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d241      	bcs.n	8003038 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	330c      	adds	r3, #12
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002fc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002fca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	330c      	adds	r3, #12
 8002fd2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002fd4:	637a      	str	r2, [r7, #52]	; 0x34
 8002fd6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002fda:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	3314      	adds	r3, #20
 8002fee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff0:	697b      	ldr	r3, [r7, #20]
 8002ff2:	e853 3f00 	ldrex	r3, [r3]
 8002ff6:	613b      	str	r3, [r7, #16]
   return(result);
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f023 0301 	bic.w	r3, r3, #1
 8002ffe:	63bb      	str	r3, [r7, #56]	; 0x38
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	3314      	adds	r3, #20
 8003006:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003008:	623a      	str	r2, [r7, #32]
 800300a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800300c:	69f9      	ldr	r1, [r7, #28]
 800300e:	6a3a      	ldr	r2, [r7, #32]
 8003010:	e841 2300 	strex	r3, r2, [r1]
 8003014:	61bb      	str	r3, [r7, #24]
   return(result);
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d1e5      	bne.n	8002fe8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2220      	movs	r2, #32
 8003020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2200      	movs	r2, #0
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003034:	2303      	movs	r3, #3
 8003036:	e00f      	b.n	8003058 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	681a      	ldr	r2, [r3, #0]
 800303e:	68bb      	ldr	r3, [r7, #8]
 8003040:	4013      	ands	r3, r2
 8003042:	68ba      	ldr	r2, [r7, #8]
 8003044:	429a      	cmp	r2, r3
 8003046:	bf0c      	ite	eq
 8003048:	2301      	moveq	r3, #1
 800304a:	2300      	movne	r3, #0
 800304c:	b2db      	uxtb	r3, r3
 800304e:	461a      	mov	r2, r3
 8003050:	79fb      	ldrb	r3, [r7, #7]
 8003052:	429a      	cmp	r2, r3
 8003054:	d09f      	beq.n	8002f96 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003056:	2300      	movs	r3, #0
}
 8003058:	4618      	mov	r0, r3
 800305a:	3740      	adds	r7, #64	; 0x40
 800305c:	46bd      	mov	sp, r7
 800305e:	bd80      	pop	{r7, pc}

08003060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003060:	b480      	push	{r7}
 8003062:	b095      	sub	sp, #84	; 0x54
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	330c      	adds	r3, #12
 800306e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003072:	e853 3f00 	ldrex	r3, [r3]
 8003076:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800307e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	330c      	adds	r3, #12
 8003086:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003088:	643a      	str	r2, [r7, #64]	; 0x40
 800308a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800308c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800308e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003090:	e841 2300 	strex	r3, r2, [r1]
 8003094:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003096:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1e5      	bne.n	8003068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	3314      	adds	r3, #20
 80030a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030a4:	6a3b      	ldr	r3, [r7, #32]
 80030a6:	e853 3f00 	ldrex	r3, [r3]
 80030aa:	61fb      	str	r3, [r7, #28]
   return(result);
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	f023 0301 	bic.w	r3, r3, #1
 80030b2:	64bb      	str	r3, [r7, #72]	; 0x48
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	3314      	adds	r3, #20
 80030ba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80030bc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030c0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80030c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030c4:	e841 2300 	strex	r3, r2, [r1]
 80030c8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80030ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d1e5      	bne.n	800309c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d119      	bne.n	800310c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	330c      	adds	r3, #12
 80030de:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	e853 3f00 	ldrex	r3, [r3]
 80030e6:	60bb      	str	r3, [r7, #8]
   return(result);
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	f023 0310 	bic.w	r3, r3, #16
 80030ee:	647b      	str	r3, [r7, #68]	; 0x44
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	330c      	adds	r3, #12
 80030f6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80030f8:	61ba      	str	r2, [r7, #24]
 80030fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030fc:	6979      	ldr	r1, [r7, #20]
 80030fe:	69ba      	ldr	r2, [r7, #24]
 8003100:	e841 2300 	strex	r3, r2, [r1]
 8003104:	613b      	str	r3, [r7, #16]
   return(result);
 8003106:	693b      	ldr	r3, [r7, #16]
 8003108:	2b00      	cmp	r3, #0
 800310a:	d1e5      	bne.n	80030d8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2220      	movs	r2, #32
 8003110:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	631a      	str	r2, [r3, #48]	; 0x30
}
 800311a:	bf00      	nop
 800311c:	3754      	adds	r7, #84	; 0x54
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr

08003126 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003126:	b580      	push	{r7, lr}
 8003128:	b084      	sub	sp, #16
 800312a:	af00      	add	r7, sp, #0
 800312c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003132:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	2200      	movs	r2, #0
 800313e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003140:	68f8      	ldr	r0, [r7, #12]
 8003142:	f7ff ff09 	bl	8002f58 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003146:	bf00      	nop
 8003148:	3710      	adds	r7, #16
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}

0800314e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800314e:	b480      	push	{r7}
 8003150:	b085      	sub	sp, #20
 8003152:	af00      	add	r7, sp, #0
 8003154:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800315c:	b2db      	uxtb	r3, r3
 800315e:	2b21      	cmp	r3, #33	; 0x21
 8003160:	d13e      	bne.n	80031e0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	689b      	ldr	r3, [r3, #8]
 8003166:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800316a:	d114      	bne.n	8003196 <UART_Transmit_IT+0x48>
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	691b      	ldr	r3, [r3, #16]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d110      	bne.n	8003196 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	6a1b      	ldr	r3, [r3, #32]
 8003178:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	881b      	ldrh	r3, [r3, #0]
 800317e:	461a      	mov	r2, r3
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003188:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a1b      	ldr	r3, [r3, #32]
 800318e:	1c9a      	adds	r2, r3, #2
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	621a      	str	r2, [r3, #32]
 8003194:	e008      	b.n	80031a8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6a1b      	ldr	r3, [r3, #32]
 800319a:	1c59      	adds	r1, r3, #1
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6211      	str	r1, [r2, #32]
 80031a0:	781a      	ldrb	r2, [r3, #0]
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80031ac:	b29b      	uxth	r3, r3
 80031ae:	3b01      	subs	r3, #1
 80031b0:	b29b      	uxth	r3, r3
 80031b2:	687a      	ldr	r2, [r7, #4]
 80031b4:	4619      	mov	r1, r3
 80031b6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d10f      	bne.n	80031dc <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	68da      	ldr	r2, [r3, #12]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80031ca:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80031da:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80031dc:	2300      	movs	r3, #0
 80031de:	e000      	b.n	80031e2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80031e0:	2302      	movs	r3, #2
  }
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3714      	adds	r7, #20
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80031ee:	b580      	push	{r7, lr}
 80031f0:	b082      	sub	sp, #8
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	68da      	ldr	r2, [r3, #12]
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003204:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	2220      	movs	r2, #32
 800320a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f7ff fe8e 	bl	8002f30 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003214:	2300      	movs	r3, #0
}
 8003216:	4618      	mov	r0, r3
 8003218:	3708      	adds	r7, #8
 800321a:	46bd      	mov	sp, r7
 800321c:	bd80      	pop	{r7, pc}

0800321e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800321e:	b580      	push	{r7, lr}
 8003220:	b08c      	sub	sp, #48	; 0x30
 8003222:	af00      	add	r7, sp, #0
 8003224:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800322c:	b2db      	uxtb	r3, r3
 800322e:	2b22      	cmp	r3, #34	; 0x22
 8003230:	f040 80ab 	bne.w	800338a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800323c:	d117      	bne.n	800326e <UART_Receive_IT+0x50>
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	691b      	ldr	r3, [r3, #16]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d113      	bne.n	800326e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003246:	2300      	movs	r3, #0
 8003248:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800324e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	685b      	ldr	r3, [r3, #4]
 8003256:	b29b      	uxth	r3, r3
 8003258:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800325c:	b29a      	uxth	r2, r3
 800325e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003260:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	1c9a      	adds	r2, r3, #2
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	629a      	str	r2, [r3, #40]	; 0x28
 800326c:	e026      	b.n	80032bc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003272:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8003274:	2300      	movs	r3, #0
 8003276:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	689b      	ldr	r3, [r3, #8]
 800327c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003280:	d007      	beq.n	8003292 <UART_Receive_IT+0x74>
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <UART_Receive_IT+0x82>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	691b      	ldr	r3, [r3, #16]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	b2da      	uxtb	r2, r3
 800329a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800329c:	701a      	strb	r2, [r3, #0]
 800329e:	e008      	b.n	80032b2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80032b0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032b6:	1c5a      	adds	r2, r3, #1
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80032c0:	b29b      	uxth	r3, r3
 80032c2:	3b01      	subs	r3, #1
 80032c4:	b29b      	uxth	r3, r3
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4619      	mov	r1, r3
 80032ca:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d15a      	bne.n	8003386 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	68da      	ldr	r2, [r3, #12]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0220 	bic.w	r2, r2, #32
 80032de:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68da      	ldr	r2, [r3, #12]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80032ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	695a      	ldr	r2, [r3, #20]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f022 0201 	bic.w	r2, r2, #1
 80032fe:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2220      	movs	r2, #32
 8003304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800330c:	2b01      	cmp	r3, #1
 800330e:	d135      	bne.n	800337c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	2200      	movs	r2, #0
 8003314:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	330c      	adds	r3, #12
 800331c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	613b      	str	r3, [r7, #16]
   return(result);
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	f023 0310 	bic.w	r3, r3, #16
 800332c:	627b      	str	r3, [r7, #36]	; 0x24
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	330c      	adds	r3, #12
 8003334:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003336:	623a      	str	r2, [r7, #32]
 8003338:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	69f9      	ldr	r1, [r7, #28]
 800333c:	6a3a      	ldr	r2, [r7, #32]
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	61bb      	str	r3, [r7, #24]
   return(result);
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0310 	and.w	r3, r3, #16
 8003354:	2b10      	cmp	r3, #16
 8003356:	d10a      	bne.n	800336e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003358:	2300      	movs	r3, #0
 800335a:	60fb      	str	r3, [r7, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	60fb      	str	r3, [r7, #12]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	60fb      	str	r3, [r7, #12]
 800336c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003372:	4619      	mov	r1, r3
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff fdf9 	bl	8002f6c <HAL_UARTEx_RxEventCallback>
 800337a:	e002      	b.n	8003382 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800337c:	6878      	ldr	r0, [r7, #4]
 800337e:	f7ff fde1 	bl	8002f44 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003382:	2300      	movs	r3, #0
 8003384:	e002      	b.n	800338c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8003386:	2300      	movs	r3, #0
 8003388:	e000      	b.n	800338c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800338a:	2302      	movs	r3, #2
  }
}
 800338c:	4618      	mov	r0, r3
 800338e:	3730      	adds	r7, #48	; 0x30
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	b09f      	sub	sp, #124	; 0x7c
 800339a:	af00      	add	r7, sp, #0
 800339c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800339e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80033a8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033aa:	68d9      	ldr	r1, [r3, #12]
 80033ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033ae:	681a      	ldr	r2, [r3, #0]
 80033b0:	ea40 0301 	orr.w	r3, r0, r1
 80033b4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80033b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033b8:	689a      	ldr	r2, [r3, #8]
 80033ba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033bc:	691b      	ldr	r3, [r3, #16]
 80033be:	431a      	orrs	r2, r3
 80033c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	431a      	orrs	r2, r3
 80033c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033c8:	69db      	ldr	r3, [r3, #28]
 80033ca:	4313      	orrs	r3, r2
 80033cc:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80033ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	68db      	ldr	r3, [r3, #12]
 80033d4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80033d8:	f021 010c 	bic.w	r1, r1, #12
 80033dc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80033e2:	430b      	orrs	r3, r1
 80033e4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80033e6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695b      	ldr	r3, [r3, #20]
 80033ec:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80033f0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f2:	6999      	ldr	r1, [r3, #24]
 80033f4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80033f6:	681a      	ldr	r2, [r3, #0]
 80033f8:	ea40 0301 	orr.w	r3, r0, r1
 80033fc:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80033fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003400:	681a      	ldr	r2, [r3, #0]
 8003402:	4bc5      	ldr	r3, [pc, #788]	; (8003718 <UART_SetConfig+0x384>)
 8003404:	429a      	cmp	r2, r3
 8003406:	d004      	beq.n	8003412 <UART_SetConfig+0x7e>
 8003408:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800340a:	681a      	ldr	r2, [r3, #0]
 800340c:	4bc3      	ldr	r3, [pc, #780]	; (800371c <UART_SetConfig+0x388>)
 800340e:	429a      	cmp	r2, r3
 8003410:	d103      	bne.n	800341a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003412:	f7ff f969 	bl	80026e8 <HAL_RCC_GetPCLK2Freq>
 8003416:	6778      	str	r0, [r7, #116]	; 0x74
 8003418:	e002      	b.n	8003420 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800341a:	f7ff f951 	bl	80026c0 <HAL_RCC_GetPCLK1Freq>
 800341e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003420:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003422:	69db      	ldr	r3, [r3, #28]
 8003424:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003428:	f040 80b6 	bne.w	8003598 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800342c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342e:	461c      	mov	r4, r3
 8003430:	f04f 0500 	mov.w	r5, #0
 8003434:	4622      	mov	r2, r4
 8003436:	462b      	mov	r3, r5
 8003438:	1891      	adds	r1, r2, r2
 800343a:	6439      	str	r1, [r7, #64]	; 0x40
 800343c:	415b      	adcs	r3, r3
 800343e:	647b      	str	r3, [r7, #68]	; 0x44
 8003440:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003444:	1912      	adds	r2, r2, r4
 8003446:	eb45 0303 	adc.w	r3, r5, r3
 800344a:	f04f 0000 	mov.w	r0, #0
 800344e:	f04f 0100 	mov.w	r1, #0
 8003452:	00d9      	lsls	r1, r3, #3
 8003454:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003458:	00d0      	lsls	r0, r2, #3
 800345a:	4602      	mov	r2, r0
 800345c:	460b      	mov	r3, r1
 800345e:	1911      	adds	r1, r2, r4
 8003460:	6639      	str	r1, [r7, #96]	; 0x60
 8003462:	416b      	adcs	r3, r5
 8003464:	667b      	str	r3, [r7, #100]	; 0x64
 8003466:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	461a      	mov	r2, r3
 800346c:	f04f 0300 	mov.w	r3, #0
 8003470:	1891      	adds	r1, r2, r2
 8003472:	63b9      	str	r1, [r7, #56]	; 0x38
 8003474:	415b      	adcs	r3, r3
 8003476:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003478:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800347c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003480:	f7fd fb14 	bl	8000aac <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4ba5      	ldr	r3, [pc, #660]	; (8003720 <UART_SetConfig+0x38c>)
 800348a:	fba3 2302 	umull	r2, r3, r3, r2
 800348e:	095b      	lsrs	r3, r3, #5
 8003490:	011e      	lsls	r6, r3, #4
 8003492:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003494:	461c      	mov	r4, r3
 8003496:	f04f 0500 	mov.w	r5, #0
 800349a:	4622      	mov	r2, r4
 800349c:	462b      	mov	r3, r5
 800349e:	1891      	adds	r1, r2, r2
 80034a0:	6339      	str	r1, [r7, #48]	; 0x30
 80034a2:	415b      	adcs	r3, r3
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
 80034a6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80034aa:	1912      	adds	r2, r2, r4
 80034ac:	eb45 0303 	adc.w	r3, r5, r3
 80034b0:	f04f 0000 	mov.w	r0, #0
 80034b4:	f04f 0100 	mov.w	r1, #0
 80034b8:	00d9      	lsls	r1, r3, #3
 80034ba:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034be:	00d0      	lsls	r0, r2, #3
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	1911      	adds	r1, r2, r4
 80034c6:	65b9      	str	r1, [r7, #88]	; 0x58
 80034c8:	416b      	adcs	r3, r5
 80034ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034cc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034ce:	685b      	ldr	r3, [r3, #4]
 80034d0:	461a      	mov	r2, r3
 80034d2:	f04f 0300 	mov.w	r3, #0
 80034d6:	1891      	adds	r1, r2, r2
 80034d8:	62b9      	str	r1, [r7, #40]	; 0x28
 80034da:	415b      	adcs	r3, r3
 80034dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80034de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034e2:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80034e6:	f7fd fae1 	bl	8000aac <__aeabi_uldivmod>
 80034ea:	4602      	mov	r2, r0
 80034ec:	460b      	mov	r3, r1
 80034ee:	4b8c      	ldr	r3, [pc, #560]	; (8003720 <UART_SetConfig+0x38c>)
 80034f0:	fba3 1302 	umull	r1, r3, r3, r2
 80034f4:	095b      	lsrs	r3, r3, #5
 80034f6:	2164      	movs	r1, #100	; 0x64
 80034f8:	fb01 f303 	mul.w	r3, r1, r3
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	00db      	lsls	r3, r3, #3
 8003500:	3332      	adds	r3, #50	; 0x32
 8003502:	4a87      	ldr	r2, [pc, #540]	; (8003720 <UART_SetConfig+0x38c>)
 8003504:	fba2 2303 	umull	r2, r3, r2, r3
 8003508:	095b      	lsrs	r3, r3, #5
 800350a:	005b      	lsls	r3, r3, #1
 800350c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003510:	441e      	add	r6, r3
 8003512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003514:	4618      	mov	r0, r3
 8003516:	f04f 0100 	mov.w	r1, #0
 800351a:	4602      	mov	r2, r0
 800351c:	460b      	mov	r3, r1
 800351e:	1894      	adds	r4, r2, r2
 8003520:	623c      	str	r4, [r7, #32]
 8003522:	415b      	adcs	r3, r3
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
 8003526:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800352a:	1812      	adds	r2, r2, r0
 800352c:	eb41 0303 	adc.w	r3, r1, r3
 8003530:	f04f 0400 	mov.w	r4, #0
 8003534:	f04f 0500 	mov.w	r5, #0
 8003538:	00dd      	lsls	r5, r3, #3
 800353a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800353e:	00d4      	lsls	r4, r2, #3
 8003540:	4622      	mov	r2, r4
 8003542:	462b      	mov	r3, r5
 8003544:	1814      	adds	r4, r2, r0
 8003546:	653c      	str	r4, [r7, #80]	; 0x50
 8003548:	414b      	adcs	r3, r1
 800354a:	657b      	str	r3, [r7, #84]	; 0x54
 800354c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	461a      	mov	r2, r3
 8003552:	f04f 0300 	mov.w	r3, #0
 8003556:	1891      	adds	r1, r2, r2
 8003558:	61b9      	str	r1, [r7, #24]
 800355a:	415b      	adcs	r3, r3
 800355c:	61fb      	str	r3, [r7, #28]
 800355e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003562:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003566:	f7fd faa1 	bl	8000aac <__aeabi_uldivmod>
 800356a:	4602      	mov	r2, r0
 800356c:	460b      	mov	r3, r1
 800356e:	4b6c      	ldr	r3, [pc, #432]	; (8003720 <UART_SetConfig+0x38c>)
 8003570:	fba3 1302 	umull	r1, r3, r3, r2
 8003574:	095b      	lsrs	r3, r3, #5
 8003576:	2164      	movs	r1, #100	; 0x64
 8003578:	fb01 f303 	mul.w	r3, r1, r3
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	00db      	lsls	r3, r3, #3
 8003580:	3332      	adds	r3, #50	; 0x32
 8003582:	4a67      	ldr	r2, [pc, #412]	; (8003720 <UART_SetConfig+0x38c>)
 8003584:	fba2 2303 	umull	r2, r3, r2, r3
 8003588:	095b      	lsrs	r3, r3, #5
 800358a:	f003 0207 	and.w	r2, r3, #7
 800358e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4432      	add	r2, r6
 8003594:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003596:	e0b9      	b.n	800370c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003598:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800359a:	461c      	mov	r4, r3
 800359c:	f04f 0500 	mov.w	r5, #0
 80035a0:	4622      	mov	r2, r4
 80035a2:	462b      	mov	r3, r5
 80035a4:	1891      	adds	r1, r2, r2
 80035a6:	6139      	str	r1, [r7, #16]
 80035a8:	415b      	adcs	r3, r3
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80035b0:	1912      	adds	r2, r2, r4
 80035b2:	eb45 0303 	adc.w	r3, r5, r3
 80035b6:	f04f 0000 	mov.w	r0, #0
 80035ba:	f04f 0100 	mov.w	r1, #0
 80035be:	00d9      	lsls	r1, r3, #3
 80035c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80035c4:	00d0      	lsls	r0, r2, #3
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	eb12 0804 	adds.w	r8, r2, r4
 80035ce:	eb43 0905 	adc.w	r9, r3, r5
 80035d2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	4618      	mov	r0, r3
 80035d8:	f04f 0100 	mov.w	r1, #0
 80035dc:	f04f 0200 	mov.w	r2, #0
 80035e0:	f04f 0300 	mov.w	r3, #0
 80035e4:	008b      	lsls	r3, r1, #2
 80035e6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80035ea:	0082      	lsls	r2, r0, #2
 80035ec:	4640      	mov	r0, r8
 80035ee:	4649      	mov	r1, r9
 80035f0:	f7fd fa5c 	bl	8000aac <__aeabi_uldivmod>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4b49      	ldr	r3, [pc, #292]	; (8003720 <UART_SetConfig+0x38c>)
 80035fa:	fba3 2302 	umull	r2, r3, r3, r2
 80035fe:	095b      	lsrs	r3, r3, #5
 8003600:	011e      	lsls	r6, r3, #4
 8003602:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003604:	4618      	mov	r0, r3
 8003606:	f04f 0100 	mov.w	r1, #0
 800360a:	4602      	mov	r2, r0
 800360c:	460b      	mov	r3, r1
 800360e:	1894      	adds	r4, r2, r2
 8003610:	60bc      	str	r4, [r7, #8]
 8003612:	415b      	adcs	r3, r3
 8003614:	60fb      	str	r3, [r7, #12]
 8003616:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800361a:	1812      	adds	r2, r2, r0
 800361c:	eb41 0303 	adc.w	r3, r1, r3
 8003620:	f04f 0400 	mov.w	r4, #0
 8003624:	f04f 0500 	mov.w	r5, #0
 8003628:	00dd      	lsls	r5, r3, #3
 800362a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800362e:	00d4      	lsls	r4, r2, #3
 8003630:	4622      	mov	r2, r4
 8003632:	462b      	mov	r3, r5
 8003634:	1814      	adds	r4, r2, r0
 8003636:	64bc      	str	r4, [r7, #72]	; 0x48
 8003638:	414b      	adcs	r3, r1
 800363a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800363c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800363e:	685b      	ldr	r3, [r3, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f04f 0100 	mov.w	r1, #0
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	008b      	lsls	r3, r1, #2
 8003650:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003654:	0082      	lsls	r2, r0, #2
 8003656:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800365a:	f7fd fa27 	bl	8000aac <__aeabi_uldivmod>
 800365e:	4602      	mov	r2, r0
 8003660:	460b      	mov	r3, r1
 8003662:	4b2f      	ldr	r3, [pc, #188]	; (8003720 <UART_SetConfig+0x38c>)
 8003664:	fba3 1302 	umull	r1, r3, r3, r2
 8003668:	095b      	lsrs	r3, r3, #5
 800366a:	2164      	movs	r1, #100	; 0x64
 800366c:	fb01 f303 	mul.w	r3, r1, r3
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	011b      	lsls	r3, r3, #4
 8003674:	3332      	adds	r3, #50	; 0x32
 8003676:	4a2a      	ldr	r2, [pc, #168]	; (8003720 <UART_SetConfig+0x38c>)
 8003678:	fba2 2303 	umull	r2, r3, r2, r3
 800367c:	095b      	lsrs	r3, r3, #5
 800367e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003682:	441e      	add	r6, r3
 8003684:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003686:	4618      	mov	r0, r3
 8003688:	f04f 0100 	mov.w	r1, #0
 800368c:	4602      	mov	r2, r0
 800368e:	460b      	mov	r3, r1
 8003690:	1894      	adds	r4, r2, r2
 8003692:	603c      	str	r4, [r7, #0]
 8003694:	415b      	adcs	r3, r3
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	e9d7 2300 	ldrd	r2, r3, [r7]
 800369c:	1812      	adds	r2, r2, r0
 800369e:	eb41 0303 	adc.w	r3, r1, r3
 80036a2:	f04f 0400 	mov.w	r4, #0
 80036a6:	f04f 0500 	mov.w	r5, #0
 80036aa:	00dd      	lsls	r5, r3, #3
 80036ac:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80036b0:	00d4      	lsls	r4, r2, #3
 80036b2:	4622      	mov	r2, r4
 80036b4:	462b      	mov	r3, r5
 80036b6:	eb12 0a00 	adds.w	sl, r2, r0
 80036ba:	eb43 0b01 	adc.w	fp, r3, r1
 80036be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036c0:	685b      	ldr	r3, [r3, #4]
 80036c2:	4618      	mov	r0, r3
 80036c4:	f04f 0100 	mov.w	r1, #0
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	f04f 0300 	mov.w	r3, #0
 80036d0:	008b      	lsls	r3, r1, #2
 80036d2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80036d6:	0082      	lsls	r2, r0, #2
 80036d8:	4650      	mov	r0, sl
 80036da:	4659      	mov	r1, fp
 80036dc:	f7fd f9e6 	bl	8000aac <__aeabi_uldivmod>
 80036e0:	4602      	mov	r2, r0
 80036e2:	460b      	mov	r3, r1
 80036e4:	4b0e      	ldr	r3, [pc, #56]	; (8003720 <UART_SetConfig+0x38c>)
 80036e6:	fba3 1302 	umull	r1, r3, r3, r2
 80036ea:	095b      	lsrs	r3, r3, #5
 80036ec:	2164      	movs	r1, #100	; 0x64
 80036ee:	fb01 f303 	mul.w	r3, r1, r3
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	011b      	lsls	r3, r3, #4
 80036f6:	3332      	adds	r3, #50	; 0x32
 80036f8:	4a09      	ldr	r2, [pc, #36]	; (8003720 <UART_SetConfig+0x38c>)
 80036fa:	fba2 2303 	umull	r2, r3, r2, r3
 80036fe:	095b      	lsrs	r3, r3, #5
 8003700:	f003 020f 	and.w	r2, r3, #15
 8003704:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	4432      	add	r2, r6
 800370a:	609a      	str	r2, [r3, #8]
}
 800370c:	bf00      	nop
 800370e:	377c      	adds	r7, #124	; 0x7c
 8003710:	46bd      	mov	sp, r7
 8003712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003716:	bf00      	nop
 8003718:	40011000 	.word	0x40011000
 800371c:	40011400 	.word	0x40011400
 8003720:	51eb851f 	.word	0x51eb851f

08003724 <MX_LIBJPEG_Init>:
/* USER CODE BEGIN 2 */
/* USER CODE END 2 */

/* LIBJPEG init function */
void MX_LIBJPEG_Init(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  */

  /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */

}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr

08003732 <jpeg_abort>:
 * responsibility.
 */

GLOBAL(void)
jpeg_abort (j_common_ptr cinfo)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b084      	sub	sp, #16
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
  int pool;

  /* Do nothing if called on a not-initialized or destroyed JPEG object. */
  if (cinfo->mem == NULL)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d01e      	beq.n	8003780 <jpeg_abort+0x4e>
    return;

  /* Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 8003742:	2301      	movs	r3, #1
 8003744:	60fb      	str	r3, [r7, #12]
 8003746:	e008      	b.n	800375a <jpeg_abort+0x28>
    (*cinfo->mem->free_pool) (cinfo, pool);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374e:	68f9      	ldr	r1, [r7, #12]
 8003750:	6878      	ldr	r0, [r7, #4]
 8003752:	4798      	blx	r3
  for (pool = JPOOL_NUMPOOLS-1; pool > JPOOL_PERMANENT; pool--) {
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	3b01      	subs	r3, #1
 8003758:	60fb      	str	r3, [r7, #12]
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2b00      	cmp	r3, #0
 800375e:	dcf3      	bgt.n	8003748 <jpeg_abort+0x16>
  }

  /* Reset overall state for possible reuse of object */
  if (cinfo->is_decompressor) {
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	691b      	ldr	r3, [r3, #16]
 8003764:	2b00      	cmp	r3, #0
 8003766:	d007      	beq.n	8003778 <jpeg_abort+0x46>
    cinfo->global_state = DSTATE_START;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	22c8      	movs	r2, #200	; 0xc8
 800376c:	615a      	str	r2, [r3, #20]
    /* Try to keep application from accessing now-deleted marker list.
     * A bit kludgy to do it here, but this is the most central place.
     */
    ((j_decompress_ptr) cinfo)->marker_list = NULL;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
 8003776:	e004      	b.n	8003782 <jpeg_abort+0x50>
  } else {
    cinfo->global_state = CSTATE_START;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2264      	movs	r2, #100	; 0x64
 800377c:	615a      	str	r2, [r3, #20]
 800377e:	e000      	b.n	8003782 <jpeg_abort+0x50>
    return;
 8003780:	bf00      	nop
  }
}
 8003782:	3710      	adds	r7, #16
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <jpeg_destroy>:
 * responsibility.
 */

GLOBAL(void)
jpeg_destroy (j_common_ptr cinfo)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b082      	sub	sp, #8
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  /* We need only tell the memory manager to release everything. */
  /* NB: mem pointer is NULL if memory mgr failed to initialize. */
  if (cinfo->mem != NULL)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d004      	beq.n	80037a2 <jpeg_destroy+0x1a>
    (*cinfo->mem->self_destruct) (cinfo);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	685b      	ldr	r3, [r3, #4]
 800379c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800379e:	6878      	ldr	r0, [r7, #4]
 80037a0:	4798      	blx	r3
  cinfo->mem = NULL;		/* be safe if jpeg_destroy is called twice */
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	2200      	movs	r2, #0
 80037a6:	605a      	str	r2, [r3, #4]
  cinfo->global_state = 0;	/* mark it destroyed */
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2200      	movs	r2, #0
 80037ac:	615a      	str	r2, [r3, #20]
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}

080037b6 <jpeg_alloc_quant_table>:
 * (Would jutils.c be a more reasonable place to put these?)
 */

GLOBAL(JQUANT_TBL *)
jpeg_alloc_quant_table (j_common_ptr cinfo)
{
 80037b6:	b580      	push	{r7, lr}
 80037b8:	b084      	sub	sp, #16
 80037ba:	af00      	add	r7, sp, #0
 80037bc:	6078      	str	r0, [r7, #4]
  JQUANT_TBL *tbl;

  tbl = (JQUANT_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JQUANT_TBL));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	685b      	ldr	r3, [r3, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	2284      	movs	r2, #132	; 0x84
 80037c6:	2100      	movs	r1, #0
 80037c8:	6878      	ldr	r0, [r7, #4]
 80037ca:	4798      	blx	r3
 80037cc:	60f8      	str	r0, [r7, #12]
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	2200      	movs	r2, #0
 80037d2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  return tbl;
 80037d6:	68fb      	ldr	r3, [r7, #12]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}

080037e0 <jpeg_alloc_huff_table>:


GLOBAL(JHUFF_TBL *)
jpeg_alloc_huff_table (j_common_ptr cinfo)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b084      	sub	sp, #16
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  JHUFF_TBL *tbl;

  tbl = (JHUFF_TBL *)
    (*cinfo->mem->alloc_small) (cinfo, JPOOL_PERMANENT, SIZEOF(JHUFF_TBL));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f44f 728c 	mov.w	r2, #280	; 0x118
 80037f2:	2100      	movs	r1, #0
 80037f4:	6878      	ldr	r0, [r7, #4]
 80037f6:	4798      	blx	r3
 80037f8:	60f8      	str	r0, [r7, #12]
  tbl->sent_table = FALSE;	/* make sure this is false in any new table */
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
  return tbl;
 8003802:	68fb      	ldr	r3, [r7, #12]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <jpeg_CreateDecompress>:
 * The error manager must already be set up (in case memory manager fails).
 */

GLOBAL(void)
jpeg_CreateDecompress (j_decompress_ptr cinfo, int version, size_t structsize)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	60f8      	str	r0, [r7, #12]
 8003814:	60b9      	str	r1, [r7, #8]
 8003816:	607a      	str	r2, [r7, #4]
  int i;

  /* Guard against version mismatches between library and caller. */
  cinfo->mem = NULL;		/* so jpeg_destroy knows mem mgr not called */
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	2200      	movs	r2, #0
 800381c:	605a      	str	r2, [r3, #4]
  if (version != JPEG_LIB_VERSION)
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b50      	cmp	r3, #80	; 0x50
 8003822:	d010      	beq.n	8003846 <jpeg_CreateDecompress+0x3a>
    ERREXIT2(cinfo, JERR_BAD_LIB_VERSION, JPEG_LIB_VERSION, version);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	220d      	movs	r2, #13
 800382a:	615a      	str	r2, [r3, #20]
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	2250      	movs	r2, #80	; 0x50
 8003832:	619a      	str	r2, [r3, #24]
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	68ba      	ldr	r2, [r7, #8]
 800383a:	61da      	str	r2, [r3, #28]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68f8      	ldr	r0, [r7, #12]
 8003844:	4798      	blx	r3
  if (structsize != SIZEOF(struct jpeg_decompress_struct))
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 800384c:	d011      	beq.n	8003872 <jpeg_CreateDecompress+0x66>
    ERREXIT2(cinfo, JERR_BAD_STRUCT_SIZE, 
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	2216      	movs	r2, #22
 8003854:	615a      	str	r2, [r3, #20]
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800385e:	619a      	str	r2, [r3, #24]
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	61da      	str	r2, [r3, #28]
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68f8      	ldr	r0, [r7, #12]
 8003870:	4798      	blx	r3
   * client_data, so we have to save and restore those fields.
   * Note: if application hasn't set client_data, tools like Purify may
   * complain here.
   */
  {
    struct jpeg_error_mgr * err = cinfo->err;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	61bb      	str	r3, [r7, #24]
    void * client_data = cinfo->client_data; /* ignore Purify complaint here */
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	617b      	str	r3, [r7, #20]
    MEMZERO(cinfo, SIZEOF(struct jpeg_decompress_struct));
 800387e:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8003882:	2100      	movs	r1, #0
 8003884:	68f8      	ldr	r0, [r7, #12]
 8003886:	f01b fda7 	bl	801f3d8 <memset>
    cinfo->err = err;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	69ba      	ldr	r2, [r7, #24]
 800388e:	601a      	str	r2, [r3, #0]
    cinfo->client_data = client_data;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	60da      	str	r2, [r3, #12]
  }
  cinfo->is_decompressor = TRUE;
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2201      	movs	r2, #1
 800389a:	611a      	str	r2, [r3, #16]

  /* Initialize a memory manager instance for this object */
  jinit_memory_mgr((j_common_ptr) cinfo);
 800389c:	68f8      	ldr	r0, [r7, #12]
 800389e:	f019 f9c7 	bl	801cc30 <jinit_memory_mgr>

  /* Zero out pointers to permanent structures. */
  cinfo->progress = NULL;
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	2200      	movs	r2, #0
 80038a6:	609a      	str	r2, [r3, #8]
  cinfo->src = NULL;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2200      	movs	r2, #0
 80038ac:	619a      	str	r2, [r3, #24]

  for (i = 0; i < NUM_QUANT_TBLS; i++)
 80038ae:	2300      	movs	r3, #0
 80038b0:	61fb      	str	r3, [r7, #28]
 80038b2:	e009      	b.n	80038c8 <jpeg_CreateDecompress+0xbc>
    cinfo->quant_tbl_ptrs[i] = NULL;
 80038b4:	68fa      	ldr	r2, [r7, #12]
 80038b6:	69fb      	ldr	r3, [r7, #28]
 80038b8:	3328      	adds	r3, #40	; 0x28
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	4413      	add	r3, r2
 80038be:	2200      	movs	r2, #0
 80038c0:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_QUANT_TBLS; i++)
 80038c2:	69fb      	ldr	r3, [r7, #28]
 80038c4:	3301      	adds	r3, #1
 80038c6:	61fb      	str	r3, [r7, #28]
 80038c8:	69fb      	ldr	r3, [r7, #28]
 80038ca:	2b03      	cmp	r3, #3
 80038cc:	ddf2      	ble.n	80038b4 <jpeg_CreateDecompress+0xa8>

  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e010      	b.n	80038f6 <jpeg_CreateDecompress+0xea>
    cinfo->dc_huff_tbl_ptrs[i] = NULL;
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	332c      	adds	r3, #44	; 0x2c
 80038da:	009b      	lsls	r3, r3, #2
 80038dc:	4413      	add	r3, r2
 80038de:	2200      	movs	r2, #0
 80038e0:	605a      	str	r2, [r3, #4]
    cinfo->ac_huff_tbl_ptrs[i] = NULL;
 80038e2:	68fa      	ldr	r2, [r7, #12]
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	3330      	adds	r3, #48	; 0x30
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4413      	add	r3, r2
 80038ec:	2200      	movs	r2, #0
 80038ee:	605a      	str	r2, [r3, #4]
  for (i = 0; i < NUM_HUFF_TBLS; i++) {
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	3301      	adds	r3, #1
 80038f4:	61fb      	str	r3, [r7, #28]
 80038f6:	69fb      	ldr	r3, [r7, #28]
 80038f8:	2b03      	cmp	r3, #3
 80038fa:	ddeb      	ble.n	80038d4 <jpeg_CreateDecompress+0xc8>
  }

  /* Initialize marker processor so application can override methods
   * for COM, APPn markers before calling jpeg_read_header.
   */
  cinfo->marker_list = NULL;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	f8c3 2134 	str.w	r2, [r3, #308]	; 0x134
  jinit_marker_reader(cinfo);
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f009 fc8f 	bl	800d228 <jinit_marker_reader>

  /* And initialize the overall input controller. */
  jinit_input_controller(cinfo);
 800390a:	68f8      	ldr	r0, [r7, #12]
 800390c:	f006 fef4 	bl	800a6f8 <jinit_input_controller>

  /* OK, I'm ready */
  cinfo->global_state = DSTATE_START;
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	22c8      	movs	r2, #200	; 0xc8
 8003914:	615a      	str	r2, [r3, #20]
}
 8003916:	bf00      	nop
 8003918:	3720      	adds	r7, #32
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <jpeg_destroy_decompress>:
 * Destruction of a JPEG decompression object
 */

GLOBAL(void)
jpeg_destroy_decompress (j_decompress_ptr cinfo)
{
 800391e:	b580      	push	{r7, lr}
 8003920:	b082      	sub	sp, #8
 8003922:	af00      	add	r7, sp, #0
 8003924:	6078      	str	r0, [r7, #4]
  jpeg_destroy((j_common_ptr) cinfo); /* use common routine */
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	f7ff ff2e 	bl	8003788 <jpeg_destroy>
}
 800392c:	bf00      	nop
 800392e:	3708      	adds	r7, #8
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}

08003934 <default_decompress_parms>:
 * Set default decompression parameters.
 */

LOCAL(void)
default_decompress_parms (j_decompress_ptr cinfo)
{
 8003934:	b580      	push	{r7, lr}
 8003936:	b086      	sub	sp, #24
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  /* Guess the input colorspace, and set output colorspace accordingly. */
  /* (Wish JPEG committee had provided a real way to specify this...) */
  /* Note application may override our guesses. */
  switch (cinfo->num_components) {
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2b04      	cmp	r3, #4
 8003942:	f000 8097 	beq.w	8003a74 <default_decompress_parms+0x140>
 8003946:	2b04      	cmp	r3, #4
 8003948:	f300 80ca 	bgt.w	8003ae0 <default_decompress_parms+0x1ac>
 800394c:	2b01      	cmp	r3, #1
 800394e:	d002      	beq.n	8003956 <default_decompress_parms+0x22>
 8003950:	2b03      	cmp	r3, #3
 8003952:	d009      	beq.n	8003968 <default_decompress_parms+0x34>
 8003954:	e0c4      	b.n	8003ae0 <default_decompress_parms+0x1ac>
  case 1:
    cinfo->jpeg_color_space = JCS_GRAYSCALE;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2201      	movs	r2, #1
 800395a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    cinfo->out_color_space = JCS_GRAYSCALE;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	2201      	movs	r2, #1
 8003962:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003966:	e0c4      	b.n	8003af2 <default_decompress_parms+0x1be>
    
  case 3:
    if (cinfo->saw_JFIF_marker) {
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
 800396e:	2b00      	cmp	r3, #0
 8003970:	d004      	beq.n	800397c <default_decompress_parms+0x48>
      cinfo->jpeg_color_space = JCS_YCbCr; /* JFIF implies YCbCr */
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	2203      	movs	r2, #3
 8003976:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 800397a:	e076      	b.n	8003a6a <default_decompress_parms+0x136>
    } else if (cinfo->saw_Adobe_marker) {
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003982:	2b00      	cmp	r3, #0
 8003984:	d027      	beq.n	80039d6 <default_decompress_parms+0xa2>
      switch (cinfo->Adobe_transform) {
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 800398c:	2b00      	cmp	r3, #0
 800398e:	d002      	beq.n	8003996 <default_decompress_parms+0x62>
 8003990:	2b01      	cmp	r3, #1
 8003992:	d005      	beq.n	80039a0 <default_decompress_parms+0x6c>
 8003994:	e009      	b.n	80039aa <default_decompress_parms+0x76>
      case 0:
	cinfo->jpeg_color_space = JCS_RGB;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2202      	movs	r2, #2
 800399a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 800399e:	e064      	b.n	8003a6a <default_decompress_parms+0x136>
      case 1:
	cinfo->jpeg_color_space = JCS_YCbCr;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	2203      	movs	r2, #3
 80039a4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 80039a8:	e05f      	b.n	8003a6a <default_decompress_parms+0x136>
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	2274      	movs	r2, #116	; 0x74
 80039b0:	615a      	str	r2, [r3, #20]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	619a      	str	r2, [r3, #24]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	f04f 31ff 	mov.w	r1, #4294967295
 80039c8:	6878      	ldr	r0, [r7, #4]
 80039ca:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2203      	movs	r2, #3
 80039d0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 80039d4:	e049      	b.n	8003a6a <default_decompress_parms+0x136>
      }
    } else {
      /* Saw no special markers, try to guess from the component IDs */
      int cid0 = cinfo->comp_info[0].component_id;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	617b      	str	r3, [r7, #20]
      int cid1 = cinfo->comp_info[1].component_id;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039e6:	3358      	adds	r3, #88	; 0x58
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	613b      	str	r3, [r7, #16]
      int cid2 = cinfo->comp_info[2].component_id;
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80039f2:	33b0      	adds	r3, #176	; 0xb0
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	60fb      	str	r3, [r7, #12]

      if (cid0 == 1 && cid1 == 2 && cid2 == 3)
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b01      	cmp	r3, #1
 80039fc:	d10a      	bne.n	8003a14 <default_decompress_parms+0xe0>
 80039fe:	693b      	ldr	r3, [r7, #16]
 8003a00:	2b02      	cmp	r3, #2
 8003a02:	d107      	bne.n	8003a14 <default_decompress_parms+0xe0>
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	2b03      	cmp	r3, #3
 8003a08:	d104      	bne.n	8003a14 <default_decompress_parms+0xe0>
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume JFIF w/out marker */
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a12:	e02a      	b.n	8003a6a <default_decompress_parms+0x136>
      else if (cid0 == 82 && cid1 == 71 && cid2 == 66)
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	2b52      	cmp	r3, #82	; 0x52
 8003a18:	d10a      	bne.n	8003a30 <default_decompress_parms+0xfc>
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	2b47      	cmp	r3, #71	; 0x47
 8003a1e:	d107      	bne.n	8003a30 <default_decompress_parms+0xfc>
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	2b42      	cmp	r3, #66	; 0x42
 8003a24:	d104      	bne.n	8003a30 <default_decompress_parms+0xfc>
	cinfo->jpeg_color_space = JCS_RGB; /* ASCII 'R', 'G', 'B' */
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2202      	movs	r2, #2
 8003a2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
 8003a2e:	e01c      	b.n	8003a6a <default_decompress_parms+0x136>
      else {
	TRACEMS3(cinfo, 1, JTRC_UNKNOWN_IDS, cid0, cid1, cid2);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	3318      	adds	r3, #24
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	697a      	ldr	r2, [r7, #20]
 8003a3c:	601a      	str	r2, [r3, #0]
 8003a3e:	68bb      	ldr	r3, [r7, #8]
 8003a40:	3304      	adds	r3, #4
 8003a42:	693a      	ldr	r2, [r7, #16]
 8003a44:	601a      	str	r2, [r3, #0]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	3308      	adds	r3, #8
 8003a4a:	68fa      	ldr	r2, [r7, #12]
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	2271      	movs	r2, #113	; 0x71
 8003a54:	615a      	str	r2, [r3, #20]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	2101      	movs	r1, #1
 8003a5e:	6878      	ldr	r0, [r7, #4]
 8003a60:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCbCr; /* assume it's YCbCr */
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	2203      	movs	r2, #3
 8003a66:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
      }
    }
    /* Always guess RGB is proper output colorspace. */
    cinfo->out_color_space = JCS_RGB;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	2202      	movs	r2, #2
 8003a6e:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003a72:	e03e      	b.n	8003af2 <default_decompress_parms+0x1be>
    
  case 4:
    if (cinfo->saw_Adobe_marker) {
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f8d3 3128 	ldr.w	r3, [r3, #296]	; 0x128
 8003a7a:	2b00      	cmp	r3, #0
 8003a7c:	d027      	beq.n	8003ace <default_decompress_parms+0x19a>
      switch (cinfo->Adobe_transform) {
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f893 312c 	ldrb.w	r3, [r3, #300]	; 0x12c
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d002      	beq.n	8003a8e <default_decompress_parms+0x15a>
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d005      	beq.n	8003a98 <default_decompress_parms+0x164>
 8003a8c:	e009      	b.n	8003aa2 <default_decompress_parms+0x16e>
      case 0:
	cinfo->jpeg_color_space = JCS_CMYK;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	2204      	movs	r2, #4
 8003a92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 8003a96:	e01e      	b.n	8003ad6 <default_decompress_parms+0x1a2>
      case 2:
	cinfo->jpeg_color_space = JCS_YCCK;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2205      	movs	r2, #5
 8003a9c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 8003aa0:	e019      	b.n	8003ad6 <default_decompress_parms+0x1a2>
      default:
	WARNMS1(cinfo, JWRN_ADOBE_XFORM, cinfo->Adobe_transform);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2274      	movs	r2, #116	; 0x74
 8003aa8:	615a      	str	r2, [r3, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f893 212c 	ldrb.w	r2, [r3, #300]	; 0x12c
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	619a      	str	r2, [r3, #24]
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	f04f 31ff 	mov.w	r1, #4294967295
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	4798      	blx	r3
	cinfo->jpeg_color_space = JCS_YCCK; /* assume it's YCCK */
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2205      	movs	r2, #5
 8003ac8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
	break;
 8003acc:	e003      	b.n	8003ad6 <default_decompress_parms+0x1a2>
      }
    } else {
      /* No special markers, assume straight CMYK. */
      cinfo->jpeg_color_space = JCS_CMYK;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2204      	movs	r2, #4
 8003ad2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    }
    cinfo->out_color_space = JCS_CMYK;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2204      	movs	r2, #4
 8003ada:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003ade:	e008      	b.n	8003af2 <default_decompress_parms+0x1be>
    
  default:
    cinfo->jpeg_color_space = JCS_UNKNOWN;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    cinfo->out_color_space = JCS_UNKNOWN;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2200      	movs	r2, #0
 8003aec:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
    break;
 8003af0:	bf00      	nop
  }

  /* Set defaults for other decompression parameters. */
  cinfo->scale_num = cinfo->block_size;		/* 1:1 scaling */
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003af8:	461a      	mov	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	62da      	str	r2, [r3, #44]	; 0x2c
  cinfo->scale_denom = cinfo->block_size;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8003b04:	461a      	mov	r2, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	631a      	str	r2, [r3, #48]	; 0x30
  cinfo->output_gamma = 1.0;
 8003b0a:	6879      	ldr	r1, [r7, #4]
 8003b0c:	f04f 0200 	mov.w	r2, #0
 8003b10:	4b18      	ldr	r3, [pc, #96]	; (8003b74 <default_decompress_parms+0x240>)
 8003b12:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
  cinfo->buffered_image = FALSE;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	2200      	movs	r2, #0
 8003b1a:	641a      	str	r2, [r3, #64]	; 0x40
  cinfo->raw_data_out = FALSE;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	645a      	str	r2, [r3, #68]	; 0x44
  cinfo->dct_method = JDCT_DEFAULT;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2200      	movs	r2, #0
 8003b26:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  cinfo->do_fancy_upsampling = TRUE;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2201      	movs	r2, #1
 8003b2e:	64da      	str	r2, [r3, #76]	; 0x4c
  cinfo->do_block_smoothing = TRUE;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	651a      	str	r2, [r3, #80]	; 0x50
  cinfo->quantize_colors = FALSE;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	655a      	str	r2, [r3, #84]	; 0x54
  /* We set these in case application only sets quantize_colors. */
  cinfo->dither_mode = JDITHER_FS;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2202      	movs	r2, #2
 8003b40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
#ifdef QUANT_2PASS_SUPPORTED
  cinfo->two_pass_quantize = TRUE;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2201      	movs	r2, #1
 8003b48:	65da      	str	r2, [r3, #92]	; 0x5c
#else
  cinfo->two_pass_quantize = FALSE;
#endif
  cinfo->desired_number_of_colors = 256;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b50:	661a      	str	r2, [r3, #96]	; 0x60
  cinfo->colormap = NULL;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	2200      	movs	r2, #0
 8003b56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  /* Initialize for no mode change in buffered-image mode. */
  cinfo->enable_1pass_quant = FALSE;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	665a      	str	r2, [r3, #100]	; 0x64
  cinfo->enable_external_quant = FALSE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2200      	movs	r2, #0
 8003b64:	669a      	str	r2, [r3, #104]	; 0x68
  cinfo->enable_2pass_quant = FALSE;
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	2200      	movs	r2, #0
 8003b6a:	66da      	str	r2, [r3, #108]	; 0x6c
}
 8003b6c:	bf00      	nop
 8003b6e:	3718      	adds	r7, #24
 8003b70:	46bd      	mov	sp, r7
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	3ff00000 	.word	0x3ff00000

08003b78 <jpeg_read_header>:
 * extra error checking.
 */

GLOBAL(int)
jpeg_read_header (j_decompress_ptr cinfo, boolean require_image)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  int retcode;

  if (cinfo->global_state != DSTATE_START &&
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	2bc8      	cmp	r3, #200	; 0xc8
 8003b88:	d011      	beq.n	8003bae <jpeg_read_header+0x36>
      cinfo->global_state != DSTATE_INHEADER)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	695b      	ldr	r3, [r3, #20]
  if (cinfo->global_state != DSTATE_START &&
 8003b8e:	2bc9      	cmp	r3, #201	; 0xc9
 8003b90:	d00d      	beq.n	8003bae <jpeg_read_header+0x36>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	2215      	movs	r2, #21
 8003b98:	615a      	str	r2, [r3, #20]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	687a      	ldr	r2, [r7, #4]
 8003ba0:	6952      	ldr	r2, [r2, #20]
 8003ba2:	619a      	str	r2, [r3, #24]
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6878      	ldr	r0, [r7, #4]
 8003bac:	4798      	blx	r3

  retcode = jpeg_consume_input(cinfo);
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f000 f828 	bl	8003c04 <jpeg_consume_input>
 8003bb4:	60f8      	str	r0, [r7, #12]

  switch (retcode) {
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d00b      	beq.n	8003bd4 <jpeg_read_header+0x5c>
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	2b02      	cmp	r3, #2
 8003bc0:	dc1b      	bgt.n	8003bfa <jpeg_read_header+0x82>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2b00      	cmp	r3, #0
 8003bc6:	d017      	beq.n	8003bf8 <jpeg_read_header+0x80>
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d115      	bne.n	8003bfa <jpeg_read_header+0x82>
  case JPEG_REACHED_SOS:
    retcode = JPEG_HEADER_OK;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	60fb      	str	r3, [r7, #12]
    break;
 8003bd2:	e012      	b.n	8003bfa <jpeg_read_header+0x82>
  case JPEG_REACHED_EOI:
    if (require_image)		/* Complain if application wanted an image */
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d008      	beq.n	8003bec <jpeg_read_header+0x74>
      ERREXIT(cinfo, JERR_NO_IMAGE);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	2235      	movs	r2, #53	; 0x35
 8003be0:	615a      	str	r2, [r3, #20]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6878      	ldr	r0, [r7, #4]
 8003bea:	4798      	blx	r3
    /* Reset to start state; it would be safer to require the application to
     * call jpeg_abort, but we can't change it now for compatibility reasons.
     * A side effect is to free any temporary memory (there shouldn't be any).
     */
    jpeg_abort((j_common_ptr) cinfo); /* sets state = DSTATE_START */
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f7ff fda0 	bl	8003732 <jpeg_abort>
    retcode = JPEG_HEADER_TABLES_ONLY;
 8003bf2:	2302      	movs	r3, #2
 8003bf4:	60fb      	str	r3, [r7, #12]
    break;
 8003bf6:	e000      	b.n	8003bfa <jpeg_read_header+0x82>
  case JPEG_SUSPENDED:
    /* no work */
    break;
 8003bf8:	bf00      	nop
  }

  return retcode;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
}
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	3710      	adds	r7, #16
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bd80      	pop	{r7, pc}

08003c04 <jpeg_consume_input>:
 * method.
 */

GLOBAL(int)
jpeg_consume_input (j_decompress_ptr cinfo)
{
 8003c04:	b580      	push	{r7, lr}
 8003c06:	b084      	sub	sp, #16
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
  int retcode = JPEG_SUSPENDED;
 8003c0c:	2300      	movs	r3, #0
 8003c0e:	60fb      	str	r3, [r7, #12]

  /* NB: every possible DSTATE value should be listed in this switch */
  switch (cinfo->global_state) {
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	3bc8      	subs	r3, #200	; 0xc8
 8003c16:	2b0a      	cmp	r3, #10
 8003c18:	d842      	bhi.n	8003ca0 <jpeg_consume_input+0x9c>
 8003c1a:	a201      	add	r2, pc, #4	; (adr r2, 8003c20 <jpeg_consume_input+0x1c>)
 8003c1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c69 	.word	0x08003c69
 8003c28:	08003c8b 	.word	0x08003c8b
 8003c2c:	08003c91 	.word	0x08003c91
 8003c30:	08003c91 	.word	0x08003c91
 8003c34:	08003c91 	.word	0x08003c91
 8003c38:	08003c91 	.word	0x08003c91
 8003c3c:	08003c91 	.word	0x08003c91
 8003c40:	08003c91 	.word	0x08003c91
 8003c44:	08003ca1 	.word	0x08003ca1
 8003c48:	08003c91 	.word	0x08003c91
  case DSTATE_START:
    /* Start-of-datastream actions: reset appropriate modules */
    (*cinfo->inputctl->reset_input_controller) (cinfo);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	6878      	ldr	r0, [r7, #4]
 8003c56:	4798      	blx	r3
    /* Initialize application's data source module */
    (*cinfo->src->init_source) (cinfo);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	6878      	ldr	r0, [r7, #4]
 8003c60:	4798      	blx	r3
    cinfo->global_state = DSTATE_INHEADER;
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	22c9      	movs	r2, #201	; 0xc9
 8003c66:	615a      	str	r2, [r3, #20]
    /*FALLTHROUGH*/
  case DSTATE_INHEADER:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	6878      	ldr	r0, [r7, #4]
 8003c72:	4798      	blx	r3
 8003c74:	60f8      	str	r0, [r7, #12]
    if (retcode == JPEG_REACHED_SOS) { /* Found SOS, prepare to decompress */
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b01      	cmp	r3, #1
 8003c7a:	d120      	bne.n	8003cbe <jpeg_consume_input+0xba>
      /* Set up default parameters based on header data */
      default_decompress_parms(cinfo);
 8003c7c:	6878      	ldr	r0, [r7, #4]
 8003c7e:	f7ff fe59 	bl	8003934 <default_decompress_parms>
      /* Set global state: ready for start_decompress */
      cinfo->global_state = DSTATE_READY;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	22ca      	movs	r2, #202	; 0xca
 8003c86:	615a      	str	r2, [r3, #20]
    }
    break;
 8003c88:	e019      	b.n	8003cbe <jpeg_consume_input+0xba>
  case DSTATE_READY:
    /* Can't advance past first SOS until start_decompress is called */
    retcode = JPEG_REACHED_SOS;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	60fb      	str	r3, [r7, #12]
    break;
 8003c8e:	e017      	b.n	8003cc0 <jpeg_consume_input+0xbc>
  case DSTATE_SCANNING:
  case DSTATE_RAW_OK:
  case DSTATE_BUFIMAGE:
  case DSTATE_BUFPOST:
  case DSTATE_STOPPING:
    retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	4798      	blx	r3
 8003c9c:	60f8      	str	r0, [r7, #12]
    break;
 8003c9e:	e00f      	b.n	8003cc0 <jpeg_consume_input+0xbc>
  default:
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	2215      	movs	r2, #21
 8003ca6:	615a      	str	r2, [r3, #20]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6952      	ldr	r2, [r2, #20]
 8003cb0:	619a      	str	r2, [r3, #24]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	6878      	ldr	r0, [r7, #4]
 8003cba:	4798      	blx	r3
 8003cbc:	e000      	b.n	8003cc0 <jpeg_consume_input+0xbc>
    break;
 8003cbe:	bf00      	nop
  }
  return retcode;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3710      	adds	r7, #16
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bd80      	pop	{r7, pc}
 8003cca:	bf00      	nop

08003ccc <jpeg_finish_decompress>:
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_finish_decompress (j_decompress_ptr cinfo)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b082      	sub	sp, #8
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	2bcd      	cmp	r3, #205	; 0xcd
 8003cda:	d003      	beq.n	8003ce4 <jpeg_finish_decompress+0x18>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	695b      	ldr	r3, [r3, #20]
  if ((cinfo->global_state == DSTATE_SCANNING ||
 8003ce0:	2bce      	cmp	r3, #206	; 0xce
 8003ce2:	d11d      	bne.n	8003d20 <jpeg_finish_decompress+0x54>
       cinfo->global_state == DSTATE_RAW_OK) && ! cinfo->buffered_image) {
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d119      	bne.n	8003d20 <jpeg_finish_decompress+0x54>
    /* Terminate final pass of non-buffered mode */
    if (cinfo->output_scanline < cinfo->output_height)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003cf6:	429a      	cmp	r2, r3
 8003cf8:	d208      	bcs.n	8003d0c <jpeg_finish_decompress+0x40>
      ERREXIT(cinfo, JERR_TOO_LITTLE_DATA);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	2245      	movs	r2, #69	; 0x45
 8003d00:	615a      	str	r2, [r3, #20]
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6878      	ldr	r0, [r7, #4]
 8003d0a:	4798      	blx	r3
    (*cinfo->master->finish_output_pass) (cinfo);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	4798      	blx	r3
    cinfo->global_state = DSTATE_STOPPING;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	22d2      	movs	r2, #210	; 0xd2
 8003d1c:	615a      	str	r2, [r3, #20]
 8003d1e:	e019      	b.n	8003d54 <jpeg_finish_decompress+0x88>
  } else if (cinfo->global_state == DSTATE_BUFIMAGE) {
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	695b      	ldr	r3, [r3, #20]
 8003d24:	2bcf      	cmp	r3, #207	; 0xcf
 8003d26:	d103      	bne.n	8003d30 <jpeg_finish_decompress+0x64>
    /* Finishing after a buffered-image operation */
    cinfo->global_state = DSTATE_STOPPING;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	22d2      	movs	r2, #210	; 0xd2
 8003d2c:	615a      	str	r2, [r3, #20]
 8003d2e:	e01d      	b.n	8003d6c <jpeg_finish_decompress+0xa0>
  } else if (cinfo->global_state != DSTATE_STOPPING) {
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	2bd2      	cmp	r3, #210	; 0xd2
 8003d36:	d019      	beq.n	8003d6c <jpeg_finish_decompress+0xa0>
    /* STOPPING = repeat call after a suspension, anything else is error */
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	2215      	movs	r2, #21
 8003d3e:	615a      	str	r2, [r3, #20]
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	687a      	ldr	r2, [r7, #4]
 8003d46:	6952      	ldr	r2, [r2, #20]
 8003d48:	619a      	str	r2, [r3, #24]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	4798      	blx	r3
  }
  /* Read until EOI */
  while (! cinfo->inputctl->eoi_reached) {
 8003d54:	e00a      	b.n	8003d6c <jpeg_finish_decompress+0xa0>
    if ((*cinfo->inputctl->consume_input) (cinfo) == JPEG_SUSPENDED)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	4798      	blx	r3
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d101      	bne.n	8003d6c <jpeg_finish_decompress+0xa0>
      return FALSE;		/* Suspend, come back later */
 8003d68:	2300      	movs	r3, #0
 8003d6a:	e00e      	b.n	8003d8a <jpeg_finish_decompress+0xbe>
  while (! cinfo->inputctl->eoi_reached) {
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003d72:	695b      	ldr	r3, [r3, #20]
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d0ee      	beq.n	8003d56 <jpeg_finish_decompress+0x8a>
  }
  /* Do final cleanup */
  (*cinfo->src->term_source) (cinfo);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	699b      	ldr	r3, [r3, #24]
 8003d7c:	699b      	ldr	r3, [r3, #24]
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	4798      	blx	r3
  /* We can use jpeg_abort to release memory and reset global_state */
  jpeg_abort((j_common_ptr) cinfo);
 8003d82:	6878      	ldr	r0, [r7, #4]
 8003d84:	f7ff fcd5 	bl	8003732 <jpeg_abort>
  return TRUE;
 8003d88:	2301      	movs	r3, #1
}
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	3708      	adds	r7, #8
 8003d8e:	46bd      	mov	sp, r7
 8003d90:	bd80      	pop	{r7, pc}

08003d92 <jpeg_start_decompress>:
 * a suspending data source is used.
 */

GLOBAL(boolean)
jpeg_start_decompress (j_decompress_ptr cinfo)
{
 8003d92:	b580      	push	{r7, lr}
 8003d94:	b084      	sub	sp, #16
 8003d96:	af00      	add	r7, sp, #0
 8003d98:	6078      	str	r0, [r7, #4]
  if (cinfo->global_state == DSTATE_READY) {
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	695b      	ldr	r3, [r3, #20]
 8003d9e:	2bca      	cmp	r3, #202	; 0xca
 8003da0:	d10e      	bne.n	8003dc0 <jpeg_start_decompress+0x2e>
    /* First call: initialize master control, select active modules */
    jinit_master_decompress(cinfo);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f009 fea6 	bl	800daf4 <jinit_master_decompress>
    if (cinfo->buffered_image) {
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d004      	beq.n	8003dba <jpeg_start_decompress+0x28>
      /* No more work here; expecting jpeg_start_output next */
      cinfo->global_state = DSTATE_BUFIMAGE;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	22cf      	movs	r2, #207	; 0xcf
 8003db4:	615a      	str	r2, [r3, #20]
      return TRUE;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e063      	b.n	8003e82 <jpeg_start_decompress+0xf0>
    }
    cinfo->global_state = DSTATE_PRELOAD;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	22cb      	movs	r2, #203	; 0xcb
 8003dbe:	615a      	str	r2, [r3, #20]
  }
  if (cinfo->global_state == DSTATE_PRELOAD) {
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	695b      	ldr	r3, [r3, #20]
 8003dc4:	2bcb      	cmp	r3, #203	; 0xcb
 8003dc6:	d146      	bne.n	8003e56 <jpeg_start_decompress+0xc4>
    /* If file has multiple scans, absorb them all into the coef buffer */
    if (cinfo->inputctl->has_multiple_scans) {
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003dce:	691b      	ldr	r3, [r3, #16]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d039      	beq.n	8003e48 <jpeg_start_decompress+0xb6>
#ifdef D_MULTISCAN_FILES_SUPPORTED
      for (;;) {
	int retcode;
	/* Call progress monitor hook if present */
	if (cinfo->progress != NULL)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	689b      	ldr	r3, [r3, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d004      	beq.n	8003de6 <jpeg_start_decompress+0x54>
	  (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	4798      	blx	r3
	/* Absorb some more input */
	retcode = (*cinfo->inputctl->consume_input) (cinfo);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	4798      	blx	r3
 8003df2:	60f8      	str	r0, [r7, #12]
	if (retcode == JPEG_SUSPENDED)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d101      	bne.n	8003dfe <jpeg_start_decompress+0x6c>
	  return FALSE;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	e041      	b.n	8003e82 <jpeg_start_decompress+0xf0>
	if (retcode == JPEG_REACHED_EOI)
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d020      	beq.n	8003e46 <jpeg_start_decompress+0xb4>
	  break;
	/* Advance progress counter if appropriate */
	if (cinfo->progress != NULL &&
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	689b      	ldr	r3, [r3, #8]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d0e3      	beq.n	8003dd4 <jpeg_start_decompress+0x42>
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	2b03      	cmp	r3, #3
 8003e10:	d002      	beq.n	8003e18 <jpeg_start_decompress+0x86>
	    (retcode == JPEG_ROW_COMPLETED || retcode == JPEG_REACHED_SOS)) {
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d1dd      	bne.n	8003dd4 <jpeg_start_decompress+0x42>
	  if (++cinfo->progress->pass_counter >= cinfo->progress->pass_limit) {
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	689b      	ldr	r3, [r3, #8]
 8003e1c:	685a      	ldr	r2, [r3, #4]
 8003e1e:	3201      	adds	r2, #1
 8003e20:	605a      	str	r2, [r3, #4]
 8003e22:	685a      	ldr	r2, [r3, #4]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	689b      	ldr	r3, [r3, #8]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	429a      	cmp	r2, r3
 8003e2c:	dbd2      	blt.n	8003dd4 <jpeg_start_decompress+0x42>
	    /* jdmaster underestimated number of scans; ratchet up one scan */
	    cinfo->progress->pass_limit += (long) cinfo->total_iMCU_rows;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	689a      	ldr	r2, [r3, #8]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8003e3a:	4619      	mov	r1, r3
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	440a      	add	r2, r1
 8003e42:	609a      	str	r2, [r3, #8]
      for (;;) {
 8003e44:	e7c6      	b.n	8003dd4 <jpeg_start_decompress+0x42>
	  break;
 8003e46:	bf00      	nop
      }
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* D_MULTISCAN_FILES_SUPPORTED */
    }
    cinfo->output_scan_number = cinfo->input_scan_number;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
 8003e54:	e011      	b.n	8003e7a <jpeg_start_decompress+0xe8>
  } else if (cinfo->global_state != DSTATE_PRESCAN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	695b      	ldr	r3, [r3, #20]
 8003e5a:	2bcc      	cmp	r3, #204	; 0xcc
 8003e5c:	d00d      	beq.n	8003e7a <jpeg_start_decompress+0xe8>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2215      	movs	r2, #21
 8003e64:	615a      	str	r2, [r3, #20]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	687a      	ldr	r2, [r7, #4]
 8003e6c:	6952      	ldr	r2, [r2, #20]
 8003e6e:	619a      	str	r2, [r3, #24]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	6878      	ldr	r0, [r7, #4]
 8003e78:	4798      	blx	r3
  /* Perform any dummy output passes, and set up for the final pass */
  return output_pass_setup(cinfo);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f805 	bl	8003e8a <output_pass_setup>
 8003e80:	4603      	mov	r3, r0
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3710      	adds	r7, #16
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <output_pass_setup>:
 *       If suspended, returns FALSE and sets global_state = DSTATE_PRESCAN.
 */

LOCAL(boolean)
output_pass_setup (j_decompress_ptr cinfo)
{
 8003e8a:	b590      	push	{r4, r7, lr}
 8003e8c:	b085      	sub	sp, #20
 8003e8e:	af00      	add	r7, sp, #0
 8003e90:	6078      	str	r0, [r7, #4]
  if (cinfo->global_state != DSTATE_PRESCAN) {
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	695b      	ldr	r3, [r3, #20]
 8003e96:	2bcc      	cmp	r3, #204	; 0xcc
 8003e98:	d04f      	beq.n	8003f3a <output_pass_setup+0xb0>
    /* First call: do pass setup */
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	6878      	ldr	r0, [r7, #4]
 8003ea4:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    cinfo->global_state = DSTATE_PRESCAN;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	22cc      	movs	r2, #204	; 0xcc
 8003eb2:	615a      	str	r2, [r3, #20]
  }
  /* Loop over any required dummy passes */
  while (cinfo->master->is_dummy_pass) {
 8003eb4:	e041      	b.n	8003f3a <output_pass_setup+0xb0>
#ifdef QUANT_2PASS_SUPPORTED
    /* Crank through the dummy pass */
    while (cinfo->output_scanline < cinfo->output_height) {
      JDIMENSION last_scanline;
      /* Call progress monitor hook if present */
      if (cinfo->progress != NULL) {
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	689b      	ldr	r3, [r3, #8]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d00f      	beq.n	8003ede <output_pass_setup+0x54>
	cinfo->progress->pass_counter = (long) cinfo->output_scanline;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	689b      	ldr	r3, [r3, #8]
 8003ec8:	605a      	str	r2, [r3, #4]
	cinfo->progress->pass_limit = (long) cinfo->output_height;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	689b      	ldr	r3, [r3, #8]
 8003ed2:	609a      	str	r2, [r3, #8]
	(*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
      }
      /* Process some data */
      last_scanline = cinfo->output_scanline;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ee4:	60fb      	str	r3, [r7, #12]
      (*cinfo->main->process_data) (cinfo, (JSAMPARRAY) NULL,
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8003eec:	685c      	ldr	r4, [r3, #4]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	f103 028c 	add.w	r2, r3, #140	; 0x8c
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	2100      	movs	r1, #0
 8003ef8:	6878      	ldr	r0, [r7, #4]
 8003efa:	47a0      	blx	r4
				    &cinfo->output_scanline, (JDIMENSION) 0);
      if (cinfo->output_scanline == last_scanline)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003f02:	68fa      	ldr	r2, [r7, #12]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d101      	bne.n	8003f0c <output_pass_setup+0x82>
	return FALSE;		/* No progress made, must suspend */
 8003f08:	2300      	movs	r3, #0
 8003f0a:	e026      	b.n	8003f5a <output_pass_setup+0xd0>
    while (cinfo->output_scanline < cinfo->output_height) {
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f16:	429a      	cmp	r2, r3
 8003f18:	d3cd      	bcc.n	8003eb6 <output_pass_setup+0x2c>
    }
    /* Finish up dummy pass, and set up for another one */
    (*cinfo->master->finish_output_pass) (cinfo);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	4798      	blx	r3
    (*cinfo->master->prepare_for_output_pass) (cinfo);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	6878      	ldr	r0, [r7, #4]
 8003f30:	4798      	blx	r3
    cinfo->output_scanline = 0;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  while (cinfo->master->is_dummy_pass) {
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d1e2      	bne.n	8003f0c <output_pass_setup+0x82>
#endif /* QUANT_2PASS_SUPPORTED */
  }
  /* Ready for application to drive output pass through
   * jpeg_read_scanlines or jpeg_read_raw_data.
   */
  cinfo->global_state = cinfo->raw_data_out ? DSTATE_RAW_OK : DSTATE_SCANNING;
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <output_pass_setup+0xc8>
 8003f4e:	22ce      	movs	r2, #206	; 0xce
 8003f50:	e000      	b.n	8003f54 <output_pass_setup+0xca>
 8003f52:	22cd      	movs	r2, #205	; 0xcd
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	615a      	str	r2, [r3, #20]
  return TRUE;
 8003f58:	2301      	movs	r3, #1
}
 8003f5a:	4618      	mov	r0, r3
 8003f5c:	3714      	adds	r7, #20
 8003f5e:	46bd      	mov	sp, r7
 8003f60:	bd90      	pop	{r4, r7, pc}

08003f62 <jpeg_read_scanlines>:
 */

GLOBAL(JDIMENSION)
jpeg_read_scanlines (j_decompress_ptr cinfo, JSAMPARRAY scanlines,
		     JDIMENSION max_lines)
{
 8003f62:	b590      	push	{r4, r7, lr}
 8003f64:	b087      	sub	sp, #28
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	60f8      	str	r0, [r7, #12]
 8003f6a:	60b9      	str	r1, [r7, #8]
 8003f6c:	607a      	str	r2, [r7, #4]
  JDIMENSION row_ctr;

  if (cinfo->global_state != DSTATE_SCANNING)
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	2bcd      	cmp	r3, #205	; 0xcd
 8003f74:	d00d      	beq.n	8003f92 <jpeg_read_scanlines+0x30>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	2215      	movs	r2, #21
 8003f7c:	615a      	str	r2, [r3, #20]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	6952      	ldr	r2, [r2, #20]
 8003f86:	619a      	str	r2, [r3, #24]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68f8      	ldr	r0, [r7, #12]
 8003f90:	4798      	blx	r3
  if (cinfo->output_scanline >= cinfo->output_height) {
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f9c:	429a      	cmp	r2, r3
 8003f9e:	d30c      	bcc.n	8003fba <jpeg_read_scanlines+0x58>
    WARNMS(cinfo, JWRN_TOO_MUCH_DATA);
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	227e      	movs	r2, #126	; 0x7e
 8003fa6:	615a      	str	r2, [r3, #20]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f04f 31ff 	mov.w	r1, #4294967295
 8003fb2:	68f8      	ldr	r0, [r7, #12]
 8003fb4:	4798      	blx	r3
    return 0;
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	e028      	b.n	800400c <jpeg_read_scanlines+0xaa>
  }

  /* Call progress monitor hook if present */
  if (cinfo->progress != NULL) {
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	689b      	ldr	r3, [r3, #8]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d00f      	beq.n	8003fe2 <jpeg_read_scanlines+0x80>
    cinfo->progress->pass_counter = (long) cinfo->output_scanline;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	689b      	ldr	r3, [r3, #8]
 8003fcc:	605a      	str	r2, [r3, #4]
    cinfo->progress->pass_limit = (long) cinfo->output_height;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	609a      	str	r2, [r3, #8]
    (*cinfo->progress->progress_monitor) ((j_common_ptr) cinfo);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	689b      	ldr	r3, [r3, #8]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	68f8      	ldr	r0, [r7, #12]
 8003fe0:	4798      	blx	r3
  }

  /* Process some data */
  row_ctr = 0;
 8003fe2:	2300      	movs	r3, #0
 8003fe4:	617b      	str	r3, [r7, #20]
  (*cinfo->main->process_data) (cinfo, scanlines, &row_ctr, max_lines);
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 8003fec:	685c      	ldr	r4, [r3, #4]
 8003fee:	f107 0214 	add.w	r2, r7, #20
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	68b9      	ldr	r1, [r7, #8]
 8003ff6:	68f8      	ldr	r0, [r7, #12]
 8003ff8:	47a0      	blx	r4
  cinfo->output_scanline += row_ctr;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8004000:	697b      	ldr	r3, [r7, #20]
 8004002:	441a      	add	r2, r3
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  return row_ctr;
 800400a:	697b      	ldr	r3, [r7, #20]
}
 800400c:	4618      	mov	r0, r3
 800400e:	371c      	adds	r7, #28
 8004010:	46bd      	mov	sp, r7
 8004012:	bd90      	pop	{r4, r7, pc}

08004014 <get_byte>:


LOCAL(int)
get_byte (j_decompress_ptr cinfo)
/* Read next input byte; we do not support suspension in this module. */
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  struct jpeg_source_mgr * src = cinfo->src;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	699b      	ldr	r3, [r3, #24]
 8004020:	60fb      	str	r3, [r7, #12]

  if (src->bytes_in_buffer == 0)
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	2b00      	cmp	r3, #0
 8004028:	d10f      	bne.n	800404a <get_byte+0x36>
    if (! (*src->fill_input_buffer) (cinfo))
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	68db      	ldr	r3, [r3, #12]
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	4798      	blx	r3
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d108      	bne.n	800404a <get_byte+0x36>
      ERREXIT(cinfo, JERR_CANT_SUSPEND);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	2219      	movs	r2, #25
 800403e:	615a      	str	r2, [r3, #20]
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	4798      	blx	r3
  src->bytes_in_buffer--;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	1e5a      	subs	r2, r3, #1
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	605a      	str	r2, [r3, #4]
  return GETJOCTET(*src->next_input_byte++);
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	1c59      	adds	r1, r3, #1
 800405a:	68fa      	ldr	r2, [r7, #12]
 800405c:	6011      	str	r1, [r2, #0]
 800405e:	781b      	ldrb	r3, [r3, #0]
}
 8004060:	4618      	mov	r0, r3
 8004062:	3710      	adds	r7, #16
 8004064:	46bd      	mov	sp, r7
 8004066:	bd80      	pop	{r7, pc}

08004068 <arith_decode>:
 * derived from Markus Kuhn's JBIG implementation.
 */

LOCAL(int)
arith_decode (j_decompress_ptr cinfo, unsigned char *st)
{
 8004068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800406c:	b083      	sub	sp, #12
 800406e:	af00      	add	r7, sp, #0
 8004070:	6078      	str	r0, [r7, #4]
 8004072:	6039      	str	r1, [r7, #0]
  register arith_entropy_ptr e = (arith_entropy_ptr) cinfo->entropy;
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f8d3 41d0 	ldr.w	r4, [r3, #464]	; 0x1d0
  register unsigned char nl, nm;
  register INT32 qe, temp;
  register int sv, data;

  /* Renormalization & data input per section D.2.6 */
  while (e->a < 0x8000L) {
 800407a:	e036      	b.n	80040ea <arith_decode+0x82>
    if (--e->ct < 0) {
 800407c:	6923      	ldr	r3, [r4, #16]
 800407e:	3b01      	subs	r3, #1
 8004080:	6123      	str	r3, [r4, #16]
 8004082:	6923      	ldr	r3, [r4, #16]
 8004084:	2b00      	cmp	r3, #0
 8004086:	da2d      	bge.n	80040e4 <arith_decode+0x7c>
      /* Need to fetch next data byte */
      if (cinfo->unread_marker)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <arith_decode+0x2e>
	data = 0;		/* stuff zero data */
 8004092:	2500      	movs	r5, #0
 8004094:	e013      	b.n	80040be <arith_decode+0x56>
      else {
	data = get_byte(cinfo);	/* read next input byte */
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f7ff ffbc 	bl	8004014 <get_byte>
 800409c:	4605      	mov	r5, r0
	if (data == 0xFF) {	/* zero stuff or marker code */
 800409e:	2dff      	cmp	r5, #255	; 0xff
 80040a0:	d10d      	bne.n	80040be <arith_decode+0x56>
	  do data = get_byte(cinfo);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f7ff ffb6 	bl	8004014 <get_byte>
 80040a8:	4605      	mov	r5, r0
	  while (data == 0xFF);	/* swallow extra 0xFF bytes */
 80040aa:	2dff      	cmp	r5, #255	; 0xff
 80040ac:	d0f9      	beq.n	80040a2 <arith_decode+0x3a>
	  if (data == 0)
 80040ae:	2d00      	cmp	r5, #0
 80040b0:	d101      	bne.n	80040b6 <arith_decode+0x4e>
	    data = 0xFF;	/* discard stuffed zero byte */
 80040b2:	25ff      	movs	r5, #255	; 0xff
 80040b4:	e003      	b.n	80040be <arith_decode+0x56>
	     * a marker while processing the compressed data
	     * segment is legal in arithmetic coding.
	     * The convention is to supply zero data
	     * then until decoding is complete.
	     */
	    cinfo->unread_marker = data;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f8c3 51b4 	str.w	r5, [r3, #436]	; 0x1b4
	    data = 0;
 80040bc:	2500      	movs	r5, #0
	  }
	}
      }
      e->c = (e->c << 8) | data; /* insert data into C register */
 80040be:	68a3      	ldr	r3, [r4, #8]
 80040c0:	021b      	lsls	r3, r3, #8
 80040c2:	432b      	orrs	r3, r5
 80040c4:	60a3      	str	r3, [r4, #8]
      if ((e->ct += 8) < 0)	 /* update bit shift counter */
 80040c6:	6923      	ldr	r3, [r4, #16]
 80040c8:	3308      	adds	r3, #8
 80040ca:	6123      	str	r3, [r4, #16]
 80040cc:	6923      	ldr	r3, [r4, #16]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	da08      	bge.n	80040e4 <arith_decode+0x7c>
	/* Need more initial bytes */
	if (++e->ct == 0)
 80040d2:	6923      	ldr	r3, [r4, #16]
 80040d4:	3301      	adds	r3, #1
 80040d6:	6123      	str	r3, [r4, #16]
 80040d8:	6923      	ldr	r3, [r4, #16]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d102      	bne.n	80040e4 <arith_decode+0x7c>
	  /* Got 2 initial bytes -> re-init A and exit loop */
	  e->a = 0x8000L; /* => e->a = 0x10000L after loop exit */
 80040de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040e2:	60e3      	str	r3, [r4, #12]
    }
    e->a <<= 1;
 80040e4:	68e3      	ldr	r3, [r4, #12]
 80040e6:	005b      	lsls	r3, r3, #1
 80040e8:	60e3      	str	r3, [r4, #12]
  while (e->a < 0x8000L) {
 80040ea:	68e3      	ldr	r3, [r4, #12]
 80040ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80040f0:	dbc4      	blt.n	800407c <arith_decode+0x14>
  }

  /* Fetch values from our compact representation of Table D.3(D.2):
   * Qe values and probability estimation state machine
   */
  sv = *st;
 80040f2:	683b      	ldr	r3, [r7, #0]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	461e      	mov	r6, r3
  qe = jpeg_aritab[sv & 0x7F];	/* => Qe_Value */
 80040f8:	f006 037f 	and.w	r3, r6, #127	; 0x7f
 80040fc:	4a2c      	ldr	r2, [pc, #176]	; (80041b0 <arith_decode+0x148>)
 80040fe:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
  nl = qe & 0xFF; qe >>= 8;	/* Next_Index_LPS + Switch_MPS */
 8004102:	fa5f f985 	uxtb.w	r9, r5
 8004106:	122d      	asrs	r5, r5, #8
  nm = qe & 0xFF; qe >>= 8;	/* Next_Index_MPS */
 8004108:	fa5f f885 	uxtb.w	r8, r5
 800410c:	122d      	asrs	r5, r5, #8

  /* Decode & estimation procedures per sections D.2.4 & D.2.5 */
  temp = e->a - qe;
 800410e:	68e3      	ldr	r3, [r4, #12]
 8004110:	1b5a      	subs	r2, r3, r5
  e->a = temp;
 8004112:	60e2      	str	r2, [r4, #12]
  temp <<= e->ct;
 8004114:	6923      	ldr	r3, [r4, #16]
 8004116:	409a      	lsls	r2, r3
  if (e->c >= temp) {
 8004118:	68a3      	ldr	r3, [r4, #8]
 800411a:	4611      	mov	r1, r2
 800411c:	4299      	cmp	r1, r3
 800411e:	dc21      	bgt.n	8004164 <arith_decode+0xfc>
    e->c -= temp;
 8004120:	68a3      	ldr	r3, [r4, #8]
 8004122:	1a9b      	subs	r3, r3, r2
 8004124:	60a3      	str	r3, [r4, #8]
    /* Conditional LPS (less probable symbol) exchange */
    if (e->a < qe) {
 8004126:	68e3      	ldr	r3, [r4, #12]
 8004128:	429d      	cmp	r5, r3
 800412a:	dd0c      	ble.n	8004146 <arith_decode+0xde>
      e->a = qe;
 800412c:	60e5      	str	r5, [r4, #12]
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800412e:	b273      	sxtb	r3, r6
 8004130:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004134:	b25a      	sxtb	r2, r3
 8004136:	fa4f f388 	sxtb.w	r3, r8
 800413a:	4053      	eors	r3, r2
 800413c:	b25b      	sxtb	r3, r3
 800413e:	b2da      	uxtb	r2, r3
 8004140:	683b      	ldr	r3, [r7, #0]
 8004142:	701a      	strb	r2, [r3, #0]
 8004144:	e02e      	b.n	80041a4 <arith_decode+0x13c>
    } else {
      e->a = qe;
 8004146:	60e5      	str	r5, [r4, #12]
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8004148:	b273      	sxtb	r3, r6
 800414a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800414e:	b25a      	sxtb	r2, r3
 8004150:	fa4f f389 	sxtb.w	r3, r9
 8004154:	4053      	eors	r3, r2
 8004156:	b25b      	sxtb	r3, r3
 8004158:	b2da      	uxtb	r2, r3
 800415a:	683b      	ldr	r3, [r7, #0]
 800415c:	701a      	strb	r2, [r3, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 800415e:	f086 0680 	eor.w	r6, r6, #128	; 0x80
 8004162:	e01f      	b.n	80041a4 <arith_decode+0x13c>
    }
  } else if (e->a < 0x8000L) {
 8004164:	68e3      	ldr	r3, [r4, #12]
 8004166:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800416a:	da1b      	bge.n	80041a4 <arith_decode+0x13c>
    /* Conditional MPS (more probable symbol) exchange */
    if (e->a < qe) {
 800416c:	68e3      	ldr	r3, [r4, #12]
 800416e:	429d      	cmp	r5, r3
 8004170:	dd0d      	ble.n	800418e <arith_decode+0x126>
      *st = (sv & 0x80) ^ nl;	/* Estimate_after_LPS */
 8004172:	b273      	sxtb	r3, r6
 8004174:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004178:	b25a      	sxtb	r2, r3
 800417a:	fa4f f389 	sxtb.w	r3, r9
 800417e:	4053      	eors	r3, r2
 8004180:	b25b      	sxtb	r3, r3
 8004182:	b2da      	uxtb	r2, r3
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	701a      	strb	r2, [r3, #0]
      sv ^= 0x80;		/* Exchange LPS/MPS */
 8004188:	f086 0680 	eor.w	r6, r6, #128	; 0x80
 800418c:	e00a      	b.n	80041a4 <arith_decode+0x13c>
    } else {
      *st = (sv & 0x80) ^ nm;	/* Estimate_after_MPS */
 800418e:	b273      	sxtb	r3, r6
 8004190:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8004194:	b25a      	sxtb	r2, r3
 8004196:	fa4f f388 	sxtb.w	r3, r8
 800419a:	4053      	eors	r3, r2
 800419c:	b25b      	sxtb	r3, r3
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	683b      	ldr	r3, [r7, #0]
 80041a2:	701a      	strb	r2, [r3, #0]
    }
  }

  return sv >> 7;
 80041a4:	11f3      	asrs	r3, r6, #7
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	370c      	adds	r7, #12
 80041aa:	46bd      	mov	sp, r7
 80041ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80041b0:	08020f6c 	.word	0x08020f6c

080041b4 <process_restart>:
 * Check for a restart marker & resynchronize decoder.
 */

LOCAL(void)
process_restart (j_decompress_ptr cinfo)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b086      	sub	sp, #24
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80041c2:	613b      	str	r3, [r7, #16]
  int ci;
  jpeg_component_info * compptr;

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	4798      	blx	r3
 80041d0:	4603      	mov	r3, r0
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d108      	bne.n	80041e8 <process_restart+0x34>
    ERREXIT(cinfo, JERR_CANT_SUSPEND);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	2219      	movs	r2, #25
 80041dc:	615a      	str	r2, [r3, #20]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	4798      	blx	r3

  /* Re-initialize statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80041e8:	2300      	movs	r3, #0
 80041ea:	617b      	str	r3, [r7, #20]
 80041ec:	e051      	b.n	8004292 <process_restart+0xde>
    compptr = cinfo->cur_comp_info[ci];
 80041ee:	687a      	ldr	r2, [r7, #4]
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	3354      	adds	r3, #84	; 0x54
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004202:	2b00      	cmp	r3, #0
 8004204:	d009      	beq.n	800421a <process_restart+0x66>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800420c:	2b00      	cmp	r3, #0
 800420e:	d11d      	bne.n	800424c <process_restart+0x98>
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004216:	2b00      	cmp	r3, #0
 8004218:	d118      	bne.n	800424c <process_restart+0x98>
      MEMZERO(entropy->dc_stats[compptr->dc_tbl_no], DC_STAT_BINS);
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	695a      	ldr	r2, [r3, #20]
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	320e      	adds	r2, #14
 8004222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004226:	2240      	movs	r2, #64	; 0x40
 8004228:	2100      	movs	r1, #0
 800422a:	4618      	mov	r0, r3
 800422c:	f01b f8d4 	bl	801f3d8 <memset>
      /* Reset DC predictions to 0 */
      entropy->last_dc_val[ci] = 0;
 8004230:	693a      	ldr	r2, [r7, #16]
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	3304      	adds	r3, #4
 8004236:	009b      	lsls	r3, r3, #2
 8004238:	4413      	add	r3, r2
 800423a:	2200      	movs	r2, #0
 800423c:	605a      	str	r2, [r3, #4]
      entropy->dc_context[ci] = 0;
 800423e:	693a      	ldr	r2, [r7, #16]
 8004240:	697b      	ldr	r3, [r7, #20]
 8004242:	3308      	adds	r3, #8
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	4413      	add	r3, r2
 8004248:	2200      	movs	r2, #0
 800424a:	605a      	str	r2, [r3, #4]
    }
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d104      	bne.n	8004260 <process_restart+0xac>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d109      	bne.n	8004274 <process_restart+0xc0>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8004266:	2b00      	cmp	r3, #0
 8004268:	d010      	beq.n	800428c <process_restart+0xd8>
	(cinfo->progressive_mode && cinfo->Ss)) {
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004270:	2b00      	cmp	r3, #0
 8004272:	d00b      	beq.n	800428c <process_restart+0xd8>
      MEMZERO(entropy->ac_stats[compptr->ac_tbl_no], AC_STAT_BINS);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	699a      	ldr	r2, [r3, #24]
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	321e      	adds	r2, #30
 800427c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004280:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004284:	2100      	movs	r1, #0
 8004286:	4618      	mov	r0, r3
 8004288:	f01b f8a6 	bl	801f3d8 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	3301      	adds	r3, #1
 8004290:	617b      	str	r3, [r7, #20]
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	429a      	cmp	r2, r3
 800429c:	dba7      	blt.n	80041ee <process_restart+0x3a>
    }
  }

  /* Reset arithmetic decoding variables */
  entropy->c = 0;
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	2200      	movs	r2, #0
 80042a2:	609a      	str	r2, [r3, #8]
  entropy->a = 0;
 80042a4:	693b      	ldr	r3, [r7, #16]
 80042a6:	2200      	movs	r2, #0
 80042a8:	60da      	str	r2, [r3, #12]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	f06f 020f 	mvn.w	r2, #15
 80042b0:	611a      	str	r2, [r3, #16]

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	635a      	str	r2, [r3, #52]	; 0x34
}
 80042bc:	bf00      	nop
 80042be:	3718      	adds	r7, #24
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b08c      	sub	sp, #48	; 0x30
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
 80042cc:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80042d4:	61fb      	str	r3, [r7, #28]
  unsigned char *st;
  int blkn, ci, tbl, sign;
  int v, m;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d00b      	beq.n	80042f8 <decode_mcu_DC_first+0x34>
    if (entropy->restarts_to_go == 0)
 80042e0:	69fb      	ldr	r3, [r7, #28]
 80042e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <decode_mcu_DC_first+0x2a>
      process_restart(cinfo);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f7ff ff63 	bl	80041b4 <process_restart>
    entropy->restarts_to_go--;
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f2:	1e5a      	subs	r2, r3, #1
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	691b      	ldr	r3, [r3, #16]
 80042fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004300:	d101      	bne.n	8004306 <decode_mcu_DC_first+0x42>
 8004302:	2301      	movs	r3, #1
 8004304:	e0ec      	b.n	80044e0 <decode_mcu_DC_first+0x21c>

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8004306:	2300      	movs	r3, #0
 8004308:	62bb      	str	r3, [r7, #40]	; 0x28
 800430a:	e0e1      	b.n	80044d0 <decode_mcu_DC_first+0x20c>
    block = MCU_data[blkn];
 800430c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430e:	009b      	lsls	r3, r3, #2
 8004310:	683a      	ldr	r2, [r7, #0]
 8004312:	4413      	add	r3, r2
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	61bb      	str	r3, [r7, #24]
    ci = cinfo->MCU_membership[blkn];
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800431c:	325c      	adds	r2, #92	; 0x5c
 800431e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004322:	617b      	str	r3, [r7, #20]
    tbl = cinfo->cur_comp_info[ci]->dc_tbl_no;
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3354      	adds	r3, #84	; 0x54
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	685b      	ldr	r3, [r3, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	613b      	str	r3, [r7, #16]

    /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */

    /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 8004334:	69fb      	ldr	r3, [r7, #28]
 8004336:	693a      	ldr	r2, [r7, #16]
 8004338:	320e      	adds	r2, #14
 800433a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800433e:	69f9      	ldr	r1, [r7, #28]
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	3308      	adds	r3, #8
 8004344:	009b      	lsls	r3, r3, #2
 8004346:	440b      	add	r3, r1
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	4413      	add	r3, r2
 800434c:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Figure F.19: Decode_DC_DIFF */
    if (arith_decode(cinfo, st) == 0)
 800434e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004350:	6878      	ldr	r0, [r7, #4]
 8004352:	f7ff fe89 	bl	8004068 <arith_decode>
 8004356:	4603      	mov	r3, r0
 8004358:	2b00      	cmp	r3, #0
 800435a:	d107      	bne.n	800436c <decode_mcu_DC_first+0xa8>
      entropy->dc_context[ci] = 0;
 800435c:	69fa      	ldr	r2, [r7, #28]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	3308      	adds	r3, #8
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4413      	add	r3, r2
 8004366:	2200      	movs	r2, #0
 8004368:	605a      	str	r2, [r3, #4]
 800436a:	e0a0      	b.n	80044ae <decode_mcu_DC_first+0x1ea>
    else {
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, st + 1);
 800436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800436e:	3301      	adds	r3, #1
 8004370:	4619      	mov	r1, r3
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7ff fe78 	bl	8004068 <arith_decode>
 8004378:	60f8      	str	r0, [r7, #12]
      st += 2; st += sign;
 800437a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800437c:	3302      	adds	r3, #2
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004384:	4413      	add	r3, r2
 8004386:	62fb      	str	r3, [r7, #44]	; 0x2c
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 8004388:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fe6c 	bl	8004068 <arith_decode>
 8004390:	6238      	str	r0, [r7, #32]
 8004392:	6a3b      	ldr	r3, [r7, #32]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d029      	beq.n	80043ec <decode_mcu_DC_first+0x128>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8004398:	69fb      	ldr	r3, [r7, #28]
 800439a:	693a      	ldr	r2, [r7, #16]
 800439c:	320e      	adds	r2, #14
 800439e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043a2:	3314      	adds	r3, #20
 80043a4:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (arith_decode(cinfo, st)) {
 80043a6:	e01a      	b.n	80043de <decode_mcu_DC_first+0x11a>
	  if ((m <<= 1) == 0x8000) {
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	005b      	lsls	r3, r3, #1
 80043ac:	623b      	str	r3, [r7, #32]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b4:	d110      	bne.n	80043d8 <decode_mcu_DC_first+0x114>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	2275      	movs	r2, #117	; 0x75
 80043bc:	615a      	str	r2, [r3, #20]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f04f 31ff 	mov.w	r1, #4294967295
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 80043cc:	69fb      	ldr	r3, [r7, #28]
 80043ce:	f04f 32ff 	mov.w	r2, #4294967295
 80043d2:	611a      	str	r2, [r3, #16]
	    return TRUE;
 80043d4:	2301      	movs	r3, #1
 80043d6:	e083      	b.n	80044e0 <decode_mcu_DC_first+0x21c>
	  }
	  st += 1;
 80043d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043da:	3301      	adds	r3, #1
 80043dc:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (arith_decode(cinfo, st)) {
 80043de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043e0:	6878      	ldr	r0, [r7, #4]
 80043e2:	f7ff fe41 	bl	8004068 <arith_decode>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d1dd      	bne.n	80043a8 <decode_mcu_DC_first+0xe4>
	}
      }
      /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	4413      	add	r3, r2
 80043f2:	33e8      	adds	r3, #232	; 0xe8
 80043f4:	781b      	ldrb	r3, [r3, #0]
 80043f6:	461a      	mov	r2, r3
 80043f8:	2301      	movs	r3, #1
 80043fa:	4093      	lsls	r3, r2
 80043fc:	105b      	asrs	r3, r3, #1
 80043fe:	6a3a      	ldr	r2, [r7, #32]
 8004400:	429a      	cmp	r2, r3
 8004402:	da07      	bge.n	8004414 <decode_mcu_DC_first+0x150>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8004404:	69fa      	ldr	r2, [r7, #28]
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	3308      	adds	r3, #8
 800440a:	009b      	lsls	r3, r3, #2
 800440c:	4413      	add	r3, r2
 800440e:	2200      	movs	r2, #0
 8004410:	605a      	str	r2, [r3, #4]
 8004412:	e01e      	b.n	8004452 <decode_mcu_DC_first+0x18e>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8004414:	687a      	ldr	r2, [r7, #4]
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4413      	add	r3, r2
 800441a:	33f8      	adds	r3, #248	; 0xf8
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	461a      	mov	r2, r3
 8004420:	2301      	movs	r3, #1
 8004422:	4093      	lsls	r3, r2
 8004424:	105b      	asrs	r3, r3, #1
 8004426:	6a3a      	ldr	r2, [r7, #32]
 8004428:	429a      	cmp	r2, r3
 800442a:	dd09      	ble.n	8004440 <decode_mcu_DC_first+0x17c>
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	3303      	adds	r3, #3
 8004430:	009a      	lsls	r2, r3, #2
 8004432:	69f9      	ldr	r1, [r7, #28]
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	3308      	adds	r3, #8
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	440b      	add	r3, r1
 800443c:	605a      	str	r2, [r3, #4]
 800443e:	e008      	b.n	8004452 <decode_mcu_DC_first+0x18e>
      else
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	3301      	adds	r3, #1
 8004444:	009a      	lsls	r2, r3, #2
 8004446:	69f9      	ldr	r1, [r7, #28]
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	3308      	adds	r3, #8
 800444c:	009b      	lsls	r3, r3, #2
 800444e:	440b      	add	r3, r1
 8004450:	605a      	str	r2, [r3, #4]
      v = m;
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 8004456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004458:	330e      	adds	r3, #14
 800445a:	62fb      	str	r3, [r7, #44]	; 0x2c
      while (m >>= 1)
 800445c:	e00a      	b.n	8004474 <decode_mcu_DC_first+0x1b0>
	if (arith_decode(cinfo, st)) v |= m;
 800445e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	f7ff fe01 	bl	8004068 <arith_decode>
 8004466:	4603      	mov	r3, r0
 8004468:	2b00      	cmp	r3, #0
 800446a:	d003      	beq.n	8004474 <decode_mcu_DC_first+0x1b0>
 800446c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800446e:	6a3b      	ldr	r3, [r7, #32]
 8004470:	4313      	orrs	r3, r2
 8004472:	627b      	str	r3, [r7, #36]	; 0x24
      while (m >>= 1)
 8004474:	6a3b      	ldr	r3, [r7, #32]
 8004476:	105b      	asrs	r3, r3, #1
 8004478:	623b      	str	r3, [r7, #32]
 800447a:	6a3b      	ldr	r3, [r7, #32]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1ee      	bne.n	800445e <decode_mcu_DC_first+0x19a>
      v += 1; if (sign) v = -v;
 8004480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004482:	3301      	adds	r3, #1
 8004484:	627b      	str	r3, [r7, #36]	; 0x24
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	2b00      	cmp	r3, #0
 800448a:	d002      	beq.n	8004492 <decode_mcu_DC_first+0x1ce>
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	425b      	negs	r3, r3
 8004490:	627b      	str	r3, [r7, #36]	; 0x24
      entropy->last_dc_val[ci] += v;
 8004492:	69fa      	ldr	r2, [r7, #28]
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	3304      	adds	r3, #4
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4413      	add	r3, r2
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044a0:	441a      	add	r2, r3
 80044a2:	69f9      	ldr	r1, [r7, #28]
 80044a4:	697b      	ldr	r3, [r7, #20]
 80044a6:	3304      	adds	r3, #4
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	440b      	add	r3, r1
 80044ac:	605a      	str	r2, [r3, #4]
    }

    /* Scale and output the DC coefficient (assumes jpeg_natural_order[0]=0) */
    (*block)[0] = (JCOEF) (entropy->last_dc_val[ci] << cinfo->Al);
 80044ae:	69fa      	ldr	r2, [r7, #28]
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	3304      	adds	r3, #4
 80044b4:	009b      	lsls	r3, r3, #2
 80044b6:	4413      	add	r3, r2
 80044b8:	685a      	ldr	r2, [r3, #4]
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	b21a      	sxth	r2, r3
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80044ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044cc:	3301      	adds	r3, #1
 80044ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80044d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044d8:	429a      	cmp	r2, r3
 80044da:	f6ff af17 	blt.w	800430c <decode_mcu_DC_first+0x48>
  }

  return TRUE;
 80044de:	2301      	movs	r3, #1
}
 80044e0:	4618      	mov	r0, r3
 80044e2:	3730      	adds	r7, #48	; 0x30
 80044e4:	46bd      	mov	sp, r7
 80044e6:	bd80      	pop	{r7, pc}

080044e8 <decode_mcu_AC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 80044e8:	b580      	push	{r7, lr}
 80044ea:	b08c      	sub	sp, #48	; 0x30
 80044ec:	af00      	add	r7, sp, #0
 80044ee:	6078      	str	r0, [r7, #4]
 80044f0:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80044f8:	61fb      	str	r3, [r7, #28]
  int tbl, sign, k;
  int v, m;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004500:	2b00      	cmp	r3, #0
 8004502:	d00b      	beq.n	800451c <decode_mcu_AC_first+0x34>
    if (entropy->restarts_to_go == 0)
 8004504:	69fb      	ldr	r3, [r7, #28]
 8004506:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004508:	2b00      	cmp	r3, #0
 800450a:	d102      	bne.n	8004512 <decode_mcu_AC_first+0x2a>
      process_restart(cinfo);
 800450c:	6878      	ldr	r0, [r7, #4]
 800450e:	f7ff fe51 	bl	80041b4 <process_restart>
    entropy->restarts_to_go--;
 8004512:	69fb      	ldr	r3, [r7, #28]
 8004514:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004516:	1e5a      	subs	r2, r3, #1
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 800451c:	69fb      	ldr	r3, [r7, #28]
 800451e:	691b      	ldr	r3, [r3, #16]
 8004520:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004524:	d101      	bne.n	800452a <decode_mcu_AC_first+0x42>
 8004526:	2301      	movs	r3, #1
 8004528:	e0da      	b.n	80046e0 <decode_mcu_AC_first+0x1f8>

  natural_order = cinfo->natural_order;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8004530:	61bb      	str	r3, [r7, #24]

  /* There is always only one block per MCU */
  block = MCU_data[0];
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	617b      	str	r3, [r7, #20]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800453e:	699b      	ldr	r3, [r3, #24]
 8004540:	613b      	str	r3, [r7, #16]

  /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */

  /* Figure F.20: Decode_AC_coefficients */
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004548:	62bb      	str	r3, [r7, #40]	; 0x28
 800454a:	e0bf      	b.n	80046cc <decode_mcu_AC_first+0x1e4>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 800454c:	69fb      	ldr	r3, [r7, #28]
 800454e:	693a      	ldr	r2, [r7, #16]
 8004550:	321e      	adds	r2, #30
 8004552:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004558:	1e5a      	subs	r2, r3, #1
 800455a:	4613      	mov	r3, r2
 800455c:	005b      	lsls	r3, r3, #1
 800455e:	4413      	add	r3, r2
 8004560:	440b      	add	r3, r1
 8004562:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 8004564:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fd7e 	bl	8004068 <arith_decode>
 800456c:	4603      	mov	r3, r0
 800456e:	2b00      	cmp	r3, #0
 8004570:	f040 80b4 	bne.w	80046dc <decode_mcu_AC_first+0x1f4>
    while (arith_decode(cinfo, st + 1) == 0) {
 8004574:	e01c      	b.n	80045b0 <decode_mcu_AC_first+0xc8>
      st += 3; k++;
 8004576:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004578:	3303      	adds	r3, #3
 800457a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800457c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457e:	3301      	adds	r3, #1
 8004580:	62bb      	str	r3, [r7, #40]	; 0x28
      if (k > cinfo->Se) {
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004588:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800458a:	429a      	cmp	r2, r3
 800458c:	dd10      	ble.n	80045b0 <decode_mcu_AC_first+0xc8>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	2275      	movs	r2, #117	; 0x75
 8004594:	615a      	str	r2, [r3, #20]
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	f04f 31ff 	mov.w	r1, #4294967295
 80045a0:	6878      	ldr	r0, [r7, #4]
 80045a2:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f04f 32ff 	mov.w	r2, #4294967295
 80045aa:	611a      	str	r2, [r3, #16]
	return TRUE;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e097      	b.n	80046e0 <decode_mcu_AC_first+0x1f8>
    while (arith_decode(cinfo, st + 1) == 0) {
 80045b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b2:	3301      	adds	r3, #1
 80045b4:	4619      	mov	r1, r3
 80045b6:	6878      	ldr	r0, [r7, #4]
 80045b8:	f7ff fd56 	bl	8004068 <arith_decode>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d0d9      	beq.n	8004576 <decode_mcu_AC_first+0x8e>
      }
    }
    /* Figure F.21: Decoding nonzero value v */
    /* Figure F.22: Decoding the sign of v */
    sign = arith_decode(cinfo, entropy->fixed_bin);
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	33b8      	adds	r3, #184	; 0xb8
 80045c6:	4619      	mov	r1, r3
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f7ff fd4d 	bl	8004068 <arith_decode>
 80045ce:	60f8      	str	r0, [r7, #12]
    st += 2;
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	3302      	adds	r3, #2
 80045d4:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Figure F.23: Decoding the magnitude category of v */
    if ((m = arith_decode(cinfo, st)) != 0) {
 80045d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f7ff fd45 	bl	8004068 <arith_decode>
 80045de:	6238      	str	r0, [r7, #32]
 80045e0:	6a3b      	ldr	r3, [r7, #32]
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d040      	beq.n	8004668 <decode_mcu_AC_first+0x180>
      if (arith_decode(cinfo, st)) {
 80045e6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80045e8:	6878      	ldr	r0, [r7, #4]
 80045ea:	f7ff fd3d 	bl	8004068 <arith_decode>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d039      	beq.n	8004668 <decode_mcu_AC_first+0x180>
	m <<= 1;
 80045f4:	6a3b      	ldr	r3, [r7, #32]
 80045f6:	005b      	lsls	r3, r3, #1
 80045f8:	623b      	str	r3, [r7, #32]
	st = entropy->ac_stats[tbl] +
 80045fa:	69fb      	ldr	r3, [r7, #28]
 80045fc:	693a      	ldr	r2, [r7, #16]
 80045fe:	321e      	adds	r2, #30
 8004600:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	     (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8004604:	6879      	ldr	r1, [r7, #4]
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	440b      	add	r3, r1
 800460a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800460e:	781b      	ldrb	r3, [r3, #0]
 8004610:	4619      	mov	r1, r3
 8004612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004614:	428b      	cmp	r3, r1
 8004616:	dc01      	bgt.n	800461c <decode_mcu_AC_first+0x134>
 8004618:	23bd      	movs	r3, #189	; 0xbd
 800461a:	e000      	b.n	800461e <decode_mcu_AC_first+0x136>
 800461c:	23d9      	movs	r3, #217	; 0xd9
	st = entropy->ac_stats[tbl] +
 800461e:	4413      	add	r3, r2
 8004620:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (arith_decode(cinfo, st)) {
 8004622:	e01a      	b.n	800465a <decode_mcu_AC_first+0x172>
	  if ((m <<= 1) == 0x8000) {
 8004624:	6a3b      	ldr	r3, [r7, #32]
 8004626:	005b      	lsls	r3, r3, #1
 8004628:	623b      	str	r3, [r7, #32]
 800462a:	6a3b      	ldr	r3, [r7, #32]
 800462c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004630:	d110      	bne.n	8004654 <decode_mcu_AC_first+0x16c>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2275      	movs	r2, #117	; 0x75
 8004638:	615a      	str	r2, [r3, #20]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	f04f 31ff 	mov.w	r1, #4294967295
 8004644:	6878      	ldr	r0, [r7, #4]
 8004646:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8004648:	69fb      	ldr	r3, [r7, #28]
 800464a:	f04f 32ff 	mov.w	r2, #4294967295
 800464e:	611a      	str	r2, [r3, #16]
	    return TRUE;
 8004650:	2301      	movs	r3, #1
 8004652:	e045      	b.n	80046e0 <decode_mcu_AC_first+0x1f8>
	  }
	  st += 1;
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	3301      	adds	r3, #1
 8004658:	62fb      	str	r3, [r7, #44]	; 0x2c
	while (arith_decode(cinfo, st)) {
 800465a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800465c:	6878      	ldr	r0, [r7, #4]
 800465e:	f7ff fd03 	bl	8004068 <arith_decode>
 8004662:	4603      	mov	r3, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	d1dd      	bne.n	8004624 <decode_mcu_AC_first+0x13c>
	}
      }
    }
    v = m;
 8004668:	6a3b      	ldr	r3, [r7, #32]
 800466a:	627b      	str	r3, [r7, #36]	; 0x24
    /* Figure F.24: Decoding the magnitude bit pattern of v */
    st += 14;
 800466c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466e:	330e      	adds	r3, #14
 8004670:	62fb      	str	r3, [r7, #44]	; 0x2c
    while (m >>= 1)
 8004672:	e00a      	b.n	800468a <decode_mcu_AC_first+0x1a2>
      if (arith_decode(cinfo, st)) v |= m;
 8004674:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004676:	6878      	ldr	r0, [r7, #4]
 8004678:	f7ff fcf6 	bl	8004068 <arith_decode>
 800467c:	4603      	mov	r3, r0
 800467e:	2b00      	cmp	r3, #0
 8004680:	d003      	beq.n	800468a <decode_mcu_AC_first+0x1a2>
 8004682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004684:	6a3b      	ldr	r3, [r7, #32]
 8004686:	4313      	orrs	r3, r2
 8004688:	627b      	str	r3, [r7, #36]	; 0x24
    while (m >>= 1)
 800468a:	6a3b      	ldr	r3, [r7, #32]
 800468c:	105b      	asrs	r3, r3, #1
 800468e:	623b      	str	r3, [r7, #32]
 8004690:	6a3b      	ldr	r3, [r7, #32]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1ee      	bne.n	8004674 <decode_mcu_AC_first+0x18c>
    v += 1; if (sign) v = -v;
 8004696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004698:	3301      	adds	r3, #1
 800469a:	627b      	str	r3, [r7, #36]	; 0x24
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d002      	beq.n	80046a8 <decode_mcu_AC_first+0x1c0>
 80046a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a4:	425b      	negs	r3, r3
 80046a6:	627b      	str	r3, [r7, #36]	; 0x24
    /* Scale and output coefficient in natural (dezigzagged) order */
    (*block)[natural_order[k]] = (JCOEF) (v << cinfo->Al);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80046ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046b0:	fa02 f103 	lsl.w	r1, r2, r3
 80046b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	69ba      	ldr	r2, [r7, #24]
 80046ba:	4413      	add	r3, r2
 80046bc:	681a      	ldr	r2, [r3, #0]
 80046be:	b209      	sxth	r1, r1
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 80046c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046c8:	3301      	adds	r3, #1
 80046ca:	62bb      	str	r3, [r7, #40]	; 0x28
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80046d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046d4:	429a      	cmp	r2, r3
 80046d6:	f77f af39 	ble.w	800454c <decode_mcu_AC_first+0x64>
 80046da:	e000      	b.n	80046de <decode_mcu_AC_first+0x1f6>
    if (arith_decode(cinfo, st)) break;		/* EOB flag */
 80046dc:	bf00      	nop
  }

  return TRUE;
 80046de:	2301      	movs	r3, #1
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3730      	adds	r7, #48	; 0x30
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <decode_mcu_DC_refine>:
 * MCU decoding for DC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80046f8:	613b      	str	r3, [r7, #16]
  unsigned char *st;
  int p1, blkn;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00b      	beq.n	800471c <decode_mcu_DC_refine+0x34>
    if (entropy->restarts_to_go == 0)
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004708:	2b00      	cmp	r3, #0
 800470a:	d102      	bne.n	8004712 <decode_mcu_DC_refine+0x2a>
      process_restart(cinfo);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f7ff fd51 	bl	80041b4 <process_restart>
    entropy->restarts_to_go--;
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004716:	1e5a      	subs	r2, r3, #1
 8004718:	693b      	ldr	r3, [r7, #16]
 800471a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  st = entropy->fixed_bin;	/* use fixed probability estimation */
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	33b8      	adds	r3, #184	; 0xb8
 8004720:	60fb      	str	r3, [r7, #12]
  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004728:	2201      	movs	r2, #1
 800472a:	fa02 f303 	lsl.w	r3, r2, r3
 800472e:	60bb      	str	r3, [r7, #8]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8004730:	2300      	movs	r3, #0
 8004732:	617b      	str	r3, [r7, #20]
 8004734:	e01a      	b.n	800476c <decode_mcu_DC_refine+0x84>
    /* Encoded data is simply the next bit of the two's-complement DC value */
    if (arith_decode(cinfo, st))
 8004736:	68f9      	ldr	r1, [r7, #12]
 8004738:	6878      	ldr	r0, [r7, #4]
 800473a:	f7ff fc95 	bl	8004068 <arith_decode>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d010      	beq.n	8004766 <decode_mcu_DC_refine+0x7e>
      MCU_data[blkn][0][0] |= p1;
 8004744:	697b      	ldr	r3, [r7, #20]
 8004746:	009b      	lsls	r3, r3, #2
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	4413      	add	r3, r2
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f9b3 1000 	ldrsh.w	r1, [r3]
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	b21a      	sxth	r2, r3
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	6838      	ldr	r0, [r7, #0]
 800475c:	4403      	add	r3, r0
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	430a      	orrs	r2, r1
 8004762:	b212      	sxth	r2, r2
 8004764:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	3301      	adds	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8004772:	697a      	ldr	r2, [r7, #20]
 8004774:	429a      	cmp	r2, r3
 8004776:	dbde      	blt.n	8004736 <decode_mcu_DC_refine+0x4e>
  }

  return TRUE;
 8004778:	2301      	movs	r3, #1
}
 800477a:	4618      	mov	r0, r3
 800477c:	3718      	adds	r7, #24
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <decode_mcu_AC_refine>:
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b08c      	sub	sp, #48	; 0x30
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
 800478a:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8004792:	623b      	str	r3, [r7, #32]
  int tbl, k, kex;
  int p1, m1;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800479a:	2b00      	cmp	r3, #0
 800479c:	d00b      	beq.n	80047b6 <decode_mcu_AC_refine+0x34>
    if (entropy->restarts_to_go == 0)
 800479e:	6a3b      	ldr	r3, [r7, #32]
 80047a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d102      	bne.n	80047ac <decode_mcu_AC_refine+0x2a>
      process_restart(cinfo);
 80047a6:	6878      	ldr	r0, [r7, #4]
 80047a8:	f7ff fd04 	bl	80041b4 <process_restart>
    entropy->restarts_to_go--;
 80047ac:	6a3b      	ldr	r3, [r7, #32]
 80047ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047b0:	1e5a      	subs	r2, r3, #1
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	691b      	ldr	r3, [r3, #16]
 80047ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047be:	d101      	bne.n	80047c4 <decode_mcu_AC_refine+0x42>
 80047c0:	2301      	movs	r3, #1
 80047c2:	e0c8      	b.n	8004956 <decode_mcu_AC_refine+0x1d4>

  natural_order = cinfo->natural_order;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80047ca:	61fb      	str	r3, [r7, #28]

  /* There is always only one block per MCU */
  block = MCU_data[0];
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	61bb      	str	r3, [r7, #24]
  tbl = cinfo->cur_comp_info[0]->ac_tbl_no;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 80047d8:	699b      	ldr	r3, [r3, #24]
 80047da:	617b      	str	r3, [r7, #20]

  p1 = 1 << cinfo->Al;		/* 1 in the bit position being coded */
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80047e2:	2201      	movs	r2, #1
 80047e4:	fa02 f303 	lsl.w	r3, r2, r3
 80047e8:	613b      	str	r3, [r7, #16]
  m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80047f0:	f04f 32ff 	mov.w	r2, #4294967295
 80047f4:	fa02 f303 	lsl.w	r3, r2, r3
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Establish EOBx (previous stage end-of-block) index */
  for (kex = cinfo->Se; kex > 0; kex--)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004800:	627b      	str	r3, [r7, #36]	; 0x24
 8004802:	e00c      	b.n	800481e <decode_mcu_AC_refine+0x9c>
    if ((*block)[natural_order[kex]]) break;
 8004804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004806:	009b      	lsls	r3, r3, #2
 8004808:	69fa      	ldr	r2, [r7, #28]
 800480a:	4413      	add	r3, r2
 800480c:	681a      	ldr	r2, [r3, #0]
 800480e:	69bb      	ldr	r3, [r7, #24]
 8004810:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d106      	bne.n	8004826 <decode_mcu_AC_refine+0xa4>
  for (kex = cinfo->Se; kex > 0; kex--)
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800481a:	3b01      	subs	r3, #1
 800481c:	627b      	str	r3, [r7, #36]	; 0x24
 800481e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004820:	2b00      	cmp	r3, #0
 8004822:	dcef      	bgt.n	8004804 <decode_mcu_AC_refine+0x82>
 8004824:	e000      	b.n	8004828 <decode_mcu_AC_refine+0xa6>
    if ((*block)[natural_order[kex]]) break;
 8004826:	bf00      	nop

  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 800482e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004830:	e087      	b.n	8004942 <decode_mcu_AC_refine+0x1c0>
    st = entropy->ac_stats[tbl] + 3 * (k - 1);
 8004832:	6a3b      	ldr	r3, [r7, #32]
 8004834:	697a      	ldr	r2, [r7, #20]
 8004836:	321e      	adds	r2, #30
 8004838:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800483c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800483e:	1e5a      	subs	r2, r3, #1
 8004840:	4613      	mov	r3, r2
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	4413      	add	r3, r2
 8004846:	440b      	add	r3, r1
 8004848:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (k > kex)
 800484a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800484c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800484e:	429a      	cmp	r2, r3
 8004850:	dd06      	ble.n	8004860 <decode_mcu_AC_refine+0xde>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8004852:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004854:	6878      	ldr	r0, [r7, #4]
 8004856:	f7ff fc07 	bl	8004068 <arith_decode>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d178      	bne.n	8004952 <decode_mcu_AC_refine+0x1d0>
    for (;;) {
      thiscoef = *block + natural_order[k];
 8004860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004862:	009b      	lsls	r3, r3, #2
 8004864:	69fa      	ldr	r2, [r7, #28]
 8004866:	4413      	add	r3, r2
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	005b      	lsls	r3, r3, #1
 800486c:	69ba      	ldr	r2, [r7, #24]
 800486e:	4413      	add	r3, r2
 8004870:	60bb      	str	r3, [r7, #8]
      if (*thiscoef) {				/* previously nonzero coef */
 8004872:	68bb      	ldr	r3, [r7, #8]
 8004874:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d025      	beq.n	80048c8 <decode_mcu_AC_refine+0x146>
	if (arith_decode(cinfo, st + 2)) {
 800487c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487e:	3302      	adds	r3, #2
 8004880:	4619      	mov	r1, r3
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f7ff fbf0 	bl	8004068 <arith_decode>
 8004888:	4603      	mov	r3, r0
 800488a:	2b00      	cmp	r3, #0
 800488c:	d055      	beq.n	800493a <decode_mcu_AC_refine+0x1b8>
	  if (*thiscoef < 0)
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	f9b3 3000 	ldrsh.w	r3, [r3]
 8004894:	2b00      	cmp	r3, #0
 8004896:	da0b      	bge.n	80048b0 <decode_mcu_AC_refine+0x12e>
	    *thiscoef += m1;
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800489e:	b29a      	uxth	r2, r3
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	b29b      	uxth	r3, r3
 80048a4:	4413      	add	r3, r2
 80048a6:	b29b      	uxth	r3, r3
 80048a8:	b21a      	sxth	r2, r3
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	801a      	strh	r2, [r3, #0]
	  else
	    *thiscoef += p1;
	}
	break;
 80048ae:	e044      	b.n	800493a <decode_mcu_AC_refine+0x1b8>
	    *thiscoef += p1;
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80048b6:	b29a      	uxth	r2, r3
 80048b8:	693b      	ldr	r3, [r7, #16]
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	4413      	add	r3, r2
 80048be:	b29b      	uxth	r3, r3
 80048c0:	b21a      	sxth	r2, r3
 80048c2:	68bb      	ldr	r3, [r7, #8]
 80048c4:	801a      	strh	r2, [r3, #0]
	break;
 80048c6:	e038      	b.n	800493a <decode_mcu_AC_refine+0x1b8>
      }
      if (arith_decode(cinfo, st + 1)) {	/* newly nonzero coef */
 80048c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048ca:	3301      	adds	r3, #1
 80048cc:	4619      	mov	r1, r3
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f7ff fbca 	bl	8004068 <arith_decode>
 80048d4:	4603      	mov	r3, r0
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d012      	beq.n	8004900 <decode_mcu_AC_refine+0x17e>
	if (arith_decode(cinfo, entropy->fixed_bin))
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	33b8      	adds	r3, #184	; 0xb8
 80048de:	4619      	mov	r1, r3
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff fbc1 	bl	8004068 <arith_decode>
 80048e6:	4603      	mov	r3, r0
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d004      	beq.n	80048f6 <decode_mcu_AC_refine+0x174>
	  *thiscoef = m1;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	b21a      	sxth	r2, r3
 80048f0:	68bb      	ldr	r3, [r7, #8]
 80048f2:	801a      	strh	r2, [r3, #0]
	else
	  *thiscoef = p1;
	break;
 80048f4:	e022      	b.n	800493c <decode_mcu_AC_refine+0x1ba>
	  *thiscoef = p1;
 80048f6:	693b      	ldr	r3, [r7, #16]
 80048f8:	b21a      	sxth	r2, r3
 80048fa:	68bb      	ldr	r3, [r7, #8]
 80048fc:	801a      	strh	r2, [r3, #0]
	break;
 80048fe:	e01d      	b.n	800493c <decode_mcu_AC_refine+0x1ba>
      }
      st += 3; k++;
 8004900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004902:	3303      	adds	r3, #3
 8004904:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004908:	3301      	adds	r3, #1
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28
      if (k > cinfo->Se) {
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004914:	429a      	cmp	r2, r3
 8004916:	dda3      	ble.n	8004860 <decode_mcu_AC_refine+0xde>
	WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2275      	movs	r2, #117	; 0x75
 800491e:	615a      	str	r2, [r3, #20]
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	f04f 31ff 	mov.w	r1, #4294967295
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	4798      	blx	r3
	entropy->ct = -1;			/* spectral overflow */
 800492e:	6a3b      	ldr	r3, [r7, #32]
 8004930:	f04f 32ff 	mov.w	r2, #4294967295
 8004934:	611a      	str	r2, [r3, #16]
	return TRUE;
 8004936:	2301      	movs	r3, #1
 8004938:	e00d      	b.n	8004956 <decode_mcu_AC_refine+0x1d4>
	break;
 800493a:	bf00      	nop
  for (k = cinfo->Ss; k <= cinfo->Se; k++) {
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	3301      	adds	r3, #1
 8004940:	62bb      	str	r3, [r7, #40]	; 0x28
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004948:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800494a:	429a      	cmp	r2, r3
 800494c:	f77f af71 	ble.w	8004832 <decode_mcu_AC_refine+0xb0>
 8004950:	e000      	b.n	8004954 <decode_mcu_AC_refine+0x1d2>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8004952:	bf00      	nop
      }
    }
  }

  return TRUE;
 8004954:	2301      	movs	r3, #1
}
 8004956:	4618      	mov	r0, r3
 8004958:	3730      	adds	r7, #48	; 0x30
 800495a:	46bd      	mov	sp, r7
 800495c:	bd80      	pop	{r7, pc}

0800495e <decode_mcu>:
 * Decode one MCU's worth of arithmetic-compressed coefficients.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 800495e:	b580      	push	{r7, lr}
 8004960:	b08e      	sub	sp, #56	; 0x38
 8004962:	af00      	add	r7, sp, #0
 8004964:	6078      	str	r0, [r7, #4]
 8004966:	6039      	str	r1, [r7, #0]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800496e:	623b      	str	r3, [r7, #32]
  int blkn, ci, tbl, sign, k;
  int v, m;
  const int * natural_order;

  /* Process restart marker if needed */
  if (cinfo->restart_interval) {
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8004976:	2b00      	cmp	r3, #0
 8004978:	d00b      	beq.n	8004992 <decode_mcu+0x34>
    if (entropy->restarts_to_go == 0)
 800497a:	6a3b      	ldr	r3, [r7, #32]
 800497c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800497e:	2b00      	cmp	r3, #0
 8004980:	d102      	bne.n	8004988 <decode_mcu+0x2a>
      process_restart(cinfo);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f7ff fc16 	bl	80041b4 <process_restart>
    entropy->restarts_to_go--;
 8004988:	6a3b      	ldr	r3, [r7, #32]
 800498a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800498c:	1e5a      	subs	r2, r3, #1
 800498e:	6a3b      	ldr	r3, [r7, #32]
 8004990:	635a      	str	r2, [r3, #52]	; 0x34
  }

  if (entropy->ct == -1) return TRUE;	/* if error do nothing */
 8004992:	6a3b      	ldr	r3, [r7, #32]
 8004994:	691b      	ldr	r3, [r3, #16]
 8004996:	f1b3 3fff 	cmp.w	r3, #4294967295
 800499a:	d101      	bne.n	80049a0 <decode_mcu+0x42>
 800499c:	2301      	movs	r3, #1
 800499e:	e1ba      	b.n	8004d16 <decode_mcu+0x3b8>

  natural_order = cinfo->natural_order;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 80049a6:	61fb      	str	r3, [r7, #28]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80049a8:	2300      	movs	r3, #0
 80049aa:	633b      	str	r3, [r7, #48]	; 0x30
 80049ac:	e1ab      	b.n	8004d06 <decode_mcu+0x3a8>
    block = MCU_data[blkn];
 80049ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049b0:	009b      	lsls	r3, r3, #2
 80049b2:	683a      	ldr	r2, [r7, #0]
 80049b4:	4413      	add	r3, r2
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	61bb      	str	r3, [r7, #24]
    ci = cinfo->MCU_membership[blkn];
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049be:	325c      	adds	r2, #92	; 0x5c
 80049c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049c4:	617b      	str	r3, [r7, #20]
    compptr = cinfo->cur_comp_info[ci];
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	697b      	ldr	r3, [r7, #20]
 80049ca:	3354      	adds	r3, #84	; 0x54
 80049cc:	009b      	lsls	r3, r3, #2
 80049ce:	4413      	add	r3, r2
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	613b      	str	r3, [r7, #16]

    /* Sections F.2.4.1 & F.1.4.4.1: Decoding of DC coefficients */

    tbl = compptr->dc_tbl_no;
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	695b      	ldr	r3, [r3, #20]
 80049d8:	60fb      	str	r3, [r7, #12]

    /* Table F.4: Point to statistics bin S0 for DC coefficient coding */
    st = entropy->dc_stats[tbl] + entropy->dc_context[ci];
 80049da:	6a3b      	ldr	r3, [r7, #32]
 80049dc:	68fa      	ldr	r2, [r7, #12]
 80049de:	320e      	adds	r2, #14
 80049e0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80049e4:	6a39      	ldr	r1, [r7, #32]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	3308      	adds	r3, #8
 80049ea:	009b      	lsls	r3, r3, #2
 80049ec:	440b      	add	r3, r1
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	637b      	str	r3, [r7, #52]	; 0x34

    /* Figure F.19: Decode_DC_DIFF */
    if (arith_decode(cinfo, st) == 0)
 80049f4:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fb36 	bl	8004068 <arith_decode>
 80049fc:	4603      	mov	r3, r0
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d107      	bne.n	8004a12 <decode_mcu+0xb4>
      entropy->dc_context[ci] = 0;
 8004a02:	6a3a      	ldr	r2, [r7, #32]
 8004a04:	697b      	ldr	r3, [r7, #20]
 8004a06:	3308      	adds	r3, #8
 8004a08:	009b      	lsls	r3, r3, #2
 8004a0a:	4413      	add	r3, r2
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	605a      	str	r2, [r3, #4]
 8004a10:	e0a0      	b.n	8004b54 <decode_mcu+0x1f6>
    else {
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, st + 1);
 8004a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a14:	3301      	adds	r3, #1
 8004a16:	4619      	mov	r1, r3
 8004a18:	6878      	ldr	r0, [r7, #4]
 8004a1a:	f7ff fb25 	bl	8004068 <arith_decode>
 8004a1e:	60b8      	str	r0, [r7, #8]
      st += 2; st += sign;
 8004a20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a22:	3302      	adds	r3, #2
 8004a24:	637b      	str	r3, [r7, #52]	; 0x34
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004a2a:	4413      	add	r3, r2
 8004a2c:	637b      	str	r3, [r7, #52]	; 0x34
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 8004a2e:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f7ff fb19 	bl	8004068 <arith_decode>
 8004a36:	6278      	str	r0, [r7, #36]	; 0x24
 8004a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d029      	beq.n	8004a92 <decode_mcu+0x134>
	st = entropy->dc_stats[tbl] + 20;	/* Table F.4: X1 = 20 */
 8004a3e:	6a3b      	ldr	r3, [r7, #32]
 8004a40:	68fa      	ldr	r2, [r7, #12]
 8004a42:	320e      	adds	r2, #14
 8004a44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a48:	3314      	adds	r3, #20
 8004a4a:	637b      	str	r3, [r7, #52]	; 0x34
	while (arith_decode(cinfo, st)) {
 8004a4c:	e01a      	b.n	8004a84 <decode_mcu+0x126>
	  if ((m <<= 1) == 0x8000) {
 8004a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	627b      	str	r3, [r7, #36]	; 0x24
 8004a54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a5a:	d110      	bne.n	8004a7e <decode_mcu+0x120>
	    WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2275      	movs	r2, #117	; 0x75
 8004a62:	615a      	str	r2, [r3, #20]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f04f 31ff 	mov.w	r1, #4294967295
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	4798      	blx	r3
	    entropy->ct = -1;			/* magnitude overflow */
 8004a72:	6a3b      	ldr	r3, [r7, #32]
 8004a74:	f04f 32ff 	mov.w	r2, #4294967295
 8004a78:	611a      	str	r2, [r3, #16]
	    return TRUE;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e14b      	b.n	8004d16 <decode_mcu+0x3b8>
	  }
	  st += 1;
 8004a7e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a80:	3301      	adds	r3, #1
 8004a82:	637b      	str	r3, [r7, #52]	; 0x34
	while (arith_decode(cinfo, st)) {
 8004a84:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff faee 	bl	8004068 <arith_decode>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1dd      	bne.n	8004a4e <decode_mcu+0xf0>
	}
      }
      /* Section F.1.4.4.1.2: Establish dc_context conditioning category */
      if (m < (int) ((1L << cinfo->arith_dc_L[tbl]) >> 1))
 8004a92:	687a      	ldr	r2, [r7, #4]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	4413      	add	r3, r2
 8004a98:	33e8      	adds	r3, #232	; 0xe8
 8004a9a:	781b      	ldrb	r3, [r3, #0]
 8004a9c:	461a      	mov	r2, r3
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	4093      	lsls	r3, r2
 8004aa2:	105b      	asrs	r3, r3, #1
 8004aa4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa6:	429a      	cmp	r2, r3
 8004aa8:	da07      	bge.n	8004aba <decode_mcu+0x15c>
	entropy->dc_context[ci] = 0;		   /* zero diff category */
 8004aaa:	6a3a      	ldr	r2, [r7, #32]
 8004aac:	697b      	ldr	r3, [r7, #20]
 8004aae:	3308      	adds	r3, #8
 8004ab0:	009b      	lsls	r3, r3, #2
 8004ab2:	4413      	add	r3, r2
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	605a      	str	r2, [r3, #4]
 8004ab8:	e01e      	b.n	8004af8 <decode_mcu+0x19a>
      else if (m > (int) ((1L << cinfo->arith_dc_U[tbl]) >> 1))
 8004aba:	687a      	ldr	r2, [r7, #4]
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	4413      	add	r3, r2
 8004ac0:	33f8      	adds	r3, #248	; 0xf8
 8004ac2:	781b      	ldrb	r3, [r3, #0]
 8004ac4:	461a      	mov	r2, r3
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	4093      	lsls	r3, r2
 8004aca:	105b      	asrs	r3, r3, #1
 8004acc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	dd09      	ble.n	8004ae6 <decode_mcu+0x188>
	entropy->dc_context[ci] = 12 + (sign * 4); /* large diff category */
 8004ad2:	68bb      	ldr	r3, [r7, #8]
 8004ad4:	3303      	adds	r3, #3
 8004ad6:	009a      	lsls	r2, r3, #2
 8004ad8:	6a39      	ldr	r1, [r7, #32]
 8004ada:	697b      	ldr	r3, [r7, #20]
 8004adc:	3308      	adds	r3, #8
 8004ade:	009b      	lsls	r3, r3, #2
 8004ae0:	440b      	add	r3, r1
 8004ae2:	605a      	str	r2, [r3, #4]
 8004ae4:	e008      	b.n	8004af8 <decode_mcu+0x19a>
      else
	entropy->dc_context[ci] = 4 + (sign * 4);  /* small diff category */
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	3301      	adds	r3, #1
 8004aea:	009a      	lsls	r2, r3, #2
 8004aec:	6a39      	ldr	r1, [r7, #32]
 8004aee:	697b      	ldr	r3, [r7, #20]
 8004af0:	3308      	adds	r3, #8
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	440b      	add	r3, r1
 8004af6:	605a      	str	r2, [r3, #4]
      v = m;
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 8004afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004afe:	330e      	adds	r3, #14
 8004b00:	637b      	str	r3, [r7, #52]	; 0x34
      while (m >>= 1)
 8004b02:	e00a      	b.n	8004b1a <decode_mcu+0x1bc>
	if (arith_decode(cinfo, st)) v |= m;
 8004b04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7ff faae 	bl	8004068 <arith_decode>
 8004b0c:	4603      	mov	r3, r0
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d003      	beq.n	8004b1a <decode_mcu+0x1bc>
 8004b12:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004b14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b16:	4313      	orrs	r3, r2
 8004b18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (m >>= 1)
 8004b1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b1c:	105b      	asrs	r3, r3, #1
 8004b1e:	627b      	str	r3, [r7, #36]	; 0x24
 8004b20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d1ee      	bne.n	8004b04 <decode_mcu+0x1a6>
      v += 1; if (sign) v = -v;
 8004b26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b28:	3301      	adds	r3, #1
 8004b2a:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d002      	beq.n	8004b38 <decode_mcu+0x1da>
 8004b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b34:	425b      	negs	r3, r3
 8004b36:	62bb      	str	r3, [r7, #40]	; 0x28
      entropy->last_dc_val[ci] += v;
 8004b38:	6a3a      	ldr	r2, [r7, #32]
 8004b3a:	697b      	ldr	r3, [r7, #20]
 8004b3c:	3304      	adds	r3, #4
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b46:	441a      	add	r2, r3
 8004b48:	6a39      	ldr	r1, [r7, #32]
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	3304      	adds	r3, #4
 8004b4e:	009b      	lsls	r3, r3, #2
 8004b50:	440b      	add	r3, r1
 8004b52:	605a      	str	r2, [r3, #4]
    }

    (*block)[0] = (JCOEF) entropy->last_dc_val[ci];
 8004b54:	6a3a      	ldr	r2, [r7, #32]
 8004b56:	697b      	ldr	r3, [r7, #20]
 8004b58:	3304      	adds	r3, #4
 8004b5a:	009b      	lsls	r3, r3, #2
 8004b5c:	4413      	add	r3, r2
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	b21a      	sxth	r2, r3
 8004b62:	69bb      	ldr	r3, [r7, #24]
 8004b64:	801a      	strh	r2, [r3, #0]

    /* Sections F.2.4.2 & F.1.4.4.2: Decoding of AC coefficients */

    if (cinfo->lim_Se == 0) continue;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	f000 80c4 	beq.w	8004cfa <decode_mcu+0x39c>
    tbl = compptr->ac_tbl_no;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	699b      	ldr	r3, [r3, #24]
 8004b76:	60fb      	str	r3, [r7, #12]
    k = 0;
 8004b78:	2300      	movs	r3, #0
 8004b7a:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Figure F.20: Decode_AC_coefficients */
    do {
      st = entropy->ac_stats[tbl] + 3 * k;
 8004b7c:	6a3b      	ldr	r3, [r7, #32]
 8004b7e:	68fa      	ldr	r2, [r7, #12]
 8004b80:	321e      	adds	r2, #30
 8004b82:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004b86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004b88:	4613      	mov	r3, r2
 8004b8a:	005b      	lsls	r3, r3, #1
 8004b8c:	4413      	add	r3, r2
 8004b8e:	440b      	add	r3, r1
 8004b90:	637b      	str	r3, [r7, #52]	; 0x34
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8004b92:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004b94:	6878      	ldr	r0, [r7, #4]
 8004b96:	f7ff fa67 	bl	8004068 <arith_decode>
 8004b9a:	4603      	mov	r3, r0
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f040 80ae 	bne.w	8004cfe <decode_mcu+0x3a0>
      for (;;) {
	k++;
 8004ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (arith_decode(cinfo, st + 1)) break;
 8004ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004baa:	3301      	adds	r3, #1
 8004bac:	4619      	mov	r1, r3
 8004bae:	6878      	ldr	r0, [r7, #4]
 8004bb0:	f7ff fa5a 	bl	8004068 <arith_decode>
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d119      	bne.n	8004bee <decode_mcu+0x290>
	st += 3;
 8004bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bbc:	3303      	adds	r3, #3
 8004bbe:	637b      	str	r3, [r7, #52]	; 0x34
	if (k >= cinfo->lim_Se) {
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004bc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bc8:	429a      	cmp	r2, r3
 8004bca:	dbea      	blt.n	8004ba2 <decode_mcu+0x244>
	  WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2275      	movs	r2, #117	; 0x75
 8004bd2:	615a      	str	r2, [r3, #20]
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	f04f 31ff 	mov.w	r1, #4294967295
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	4798      	blx	r3
	  entropy->ct = -1;			/* spectral overflow */
 8004be2:	6a3b      	ldr	r3, [r7, #32]
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295
 8004be8:	611a      	str	r2, [r3, #16]
	  return TRUE;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e093      	b.n	8004d16 <decode_mcu+0x3b8>
	if (arith_decode(cinfo, st + 1)) break;
 8004bee:	bf00      	nop
	}
      }
      /* Figure F.21: Decoding nonzero value v */
      /* Figure F.22: Decoding the sign of v */
      sign = arith_decode(cinfo, entropy->fixed_bin);
 8004bf0:	6a3b      	ldr	r3, [r7, #32]
 8004bf2:	33b8      	adds	r3, #184	; 0xb8
 8004bf4:	4619      	mov	r1, r3
 8004bf6:	6878      	ldr	r0, [r7, #4]
 8004bf8:	f7ff fa36 	bl	8004068 <arith_decode>
 8004bfc:	60b8      	str	r0, [r7, #8]
      st += 2;
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	3302      	adds	r3, #2
 8004c02:	637b      	str	r3, [r7, #52]	; 0x34
      /* Figure F.23: Decoding the magnitude category of v */
      if ((m = arith_decode(cinfo, st)) != 0) {
 8004c04:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c06:	6878      	ldr	r0, [r7, #4]
 8004c08:	f7ff fa2e 	bl	8004068 <arith_decode>
 8004c0c:	6278      	str	r0, [r7, #36]	; 0x24
 8004c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d040      	beq.n	8004c96 <decode_mcu+0x338>
	if (arith_decode(cinfo, st)) {
 8004c14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fa26 	bl	8004068 <arith_decode>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d039      	beq.n	8004c96 <decode_mcu+0x338>
	  m <<= 1;
 8004c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	627b      	str	r3, [r7, #36]	; 0x24
	  st = entropy->ac_stats[tbl] +
 8004c28:	6a3b      	ldr	r3, [r7, #32]
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	321e      	adds	r2, #30
 8004c2e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	       (k <= cinfo->arith_ac_K[tbl] ? 189 : 217);
 8004c32:	6879      	ldr	r1, [r7, #4]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	440b      	add	r3, r1
 8004c38:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8004c3c:	781b      	ldrb	r3, [r3, #0]
 8004c3e:	4619      	mov	r1, r3
 8004c40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c42:	428b      	cmp	r3, r1
 8004c44:	dc01      	bgt.n	8004c4a <decode_mcu+0x2ec>
 8004c46:	23bd      	movs	r3, #189	; 0xbd
 8004c48:	e000      	b.n	8004c4c <decode_mcu+0x2ee>
 8004c4a:	23d9      	movs	r3, #217	; 0xd9
	  st = entropy->ac_stats[tbl] +
 8004c4c:	4413      	add	r3, r2
 8004c4e:	637b      	str	r3, [r7, #52]	; 0x34
	  while (arith_decode(cinfo, st)) {
 8004c50:	e01a      	b.n	8004c88 <decode_mcu+0x32a>
	    if ((m <<= 1) == 0x8000) {
 8004c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c54:	005b      	lsls	r3, r3, #1
 8004c56:	627b      	str	r3, [r7, #36]	; 0x24
 8004c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c5e:	d110      	bne.n	8004c82 <decode_mcu+0x324>
	      WARNMS(cinfo, JWRN_ARITH_BAD_CODE);
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	2275      	movs	r2, #117	; 0x75
 8004c66:	615a      	str	r2, [r3, #20]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	685b      	ldr	r3, [r3, #4]
 8004c6e:	f04f 31ff 	mov.w	r1, #4294967295
 8004c72:	6878      	ldr	r0, [r7, #4]
 8004c74:	4798      	blx	r3
	      entropy->ct = -1;			/* magnitude overflow */
 8004c76:	6a3b      	ldr	r3, [r7, #32]
 8004c78:	f04f 32ff 	mov.w	r2, #4294967295
 8004c7c:	611a      	str	r2, [r3, #16]
	      return TRUE;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e049      	b.n	8004d16 <decode_mcu+0x3b8>
	    }
	    st += 1;
 8004c82:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c84:	3301      	adds	r3, #1
 8004c86:	637b      	str	r3, [r7, #52]	; 0x34
	  while (arith_decode(cinfo, st)) {
 8004c88:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004c8a:	6878      	ldr	r0, [r7, #4]
 8004c8c:	f7ff f9ec 	bl	8004068 <arith_decode>
 8004c90:	4603      	mov	r3, r0
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1dd      	bne.n	8004c52 <decode_mcu+0x2f4>
	  }
	}
      }
      v = m;
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	62bb      	str	r3, [r7, #40]	; 0x28
      /* Figure F.24: Decoding the magnitude bit pattern of v */
      st += 14;
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c9c:	330e      	adds	r3, #14
 8004c9e:	637b      	str	r3, [r7, #52]	; 0x34
      while (m >>= 1)
 8004ca0:	e00a      	b.n	8004cb8 <decode_mcu+0x35a>
	if (arith_decode(cinfo, st)) v |= m;
 8004ca2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff f9df 	bl	8004068 <arith_decode>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d003      	beq.n	8004cb8 <decode_mcu+0x35a>
 8004cb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004cb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cb4:	4313      	orrs	r3, r2
 8004cb6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (m >>= 1)
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	105b      	asrs	r3, r3, #1
 8004cbc:	627b      	str	r3, [r7, #36]	; 0x24
 8004cbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d1ee      	bne.n	8004ca2 <decode_mcu+0x344>
      v += 1; if (sign) v = -v;
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	3301      	adds	r3, #1
 8004cc8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d002      	beq.n	8004cd6 <decode_mcu+0x378>
 8004cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd2:	425b      	negs	r3, r3
 8004cd4:	62bb      	str	r3, [r7, #40]	; 0x28
      (*block)[natural_order[k]] = (JCOEF) v;
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	009b      	lsls	r3, r3, #2
 8004cda:	69fa      	ldr	r2, [r7, #28]
 8004cdc:	4413      	add	r3, r2
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce2:	b219      	sxth	r1, r3
 8004ce4:	69bb      	ldr	r3, [r7, #24]
 8004ce6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    } while (k < cinfo->lim_Se);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004cf0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004cf2:	429a      	cmp	r2, r3
 8004cf4:	f6ff af42 	blt.w	8004b7c <decode_mcu+0x21e>
 8004cf8:	e002      	b.n	8004d00 <decode_mcu+0x3a2>
    if (cinfo->lim_Se == 0) continue;
 8004cfa:	bf00      	nop
 8004cfc:	e000      	b.n	8004d00 <decode_mcu+0x3a2>
      if (arith_decode(cinfo, st)) break;	/* EOB flag */
 8004cfe:	bf00      	nop
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8004d00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d02:	3301      	adds	r3, #1
 8004d04:	633b      	str	r3, [r7, #48]	; 0x30
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8004d0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	f6ff ae4d 	blt.w	80049ae <decode_mcu+0x50>
  }

  return TRUE;
 8004d14:	2301      	movs	r3, #1
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3738      	adds	r7, #56	; 0x38
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}
	...

08004d20 <start_pass>:
 * Initialize for an arithmetic-compressed scan.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b08a      	sub	sp, #40	; 0x28
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy = (arith_entropy_ptr) cinfo->entropy;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8004d2e:	61fb      	str	r3, [r7, #28]
  int ci, tbl;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	f000 80e7 	beq.w	8004f0a <start_pass+0x1ea>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d105      	bne.n	8004d52 <start_pass+0x32>
      if (cinfo->Se != 0)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d015      	beq.n	8004d7c <start_pass+0x5c>
	goto bad;
 8004d50:	e02d      	b.n	8004dae <start_pass+0x8e>
    } else {
      /* need not check Ss/Se < 0 since they came from unsigned bytes */
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004d5e:	429a      	cmp	r2, r3
 8004d60:	db20      	blt.n	8004da4 <start_pass+0x84>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004d6e:	429a      	cmp	r2, r3
 8004d70:	dc18      	bgt.n	8004da4 <start_pass+0x84>
	goto bad;
      /* AC scans may have only one component */
      if (cinfo->comps_in_scan != 1)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d115      	bne.n	8004da8 <start_pass+0x88>
	goto bad;
    }
    if (cinfo->Ah != 0) {
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d008      	beq.n	8004d98 <start_pass+0x78>
      /* Successive approximation refinement scan: must have Al = Ah-1. */
      if (cinfo->Ah-1 != cinfo->Al)
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004d8c:	1e5a      	subs	r2, r3, #1
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d109      	bne.n	8004dac <start_pass+0x8c>
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004d9e:	2b0d      	cmp	r3, #13
 8004da0:	dd26      	ble.n	8004df0 <start_pass+0xd0>
      bad:
 8004da2:	e004      	b.n	8004dae <start_pass+0x8e>
	goto bad;
 8004da4:	bf00      	nop
 8004da6:	e002      	b.n	8004dae <start_pass+0x8e>
	goto bad;
 8004da8:	bf00      	nop
 8004daa:	e000      	b.n	8004dae <start_pass+0x8e>
	goto bad;
 8004dac:	bf00      	nop
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	2211      	movs	r2, #17
 8004db4:	615a      	str	r2, [r3, #20]
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	f8d2 2198 	ldr.w	r2, [r2, #408]	; 0x198
 8004dc0:	619a      	str	r2, [r3, #24]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	687a      	ldr	r2, [r7, #4]
 8004dc8:	f8d2 219c 	ldr.w	r2, [r2, #412]	; 0x19c
 8004dcc:	61da      	str	r2, [r3, #28]
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	687a      	ldr	r2, [r7, #4]
 8004dd4:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8004dd8:	621a      	str	r2, [r3, #32]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	687a      	ldr	r2, [r7, #4]
 8004de0:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	6878      	ldr	r0, [r7, #4]
 8004dee:	4798      	blx	r3
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8004df0:	2300      	movs	r3, #0
 8004df2:	627b      	str	r3, [r7, #36]	; 0x24
 8004df4:	e064      	b.n	8004ec0 <start_pass+0x1a0>
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dfa:	3354      	adds	r3, #84	; 0x54
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	4413      	add	r3, r2
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	61bb      	str	r3, [r7, #24]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8004e0c:	69bb      	ldr	r3, [r7, #24]
 8004e0e:	021b      	lsls	r3, r3, #8
 8004e10:	4413      	add	r3, r2
 8004e12:	617b      	str	r3, [r7, #20]
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d016      	beq.n	8004e4c <start_pass+0x12c>
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	da12      	bge.n	8004e4c <start_pass+0x12c>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	2276      	movs	r2, #118	; 0x76
 8004e2c:	615a      	str	r2, [r3, #20]
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	69ba      	ldr	r2, [r7, #24]
 8004e34:	619a      	str	r2, [r3, #24]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	61da      	str	r2, [r3, #28]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f04f 31ff 	mov.w	r1, #4294967295
 8004e48:	6878      	ldr	r0, [r7, #4]
 8004e4a:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	e02b      	b.n	8004eae <start_pass+0x18e>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8004e56:	6a3b      	ldr	r3, [r7, #32]
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4413      	add	r3, r2
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004e64:	613b      	str	r3, [r7, #16]
	if (cinfo->Ah != expected)
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004e6c:	693a      	ldr	r2, [r7, #16]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d012      	beq.n	8004e98 <start_pass+0x178>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	2276      	movs	r2, #118	; 0x76
 8004e78:	615a      	str	r2, [r3, #20]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	69ba      	ldr	r2, [r7, #24]
 8004e80:	619a      	str	r2, [r3, #24]
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	6a3a      	ldr	r2, [r7, #32]
 8004e88:	61da      	str	r2, [r3, #28]
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	685b      	ldr	r3, [r3, #4]
 8004e90:	f04f 31ff 	mov.w	r1, #4294967295
 8004e94:	6878      	ldr	r0, [r7, #4]
 8004e96:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 8004e98:	6a3b      	ldr	r3, [r7, #32]
 8004e9a:	009b      	lsls	r3, r3, #2
 8004e9c:	697a      	ldr	r2, [r7, #20]
 8004e9e:	4413      	add	r3, r2
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8004ea6:	601a      	str	r2, [r3, #0]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	3301      	adds	r3, #1
 8004eac:	623b      	str	r3, [r7, #32]
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8004eb4:	6a3a      	ldr	r2, [r7, #32]
 8004eb6:	429a      	cmp	r2, r3
 8004eb8:	ddcd      	ble.n	8004e56 <start_pass+0x136>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8004eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ebc:	3301      	adds	r3, #1
 8004ebe:	627b      	str	r3, [r7, #36]	; 0x24
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8004ec6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ec8:	429a      	cmp	r2, r3
 8004eca:	db94      	blt.n	8004df6 <start_pass+0xd6>
      }
    }
    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d10c      	bne.n	8004ef0 <start_pass+0x1d0>
      if (cinfo->Ss == 0)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d103      	bne.n	8004ee8 <start_pass+0x1c8>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8004ee0:	69fb      	ldr	r3, [r7, #28]
 8004ee2:	4a80      	ldr	r2, [pc, #512]	; (80050e4 <start_pass+0x3c4>)
 8004ee4:	605a      	str	r2, [r3, #4]
 8004ee6:	e03a      	b.n	8004f5e <start_pass+0x23e>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	4a7f      	ldr	r2, [pc, #508]	; (80050e8 <start_pass+0x3c8>)
 8004eec:	605a      	str	r2, [r3, #4]
 8004eee:	e036      	b.n	8004f5e <start_pass+0x23e>
    } else {
      if (cinfo->Ss == 0)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d103      	bne.n	8004f02 <start_pass+0x1e2>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8004efa:	69fb      	ldr	r3, [r7, #28]
 8004efc:	4a7b      	ldr	r2, [pc, #492]	; (80050ec <start_pass+0x3cc>)
 8004efe:	605a      	str	r2, [r3, #4]
 8004f00:	e02d      	b.n	8004f5e <start_pass+0x23e>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 8004f02:	69fb      	ldr	r3, [r7, #28]
 8004f04:	4a7a      	ldr	r2, [pc, #488]	; (80050f0 <start_pass+0x3d0>)
 8004f06:	605a      	str	r2, [r3, #4]
 8004f08:	e029      	b.n	8004f5e <start_pass+0x23e>
    }
  } else {
    /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
     * This ought to be an error condition, but we make it a warning.
     */
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d116      	bne.n	8004f42 <start_pass+0x222>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d111      	bne.n	8004f42 <start_pass+0x222>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10c      	bne.n	8004f42 <start_pass+0x222>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8004f2e:	2b3f      	cmp	r3, #63	; 0x3f
 8004f30:	dc12      	bgt.n	8004f58 <start_pass+0x238>
	(cinfo->Se < DCTSIZE2 && cinfo->Se != cinfo->lim_Se))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8004f3e:	429a      	cmp	r2, r3
 8004f40:	d00a      	beq.n	8004f58 <start_pass+0x238>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	227d      	movs	r2, #125	; 0x7d
 8004f48:	615a      	str	r2, [r3, #20]
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	685b      	ldr	r3, [r3, #4]
 8004f50:	f04f 31ff 	mov.w	r1, #4294967295
 8004f54:	6878      	ldr	r0, [r7, #4]
 8004f56:	4798      	blx	r3
    /* Select MCU decoding routine */
    entropy->pub.decode_mcu = decode_mcu;
 8004f58:	69fb      	ldr	r3, [r7, #28]
 8004f5a:	4a66      	ldr	r2, [pc, #408]	; (80050f4 <start_pass+0x3d4>)
 8004f5c:	605a      	str	r2, [r3, #4]
  }

  /* Allocate & initialize requested statistics areas */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8004f5e:	2300      	movs	r3, #0
 8004f60:	627b      	str	r3, [r7, #36]	; 0x24
 8004f62:	e0a4      	b.n	80050ae <start_pass+0x38e>
    compptr = cinfo->cur_comp_info[ci];
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f68:	3354      	adds	r3, #84	; 0x54
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	4413      	add	r3, r2
 8004f6e:	685b      	ldr	r3, [r3, #4]
 8004f70:	60fb      	str	r3, [r7, #12]
    if (! cinfo->progressive_mode || (cinfo->Ss == 0 && cinfo->Ah == 0)) {
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d009      	beq.n	8004f90 <start_pass+0x270>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d146      	bne.n	8005014 <start_pass+0x2f4>
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d141      	bne.n	8005014 <start_pass+0x2f4>
      tbl = compptr->dc_tbl_no;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	695b      	ldr	r3, [r3, #20]
 8004f94:	60bb      	str	r3, [r7, #8]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	db02      	blt.n	8004fa2 <start_pass+0x282>
 8004f9c:	68bb      	ldr	r3, [r7, #8]
 8004f9e:	2b0f      	cmp	r3, #15
 8004fa0:	dd0c      	ble.n	8004fbc <start_pass+0x29c>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	2232      	movs	r2, #50	; 0x32
 8004fa8:	615a      	str	r2, [r3, #20]
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	68ba      	ldr	r2, [r7, #8]
 8004fb0:	619a      	str	r2, [r3, #24]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	6878      	ldr	r0, [r7, #4]
 8004fba:	4798      	blx	r3
      if (entropy->dc_stats[tbl] == NULL)
 8004fbc:	69fb      	ldr	r3, [r7, #28]
 8004fbe:	68ba      	ldr	r2, [r7, #8]
 8004fc0:	320e      	adds	r2, #14
 8004fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10c      	bne.n	8004fe4 <start_pass+0x2c4>
	entropy->dc_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	2240      	movs	r2, #64	; 0x40
 8004fd2:	2101      	movs	r1, #1
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	4798      	blx	r3
 8004fd8:	4601      	mov	r1, r0
 8004fda:	69fb      	ldr	r3, [r7, #28]
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	320e      	adds	r2, #14
 8004fe0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, DC_STAT_BINS);
      MEMZERO(entropy->dc_stats[tbl], DC_STAT_BINS);
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	68ba      	ldr	r2, [r7, #8]
 8004fe8:	320e      	adds	r2, #14
 8004fea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fee:	2240      	movs	r2, #64	; 0x40
 8004ff0:	2100      	movs	r1, #0
 8004ff2:	4618      	mov	r0, r3
 8004ff4:	f01a f9f0 	bl	801f3d8 <memset>
      /* Initialize DC predictions to 0 */
      entropy->last_dc_val[ci] = 0;
 8004ff8:	69fa      	ldr	r2, [r7, #28]
 8004ffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffc:	3304      	adds	r3, #4
 8004ffe:	009b      	lsls	r3, r3, #2
 8005000:	4413      	add	r3, r2
 8005002:	2200      	movs	r2, #0
 8005004:	605a      	str	r2, [r3, #4]
      entropy->dc_context[ci] = 0;
 8005006:	69fa      	ldr	r2, [r7, #28]
 8005008:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800500a:	3308      	adds	r3, #8
 800500c:	009b      	lsls	r3, r3, #2
 800500e:	4413      	add	r3, r2
 8005010:	2200      	movs	r2, #0
 8005012:	605a      	str	r2, [r3, #4]
    }
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800501a:	2b00      	cmp	r3, #0
 800501c:	d104      	bne.n	8005028 <start_pass+0x308>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005024:	2b00      	cmp	r3, #0
 8005026:	d109      	bne.n	800503c <start_pass+0x31c>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
    if ((! cinfo->progressive_mode && cinfo->lim_Se) ||
 800502e:	2b00      	cmp	r3, #0
 8005030:	d03a      	beq.n	80050a8 <start_pass+0x388>
	(cinfo->progressive_mode && cinfo->Ss)) {
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005038:	2b00      	cmp	r3, #0
 800503a:	d035      	beq.n	80050a8 <start_pass+0x388>
      tbl = compptr->ac_tbl_no;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	699b      	ldr	r3, [r3, #24]
 8005040:	60bb      	str	r3, [r7, #8]
      if (tbl < 0 || tbl >= NUM_ARITH_TBLS)
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	db02      	blt.n	800504e <start_pass+0x32e>
 8005048:	68bb      	ldr	r3, [r7, #8]
 800504a:	2b0f      	cmp	r3, #15
 800504c:	dd0c      	ble.n	8005068 <start_pass+0x348>
	ERREXIT1(cinfo, JERR_NO_ARITH_TABLE, tbl);
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	2232      	movs	r2, #50	; 0x32
 8005054:	615a      	str	r2, [r3, #20]
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	68ba      	ldr	r2, [r7, #8]
 800505c:	619a      	str	r2, [r3, #24]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	6878      	ldr	r0, [r7, #4]
 8005066:	4798      	blx	r3
      if (entropy->ac_stats[tbl] == NULL)
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	321e      	adds	r2, #30
 800506e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005072:	2b00      	cmp	r3, #0
 8005074:	d10d      	bne.n	8005092 <start_pass+0x372>
	entropy->ac_stats[tbl] = (unsigned char *) (*cinfo->mem->alloc_small)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	685b      	ldr	r3, [r3, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005080:	2101      	movs	r1, #1
 8005082:	6878      	ldr	r0, [r7, #4]
 8005084:	4798      	blx	r3
 8005086:	4601      	mov	r1, r0
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	321e      	adds	r2, #30
 800508e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, AC_STAT_BINS);
      MEMZERO(entropy->ac_stats[tbl], AC_STAT_BINS);
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	68ba      	ldr	r2, [r7, #8]
 8005096:	321e      	adds	r2, #30
 8005098:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800509c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050a0:	2100      	movs	r1, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	f01a f998 	bl	801f3d8 <memset>
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	3301      	adds	r3, #1
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 80050b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050b6:	429a      	cmp	r2, r3
 80050b8:	f6ff af54 	blt.w	8004f64 <start_pass+0x244>
    }
  }

  /* Initialize arithmetic decoding variables */
  entropy->c = 0;
 80050bc:	69fb      	ldr	r3, [r7, #28]
 80050be:	2200      	movs	r2, #0
 80050c0:	609a      	str	r2, [r3, #8]
  entropy->a = 0;
 80050c2:	69fb      	ldr	r3, [r7, #28]
 80050c4:	2200      	movs	r2, #0
 80050c6:	60da      	str	r2, [r3, #12]
  entropy->ct = -16;	/* force reading 2 initial bytes to fill C */
 80050c8:	69fb      	ldr	r3, [r7, #28]
 80050ca:	f06f 020f 	mvn.w	r2, #15
 80050ce:	611a      	str	r2, [r3, #16]

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	635a      	str	r2, [r3, #52]	; 0x34
}
 80050da:	bf00      	nop
 80050dc:	3728      	adds	r7, #40	; 0x28
 80050de:	46bd      	mov	sp, r7
 80050e0:	bd80      	pop	{r7, pc}
 80050e2:	bf00      	nop
 80050e4:	080042c5 	.word	0x080042c5
 80050e8:	080044e9 	.word	0x080044e9
 80050ec:	080046e9 	.word	0x080046e9
 80050f0:	08004783 	.word	0x08004783
 80050f4:	0800495f 	.word	0x0800495f

080050f8 <jinit_arith_decoder>:
 * Module initialization routine for arithmetic entropy decoding.
 */

GLOBAL(void)
jinit_arith_decoder (j_decompress_ptr cinfo)
{
 80050f8:	b580      	push	{r7, lr}
 80050fa:	b086      	sub	sp, #24
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  arith_entropy_ptr entropy;
  int i;

  entropy = (arith_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	22bc      	movs	r2, #188	; 0xbc
 8005108:	2101      	movs	r1, #1
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	4798      	blx	r3
 800510e:	60b8      	str	r0, [r7, #8]
				SIZEOF(arith_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	68ba      	ldr	r2, [r7, #8]
 8005114:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
  entropy->pub.start_pass = start_pass;
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	4a27      	ldr	r2, [pc, #156]	; (80051b8 <jinit_arith_decoder+0xc0>)
 800511c:	601a      	str	r2, [r3, #0]

  /* Mark tables unallocated */
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800511e:	2300      	movs	r3, #0
 8005120:	617b      	str	r3, [r7, #20]
 8005122:	e00e      	b.n	8005142 <jinit_arith_decoder+0x4a>
    entropy->dc_stats[i] = NULL;
 8005124:	68bb      	ldr	r3, [r7, #8]
 8005126:	697a      	ldr	r2, [r7, #20]
 8005128:	320e      	adds	r2, #14
 800512a:	2100      	movs	r1, #0
 800512c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    entropy->ac_stats[i] = NULL;
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	697a      	ldr	r2, [r7, #20]
 8005134:	321e      	adds	r2, #30
 8005136:	2100      	movs	r1, #0
 8005138:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	3301      	adds	r3, #1
 8005140:	617b      	str	r3, [r7, #20]
 8005142:	697b      	ldr	r3, [r7, #20]
 8005144:	2b0f      	cmp	r3, #15
 8005146:	dded      	ble.n	8005124 <jinit_arith_decoder+0x2c>
  }

  /* Initialize index for fixed probability estimation */
  entropy->fixed_bin[0] = 113;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2271      	movs	r2, #113	; 0x71
 800514c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

  if (cinfo->progressive_mode) {
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005156:	2b00      	cmp	r3, #0
 8005158:	d02a      	beq.n	80051b0 <jinit_arith_decoder+0xb8>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	685b      	ldr	r3, [r3, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 8005160:	687a      	ldr	r2, [r7, #4]
 8005162:	6a52      	ldr	r2, [r2, #36]	; 0x24
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8005164:	0212      	lsls	r2, r2, #8
 8005166:	2101      	movs	r1, #1
 8005168:	6878      	ldr	r0, [r7, #4]
 800516a:	4798      	blx	r3
 800516c:	4602      	mov	r2, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    coef_bit_ptr = & cinfo->coef_bits[0][0];
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800517a:	613b      	str	r3, [r7, #16]
    for (ci = 0; ci < cinfo->num_components; ci++) 
 800517c:	2300      	movs	r3, #0
 800517e:	60fb      	str	r3, [r7, #12]
 8005180:	e011      	b.n	80051a6 <jinit_arith_decoder+0xae>
      for (i = 0; i < DCTSIZE2; i++)
 8005182:	2300      	movs	r3, #0
 8005184:	617b      	str	r3, [r7, #20]
 8005186:	e008      	b.n	800519a <jinit_arith_decoder+0xa2>
	*coef_bit_ptr++ = -1;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	1d1a      	adds	r2, r3, #4
 800518c:	613a      	str	r2, [r7, #16]
 800518e:	f04f 32ff 	mov.w	r2, #4294967295
 8005192:	601a      	str	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++)
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3301      	adds	r3, #1
 8005198:	617b      	str	r3, [r7, #20]
 800519a:	697b      	ldr	r3, [r7, #20]
 800519c:	2b3f      	cmp	r3, #63	; 0x3f
 800519e:	ddf3      	ble.n	8005188 <jinit_arith_decoder+0x90>
    for (ci = 0; ci < cinfo->num_components; ci++) 
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	3301      	adds	r3, #1
 80051a4:	60fb      	str	r3, [r7, #12]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	429a      	cmp	r2, r3
 80051ae:	dbe8      	blt.n	8005182 <jinit_arith_decoder+0x8a>
  }
}
 80051b0:	bf00      	nop
 80051b2:	3718      	adds	r7, #24
 80051b4:	46bd      	mov	sp, r7
 80051b6:	bd80      	pop	{r7, pc}
 80051b8:	08004d21 	.word	0x08004d21

080051bc <init_mem_source>:
}
#endif /* 0 */

METHODDEF(void)
init_mem_source (j_decompress_ptr cinfo)
{
 80051bc:	b480      	push	{r7}
 80051be:	b083      	sub	sp, #12
 80051c0:	af00      	add	r7, sp, #0
 80051c2:	6078      	str	r0, [r7, #4]
  /* no work necessary here */
}
 80051c4:	bf00      	nop
 80051c6:	370c      	adds	r7, #12
 80051c8:	46bd      	mov	sp, r7
 80051ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ce:	4770      	bx	lr

080051d0 <fill_mem_input_buffer>:
}
#endif /* JFILE */

METHODDEF(boolean)
fill_mem_input_buffer (j_decompress_ptr cinfo)
{
 80051d0:	b580      	push	{r7, lr}
 80051d2:	b082      	sub	sp, #8
 80051d4:	af00      	add	r7, sp, #0
 80051d6:	6078      	str	r0, [r7, #4]

  /* The whole JPEG data is expected to reside in the supplied memory
   * buffer, so any request for more data beyond the given buffer size
   * is treated as an error.
   */
  WARNMS(cinfo, JWRN_JPEG_EOF);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	227b      	movs	r2, #123	; 0x7b
 80051de:	615a      	str	r2, [r3, #20]
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	685b      	ldr	r3, [r3, #4]
 80051e6:	f04f 31ff 	mov.w	r1, #4294967295
 80051ea:	6878      	ldr	r0, [r7, #4]
 80051ec:	4798      	blx	r3

  /* Insert a fake EOI marker */

  cinfo->src->next_input_byte = mybuffer;
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	4a05      	ldr	r2, [pc, #20]	; (8005208 <fill_mem_input_buffer+0x38>)
 80051f4:	601a      	str	r2, [r3, #0]
  cinfo->src->bytes_in_buffer = 2;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	699b      	ldr	r3, [r3, #24]
 80051fa:	2202      	movs	r2, #2
 80051fc:	605a      	str	r2, [r3, #4]

  return TRUE;
 80051fe:	2301      	movs	r3, #1
}
 8005200:	4618      	mov	r0, r3
 8005202:	3708      	adds	r7, #8
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	08021134 	.word	0x08021134

0800520c <skip_input_data>:
 * buffer is the application writer's problem.
 */

METHODDEF(void)
skip_input_data (j_decompress_ptr cinfo, long num_bytes)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  struct jpeg_source_mgr * src = cinfo->src;
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	60fb      	str	r3, [r7, #12]

  /* Just a dumb implementation for now.  Could use fseek() except
   * it doesn't work on pipes.  Not clear that being smart is worth
   * any trouble anyway --- large skips are infrequent.
   */
  if (num_bytes > 0) {
 800521c:	683b      	ldr	r3, [r7, #0]
 800521e:	2b00      	cmp	r3, #0
 8005220:	dd1c      	ble.n	800525c <skip_input_data+0x50>
    while (num_bytes > (long) src->bytes_in_buffer) {
 8005222:	e009      	b.n	8005238 <skip_input_data+0x2c>
      num_bytes -= (long) src->bytes_in_buffer;
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	685b      	ldr	r3, [r3, #4]
 8005228:	461a      	mov	r2, r3
 800522a:	683b      	ldr	r3, [r7, #0]
 800522c:	1a9b      	subs	r3, r3, r2
 800522e:	603b      	str	r3, [r7, #0]
      (void) (*src->fill_input_buffer) (cinfo);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	4798      	blx	r3
    while (num_bytes > (long) src->bytes_in_buffer) {
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	461a      	mov	r2, r3
 800523e:	683b      	ldr	r3, [r7, #0]
 8005240:	4293      	cmp	r3, r2
 8005242:	dcef      	bgt.n	8005224 <skip_input_data+0x18>
      /* note we assume that fill_input_buffer will never return FALSE,
       * so suspension need not be handled.
       */
    }
    src->next_input_byte += (size_t) num_bytes;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681a      	ldr	r2, [r3, #0]
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	441a      	add	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	601a      	str	r2, [r3, #0]
    src->bytes_in_buffer -= (size_t) num_bytes;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	685a      	ldr	r2, [r3, #4]
 8005254:	683b      	ldr	r3, [r7, #0]
 8005256:	1ad2      	subs	r2, r2, r3
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	605a      	str	r2, [r3, #4]
  }
}
 800525c:	bf00      	nop
 800525e:	3710      	adds	r7, #16
 8005260:	46bd      	mov	sp, r7
 8005262:	bd80      	pop	{r7, pc}

08005264 <term_source>:
 * for error exit.
 */

METHODDEF(void)
term_source (j_decompress_ptr cinfo)
{
 8005264:	b480      	push	{r7}
 8005266:	b083      	sub	sp, #12
 8005268:	af00      	add	r7, sp, #0
 800526a:	6078      	str	r0, [r7, #4]
  /* no work necessary here */
}
 800526c:	bf00      	nop
 800526e:	370c      	adds	r7, #12
 8005270:	46bd      	mov	sp, r7
 8005272:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005276:	4770      	bx	lr

08005278 <jpeg_mem_src>:
 */

GLOBAL(void)
jpeg_mem_src (j_decompress_ptr cinfo,
	      unsigned char * inbuffer, unsigned long insize)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b086      	sub	sp, #24
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
  struct jpeg_source_mgr * src;

  if (inbuffer == NULL || insize == 0)	/* Treat empty input as fatal error */
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	2b00      	cmp	r3, #0
 8005288:	d002      	beq.n	8005290 <jpeg_mem_src+0x18>
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d108      	bne.n	80052a2 <jpeg_mem_src+0x2a>
    ERREXIT(cinfo, JERR_INPUT_EMPTY);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	222b      	movs	r2, #43	; 0x2b
 8005296:	615a      	str	r2, [r3, #20]
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	68f8      	ldr	r0, [r7, #12]
 80052a0:	4798      	blx	r3

  /* The source object is made permanent so that a series of JPEG images
   * can be read from the same buffer by calling jpeg_mem_src only before
   * the first one.
   */
  if (cinfo->src == NULL) {	/* first time for this JPEG object? */
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	699b      	ldr	r3, [r3, #24]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d109      	bne.n	80052be <jpeg_mem_src+0x46>
    cinfo->src = (struct jpeg_source_mgr *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	221c      	movs	r2, #28
 80052b2:	2100      	movs	r1, #0
 80052b4:	68f8      	ldr	r0, [r7, #12]
 80052b6:	4798      	blx	r3
 80052b8:	4602      	mov	r2, r0
    cinfo->src = (struct jpeg_source_mgr *)
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	619a      	str	r2, [r3, #24]
				  SIZEOF(struct jpeg_source_mgr));
  }

  src = cinfo->src;
 80052be:	68fb      	ldr	r3, [r7, #12]
 80052c0:	699b      	ldr	r3, [r3, #24]
 80052c2:	617b      	str	r3, [r7, #20]
  src->init_source = init_mem_source;
 80052c4:	697b      	ldr	r3, [r7, #20]
 80052c6:	4a0c      	ldr	r2, [pc, #48]	; (80052f8 <jpeg_mem_src+0x80>)
 80052c8:	609a      	str	r2, [r3, #8]
  src->fill_input_buffer = fill_mem_input_buffer;
 80052ca:	697b      	ldr	r3, [r7, #20]
 80052cc:	4a0b      	ldr	r2, [pc, #44]	; (80052fc <jpeg_mem_src+0x84>)
 80052ce:	60da      	str	r2, [r3, #12]
  src->skip_input_data = skip_input_data;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	4a0b      	ldr	r2, [pc, #44]	; (8005300 <jpeg_mem_src+0x88>)
 80052d4:	611a      	str	r2, [r3, #16]
  src->resync_to_restart = jpeg_resync_to_restart; /* use default method */
 80052d6:	697b      	ldr	r3, [r7, #20]
 80052d8:	4a0a      	ldr	r2, [pc, #40]	; (8005304 <jpeg_mem_src+0x8c>)
 80052da:	615a      	str	r2, [r3, #20]
  src->term_source = term_source;
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	4a0a      	ldr	r2, [pc, #40]	; (8005308 <jpeg_mem_src+0x90>)
 80052e0:	619a      	str	r2, [r3, #24]
  src->bytes_in_buffer = (size_t) insize;
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	687a      	ldr	r2, [r7, #4]
 80052e6:	605a      	str	r2, [r3, #4]
  src->next_input_byte = (JOCTET *) inbuffer;
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	68ba      	ldr	r2, [r7, #8]
 80052ec:	601a      	str	r2, [r3, #0]
}
 80052ee:	bf00      	nop
 80052f0:	3718      	adds	r7, #24
 80052f2:	46bd      	mov	sp, r7
 80052f4:	bd80      	pop	{r7, pc}
 80052f6:	bf00      	nop
 80052f8:	080051bd 	.word	0x080051bd
 80052fc:	080051d1 	.word	0x080051d1
 8005300:	0800520d 	.word	0x0800520d
 8005304:	0800d0bd 	.word	0x0800d0bd
 8005308:	08005265 	.word	0x08005265

0800530c <start_iMCU_row>:


LOCAL(void)
start_iMCU_row (j_decompress_ptr cinfo)
/* Reset within-iMCU-row counters for a new row (input side) */
{
 800530c:	b480      	push	{r7}
 800530e:	b085      	sub	sp, #20
 8005310:	af00      	add	r7, sp, #0
 8005312:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800531a:	60fb      	str	r3, [r7, #12]

  /* In an interleaved scan, an MCU row is the same as an iMCU row.
   * In a noninterleaved scan, an iMCU row has v_samp_factor MCU rows.
   * But at the bottom of the image, process only what's left.
   */
  if (cinfo->comps_in_scan > 1) {
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005322:	2b01      	cmp	r3, #1
 8005324:	dd03      	ble.n	800532e <start_iMCU_row+0x22>
    coef->MCU_rows_per_iMCU_row = 1;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	61da      	str	r2, [r3, #28]
 800532c:	e015      	b.n	800535a <start_iMCU_row+0x4e>
  } else {
    if (cinfo->input_iMCU_row < (cinfo->total_iMCU_rows-1))
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800533a:	3b01      	subs	r3, #1
 800533c:	429a      	cmp	r2, r3
 800533e:	d206      	bcs.n	800534e <start_iMCU_row+0x42>
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->v_samp_factor;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	61da      	str	r2, [r3, #28]
 800534c:	e005      	b.n	800535a <start_iMCU_row+0x4e>
    else
      coef->MCU_rows_per_iMCU_row = cinfo->cur_comp_info[0]->last_row_height;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 8005354:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	61da      	str	r2, [r3, #28]
  }

  coef->MCU_ctr = 0;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	2200      	movs	r2, #0
 800535e:	615a      	str	r2, [r3, #20]
  coef->MCU_vert_offset = 0;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2200      	movs	r2, #0
 8005364:	619a      	str	r2, [r3, #24]
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr

08005372 <start_input_pass>:
 * Initialize for an input processing pass.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b082      	sub	sp, #8
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  cinfo->input_iMCU_row = 0;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	2200      	movs	r2, #0
 800537e:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  start_iMCU_row(cinfo);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7ff ffc2 	bl	800530c <start_iMCU_row>
}
 8005388:	bf00      	nop
 800538a:	3708      	adds	r7, #8
 800538c:	46bd      	mov	sp, r7
 800538e:	bd80      	pop	{r7, pc}

08005390 <start_output_pass>:
 * Initialize for an output processing pass.
 */

METHODDEF(void)
start_output_pass (j_decompress_ptr cinfo)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
#ifdef BLOCK_SMOOTHING_SUPPORTED
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800539e:	60fb      	str	r3, [r7, #12]

  /* If multipass, check to see whether to use block smoothing on this pass */
  if (coef->pub.coef_arrays != NULL) {
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d010      	beq.n	80053ca <start_output_pass+0x3a>
    if (cinfo->do_block_smoothing && smoothing_ok(cinfo))
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d009      	beq.n	80053c4 <start_output_pass+0x34>
 80053b0:	6878      	ldr	r0, [r7, #4]
 80053b2:	f000 fad2 	bl	800595a <smoothing_ok>
 80053b6:	4603      	mov	r3, r0
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d003      	beq.n	80053c4 <start_output_pass+0x34>
      coef->pub.decompress_data = decompress_smooth_data;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	4a07      	ldr	r2, [pc, #28]	; (80053dc <start_output_pass+0x4c>)
 80053c0:	60da      	str	r2, [r3, #12]
 80053c2:	e002      	b.n	80053ca <start_output_pass+0x3a>
    else
      coef->pub.decompress_data = decompress_data;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4a06      	ldr	r2, [pc, #24]	; (80053e0 <start_output_pass+0x50>)
 80053c8:	60da      	str	r2, [r3, #12]
  }
#endif
  cinfo->output_iMCU_row = 0;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	2200      	movs	r2, #0
 80053ce:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
}
 80053d2:	bf00      	nop
 80053d4:	3710      	adds	r7, #16
 80053d6:	46bd      	mov	sp, r7
 80053d8:	bd80      	pop	{r7, pc}
 80053da:	bf00      	nop
 80053dc:	08005a81 	.word	0x08005a81
 80053e0:	080057b1 	.word	0x080057b1

080053e4 <decompress_onepass>:
 * which we index according to the component's SOF position.
 */

METHODDEF(int)
decompress_onepass (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 80053e4:	b590      	push	{r4, r7, lr}
 80053e6:	b095      	sub	sp, #84	; 0x54
 80053e8:	af02      	add	r7, sp, #8
 80053ea:	6078      	str	r0, [r7, #4]
 80053ec:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80053f4:	627b      	str	r3, [r7, #36]	; 0x24
  JDIMENSION MCU_col_num;	/* index of current MCU within row */
  JDIMENSION last_MCU_col = cinfo->MCUs_per_row - 1;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 80053fc:	3b01      	subs	r3, #1
 80053fe:	623b      	str	r3, [r7, #32]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005406:	3b01      	subs	r3, #1
 8005408:	61fb      	str	r3, [r7, #28]
  JDIMENSION start_col, output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Loop to process as much as one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 800540a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800540c:	699b      	ldr	r3, [r3, #24]
 800540e:	633b      	str	r3, [r7, #48]	; 0x30
 8005410:	e0bf      	b.n	8005592 <decompress_onepass+0x1ae>
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 8005412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005414:	695b      	ldr	r3, [r3, #20]
 8005416:	647b      	str	r3, [r7, #68]	; 0x44
 8005418:	e0b0      	b.n	800557c <decompress_onepass+0x198>
	 MCU_col_num++) {
      /* Try to fetch an MCU.  Entropy decoder expects buffer to be zeroed. */
      if (cinfo->lim_Se)	/* can bypass in DC only case */
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8005420:	2b00      	cmp	r3, #0
 8005422:	d009      	beq.n	8005438 <decompress_onepass+0x54>
	FMEMZERO((void FAR *) coef->MCU_buffer[0],
 8005424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005426:	6a18      	ldr	r0, [r3, #32]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800542e:	01db      	lsls	r3, r3, #7
 8005430:	461a      	mov	r2, r3
 8005432:	2100      	movs	r1, #0
 8005434:	f019 ffd0 	bl	801f3d8 <memset>
		 (size_t) (cinfo->blocks_in_MCU * SIZEOF(JBLOCK)));
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800543e:	685b      	ldr	r3, [r3, #4]
 8005440:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005442:	3220      	adds	r2, #32
 8005444:	4611      	mov	r1, r2
 8005446:	6878      	ldr	r0, [r7, #4]
 8005448:	4798      	blx	r3
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d107      	bne.n	8005460 <decompress_onepass+0x7c>
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
 8005450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005452:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005454:	619a      	str	r2, [r3, #24]
	coef->MCU_ctr = MCU_col_num;
 8005456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005458:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800545a:	615a      	str	r2, [r3, #20]
	return JPEG_SUSPENDED;
 800545c:	2300      	movs	r3, #0
 800545e:	e0c0      	b.n	80055e2 <decompress_onepass+0x1fe>
      /* Determine where data should go in output_buf and do the IDCT thing.
       * We skip dummy blocks at the right and bottom edges (but blkn gets
       * incremented past them!).  Note the inner loop relies on having
       * allocated the MCU_buffer[] blocks sequentially.
       */
      blkn = 0;			/* index of current DCT block within MCU */
 8005460:	2300      	movs	r3, #0
 8005462:	643b      	str	r3, [r7, #64]	; 0x40
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005464:	2300      	movs	r3, #0
 8005466:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005468:	e07e      	b.n	8005568 <decompress_onepass+0x184>
	compptr = cinfo->cur_comp_info[ci];
 800546a:	687a      	ldr	r2, [r7, #4]
 800546c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800546e:	3354      	adds	r3, #84	; 0x54
 8005470:	009b      	lsls	r3, r3, #2
 8005472:	4413      	add	r3, r2
 8005474:	685b      	ldr	r3, [r3, #4]
 8005476:	61bb      	str	r3, [r7, #24]
	/* Don't bother to IDCT an uninteresting component. */
	if (! compptr->component_needed) {
 8005478:	69bb      	ldr	r3, [r7, #24]
 800547a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547c:	2b00      	cmp	r3, #0
 800547e:	d105      	bne.n	800548c <decompress_onepass+0xa8>
	  blkn += compptr->MCU_blocks;
 8005480:	69bb      	ldr	r3, [r7, #24]
 8005482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005484:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005486:	4413      	add	r3, r2
 8005488:	643b      	str	r3, [r7, #64]	; 0x40
	  continue;
 800548a:	e06a      	b.n	8005562 <decompress_onepass+0x17e>
	}
	inverse_DCT = cinfo->idct->inverse_DCT[compptr->component_index];
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 8005492:	69bb      	ldr	r3, [r7, #24]
 8005494:	685b      	ldr	r3, [r3, #4]
 8005496:	009b      	lsls	r3, r3, #2
 8005498:	4413      	add	r3, r2
 800549a:	685b      	ldr	r3, [r3, #4]
 800549c:	617b      	str	r3, [r7, #20]
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
						    : compptr->last_col_width;
 800549e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80054a0:	6a3b      	ldr	r3, [r7, #32]
 80054a2:	429a      	cmp	r2, r3
 80054a4:	d202      	bcs.n	80054ac <decompress_onepass+0xc8>
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054aa:	e001      	b.n	80054b0 <decompress_onepass+0xcc>
 80054ac:	69bb      	ldr	r3, [r7, #24]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
	useful_width = (MCU_col_num < last_MCU_col) ? compptr->MCU_width
 80054b0:	613b      	str	r3, [r7, #16]
	output_ptr = output_buf[compptr->component_index] +
 80054b2:	69bb      	ldr	r3, [r7, #24]
 80054b4:	685b      	ldr	r3, [r3, #4]
 80054b6:	009b      	lsls	r3, r3, #2
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	4413      	add	r3, r2
 80054bc:	681a      	ldr	r2, [r3, #0]
	  yoffset * compptr->DCT_v_scaled_size;
 80054be:	69bb      	ldr	r3, [r7, #24]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80054c4:	fb01 f303 	mul.w	r3, r1, r3
	output_ptr = output_buf[compptr->component_index] +
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	62fb      	str	r3, [r7, #44]	; 0x2c
	start_col = MCU_col_num * compptr->MCU_sample_width;
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054d2:	461a      	mov	r2, r3
 80054d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80054d6:	fb02 f303 	mul.w	r3, r2, r3
 80054da:	60fb      	str	r3, [r7, #12]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80054dc:	2300      	movs	r3, #0
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
 80054e0:	e03a      	b.n	8005558 <decompress_onepass+0x174>
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80054e8:	69fa      	ldr	r2, [r7, #28]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d806      	bhi.n	80054fc <decompress_onepass+0x118>
	      yoffset+yindex < compptr->last_row_height) {
 80054ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054f2:	441a      	add	r2, r3
 80054f4:	69bb      	ldr	r3, [r7, #24]
 80054f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
	  if (cinfo->input_iMCU_row < last_iMCU_row ||
 80054f8:	429a      	cmp	r2, r3
 80054fa:	da1f      	bge.n	800553c <decompress_onepass+0x158>
	    output_col = start_col;
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	62bb      	str	r3, [r7, #40]	; 0x28
	    for (xindex = 0; xindex < useful_width; xindex++) {
 8005500:	2300      	movs	r3, #0
 8005502:	63bb      	str	r3, [r7, #56]	; 0x38
 8005504:	e016      	b.n	8005534 <decompress_onepass+0x150>
	      (*inverse_DCT) (cinfo, compptr,
			      (JCOEFPTR) coef->MCU_buffer[blkn+xindex],
 8005506:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550a:	441a      	add	r2, r3
 800550c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800550e:	3208      	adds	r2, #8
 8005510:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	      (*inverse_DCT) (cinfo, compptr,
 8005514:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005516:	9300      	str	r3, [sp, #0]
 8005518:	697c      	ldr	r4, [r7, #20]
 800551a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800551c:	69b9      	ldr	r1, [r7, #24]
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	47a0      	blx	r4
			      output_ptr, output_col);
	      output_col += compptr->DCT_h_scaled_size;
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005526:	461a      	mov	r2, r3
 8005528:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800552a:	4413      	add	r3, r2
 800552c:	62bb      	str	r3, [r7, #40]	; 0x28
	    for (xindex = 0; xindex < useful_width; xindex++) {
 800552e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005530:	3301      	adds	r3, #1
 8005532:	63bb      	str	r3, [r7, #56]	; 0x38
 8005534:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	429a      	cmp	r2, r3
 800553a:	dbe4      	blt.n	8005506 <decompress_onepass+0x122>
	    }
	  }
	  blkn += compptr->MCU_width;
 800553c:	69bb      	ldr	r3, [r7, #24]
 800553e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005540:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005542:	4413      	add	r3, r2
 8005544:	643b      	str	r3, [r7, #64]	; 0x40
	  output_ptr += compptr->DCT_v_scaled_size;
 8005546:	69bb      	ldr	r3, [r7, #24]
 8005548:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800554a:	009b      	lsls	r3, r3, #2
 800554c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800554e:	4413      	add	r3, r2
 8005550:	62fb      	str	r3, [r7, #44]	; 0x2c
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8005552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005554:	3301      	adds	r3, #1
 8005556:	637b      	str	r3, [r7, #52]	; 0x34
 8005558:	69bb      	ldr	r3, [r7, #24]
 800555a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800555c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800555e:	429a      	cmp	r2, r3
 8005560:	dbbf      	blt.n	80054e2 <decompress_onepass+0xfe>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005562:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005564:	3301      	adds	r3, #1
 8005566:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800556e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005570:	429a      	cmp	r2, r3
 8005572:	f6ff af7a 	blt.w	800546a <decompress_onepass+0x86>
	 MCU_col_num++) {
 8005576:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005578:	3301      	adds	r3, #1
 800557a:	647b      	str	r3, [r7, #68]	; 0x44
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num <= last_MCU_col;
 800557c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800557e:	6a3b      	ldr	r3, [r7, #32]
 8005580:	429a      	cmp	r2, r3
 8005582:	f67f af4a 	bls.w	800541a <decompress_onepass+0x36>
	}
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
 8005586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005588:	2200      	movs	r2, #0
 800558a:	615a      	str	r2, [r3, #20]
       yoffset++) {
 800558c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800558e:	3301      	adds	r3, #1
 8005590:	633b      	str	r3, [r7, #48]	; 0x30
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8005592:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005594:	69db      	ldr	r3, [r3, #28]
 8005596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005598:	429a      	cmp	r2, r3
 800559a:	f6ff af3a 	blt.w	8005412 <decompress_onepass+0x2e>
  }
  /* Completed the iMCU row, advance counters for next one */
  cinfo->output_iMCU_row++;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055b2:	1c5a      	adds	r2, r3, #1
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80055c6:	429a      	cmp	r2, r3
 80055c8:	d204      	bcs.n	80055d4 <decompress_onepass+0x1f0>
    start_iMCU_row(cinfo);
 80055ca:	6878      	ldr	r0, [r7, #4]
 80055cc:	f7ff fe9e 	bl	800530c <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 80055d0:	2303      	movs	r3, #3
 80055d2:	e006      	b.n	80055e2 <decompress_onepass+0x1fe>
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	6878      	ldr	r0, [r7, #4]
 80055de:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 80055e0:	2304      	movs	r3, #4
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	374c      	adds	r7, #76	; 0x4c
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd90      	pop	{r4, r7, pc}

080055ea <dummy_consume_data>:
 * Dummy consume-input routine for single-pass operation.
 */

METHODDEF(int)
dummy_consume_data (j_decompress_ptr cinfo)
{
 80055ea:	b480      	push	{r7}
 80055ec:	b083      	sub	sp, #12
 80055ee:	af00      	add	r7, sp, #0
 80055f0:	6078      	str	r0, [r7, #4]
  return JPEG_SUSPENDED;	/* Always indicate nothing was done */
 80055f2:	2300      	movs	r3, #0
}
 80055f4:	4618      	mov	r0, r3
 80055f6:	370c      	adds	r7, #12
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr

08005600 <consume_data>:
 * Return value is JPEG_ROW_COMPLETED, JPEG_SCAN_COMPLETED, or JPEG_SUSPENDED.
 */

METHODDEF(int)
consume_data (j_decompress_ptr cinfo)
{
 8005600:	b590      	push	{r4, r7, lr}
 8005602:	b093      	sub	sp, #76	; 0x4c
 8005604:	af02      	add	r7, sp, #8
 8005606:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800560e:	623b      	str	r3, [r7, #32]
  JBLOCKARRAY buffer[MAX_COMPS_IN_SCAN];
  JBLOCKROW buffer_ptr;
  jpeg_component_info *compptr;

  /* Align the virtual buffers for the components used in this scan. */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005610:	2300      	movs	r3, #0
 8005612:	637b      	str	r3, [r7, #52]	; 0x34
 8005614:	e029      	b.n	800566a <consume_data+0x6a>
    compptr = cinfo->cur_comp_info[ci];
 8005616:	687a      	ldr	r2, [r7, #4]
 8005618:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800561a:	3354      	adds	r3, #84	; 0x54
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	4413      	add	r3, r2
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	61fb      	str	r3, [r7, #28]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	685b      	ldr	r3, [r3, #4]
 8005628:	6a1c      	ldr	r4, [r3, #32]
      ((j_common_ptr) cinfo, coef->whole_image[compptr->component_index],
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	685a      	ldr	r2, [r3, #4]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 800562e:	6a3b      	ldr	r3, [r7, #32]
 8005630:	3212      	adds	r2, #18
 8005632:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
       cinfo->input_iMCU_row * compptr->v_samp_factor,
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800563c:	69fa      	ldr	r2, [r7, #28]
 800563e:	68d2      	ldr	r2, [r2, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8005640:	fb02 f203 	mul.w	r2, r2, r3
       (JDIMENSION) compptr->v_samp_factor, TRUE);
 8005644:	69fb      	ldr	r3, [r7, #28]
 8005646:	68db      	ldr	r3, [r3, #12]
    buffer[ci] = (*cinfo->mem->access_virt_barray)
 8005648:	4618      	mov	r0, r3
 800564a:	2301      	movs	r3, #1
 800564c:	9300      	str	r3, [sp, #0]
 800564e:	4603      	mov	r3, r0
 8005650:	6878      	ldr	r0, [r7, #4]
 8005652:	47a0      	blx	r4
 8005654:	4602      	mov	r2, r0
 8005656:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005658:	009b      	lsls	r3, r3, #2
 800565a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 800565e:	440b      	add	r3, r1
 8005660:	f843 2c38 	str.w	r2, [r3, #-56]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005664:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005666:	3301      	adds	r3, #1
 8005668:	637b      	str	r3, [r7, #52]	; 0x34
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8005670:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005672:	429a      	cmp	r2, r3
 8005674:	dbcf      	blt.n	8005616 <consume_data+0x16>
     * because we requested a pre-zeroed array.
     */
  }

  /* Loop to process one whole iMCU row */
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8005676:	6a3b      	ldr	r3, [r7, #32]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	62bb      	str	r3, [r7, #40]	; 0x28
 800567c:	e074      	b.n	8005768 <consume_data+0x168>
       yoffset++) {
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 800567e:	6a3b      	ldr	r3, [r7, #32]
 8005680:	695b      	ldr	r3, [r3, #20]
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005684:	e064      	b.n	8005750 <consume_data+0x150>
	 MCU_col_num++) {
      /* Construct list of pointers to DCT blocks belonging to this MCU */
      blkn = 0;			/* index of current DCT block within MCU */
 8005686:	2300      	movs	r3, #0
 8005688:	63bb      	str	r3, [r7, #56]	; 0x38
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800568a:	2300      	movs	r3, #0
 800568c:	637b      	str	r3, [r7, #52]	; 0x34
 800568e:	e042      	b.n	8005716 <consume_data+0x116>
	compptr = cinfo->cur_comp_info[ci];
 8005690:	687a      	ldr	r2, [r7, #4]
 8005692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005694:	3354      	adds	r3, #84	; 0x54
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	685b      	ldr	r3, [r3, #4]
 800569c:	61fb      	str	r3, [r7, #28]
	start_col = MCU_col_num * compptr->MCU_width;
 800569e:	69fb      	ldr	r3, [r7, #28]
 80056a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056a2:	461a      	mov	r2, r3
 80056a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056a6:	fb02 f303 	mul.w	r3, r2, r3
 80056aa:	61bb      	str	r3, [r7, #24]
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 80056ac:	2300      	movs	r3, #0
 80056ae:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056b0:	e029      	b.n	8005706 <consume_data+0x106>
	  buffer_ptr = buffer[ci][yindex+yoffset] + start_col;
 80056b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056b4:	009b      	lsls	r3, r3, #2
 80056b6:	f107 0240 	add.w	r2, r7, #64	; 0x40
 80056ba:	4413      	add	r3, r2
 80056bc:	f853 2c38 	ldr.w	r2, [r3, #-56]
 80056c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80056c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c4:	440b      	add	r3, r1
 80056c6:	009b      	lsls	r3, r3, #2
 80056c8:	4413      	add	r3, r2
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	01db      	lsls	r3, r3, #7
 80056d0:	4413      	add	r3, r2
 80056d2:	627b      	str	r3, [r7, #36]	; 0x24
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80056d4:	2300      	movs	r3, #0
 80056d6:	633b      	str	r3, [r7, #48]	; 0x30
 80056d8:	e00d      	b.n	80056f6 <consume_data+0xf6>
	    coef->MCU_buffer[blkn++] = buffer_ptr++;
 80056da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056dc:	f103 0280 	add.w	r2, r3, #128	; 0x80
 80056e0:	627a      	str	r2, [r7, #36]	; 0x24
 80056e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80056e4:	1c51      	adds	r1, r2, #1
 80056e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80056e8:	6a39      	ldr	r1, [r7, #32]
 80056ea:	3208      	adds	r2, #8
 80056ec:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
	  for (xindex = 0; xindex < compptr->MCU_width; xindex++) {
 80056f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056f2:	3301      	adds	r3, #1
 80056f4:	633b      	str	r3, [r7, #48]	; 0x30
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80056fc:	429a      	cmp	r2, r3
 80056fe:	dbec      	blt.n	80056da <consume_data+0xda>
	for (yindex = 0; yindex < compptr->MCU_height; yindex++) {
 8005700:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005702:	3301      	adds	r3, #1
 8005704:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005706:	69fb      	ldr	r3, [r7, #28]
 8005708:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800570a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800570c:	429a      	cmp	r2, r3
 800570e:	dbd0      	blt.n	80056b2 <consume_data+0xb2>
      for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8005710:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005712:	3301      	adds	r3, #1
 8005714:	637b      	str	r3, [r7, #52]	; 0x34
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800571c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800571e:	429a      	cmp	r2, r3
 8005720:	dbb6      	blt.n	8005690 <consume_data+0x90>
	  }
	}
      }
      /* Try to fetch the MCU. */
      if (! (*cinfo->entropy->decode_mcu) (cinfo, coef->MCU_buffer)) {
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8005728:	685b      	ldr	r3, [r3, #4]
 800572a:	6a3a      	ldr	r2, [r7, #32]
 800572c:	3220      	adds	r2, #32
 800572e:	4611      	mov	r1, r2
 8005730:	6878      	ldr	r0, [r7, #4]
 8005732:	4798      	blx	r3
 8005734:	4603      	mov	r3, r0
 8005736:	2b00      	cmp	r3, #0
 8005738:	d107      	bne.n	800574a <consume_data+0x14a>
	/* Suspension forced; update state counters and exit */
	coef->MCU_vert_offset = yoffset;
 800573a:	6a3b      	ldr	r3, [r7, #32]
 800573c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800573e:	619a      	str	r2, [r3, #24]
	coef->MCU_ctr = MCU_col_num;
 8005740:	6a3b      	ldr	r3, [r7, #32]
 8005742:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005744:	615a      	str	r2, [r3, #20]
	return JPEG_SUSPENDED;
 8005746:	2300      	movs	r3, #0
 8005748:	e02e      	b.n	80057a8 <consume_data+0x1a8>
	 MCU_col_num++) {
 800574a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800574c:	3301      	adds	r3, #1
 800574e:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (MCU_col_num = coef->MCU_ctr; MCU_col_num < cinfo->MCUs_per_row;
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	f8d3 3164 	ldr.w	r3, [r3, #356]	; 0x164
 8005756:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005758:	429a      	cmp	r2, r3
 800575a:	d394      	bcc.n	8005686 <consume_data+0x86>
      }
    }
    /* Completed an MCU row, but perhaps not an iMCU row */
    coef->MCU_ctr = 0;
 800575c:	6a3b      	ldr	r3, [r7, #32]
 800575e:	2200      	movs	r2, #0
 8005760:	615a      	str	r2, [r3, #20]
       yoffset++) {
 8005762:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005764:	3301      	adds	r3, #1
 8005766:	62bb      	str	r3, [r7, #40]	; 0x28
  for (yoffset = coef->MCU_vert_offset; yoffset < coef->MCU_rows_per_iMCU_row;
 8005768:	6a3b      	ldr	r3, [r7, #32]
 800576a:	69db      	ldr	r3, [r3, #28]
 800576c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800576e:	429a      	cmp	r2, r3
 8005770:	db85      	blt.n	800567e <consume_data+0x7e>
  }
  /* Completed the iMCU row, advance counters for next one */
  if (++(cinfo->input_iMCU_row) < cinfo->total_iMCU_rows) {
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005778:	1c5a      	adds	r2, r3, #1
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800578c:	429a      	cmp	r2, r3
 800578e:	d204      	bcs.n	800579a <consume_data+0x19a>
    start_iMCU_row(cinfo);
 8005790:	6878      	ldr	r0, [r7, #4]
 8005792:	f7ff fdbb 	bl	800530c <start_iMCU_row>
    return JPEG_ROW_COMPLETED;
 8005796:	2303      	movs	r3, #3
 8005798:	e006      	b.n	80057a8 <consume_data+0x1a8>
  }
  /* Completed the scan */
  (*cinfo->inputctl->finish_input_pass) (cinfo);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80057a0:	68db      	ldr	r3, [r3, #12]
 80057a2:	6878      	ldr	r0, [r7, #4]
 80057a4:	4798      	blx	r3
  return JPEG_SCAN_COMPLETED;
 80057a6:	2304      	movs	r3, #4
}
 80057a8:	4618      	mov	r0, r3
 80057aa:	3744      	adds	r7, #68	; 0x44
 80057ac:	46bd      	mov	sp, r7
 80057ae:	bd90      	pop	{r4, r7, pc}

080057b0 <decompress_data>:
 * NB: output_buf contains a plane for each component in image.
 */

METHODDEF(int)
decompress_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 80057b0:	b590      	push	{r4, r7, lr}
 80057b2:	b091      	sub	sp, #68	; 0x44
 80057b4:	af02      	add	r7, sp, #8
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 80057c0:	617b      	str	r3, [r7, #20]
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80057c8:	3b01      	subs	r3, #1
 80057ca:	613b      	str	r3, [r7, #16]
  JDIMENSION output_col;
  jpeg_component_info *compptr;
  inverse_DCT_method_ptr inverse_DCT;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 80057cc:	e00a      	b.n	80057e4 <decompress_data+0x34>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	6878      	ldr	r0, [r7, #4]
 80057d8:	4798      	blx	r3
 80057da:	4603      	mov	r3, r0
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d101      	bne.n	80057e4 <decompress_data+0x34>
      return JPEG_SUSPENDED;
 80057e0:	2300      	movs	r3, #0
 80057e2:	e0b6      	b.n	8005952 <decompress_data+0x1a2>
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057f0:	429a      	cmp	r2, r3
 80057f2:	dbec      	blt.n	80057ce <decompress_data+0x1e>
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
  while (cinfo->input_scan_number < cinfo->output_scan_number ||
 8005800:	429a      	cmp	r2, r3
 8005802:	d107      	bne.n	8005814 <decompress_data+0x64>
	  cinfo->input_iMCU_row <= cinfo->output_iMCU_row)) {
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	 (cinfo->input_scan_number == cinfo->output_scan_number &&
 8005810:	429a      	cmp	r2, r3
 8005812:	d9dc      	bls.n	80057ce <decompress_data+0x1e>
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8005814:	2300      	movs	r3, #0
 8005816:	633b      	str	r3, [r7, #48]	; 0x30
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800581e:	61bb      	str	r3, [r7, #24]
 8005820:	e07f      	b.n	8005922 <decompress_data+0x172>
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005826:	2b00      	cmp	r3, #0
 8005828:	d074      	beq.n	8005914 <decompress_data+0x164>
      continue;
    /* Align the virtual buffer for this component. */
    buffer = (*cinfo->mem->access_virt_barray)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	685b      	ldr	r3, [r3, #4]
 800582e:	6a1c      	ldr	r4, [r3, #32]
 8005830:	697b      	ldr	r3, [r7, #20]
 8005832:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005834:	3212      	adds	r2, #18
 8005836:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
      ((j_common_ptr) cinfo, coef->whole_image[ci],
       cinfo->output_iMCU_row * compptr->v_samp_factor,
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005840:	69ba      	ldr	r2, [r7, #24]
 8005842:	68d2      	ldr	r2, [r2, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 8005844:	fb02 f203 	mul.w	r2, r2, r3
       (JDIMENSION) compptr->v_samp_factor, FALSE);
 8005848:	69bb      	ldr	r3, [r7, #24]
 800584a:	68db      	ldr	r3, [r3, #12]
    buffer = (*cinfo->mem->access_virt_barray)
 800584c:	4618      	mov	r0, r3
 800584e:	2300      	movs	r3, #0
 8005850:	9300      	str	r3, [sp, #0]
 8005852:	4603      	mov	r3, r0
 8005854:	6878      	ldr	r0, [r7, #4]
 8005856:	47a0      	blx	r4
 8005858:	60f8      	str	r0, [r7, #12]
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005860:	693a      	ldr	r2, [r7, #16]
 8005862:	429a      	cmp	r2, r3
 8005864:	d903      	bls.n	800586e <decompress_data+0xbe>
      block_rows = compptr->v_samp_factor;
 8005866:	69bb      	ldr	r3, [r7, #24]
 8005868:	68db      	ldr	r3, [r3, #12]
 800586a:	62bb      	str	r3, [r7, #40]	; 0x28
 800586c:	e00f      	b.n	800588e <decompress_data+0xde>
    else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800586e:	69bb      	ldr	r3, [r7, #24]
 8005870:	6a1b      	ldr	r3, [r3, #32]
 8005872:	69ba      	ldr	r2, [r7, #24]
 8005874:	68d2      	ldr	r2, [r2, #12]
 8005876:	fbb3 f1f2 	udiv	r1, r3, r2
 800587a:	fb02 f201 	mul.w	r2, r2, r1
 800587e:	1a9b      	subs	r3, r3, r2
 8005880:	62bb      	str	r3, [r7, #40]	; 0x28
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8005882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005884:	2b00      	cmp	r3, #0
 8005886:	d102      	bne.n	800588e <decompress_data+0xde>
 8005888:	69bb      	ldr	r3, [r7, #24]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	62bb      	str	r3, [r7, #40]	; 0x28
    }
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	009b      	lsls	r3, r3, #2
 8005898:	4413      	add	r3, r2
 800589a:	685b      	ldr	r3, [r3, #4]
 800589c:	60bb      	str	r3, [r7, #8]
    output_ptr = output_buf[ci];
 800589e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058a0:	009b      	lsls	r3, r3, #2
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	4413      	add	r3, r2
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	623b      	str	r3, [r7, #32]
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
 80058aa:	2300      	movs	r3, #0
 80058ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80058ae:	e02c      	b.n	800590a <decompress_data+0x15a>
      buffer_ptr = buffer[block_row];
 80058b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058b2:	009b      	lsls	r3, r3, #2
 80058b4:	68fa      	ldr	r2, [r7, #12]
 80058b6:	4413      	add	r3, r2
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	627b      	str	r3, [r7, #36]	; 0x24
      output_col = 0;
 80058bc:	2300      	movs	r3, #0
 80058be:	61fb      	str	r3, [r7, #28]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 80058c0:	2300      	movs	r3, #0
 80058c2:	637b      	str	r3, [r7, #52]	; 0x34
 80058c4:	e013      	b.n	80058ee <decompress_data+0x13e>
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) buffer_ptr,
 80058c6:	69fb      	ldr	r3, [r7, #28]
 80058c8:	9300      	str	r3, [sp, #0]
 80058ca:	68bc      	ldr	r4, [r7, #8]
 80058cc:	6a3b      	ldr	r3, [r7, #32]
 80058ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058d0:	69b9      	ldr	r1, [r7, #24]
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	47a0      	blx	r4
			output_ptr, output_col);
	buffer_ptr++;
 80058d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d8:	3380      	adds	r3, #128	; 0x80
 80058da:	627b      	str	r3, [r7, #36]	; 0x24
	output_col += compptr->DCT_h_scaled_size;
 80058dc:	69bb      	ldr	r3, [r7, #24]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	461a      	mov	r2, r3
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	4413      	add	r3, r2
 80058e6:	61fb      	str	r3, [r7, #28]
      for (block_num = 0; block_num < compptr->width_in_blocks; block_num++) {
 80058e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80058ea:	3301      	adds	r3, #1
 80058ec:	637b      	str	r3, [r7, #52]	; 0x34
 80058ee:	69bb      	ldr	r3, [r7, #24]
 80058f0:	69db      	ldr	r3, [r3, #28]
 80058f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058f4:	429a      	cmp	r2, r3
 80058f6:	d3e6      	bcc.n	80058c6 <decompress_data+0x116>
      }
      output_ptr += compptr->DCT_v_scaled_size;
 80058f8:	69bb      	ldr	r3, [r7, #24]
 80058fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058fc:	009b      	lsls	r3, r3, #2
 80058fe:	6a3a      	ldr	r2, [r7, #32]
 8005900:	4413      	add	r3, r2
 8005902:	623b      	str	r3, [r7, #32]
    for (block_row = 0; block_row < block_rows; block_row++) {
 8005904:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005906:	3301      	adds	r3, #1
 8005908:	62fb      	str	r3, [r7, #44]	; 0x2c
 800590a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800590c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590e:	429a      	cmp	r2, r3
 8005910:	dbce      	blt.n	80058b0 <decompress_data+0x100>
 8005912:	e000      	b.n	8005916 <decompress_data+0x166>
      continue;
 8005914:	bf00      	nop
       ci++, compptr++) {
 8005916:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005918:	3301      	adds	r3, #1
 800591a:	633b      	str	r3, [r7, #48]	; 0x30
 800591c:	69bb      	ldr	r3, [r7, #24]
 800591e:	3358      	adds	r3, #88	; 0x58
 8005920:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005926:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005928:	429a      	cmp	r2, r3
 800592a:	f6ff af7a 	blt.w	8005822 <decompress_data+0x72>
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005934:	1c5a      	adds	r2, r3, #1
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005948:	429a      	cmp	r2, r3
 800594a:	d201      	bcs.n	8005950 <decompress_data+0x1a0>
    return JPEG_ROW_COMPLETED;
 800594c:	2303      	movs	r3, #3
 800594e:	e000      	b.n	8005952 <decompress_data+0x1a2>
  return JPEG_SCAN_COMPLETED;
 8005950:	2304      	movs	r3, #4
}
 8005952:	4618      	mov	r0, r3
 8005954:	373c      	adds	r7, #60	; 0x3c
 8005956:	46bd      	mov	sp, r7
 8005958:	bd90      	pop	{r4, r7, pc}

0800595a <smoothing_ok>:
 * more accurately than they really are.
 */

LOCAL(boolean)
smoothing_ok (j_decompress_ptr cinfo)
{
 800595a:	b590      	push	{r4, r7, lr}
 800595c:	b08b      	sub	sp, #44	; 0x2c
 800595e:	af00      	add	r7, sp, #0
 8005960:	6078      	str	r0, [r7, #4]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8005968:	613b      	str	r3, [r7, #16]
  boolean smoothing_useful = FALSE;
 800596a:	2300      	movs	r3, #0
 800596c:	627b      	str	r3, [r7, #36]	; 0x24
  jpeg_component_info *compptr;
  JQUANT_TBL * qtable;
  int * coef_bits;
  int * coef_bits_latch;

  if (! cinfo->progressive_mode || cinfo->coef_bits == NULL)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8005974:	2b00      	cmp	r3, #0
 8005976:	d004      	beq.n	8005982 <smoothing_ok+0x28>
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800597e:	2b00      	cmp	r3, #0
 8005980:	d101      	bne.n	8005986 <smoothing_ok+0x2c>
    return FALSE;
 8005982:	2300      	movs	r3, #0
 8005984:	e078      	b.n	8005a78 <smoothing_ok+0x11e>

  /* Allocate latch area if not already done */
  if (coef->coef_bits_latch == NULL)
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800598a:	2b00      	cmp	r3, #0
 800598c:	d110      	bne.n	80059b0 <smoothing_ok+0x56>
    coef->coef_bits_latch = (int *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	681c      	ldr	r4, [r3, #0]
				  cinfo->num_components *
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005998:	461a      	mov	r2, r3
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800599a:	4613      	mov	r3, r2
 800599c:	005b      	lsls	r3, r3, #1
 800599e:	4413      	add	r3, r2
 80059a0:	00db      	lsls	r3, r3, #3
 80059a2:	461a      	mov	r2, r3
 80059a4:	2101      	movs	r1, #1
 80059a6:	6878      	ldr	r0, [r7, #4]
 80059a8:	47a0      	blx	r4
 80059aa:	4602      	mov	r2, r0
    coef->coef_bits_latch = (int *)
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	671a      	str	r2, [r3, #112]	; 0x70
				  (SAVED_COEFS * SIZEOF(int)));
  coef_bits_latch = coef->coef_bits_latch;
 80059b0:	693b      	ldr	r3, [r7, #16]
 80059b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80059b4:	617b      	str	r3, [r7, #20]

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80059b6:	2300      	movs	r3, #0
 80059b8:	623b      	str	r3, [r7, #32]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80059c0:	61bb      	str	r3, [r7, #24]
 80059c2:	e053      	b.n	8005a6c <smoothing_ok+0x112>
       ci++, compptr++) {
    /* All components' quantization values must already be latched. */
    if ((qtable = compptr->quant_table) == NULL)
 80059c4:	69bb      	ldr	r3, [r7, #24]
 80059c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059c8:	60fb      	str	r3, [r7, #12]
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d101      	bne.n	80059d4 <smoothing_ok+0x7a>
      return FALSE;
 80059d0:	2300      	movs	r3, #0
 80059d2:	e051      	b.n	8005a78 <smoothing_ok+0x11e>
    /* Verify DC & first 5 AC quantizers are nonzero to avoid zero-divide. */
    if (qtable->quantval[0] == 0 ||
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	881b      	ldrh	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d013      	beq.n	8005a04 <smoothing_ok+0xaa>
	qtable->quantval[Q01_POS] == 0 ||
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	885b      	ldrh	r3, [r3, #2]
    if (qtable->quantval[0] == 0 ||
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d00f      	beq.n	8005a04 <smoothing_ok+0xaa>
	qtable->quantval[Q10_POS] == 0 ||
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	8a1b      	ldrh	r3, [r3, #16]
	qtable->quantval[Q01_POS] == 0 ||
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d00b      	beq.n	8005a04 <smoothing_ok+0xaa>
	qtable->quantval[Q20_POS] == 0 ||
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	8c1b      	ldrh	r3, [r3, #32]
	qtable->quantval[Q10_POS] == 0 ||
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d007      	beq.n	8005a04 <smoothing_ok+0xaa>
	qtable->quantval[Q11_POS] == 0 ||
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	8a5b      	ldrh	r3, [r3, #18]
	qtable->quantval[Q20_POS] == 0 ||
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d003      	beq.n	8005a04 <smoothing_ok+0xaa>
	qtable->quantval[Q02_POS] == 0)
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	889b      	ldrh	r3, [r3, #4]
	qtable->quantval[Q11_POS] == 0 ||
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d101      	bne.n	8005a08 <smoothing_ok+0xae>
      return FALSE;
 8005a04:	2300      	movs	r3, #0
 8005a06:	e037      	b.n	8005a78 <smoothing_ok+0x11e>
    /* DC values must be at least partly known for all components. */
    coef_bits = cinfo->coef_bits[ci];
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8005a0e:	6a3b      	ldr	r3, [r7, #32]
 8005a10:	021b      	lsls	r3, r3, #8
 8005a12:	4413      	add	r3, r2
 8005a14:	60bb      	str	r3, [r7, #8]
    if (coef_bits[0] < 0)
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	da01      	bge.n	8005a22 <smoothing_ok+0xc8>
      return FALSE;
 8005a1e:	2300      	movs	r3, #0
 8005a20:	e02a      	b.n	8005a78 <smoothing_ok+0x11e>
    /* Block smoothing is helpful if some AC coefficients remain inaccurate. */
    for (coefi = 1; coefi <= 5; coefi++) {
 8005a22:	2301      	movs	r3, #1
 8005a24:	61fb      	str	r3, [r7, #28]
 8005a26:	e015      	b.n	8005a54 <smoothing_ok+0xfa>
      coef_bits_latch[coefi] = coef_bits[coefi];
 8005a28:	69fb      	ldr	r3, [r7, #28]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	68ba      	ldr	r2, [r7, #8]
 8005a2e:	441a      	add	r2, r3
 8005a30:	69fb      	ldr	r3, [r7, #28]
 8005a32:	009b      	lsls	r3, r3, #2
 8005a34:	6979      	ldr	r1, [r7, #20]
 8005a36:	440b      	add	r3, r1
 8005a38:	6812      	ldr	r2, [r2, #0]
 8005a3a:	601a      	str	r2, [r3, #0]
      if (coef_bits[coefi] != 0)
 8005a3c:	69fb      	ldr	r3, [r7, #28]
 8005a3e:	009b      	lsls	r3, r3, #2
 8005a40:	68ba      	ldr	r2, [r7, #8]
 8005a42:	4413      	add	r3, r2
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d001      	beq.n	8005a4e <smoothing_ok+0xf4>
	smoothing_useful = TRUE;
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	627b      	str	r3, [r7, #36]	; 0x24
    for (coefi = 1; coefi <= 5; coefi++) {
 8005a4e:	69fb      	ldr	r3, [r7, #28]
 8005a50:	3301      	adds	r3, #1
 8005a52:	61fb      	str	r3, [r7, #28]
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	2b05      	cmp	r3, #5
 8005a58:	dde6      	ble.n	8005a28 <smoothing_ok+0xce>
    }
    coef_bits_latch += SAVED_COEFS;
 8005a5a:	697b      	ldr	r3, [r7, #20]
 8005a5c:	3318      	adds	r3, #24
 8005a5e:	617b      	str	r3, [r7, #20]
       ci++, compptr++) {
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	3301      	adds	r3, #1
 8005a64:	623b      	str	r3, [r7, #32]
 8005a66:	69bb      	ldr	r3, [r7, #24]
 8005a68:	3358      	adds	r3, #88	; 0x58
 8005a6a:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a70:	6a3a      	ldr	r2, [r7, #32]
 8005a72:	429a      	cmp	r2, r3
 8005a74:	dba6      	blt.n	80059c4 <smoothing_ok+0x6a>
  }

  return smoothing_useful;
 8005a76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	372c      	adds	r7, #44	; 0x2c
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd90      	pop	{r4, r7, pc}

08005a80 <decompress_smooth_data>:
 * Variant of decompress_data for use when doing block smoothing.
 */

METHODDEF(int)
decompress_smooth_data (j_decompress_ptr cinfo, JSAMPIMAGE output_buf)
{
 8005a80:	b5b0      	push	{r4, r5, r7, lr}
 8005a82:	b0cc      	sub	sp, #304	; 0x130
 8005a84:	af02      	add	r7, sp, #8
 8005a86:	1d3b      	adds	r3, r7, #4
 8005a88:	6018      	str	r0, [r3, #0]
 8005a8a:	463b      	mov	r3, r7
 8005a8c:	6019      	str	r1, [r3, #0]
  my_coef_ptr coef = (my_coef_ptr) cinfo->coef;
 8005a8e:	1d3b      	adds	r3, r7, #4
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 8005a96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  JDIMENSION last_iMCU_row = cinfo->total_iMCU_rows - 1;
 8005a9a:	1d3b      	adds	r3, r7, #4
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  INT32 Q00,Q01,Q02,Q10,Q11,Q20, num;
  int DC1,DC2,DC3,DC4,DC5,DC6,DC7,DC8,DC9;
  int Al, pred;

  /* Force some input to be done if we are getting ahead of the input. */
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 8005aa8:	e02f      	b.n	8005b0a <decompress_smooth_data+0x8a>
	 ! cinfo->inputctl->eoi_reached) {
    if (cinfo->input_scan_number == cinfo->output_scan_number) {
 8005aaa:	1d3b      	adds	r3, r7, #4
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005ab2:	1d3b      	adds	r3, r7, #4
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005aba:	429a      	cmp	r2, r3
 8005abc:	d117      	bne.n	8005aee <decompress_smooth_data+0x6e>
      /* If input is working on current scan, we ordinarily want it to
       * have completed the current row.  But if input scan is DC,
       * we want it to keep one row ahead so that next block row's DC
       * values are up to date.
       */
      JDIMENSION delta = (cinfo->Ss == 0) ? 1 : 0;
 8005abe:	1d3b      	adds	r3, r7, #4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	bf0c      	ite	eq
 8005aca:	2301      	moveq	r3, #1
 8005acc:	2300      	movne	r3, #0
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
      if (cinfo->input_iMCU_row > cinfo->output_iMCU_row+delta)
 8005ad4:	1d3b      	adds	r3, r7, #4
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f8d3 2094 	ldr.w	r2, [r3, #148]	; 0x94
 8005adc:	1d3b      	adds	r3, r7, #4
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	f8d3 109c 	ldr.w	r1, [r3, #156]	; 0x9c
 8005ae4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005ae8:	440b      	add	r3, r1
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d81f      	bhi.n	8005b2e <decompress_smooth_data+0xae>
	break;
    }
    if ((*cinfo->inputctl->consume_input)(cinfo) == JPEG_SUSPENDED)
 8005aee:	1d3b      	adds	r3, r7, #4
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	1d3a      	adds	r2, r7, #4
 8005afa:	6810      	ldr	r0, [r2, #0]
 8005afc:	4798      	blx	r3
 8005afe:	4603      	mov	r3, r0
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <decompress_smooth_data+0x8a>
      return JPEG_SUSPENDED;
 8005b04:	2300      	movs	r3, #0
 8005b06:	f000 bc53 	b.w	80063b0 <decompress_smooth_data+0x930>
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 8005b0a:	1d3b      	adds	r3, r7, #4
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005b12:	1d3b      	adds	r3, r7, #4
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005b1a:	429a      	cmp	r2, r3
 8005b1c:	dc08      	bgt.n	8005b30 <decompress_smooth_data+0xb0>
	 ! cinfo->inputctl->eoi_reached) {
 8005b1e:	1d3b      	adds	r3, r7, #4
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 8005b26:	695b      	ldr	r3, [r3, #20]
  while (cinfo->input_scan_number <= cinfo->output_scan_number &&
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d0be      	beq.n	8005aaa <decompress_smooth_data+0x2a>
 8005b2c:	e000      	b.n	8005b30 <decompress_smooth_data+0xb0>
	break;
 8005b2e:	bf00      	nop
  }

  /* OK, output from the virtual arrays. */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8005b30:	2300      	movs	r3, #0
 8005b32:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8005b36:	1d3b      	adds	r3, r7, #4
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005b3e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8005b42:	f000 bc17 	b.w	8006374 <decompress_smooth_data+0x8f4>
       ci++, compptr++) {
    /* Don't bother to IDCT an uninteresting component. */
    if (! compptr->component_needed)
 8005b46:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	f000 8406 	beq.w	800635e <decompress_smooth_data+0x8de>
      continue;
    /* Count non-dummy DCT block rows in this iMCU row. */
    if (cinfo->output_iMCU_row < last_iMCU_row) {
 8005b52:	1d3b      	adds	r3, r7, #4
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005b5a:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b5e:	429a      	cmp	r2, r3
 8005b60:	d90d      	bls.n	8005b7e <decompress_smooth_data+0xfe>
      block_rows = compptr->v_samp_factor;
 8005b62:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      access_rows = block_rows * 2; /* this and next iMCU row */
 8005b6c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b70:	005b      	lsls	r3, r3, #1
 8005b72:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      last_row = FALSE;
 8005b76:	2300      	movs	r3, #0
 8005b78:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8005b7c:	e01c      	b.n	8005bb8 <decompress_smooth_data+0x138>
    } else {
      /* NB: can't use last_row_height here; it is input-side-dependent! */
      block_rows = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 8005b7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8005b88:	68d2      	ldr	r2, [r2, #12]
 8005b8a:	fbb3 f1f2 	udiv	r1, r3, r2
 8005b8e:	fb02 f201 	mul.w	r2, r2, r1
 8005b92:	1a9b      	subs	r3, r3, r2
 8005b94:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      if (block_rows == 0) block_rows = compptr->v_samp_factor;
 8005b98:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d104      	bne.n	8005baa <decompress_smooth_data+0x12a>
 8005ba0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
      access_rows = block_rows; /* this iMCU row only */
 8005baa:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005bae:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      last_row = TRUE;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    }
    /* Align the virtual buffer for this component. */
    if (cinfo->output_iMCU_row > 0) {
 8005bb8:	1d3b      	adds	r3, r7, #4
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d032      	beq.n	8005c2a <decompress_smooth_data+0x1aa>
      access_rows += compptr->v_samp_factor; /* prior iMCU row too */
 8005bc4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8005bce:	4413      	add	r3, r2
 8005bd0:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      buffer = (*cinfo->mem->access_virt_barray)
 8005bd4:	1d3b      	adds	r3, r7, #4
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	685b      	ldr	r3, [r3, #4]
 8005bda:	6a1c      	ldr	r4, [r3, #32]
 8005bdc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005be0:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005be4:	3212      	adds	r2, #18
 8005be6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (cinfo->output_iMCU_row - 1) * compptr->v_samp_factor,
 8005bea:	1d3b      	adds	r3, r7, #4
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bf2:	3b01      	subs	r3, #1
 8005bf4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8005bf8:	68d2      	ldr	r2, [r2, #12]
      buffer = (*cinfo->mem->access_virt_barray)
 8005bfa:	fb02 f203 	mul.w	r2, r2, r3
 8005bfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c02:	1d38      	adds	r0, r7, #4
 8005c04:	2500      	movs	r5, #0
 8005c06:	9500      	str	r5, [sp, #0]
 8005c08:	6800      	ldr	r0, [r0, #0]
 8005c0a:	47a0      	blx	r4
 8005c0c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	 (JDIMENSION) access_rows, FALSE);
      buffer += compptr->v_samp_factor;	/* point to current iMCU row */
 8005c10:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c14:	68db      	ldr	r3, [r3, #12]
 8005c16:	009b      	lsls	r3, r3, #2
 8005c18:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005c1c:	4413      	add	r3, r2
 8005c1e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
      first_row = FALSE;
 8005c22:	2300      	movs	r3, #0
 8005c24:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8005c28:	e017      	b.n	8005c5a <decompress_smooth_data+0x1da>
    } else {
      buffer = (*cinfo->mem->access_virt_barray)
 8005c2a:	1d3b      	adds	r3, r7, #4
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	685b      	ldr	r3, [r3, #4]
 8005c30:	6a1c      	ldr	r4, [r3, #32]
 8005c32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c36:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005c3a:	3212      	adds	r2, #18
 8005c3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005c44:	1d38      	adds	r0, r7, #4
 8005c46:	2200      	movs	r2, #0
 8005c48:	9200      	str	r2, [sp, #0]
 8005c4a:	2200      	movs	r2, #0
 8005c4c:	6800      	ldr	r0, [r0, #0]
 8005c4e:	47a0      	blx	r4
 8005c50:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110
	((j_common_ptr) cinfo, coef->whole_image[ci],
	 (JDIMENSION) 0, (JDIMENSION) access_rows, FALSE);
      first_row = TRUE;
 8005c54:	2301      	movs	r3, #1
 8005c56:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    }
    /* Fetch component-dependent info */
    coef_bits = coef->coef_bits_latch + (ci * SAVED_COEFS);
 8005c5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8005c5e:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8005c60:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8005c64:	4613      	mov	r3, r2
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	4413      	add	r3, r2
 8005c6a:	00db      	lsls	r3, r3, #3
 8005c6c:	440b      	add	r3, r1
 8005c6e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    quanttbl = compptr->quant_table;
 8005c72:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c78:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    Q00 = quanttbl->quantval[0];
 8005c7c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    Q01 = quanttbl->quantval[Q01_POS];
 8005c86:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c8a:	885b      	ldrh	r3, [r3, #2]
 8005c8c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    Q10 = quanttbl->quantval[Q10_POS];
 8005c90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c94:	8a1b      	ldrh	r3, [r3, #16]
 8005c96:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    Q20 = quanttbl->quantval[Q20_POS];
 8005c9a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005c9e:	8c1b      	ldrh	r3, [r3, #32]
 8005ca0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Q11 = quanttbl->quantval[Q11_POS];
 8005ca4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005ca8:	8a5b      	ldrh	r3, [r3, #18]
 8005caa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Q02 = quanttbl->quantval[Q02_POS];
 8005cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cb2:	889b      	ldrh	r3, [r3, #4]
 8005cb4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    inverse_DCT = cinfo->idct->inverse_DCT[ci];
 8005cb8:	1d3b      	adds	r3, r7, #4
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	f8d3 21d4 	ldr.w	r2, [r3, #468]	; 0x1d4
 8005cc0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cc4:	009b      	lsls	r3, r3, #2
 8005cc6:	4413      	add	r3, r2
 8005cc8:	685b      	ldr	r3, [r3, #4]
 8005cca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    output_ptr = output_buf[ci];
 8005cce:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005cd2:	009b      	lsls	r3, r3, #2
 8005cd4:	463a      	mov	r2, r7
 8005cd6:	6812      	ldr	r2, [r2, #0]
 8005cd8:	4413      	add	r3, r2
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    /* Loop over all DCT blocks to be processed. */
    for (block_row = 0; block_row < block_rows; block_row++) {
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8005ce6:	e332      	b.n	800634e <decompress_smooth_data+0x8ce>
      buffer_ptr = buffer[block_row];
 8005ce8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005cec:	009b      	lsls	r3, r3, #2
 8005cee:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005cf2:	4413      	add	r3, r2
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
      if (first_row && block_row == 0)
 8005cfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d008      	beq.n	8005d14 <decompress_smooth_data+0x294>
 8005d02:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <decompress_smooth_data+0x294>
	prev_block_row = buffer_ptr;
 8005d0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d0e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8005d12:	e00b      	b.n	8005d2c <decompress_smooth_data+0x2ac>
      else
	prev_block_row = buffer[block_row-1];
 8005d14:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d18:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d1c:	3b01      	subs	r3, #1
 8005d1e:	009b      	lsls	r3, r3, #2
 8005d20:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005d24:	4413      	add	r3, r2
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
      if (last_row && block_row == block_rows-1)
 8005d2c:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00b      	beq.n	8005d4c <decompress_smooth_data+0x2cc>
 8005d34:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8005d3e:	429a      	cmp	r2, r3
 8005d40:	d104      	bne.n	8005d4c <decompress_smooth_data+0x2cc>
	next_block_row = buffer_ptr;
 8005d42:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d46:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8005d4a:	e009      	b.n	8005d60 <decompress_smooth_data+0x2e0>
      else
	next_block_row = buffer[block_row+1];
 8005d4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005d50:	3301      	adds	r3, #1
 8005d52:	009b      	lsls	r3, r3, #2
 8005d54:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8005d58:	4413      	add	r3, r2
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
      /* We fetch the surrounding DC values using a sliding-register approach.
       * Initialize all nine here so as to do the right thing on narrow pics.
       */
      DC1 = DC2 = DC3 = (int) prev_block_row[0][0];
 8005d60:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005d64:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d68:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005d70:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005d74:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8005d78:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      DC4 = DC5 = DC6 = (int) buffer_ptr[0][0];
 8005d7c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005d80:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005d84:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005d88:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8005d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005d94:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      DC7 = DC8 = DC9 = (int) next_block_row[0][0];
 8005d98:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005d9c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005da0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005da4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005da8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005dac:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005db0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      output_col = 0;
 8005db4:	2300      	movs	r3, #0
 8005db6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      last_block_column = compptr->width_in_blocks - 1;
 8005dba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005dbe:	69db      	ldr	r3, [r3, #28]
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8005dcc:	e2aa      	b.n	8006324 <decompress_smooth_data+0x8a4>
	/* Fetch current DCT block into workspace so we can modify it. */
	jcopy_block_row(buffer_ptr, (JBLOCKROW) workspace, (JDIMENSION) 1);
 8005dce:	f107 030c 	add.w	r3, r7, #12
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8005dda:	f019 faa1 	bl	801f320 <jcopy_block_row>
	/* Update DC values */
	if (block_num < last_block_column) {
 8005dde:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8005de2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005de6:	429a      	cmp	r2, r3
 8005de8:	d214      	bcs.n	8005e14 <decompress_smooth_data+0x394>
	  DC3 = (int) prev_block_row[1][0];
 8005dea:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8005dee:	3380      	adds	r3, #128	; 0x80
 8005df0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005df4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
	  DC6 = (int) buffer_ptr[1][0];
 8005df8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8005dfc:	3380      	adds	r3, #128	; 0x80
 8005dfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e02:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
	  DC9 = (int) next_block_row[1][0];
 8005e06:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8005e0a:	3380      	adds	r3, #128	; 0x80
 8005e0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8005e10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
	/* Compute coefficient estimates per K.8.
	 * An estimate is applied only if coefficient is still zero,
	 * and is not known to be fully accurate.
	 */
	/* AC01 */
	if ((Al=coef_bits[1]) != 0 && workspace[1] == 0) {
 8005e14:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005e18:	685b      	ldr	r3, [r3, #4]
 8005e1a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005e1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d068      	beq.n	8005ef8 <decompress_smooth_data+0x478>
 8005e26:	f107 030c 	add.w	r3, r7, #12
 8005e2a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d162      	bne.n	8005ef8 <decompress_smooth_data+0x478>
	  num = 36 * Q00 * (DC4 - DC6);
 8005e32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005e36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005e3a:	1ad3      	subs	r3, r2, r3
 8005e3c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005e40:	fb02 f203 	mul.w	r2, r2, r3
 8005e44:	4613      	mov	r3, r2
 8005e46:	00db      	lsls	r3, r3, #3
 8005e48:	4413      	add	r3, r2
 8005e4a:	009b      	lsls	r3, r3, #2
 8005e4c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 8005e50:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	db22      	blt.n	8005e9e <decompress_smooth_data+0x41e>
	    pred = (int) (((Q01<<7) + num) / (Q01<<8));
 8005e58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e5c:	01da      	lsls	r2, r3, #7
 8005e5e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005e62:	441a      	add	r2, r3
 8005e64:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005e68:	021b      	lsls	r3, r3, #8
 8005e6a:	fb92 f3f3 	sdiv	r3, r2, r3
 8005e6e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8005e72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	dd38      	ble.n	8005eec <decompress_smooth_data+0x46c>
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e80:	fa02 f303 	lsl.w	r3, r2, r3
 8005e84:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	db2f      	blt.n	8005eec <decompress_smooth_data+0x46c>
	      pred = (1<<Al)-1;
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005e92:	fa02 f303 	lsl.w	r3, r2, r3
 8005e96:	3b01      	subs	r3, #1
 8005e98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005e9c:	e026      	b.n	8005eec <decompress_smooth_data+0x46c>
	  } else {
	    pred = (int) (((Q01<<7) - num) / (Q01<<8));
 8005e9e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005ea2:	01da      	lsls	r2, r3, #7
 8005ea4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005ea8:	1ad2      	subs	r2, r2, r3
 8005eaa:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005eae:	021b      	lsls	r3, r3, #8
 8005eb0:	fb92 f3f3 	sdiv	r3, r2, r3
 8005eb4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8005eb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	dd10      	ble.n	8005ee2 <decompress_smooth_data+0x462>
 8005ec0:	2201      	movs	r2, #1
 8005ec2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8005eca:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	db07      	blt.n	8005ee2 <decompress_smooth_data+0x462>
	      pred = (1<<Al)-1;
 8005ed2:	2201      	movs	r2, #1
 8005ed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005ed8:	fa02 f303 	lsl.w	r3, r2, r3
 8005edc:	3b01      	subs	r3, #1
 8005ede:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 8005ee2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ee6:	425b      	negs	r3, r3
 8005ee8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[1] = (JCOEF) pred;
 8005eec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005ef0:	b21a      	sxth	r2, r3
 8005ef2:	f107 030c 	add.w	r3, r7, #12
 8005ef6:	805a      	strh	r2, [r3, #2]
	}
	/* AC10 */
	if ((Al=coef_bits[2]) != 0 && workspace[8] == 0) {
 8005ef8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005efc:	689b      	ldr	r3, [r3, #8]
 8005efe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005f02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d068      	beq.n	8005fdc <decompress_smooth_data+0x55c>
 8005f0a:	f107 030c 	add.w	r3, r7, #12
 8005f0e:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d162      	bne.n	8005fdc <decompress_smooth_data+0x55c>
	  num = 36 * Q00 * (DC2 - DC8);
 8005f16:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005f1a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005f1e:	1ad3      	subs	r3, r2, r3
 8005f20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005f24:	fb02 f203 	mul.w	r2, r2, r3
 8005f28:	4613      	mov	r3, r2
 8005f2a:	00db      	lsls	r3, r3, #3
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 8005f34:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	db22      	blt.n	8005f82 <decompress_smooth_data+0x502>
	    pred = (int) (((Q10<<7) + num) / (Q10<<8));
 8005f3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f40:	01da      	lsls	r2, r3, #7
 8005f42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f46:	441a      	add	r2, r3
 8005f48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f4c:	021b      	lsls	r3, r3, #8
 8005f4e:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f52:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8005f56:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	dd38      	ble.n	8005fd0 <decompress_smooth_data+0x550>
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f64:	fa02 f303 	lsl.w	r3, r2, r3
 8005f68:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	db2f      	blt.n	8005fd0 <decompress_smooth_data+0x550>
	      pred = (1<<Al)-1;
 8005f70:	2201      	movs	r2, #1
 8005f72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005f76:	fa02 f303 	lsl.w	r3, r2, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005f80:	e026      	b.n	8005fd0 <decompress_smooth_data+0x550>
	  } else {
	    pred = (int) (((Q10<<7) - num) / (Q10<<8));
 8005f82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f86:	01da      	lsls	r2, r3, #7
 8005f88:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005f8c:	1ad2      	subs	r2, r2, r3
 8005f8e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005f92:	021b      	lsls	r3, r3, #8
 8005f94:	fb92 f3f3 	sdiv	r3, r2, r3
 8005f98:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8005f9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	dd10      	ble.n	8005fc6 <decompress_smooth_data+0x546>
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005fb2:	429a      	cmp	r2, r3
 8005fb4:	db07      	blt.n	8005fc6 <decompress_smooth_data+0x546>
	      pred = (1<<Al)-1;
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc0:	3b01      	subs	r3, #1
 8005fc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 8005fc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fca:	425b      	negs	r3, r3
 8005fcc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[8] = (JCOEF) pred;
 8005fd0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005fd4:	b21a      	sxth	r2, r3
 8005fd6:	f107 030c 	add.w	r3, r7, #12
 8005fda:	821a      	strh	r2, [r3, #16]
	}
	/* AC20 */
	if ((Al=coef_bits[3]) != 0 && workspace[16] == 0) {
 8005fdc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005fe6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d06b      	beq.n	80060c6 <decompress_smooth_data+0x646>
 8005fee:	f107 030c 	add.w	r3, r7, #12
 8005ff2:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d165      	bne.n	80060c6 <decompress_smooth_data+0x646>
	  num = 9 * Q00 * (DC2 + DC8 - 2*DC5);
 8005ffa:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8005ffe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8006002:	441a      	add	r2, r3
 8006004:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006008:	005b      	lsls	r3, r3, #1
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006010:	fb02 f203 	mul.w	r2, r2, r3
 8006014:	4613      	mov	r3, r2
 8006016:	00db      	lsls	r3, r3, #3
 8006018:	4413      	add	r3, r2
 800601a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 800601e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006022:	2b00      	cmp	r3, #0
 8006024:	db22      	blt.n	800606c <decompress_smooth_data+0x5ec>
	    pred = (int) (((Q20<<7) + num) / (Q20<<8));
 8006026:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800602a:	01da      	lsls	r2, r3, #7
 800602c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006030:	441a      	add	r2, r3
 8006032:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006036:	021b      	lsls	r3, r3, #8
 8006038:	fb92 f3f3 	sdiv	r3, r2, r3
 800603c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8006040:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006044:	2b00      	cmp	r3, #0
 8006046:	dd38      	ble.n	80060ba <decompress_smooth_data+0x63a>
 8006048:	2201      	movs	r2, #1
 800604a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800604e:	fa02 f303 	lsl.w	r3, r2, r3
 8006052:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006056:	429a      	cmp	r2, r3
 8006058:	db2f      	blt.n	80060ba <decompress_smooth_data+0x63a>
	      pred = (1<<Al)-1;
 800605a:	2201      	movs	r2, #1
 800605c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006060:	fa02 f303 	lsl.w	r3, r2, r3
 8006064:	3b01      	subs	r3, #1
 8006066:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800606a:	e026      	b.n	80060ba <decompress_smooth_data+0x63a>
	  } else {
	    pred = (int) (((Q20<<7) - num) / (Q20<<8));
 800606c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006070:	01da      	lsls	r2, r3, #7
 8006072:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006076:	1ad2      	subs	r2, r2, r3
 8006078:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800607c:	021b      	lsls	r3, r3, #8
 800607e:	fb92 f3f3 	sdiv	r3, r2, r3
 8006082:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8006086:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800608a:	2b00      	cmp	r3, #0
 800608c:	dd10      	ble.n	80060b0 <decompress_smooth_data+0x630>
 800608e:	2201      	movs	r2, #1
 8006090:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006094:	fa02 f303 	lsl.w	r3, r2, r3
 8006098:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800609c:	429a      	cmp	r2, r3
 800609e:	db07      	blt.n	80060b0 <decompress_smooth_data+0x630>
	      pred = (1<<Al)-1;
 80060a0:	2201      	movs	r2, #1
 80060a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060a6:	fa02 f303 	lsl.w	r3, r2, r3
 80060aa:	3b01      	subs	r3, #1
 80060ac:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 80060b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060b4:	425b      	negs	r3, r3
 80060b6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[16] = (JCOEF) pred;
 80060ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80060be:	b21a      	sxth	r2, r3
 80060c0:	f107 030c 	add.w	r3, r7, #12
 80060c4:	841a      	strh	r2, [r3, #32]
	}
	/* AC11 */
	if ((Al=coef_bits[4]) != 0 && workspace[9] == 0) {
 80060c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80060ca:	691b      	ldr	r3, [r3, #16]
 80060cc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80060d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80060d4:	2b00      	cmp	r3, #0
 80060d6:	d06d      	beq.n	80061b4 <decompress_smooth_data+0x734>
 80060d8:	f107 030c 	add.w	r3, r7, #12
 80060dc:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80060e0:	2b00      	cmp	r3, #0
 80060e2:	d167      	bne.n	80061b4 <decompress_smooth_data+0x734>
	  num = 5 * Q00 * (DC1 - DC3 - DC7 + DC9);
 80060e4:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80060e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80060ec:	1ad2      	subs	r2, r2, r3
 80060ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80060f2:	1ad2      	subs	r2, r2, r3
 80060f4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80060f8:	4413      	add	r3, r2
 80060fa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80060fe:	fb02 f203 	mul.w	r2, r2, r3
 8006102:	4613      	mov	r3, r2
 8006104:	009b      	lsls	r3, r3, #2
 8006106:	4413      	add	r3, r2
 8006108:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 800610c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006110:	2b00      	cmp	r3, #0
 8006112:	db22      	blt.n	800615a <decompress_smooth_data+0x6da>
	    pred = (int) (((Q11<<7) + num) / (Q11<<8));
 8006114:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006118:	01da      	lsls	r2, r3, #7
 800611a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800611e:	441a      	add	r2, r3
 8006120:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006124:	021b      	lsls	r3, r3, #8
 8006126:	fb92 f3f3 	sdiv	r3, r2, r3
 800612a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800612e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006132:	2b00      	cmp	r3, #0
 8006134:	dd38      	ble.n	80061a8 <decompress_smooth_data+0x728>
 8006136:	2201      	movs	r2, #1
 8006138:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800613c:	fa02 f303 	lsl.w	r3, r2, r3
 8006140:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006144:	429a      	cmp	r2, r3
 8006146:	db2f      	blt.n	80061a8 <decompress_smooth_data+0x728>
	      pred = (1<<Al)-1;
 8006148:	2201      	movs	r2, #1
 800614a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	3b01      	subs	r3, #1
 8006154:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006158:	e026      	b.n	80061a8 <decompress_smooth_data+0x728>
	  } else {
	    pred = (int) (((Q11<<7) - num) / (Q11<<8));
 800615a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800615e:	01da      	lsls	r2, r3, #7
 8006160:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006164:	1ad2      	subs	r2, r2, r3
 8006166:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800616a:	021b      	lsls	r3, r3, #8
 800616c:	fb92 f3f3 	sdiv	r3, r2, r3
 8006170:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8006174:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006178:	2b00      	cmp	r3, #0
 800617a:	dd10      	ble.n	800619e <decompress_smooth_data+0x71e>
 800617c:	2201      	movs	r2, #1
 800617e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006182:	fa02 f303 	lsl.w	r3, r2, r3
 8006186:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800618a:	429a      	cmp	r2, r3
 800618c:	db07      	blt.n	800619e <decompress_smooth_data+0x71e>
	      pred = (1<<Al)-1;
 800618e:	2201      	movs	r2, #1
 8006190:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	3b01      	subs	r3, #1
 800619a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 800619e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061a2:	425b      	negs	r3, r3
 80061a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[9] = (JCOEF) pred;
 80061a8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80061ac:	b21a      	sxth	r2, r3
 80061ae:	f107 030c 	add.w	r3, r7, #12
 80061b2:	825a      	strh	r2, [r3, #18]
	}
	/* AC02 */
	if ((Al=coef_bits[5]) != 0 && workspace[2] == 0) {
 80061b4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061b8:	695b      	ldr	r3, [r3, #20]
 80061ba:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80061be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d06b      	beq.n	800629e <decompress_smooth_data+0x81e>
 80061c6:	f107 030c 	add.w	r3, r7, #12
 80061ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d165      	bne.n	800629e <decompress_smooth_data+0x81e>
	  num = 9 * Q00 * (DC4 + DC6 - 2*DC5);
 80061d2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80061d6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80061da:	441a      	add	r2, r3
 80061dc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80061e0:	005b      	lsls	r3, r3, #1
 80061e2:	1ad3      	subs	r3, r2, r3
 80061e4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80061e8:	fb02 f203 	mul.w	r2, r2, r3
 80061ec:	4613      	mov	r3, r2
 80061ee:	00db      	lsls	r3, r3, #3
 80061f0:	4413      	add	r3, r2
 80061f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	  if (num >= 0) {
 80061f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	db22      	blt.n	8006244 <decompress_smooth_data+0x7c4>
	    pred = (int) (((Q02<<7) + num) / (Q02<<8));
 80061fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006202:	01da      	lsls	r2, r3, #7
 8006204:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006208:	441a      	add	r2, r3
 800620a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800620e:	021b      	lsls	r3, r3, #8
 8006210:	fb92 f3f3 	sdiv	r3, r2, r3
 8006214:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 8006218:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800621c:	2b00      	cmp	r3, #0
 800621e:	dd38      	ble.n	8006292 <decompress_smooth_data+0x812>
 8006220:	2201      	movs	r2, #1
 8006222:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006226:	fa02 f303 	lsl.w	r3, r2, r3
 800622a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800622e:	429a      	cmp	r2, r3
 8006230:	db2f      	blt.n	8006292 <decompress_smooth_data+0x812>
	      pred = (1<<Al)-1;
 8006232:	2201      	movs	r2, #1
 8006234:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006238:	fa02 f303 	lsl.w	r3, r2, r3
 800623c:	3b01      	subs	r3, #1
 800623e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006242:	e026      	b.n	8006292 <decompress_smooth_data+0x812>
	  } else {
	    pred = (int) (((Q02<<7) - num) / (Q02<<8));
 8006244:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006248:	01da      	lsls	r2, r3, #7
 800624a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006254:	021b      	lsls	r3, r3, #8
 8006256:	fb92 f3f3 	sdiv	r3, r2, r3
 800625a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    if (Al > 0 && pred >= (1<<Al))
 800625e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006262:	2b00      	cmp	r3, #0
 8006264:	dd10      	ble.n	8006288 <decompress_smooth_data+0x808>
 8006266:	2201      	movs	r2, #1
 8006268:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800626c:	fa02 f303 	lsl.w	r3, r2, r3
 8006270:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006274:	429a      	cmp	r2, r3
 8006276:	db07      	blt.n	8006288 <decompress_smooth_data+0x808>
	      pred = (1<<Al)-1;
 8006278:	2201      	movs	r2, #1
 800627a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800627e:	fa02 f303 	lsl.w	r3, r2, r3
 8006282:	3b01      	subs	r3, #1
 8006284:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	    pred = -pred;
 8006288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800628c:	425b      	negs	r3, r3
 800628e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
	  }
	  workspace[2] = (JCOEF) pred;
 8006292:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006296:	b21a      	sxth	r2, r3
 8006298:	f107 030c 	add.w	r3, r7, #12
 800629c:	809a      	strh	r2, [r3, #4]
	}
	/* OK, do the IDCT */
	(*inverse_DCT) (cinfo, compptr, (JCOEFPTR) workspace,
 800629e:	f107 020c 	add.w	r2, r7, #12
 80062a2:	1d38      	adds	r0, r7, #4
 80062a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80062a8:	9300      	str	r3, [sp, #0]
 80062aa:	f8d7 4098 	ldr.w	r4, [r7, #152]	; 0x98
 80062ae:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80062b2:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 80062b6:	6800      	ldr	r0, [r0, #0]
 80062b8:	47a0      	blx	r4
			output_ptr, output_col);
	/* Advance for next column */
	DC1 = DC2; DC2 = DC3;
 80062ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80062be:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 80062c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80062c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
	DC4 = DC5; DC5 = DC6;
 80062ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80062ce:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80062d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80062d6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
	DC7 = DC8; DC8 = DC9;
 80062da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80062de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 80062e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80062e6:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
	buffer_ptr++, prev_block_row++, next_block_row++;
 80062ea:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80062ee:	3380      	adds	r3, #128	; 0x80
 80062f0:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 80062f4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80062f8:	3380      	adds	r3, #128	; 0x80
 80062fa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80062fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8006302:	3380      	adds	r3, #128	; 0x80
 8006304:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
	output_col += compptr->DCT_h_scaled_size;
 8006308:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800630c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800630e:	461a      	mov	r2, r3
 8006310:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006314:	4413      	add	r3, r2
 8006316:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
      for (block_num = 0; block_num <= last_block_column; block_num++) {
 800631a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800631e:	3301      	adds	r3, #1
 8006320:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8006324:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8006328:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800632c:	429a      	cmp	r2, r3
 800632e:	f67f ad4e 	bls.w	8005dce <decompress_smooth_data+0x34e>
      }
      output_ptr += compptr->DCT_v_scaled_size;
 8006332:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800633e:	4413      	add	r3, r2
 8006340:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    for (block_row = 0; block_row < block_rows; block_row++) {
 8006344:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8006348:	3301      	adds	r3, #1
 800634a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 800634e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8006352:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8006356:	429a      	cmp	r2, r3
 8006358:	f6ff acc6 	blt.w	8005ce8 <decompress_smooth_data+0x268>
 800635c:	e000      	b.n	8006360 <decompress_smooth_data+0x8e0>
      continue;
 800635e:	bf00      	nop
       ci++, compptr++) {
 8006360:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8006364:	3301      	adds	r3, #1
 8006366:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800636a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800636e:	3358      	adds	r3, #88	; 0x58
 8006370:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8006374:	1d3b      	adds	r3, r7, #4
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800637a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800637e:	429a      	cmp	r2, r3
 8006380:	f6ff abe1 	blt.w	8005b46 <decompress_smooth_data+0xc6>
    }
  }

  if (++(cinfo->output_iMCU_row) < cinfo->total_iMCU_rows)
 8006384:	1d3b      	adds	r3, r7, #4
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800638c:	1c5a      	adds	r2, r3, #1
 800638e:	1d3b      	adds	r3, r7, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
 8006396:	1d3b      	adds	r3, r7, #4
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
 800639e:	1d3b      	adds	r3, r7, #4
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d201      	bcs.n	80063ae <decompress_smooth_data+0x92e>
    return JPEG_ROW_COMPLETED;
 80063aa:	2303      	movs	r3, #3
 80063ac:	e000      	b.n	80063b0 <decompress_smooth_data+0x930>
  return JPEG_SCAN_COMPLETED;
 80063ae:	2304      	movs	r3, #4
}
 80063b0:	4618      	mov	r0, r3
 80063b2:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080063bc <jinit_d_coef_controller>:
 * Initialize coefficient buffer controller.
 */

GLOBAL(void)
jinit_d_coef_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 80063bc:	b5b0      	push	{r4, r5, r7, lr}
 80063be:	b08a      	sub	sp, #40	; 0x28
 80063c0:	af02      	add	r7, sp, #8
 80063c2:	6078      	str	r0, [r7, #4]
 80063c4:	6039      	str	r1, [r7, #0]
  my_coef_ptr coef;

  coef = (my_coef_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	685b      	ldr	r3, [r3, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	2274      	movs	r2, #116	; 0x74
 80063ce:	2101      	movs	r1, #1
 80063d0:	6878      	ldr	r0, [r7, #4]
 80063d2:	4798      	blx	r3
 80063d4:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_coef_controller));
  cinfo->coef = (struct jpeg_d_coef_controller *) coef;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	68fa      	ldr	r2, [r7, #12]
 80063da:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  coef->pub.start_input_pass = start_input_pass;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a47      	ldr	r2, [pc, #284]	; (8006500 <jinit_d_coef_controller+0x144>)
 80063e2:	601a      	str	r2, [r3, #0]
  coef->pub.start_output_pass = start_output_pass;
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	4a47      	ldr	r2, [pc, #284]	; (8006504 <jinit_d_coef_controller+0x148>)
 80063e8:	609a      	str	r2, [r3, #8]
#ifdef BLOCK_SMOOTHING_SUPPORTED
  coef->coef_bits_latch = NULL;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	2200      	movs	r2, #0
 80063ee:	671a      	str	r2, [r3, #112]	; 0x70
#endif

  /* Create the coefficient buffer. */
  if (need_full_buffer) {
 80063f0:	683b      	ldr	r3, [r7, #0]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d051      	beq.n	800649a <jinit_d_coef_controller+0xde>
    /* padded to a multiple of samp_factor DCT blocks in each direction. */
    /* Note we ask for a pre-zeroed array. */
    int ci, access_rows;
    jpeg_component_info *compptr;

    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80063f6:	2300      	movs	r3, #0
 80063f8:	61fb      	str	r3, [r7, #28]
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e039      	b.n	8006478 <jinit_d_coef_controller+0xbc>
	 ci++, compptr++) {
      access_rows = compptr->v_samp_factor;
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	68db      	ldr	r3, [r3, #12]
 8006408:	61bb      	str	r3, [r7, #24]
#ifdef BLOCK_SMOOTHING_SUPPORTED
      /* If block smoothing could be used, need a bigger window */
      if (cinfo->progressive_mode)
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8006410:	2b00      	cmp	r3, #0
 8006412:	d004      	beq.n	800641e <jinit_d_coef_controller+0x62>
	access_rows *= 3;
 8006414:	69ba      	ldr	r2, [r7, #24]
 8006416:	4613      	mov	r3, r2
 8006418:	005b      	lsls	r3, r3, #1
 800641a:	4413      	add	r3, r2
 800641c:	61bb      	str	r3, [r7, #24]
#endif
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	685b      	ldr	r3, [r3, #4]
 8006422:	695c      	ldr	r4, [r3, #20]
	((j_common_ptr) cinfo, JPOOL_IMAGE, TRUE,
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 8006424:	697b      	ldr	r3, [r7, #20]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	461a      	mov	r2, r3
				(long) compptr->h_samp_factor),
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	689b      	ldr	r3, [r3, #8]
	 (JDIMENSION) jround_up((long) compptr->width_in_blocks,
 800642e:	4619      	mov	r1, r3
 8006430:	4610      	mov	r0, r2
 8006432:	f018 ff33 	bl	801f29c <jround_up>
 8006436:	4603      	mov	r3, r0
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 8006438:	461d      	mov	r5, r3
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 800643a:	697b      	ldr	r3, [r7, #20]
 800643c:	6a1b      	ldr	r3, [r3, #32]
 800643e:	461a      	mov	r2, r3
				(long) compptr->v_samp_factor),
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	68db      	ldr	r3, [r3, #12]
	 (JDIMENSION) jround_up((long) compptr->height_in_blocks,
 8006444:	4619      	mov	r1, r3
 8006446:	4610      	mov	r0, r2
 8006448:	f018 ff28 	bl	801f29c <jround_up>
 800644c:	4603      	mov	r3, r0
      coef->whole_image[ci] = (*cinfo->mem->request_virt_barray)
 800644e:	461a      	mov	r2, r3
 8006450:	69bb      	ldr	r3, [r7, #24]
 8006452:	9301      	str	r3, [sp, #4]
 8006454:	9200      	str	r2, [sp, #0]
 8006456:	462b      	mov	r3, r5
 8006458:	2201      	movs	r2, #1
 800645a:	2101      	movs	r1, #1
 800645c:	6878      	ldr	r0, [r7, #4]
 800645e:	47a0      	blx	r4
 8006460:	4601      	mov	r1, r0
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	69fa      	ldr	r2, [r7, #28]
 8006466:	3212      	adds	r2, #18
 8006468:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	 ci++, compptr++) {
 800646c:	69fb      	ldr	r3, [r7, #28]
 800646e:	3301      	adds	r3, #1
 8006470:	61fb      	str	r3, [r7, #28]
 8006472:	697b      	ldr	r3, [r7, #20]
 8006474:	3358      	adds	r3, #88	; 0x58
 8006476:	617b      	str	r3, [r7, #20]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800647c:	69fa      	ldr	r2, [r7, #28]
 800647e:	429a      	cmp	r2, r3
 8006480:	dbc0      	blt.n	8006404 <jinit_d_coef_controller+0x48>
	 (JDIMENSION) access_rows);
    }
    coef->pub.consume_data = consume_data;
 8006482:	68fb      	ldr	r3, [r7, #12]
 8006484:	4a20      	ldr	r2, [pc, #128]	; (8006508 <jinit_d_coef_controller+0x14c>)
 8006486:	605a      	str	r2, [r3, #4]
    coef->pub.decompress_data = decompress_data;
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	4a20      	ldr	r2, [pc, #128]	; (800650c <jinit_d_coef_controller+0x150>)
 800648c:	60da      	str	r2, [r3, #12]
    coef->pub.coef_arrays = coef->whole_image; /* link to virtual arrays */
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	611a      	str	r2, [r3, #16]
	       (size_t) (D_MAX_BLOCKS_IN_MCU * SIZEOF(JBLOCK)));
    coef->pub.consume_data = dummy_consume_data;
    coef->pub.decompress_data = decompress_onepass;
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
  }
}
 8006498:	e02e      	b.n	80064f8 <jinit_d_coef_controller+0x13c>
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	685b      	ldr	r3, [r3, #4]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80064a4:	2101      	movs	r1, #1
 80064a6:	6878      	ldr	r0, [r7, #4]
 80064a8:	4798      	blx	r3
 80064aa:	60b8      	str	r0, [r7, #8]
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 80064ac:	2300      	movs	r3, #0
 80064ae:	613b      	str	r3, [r7, #16]
 80064b0:	e00b      	b.n	80064ca <jinit_d_coef_controller+0x10e>
      coef->MCU_buffer[i] = buffer + i;
 80064b2:	693b      	ldr	r3, [r7, #16]
 80064b4:	01db      	lsls	r3, r3, #7
 80064b6:	68ba      	ldr	r2, [r7, #8]
 80064b8:	18d1      	adds	r1, r2, r3
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	693a      	ldr	r2, [r7, #16]
 80064be:	3208      	adds	r2, #8
 80064c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < D_MAX_BLOCKS_IN_MCU; i++) {
 80064c4:	693b      	ldr	r3, [r7, #16]
 80064c6:	3301      	adds	r3, #1
 80064c8:	613b      	str	r3, [r7, #16]
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	2b09      	cmp	r3, #9
 80064ce:	ddf0      	ble.n	80064b2 <jinit_d_coef_controller+0xf6>
    if (cinfo->lim_Se == 0)	/* DC only case: want to bypass later */
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d105      	bne.n	80064e6 <jinit_d_coef_controller+0x12a>
      FMEMZERO((void FAR *) buffer,
 80064da:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80064de:	2100      	movs	r1, #0
 80064e0:	68b8      	ldr	r0, [r7, #8]
 80064e2:	f018 ff79 	bl	801f3d8 <memset>
    coef->pub.consume_data = dummy_consume_data;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	4a09      	ldr	r2, [pc, #36]	; (8006510 <jinit_d_coef_controller+0x154>)
 80064ea:	605a      	str	r2, [r3, #4]
    coef->pub.decompress_data = decompress_onepass;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4a09      	ldr	r2, [pc, #36]	; (8006514 <jinit_d_coef_controller+0x158>)
 80064f0:	60da      	str	r2, [r3, #12]
    coef->pub.coef_arrays = NULL; /* flag for no virtual arrays */
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	611a      	str	r2, [r3, #16]
}
 80064f8:	bf00      	nop
 80064fa:	3720      	adds	r7, #32
 80064fc:	46bd      	mov	sp, r7
 80064fe:	bdb0      	pop	{r4, r5, r7, pc}
 8006500:	08005373 	.word	0x08005373
 8006504:	08005391 	.word	0x08005391
 8006508:	08005601 	.word	0x08005601
 800650c:	080057b1 	.word	0x080057b1
 8006510:	080055eb 	.word	0x080055eb
 8006514:	080053e5 	.word	0x080053e5

08006518 <build_ycc_rgb_table>:
 * Initialize tables for YCC->RGB colorspace conversion.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
 8006518:	b580      	push	{r7, lr}
 800651a:	b086      	sub	sp, #24
 800651c:	af00      	add	r7, sp, #0
 800651e:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8006526:	60fb      	str	r3, [r7, #12]
  int i;
  INT32 x;
  SHIFT_TEMPS

  cconvert->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	685b      	ldr	r3, [r3, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006532:	2101      	movs	r1, #1
 8006534:	6878      	ldr	r0, [r7, #4]
 8006536:	4798      	blx	r3
 8006538:	4602      	mov	r2, r0
  cconvert->Cr_r_tab = (int *)
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	609a      	str	r2, [r3, #8]
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	685b      	ldr	r3, [r3, #4]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006548:	2101      	movs	r1, #1
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	4798      	blx	r3
 800654e:	4602      	mov	r2, r0
  cconvert->Cb_b_tab = (int *)
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	60da      	str	r2, [r3, #12]
				(MAXJSAMPLE+1) * SIZEOF(int));
  cconvert->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	685b      	ldr	r3, [r3, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800655e:	2101      	movs	r1, #1
 8006560:	6878      	ldr	r0, [r7, #4]
 8006562:	4798      	blx	r3
 8006564:	4602      	mov	r2, r0
  cconvert->Cr_g_tab = (INT32 *)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	611a      	str	r2, [r3, #16]
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  cconvert->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006574:	2101      	movs	r1, #1
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	4798      	blx	r3
 800657a:	4602      	mov	r2, r0
  cconvert->Cb_g_tab = (INT32 *)
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	615a      	str	r2, [r3, #20]
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 8006580:	2300      	movs	r3, #0
 8006582:	617b      	str	r3, [r7, #20]
 8006584:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 8006588:	613b      	str	r3, [r7, #16]
 800658a:	e035      	b.n	80065f8 <build_ycc_rgb_table+0xe0>
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    cconvert->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800658c:	693b      	ldr	r3, [r7, #16]
 800658e:	4a1e      	ldr	r2, [pc, #120]	; (8006608 <build_ycc_rgb_table+0xf0>)
 8006590:	fb02 f303 	mul.w	r3, r2, r3
 8006594:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    cconvert->Cr_r_tab[i] = (int)
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	6899      	ldr	r1, [r3, #8]
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	009b      	lsls	r3, r3, #2
 80065a0:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 80065a2:	1412      	asrs	r2, r2, #16
    cconvert->Cr_r_tab[i] = (int)
 80065a4:	601a      	str	r2, [r3, #0]
    /* Cb=>B value is nearest int to 1.77200 * x */
    cconvert->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	4a18      	ldr	r2, [pc, #96]	; (800660c <build_ycc_rgb_table+0xf4>)
 80065aa:	fb02 f303 	mul.w	r3, r2, r3
 80065ae:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    cconvert->Cb_b_tab[i] = (int)
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	68d9      	ldr	r1, [r3, #12]
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	009b      	lsls	r3, r3, #2
 80065ba:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 80065bc:	1412      	asrs	r2, r2, #16
    cconvert->Cb_b_tab[i] = (int)
 80065be:	601a      	str	r2, [r3, #0]
    /* Cr=>G value is scaled-up -0.71414 * x */
    cconvert->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	691a      	ldr	r2, [r3, #16]
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	009b      	lsls	r3, r3, #2
 80065c8:	4413      	add	r3, r2
 80065ca:	693a      	ldr	r2, [r7, #16]
 80065cc:	4910      	ldr	r1, [pc, #64]	; (8006610 <build_ycc_rgb_table+0xf8>)
 80065ce:	fb01 f202 	mul.w	r2, r1, r2
 80065d2:	601a      	str	r2, [r3, #0]
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    cconvert->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 80065d4:	693b      	ldr	r3, [r7, #16]
 80065d6:	4a0f      	ldr	r2, [pc, #60]	; (8006614 <build_ycc_rgb_table+0xfc>)
 80065d8:	fb02 f203 	mul.w	r2, r2, r3
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	6959      	ldr	r1, [r3, #20]
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	009b      	lsls	r3, r3, #2
 80065e4:	440b      	add	r3, r1
 80065e6:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 80065ea:	601a      	str	r2, [r3, #0]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	3301      	adds	r3, #1
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	3301      	adds	r3, #1
 80065f6:	613b      	str	r3, [r7, #16]
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2bff      	cmp	r3, #255	; 0xff
 80065fc:	ddc6      	ble.n	800658c <build_ycc_rgb_table+0x74>
  }
}
 80065fe:	bf00      	nop
 8006600:	bf00      	nop
 8006602:	3718      	adds	r7, #24
 8006604:	46bd      	mov	sp, r7
 8006606:	bd80      	pop	{r7, pc}
 8006608:	000166e9 	.word	0x000166e9
 800660c:	0001c5a2 	.word	0x0001c5a2
 8006610:	ffff492e 	.word	0xffff492e
 8006614:	ffffa7e6 	.word	0xffffa7e6

08006618 <ycc_rgb_convert>:

METHODDEF(void)
ycc_rgb_convert (j_decompress_ptr cinfo,
		 JSAMPIMAGE input_buf, JDIMENSION input_row,
		 JSAMPARRAY output_buf, int num_rows)
{
 8006618:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800661c:	b08d      	sub	sp, #52	; 0x34
 800661e:	af00      	add	r7, sp, #0
 8006620:	6278      	str	r0, [r7, #36]	; 0x24
 8006622:	6239      	str	r1, [r7, #32]
 8006624:	61fa      	str	r2, [r7, #28]
 8006626:	61bb      	str	r3, [r7, #24]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8006628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800662a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8006630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8006636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006638:	f8d3 614c 	ldr.w	r6, [r3, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
 800663c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800663e:	689b      	ldr	r3, [r3, #8]
 8006640:	4618      	mov	r0, r3
  register int * Cbbtab = cconvert->Cb_b_tab;
 8006642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006644:	68db      	ldr	r3, [r3, #12]
 8006646:	617b      	str	r3, [r7, #20]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 8006648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800664a:	691b      	ldr	r3, [r3, #16]
 800664c:	613b      	str	r3, [r7, #16]
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 800664e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	60fb      	str	r3, [r7, #12]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8006654:	e054      	b.n	8006700 <ycc_rgb_convert+0xe8>
    inptr0 = input_buf[0][input_row];
 8006656:	6a3b      	ldr	r3, [r7, #32]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	69fb      	ldr	r3, [r7, #28]
 800665c:	009b      	lsls	r3, r3, #2
 800665e:	4413      	add	r3, r2
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	60bb      	str	r3, [r7, #8]
    inptr1 = input_buf[1][input_row];
 8006664:	6a3b      	ldr	r3, [r7, #32]
 8006666:	3304      	adds	r3, #4
 8006668:	681a      	ldr	r2, [r3, #0]
 800666a:	69fb      	ldr	r3, [r7, #28]
 800666c:	009b      	lsls	r3, r3, #2
 800666e:	4413      	add	r3, r2
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	607b      	str	r3, [r7, #4]
    inptr2 = input_buf[2][input_row];
 8006674:	6a3b      	ldr	r3, [r7, #32]
 8006676:	3308      	adds	r3, #8
 8006678:	681a      	ldr	r2, [r3, #0]
 800667a:	69fb      	ldr	r3, [r7, #28]
 800667c:	009b      	lsls	r3, r3, #2
 800667e:	4413      	add	r3, r2
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	603b      	str	r3, [r7, #0]
    input_row++;
 8006684:	69fb      	ldr	r3, [r7, #28]
 8006686:	3301      	adds	r3, #1
 8006688:	61fb      	str	r3, [r7, #28]
    outptr = *output_buf++;
 800668a:	69bb      	ldr	r3, [r7, #24]
 800668c:	1d1a      	adds	r2, r3, #4
 800668e:	61ba      	str	r2, [r7, #24]
 8006690:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8006692:	2400      	movs	r4, #0
 8006694:	e031      	b.n	80066fa <ycc_rgb_convert+0xe2>
      y  = GETJSAMPLE(inptr0[col]);
 8006696:	68bb      	ldr	r3, [r7, #8]
 8006698:	4423      	add	r3, r4
 800669a:	781b      	ldrb	r3, [r3, #0]
 800669c:	4698      	mov	r8, r3
      cb = GETJSAMPLE(inptr1[col]);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	4423      	add	r3, r4
 80066a2:	781b      	ldrb	r3, [r3, #0]
 80066a4:	469a      	mov	sl, r3
      cr = GETJSAMPLE(inptr2[col]);
 80066a6:	683b      	ldr	r3, [r7, #0]
 80066a8:	4423      	add	r3, r4
 80066aa:	781b      	ldrb	r3, [r3, #0]
 80066ac:	4699      	mov	r9, r3
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[RGB_RED] =   range_limit[y + Crrtab[cr]];
 80066ae:	464b      	mov	r3, r9
 80066b0:	009b      	lsls	r3, r3, #2
 80066b2:	4602      	mov	r2, r0
 80066b4:	4413      	add	r3, r2
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4443      	add	r3, r8
 80066ba:	4433      	add	r3, r6
 80066bc:	781b      	ldrb	r3, [r3, #0]
 80066be:	702b      	strb	r3, [r5, #0]
      outptr[RGB_GREEN] = range_limit[y +
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 80066c0:	4653      	mov	r3, sl
 80066c2:	009b      	lsls	r3, r3, #2
 80066c4:	68fa      	ldr	r2, [r7, #12]
 80066c6:	4413      	add	r3, r2
 80066c8:	681a      	ldr	r2, [r3, #0]
 80066ca:	464b      	mov	r3, r9
 80066cc:	009b      	lsls	r3, r3, #2
 80066ce:	6939      	ldr	r1, [r7, #16]
 80066d0:	440b      	add	r3, r1
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	4413      	add	r3, r2
 80066d6:	141b      	asrs	r3, r3, #16
      outptr[RGB_GREEN] = range_limit[y +
 80066d8:	4443      	add	r3, r8
 80066da:	4433      	add	r3, r6
 80066dc:	1c6a      	adds	r2, r5, #1
 80066de:	781b      	ldrb	r3, [r3, #0]
 80066e0:	7013      	strb	r3, [r2, #0]
						 SCALEBITS))];
      outptr[RGB_BLUE] =  range_limit[y + Cbbtab[cb]];
 80066e2:	4653      	mov	r3, sl
 80066e4:	009b      	lsls	r3, r3, #2
 80066e6:	697a      	ldr	r2, [r7, #20]
 80066e8:	4413      	add	r3, r2
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	4443      	add	r3, r8
 80066ee:	18f2      	adds	r2, r6, r3
 80066f0:	1cab      	adds	r3, r5, #2
 80066f2:	7812      	ldrb	r2, [r2, #0]
 80066f4:	701a      	strb	r2, [r3, #0]
      outptr += RGB_PIXELSIZE;
 80066f6:	3503      	adds	r5, #3
    for (col = 0; col < num_cols; col++) {
 80066f8:	3401      	adds	r4, #1
 80066fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066fc:	429c      	cmp	r4, r3
 80066fe:	d3ca      	bcc.n	8006696 <ycc_rgb_convert+0x7e>
  while (--num_rows >= 0) {
 8006700:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006702:	3b01      	subs	r3, #1
 8006704:	653b      	str	r3, [r7, #80]	; 0x50
 8006706:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006708:	2b00      	cmp	r3, #0
 800670a:	daa4      	bge.n	8006656 <ycc_rgb_convert+0x3e>
    }
  }
}
 800670c:	bf00      	nop
 800670e:	bf00      	nop
 8006710:	3734      	adds	r7, #52	; 0x34
 8006712:	46bd      	mov	sp, r7
 8006714:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006718:	4770      	bx	lr

0800671a <build_rgb_y_table>:
 * Initialize for RGB->grayscale colorspace conversion.
 */

LOCAL(void)
build_rgb_y_table (j_decompress_ptr cinfo)
{
 800671a:	b580      	push	{r7, lr}
 800671c:	b086      	sub	sp, #24
 800671e:	af00      	add	r7, sp, #0
 8006720:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8006728:	613b      	str	r3, [r7, #16]
  INT32 * rgb_y_tab;
  INT32 i;

  /* Allocate and fill in the conversion tables. */
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	685b      	ldr	r3, [r3, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f44f 6240 	mov.w	r2, #3072	; 0xc00
 8006734:	2101      	movs	r1, #1
 8006736:	6878      	ldr	r0, [r7, #4]
 8006738:	4798      	blx	r3
 800673a:	60f8      	str	r0, [r7, #12]
  cconvert->rgb_y_tab = rgb_y_tab = (INT32 *)
 800673c:	693b      	ldr	r3, [r7, #16]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	619a      	str	r2, [r3, #24]
				(TABLE_SIZE * SIZEOF(INT32)));

  for (i = 0; i <= MAXJSAMPLE; i++) {
 8006742:	2300      	movs	r3, #0
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	e026      	b.n	8006796 <build_rgb_y_table+0x7c>
    rgb_y_tab[i+R_Y_OFF] = FIX(0.29900) * i;
 8006748:	697b      	ldr	r3, [r7, #20]
 800674a:	009b      	lsls	r3, r3, #2
 800674c:	68fa      	ldr	r2, [r7, #12]
 800674e:	4413      	add	r3, r2
 8006750:	697a      	ldr	r2, [r7, #20]
 8006752:	f644 418b 	movw	r1, #19595	; 0x4c8b
 8006756:	fb01 f202 	mul.w	r2, r1, r2
 800675a:	601a      	str	r2, [r3, #0]
    rgb_y_tab[i+G_Y_OFF] = FIX(0.58700) * i;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8006762:	009b      	lsls	r3, r3, #2
 8006764:	68fa      	ldr	r2, [r7, #12]
 8006766:	4413      	add	r3, r2
 8006768:	697a      	ldr	r2, [r7, #20]
 800676a:	f249 6146 	movw	r1, #38470	; 0x9646
 800676e:	fb01 f202 	mul.w	r2, r1, r2
 8006772:	601a      	str	r2, [r3, #0]
    rgb_y_tab[i+B_Y_OFF] = FIX(0.11400) * i + ONE_HALF;
 8006774:	697b      	ldr	r3, [r7, #20]
 8006776:	f641 522f 	movw	r2, #7471	; 0x1d2f
 800677a:	fb02 f203 	mul.w	r2, r2, r3
 800677e:	697b      	ldr	r3, [r7, #20]
 8006780:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8006784:	009b      	lsls	r3, r3, #2
 8006786:	68f9      	ldr	r1, [r7, #12]
 8006788:	440b      	add	r3, r1
 800678a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800678e:	601a      	str	r2, [r3, #0]
  for (i = 0; i <= MAXJSAMPLE; i++) {
 8006790:	697b      	ldr	r3, [r7, #20]
 8006792:	3301      	adds	r3, #1
 8006794:	617b      	str	r3, [r7, #20]
 8006796:	697b      	ldr	r3, [r7, #20]
 8006798:	2bff      	cmp	r3, #255	; 0xff
 800679a:	ddd5      	ble.n	8006748 <build_rgb_y_table+0x2e>
  }
}
 800679c:	bf00      	nop
 800679e:	bf00      	nop
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <rgb_gray_convert>:

METHODDEF(void)
rgb_gray_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 80067a6:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 80067aa:	b089      	sub	sp, #36	; 0x24
 80067ac:	af00      	add	r7, sp, #0
 80067ae:	6178      	str	r0, [r7, #20]
 80067b0:	6139      	str	r1, [r7, #16]
 80067b2:	60fa      	str	r2, [r7, #12]
 80067b4:	60bb      	str	r3, [r7, #8]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 80067bc:	61fb      	str	r3, [r7, #28]
  register int r, g, b;
  register INT32 * ctab = cconvert->rgb_y_tab;
 80067be:	69fb      	ldr	r3, [r7, #28]
 80067c0:	699d      	ldr	r5, [r3, #24]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 80067c2:	697b      	ldr	r3, [r7, #20]
 80067c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80067c6:	61bb      	str	r3, [r7, #24]

  while (--num_rows >= 0) {
 80067c8:	e045      	b.n	8006856 <rgb_gray_convert+0xb0>
    inptr0 = input_buf[0][input_row];
 80067ca:	693b      	ldr	r3, [r7, #16]
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	009b      	lsls	r3, r3, #2
 80067d2:	4413      	add	r3, r2
 80067d4:	681e      	ldr	r6, [r3, #0]
    inptr1 = input_buf[1][input_row];
 80067d6:	693b      	ldr	r3, [r7, #16]
 80067d8:	3304      	adds	r3, #4
 80067da:	681a      	ldr	r2, [r3, #0]
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	4413      	add	r3, r2
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	4619      	mov	r1, r3
    inptr2 = input_buf[2][input_row];
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	3308      	adds	r3, #8
 80067ea:	681a      	ldr	r2, [r3, #0]
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	009b      	lsls	r3, r3, #2
 80067f0:	4413      	add	r3, r2
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	4618      	mov	r0, r3
    input_row++;
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	3301      	adds	r3, #1
 80067fa:	60fb      	str	r3, [r7, #12]
    outptr = *output_buf++;
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	1d1a      	adds	r2, r3, #4
 8006800:	60ba      	str	r2, [r7, #8]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	607b      	str	r3, [r7, #4]
    for (col = 0; col < num_cols; col++) {
 8006806:	2400      	movs	r4, #0
 8006808:	e022      	b.n	8006850 <rgb_gray_convert+0xaa>
      r = GETJSAMPLE(inptr0[col]);
 800680a:	1933      	adds	r3, r6, r4
 800680c:	781b      	ldrb	r3, [r3, #0]
 800680e:	469a      	mov	sl, r3
      g = GETJSAMPLE(inptr1[col]);
 8006810:	460b      	mov	r3, r1
 8006812:	4423      	add	r3, r4
 8006814:	781b      	ldrb	r3, [r3, #0]
 8006816:	4699      	mov	r9, r3
      b = GETJSAMPLE(inptr2[col]);
 8006818:	4603      	mov	r3, r0
 800681a:	4423      	add	r3, r4
 800681c:	781b      	ldrb	r3, [r3, #0]
 800681e:	4698      	mov	r8, r3
      /* Y */
      outptr[col] = (JSAMPLE)
		((ctab[r+R_Y_OFF] + ctab[g+G_Y_OFF] + ctab[b+B_Y_OFF])
 8006820:	4653      	mov	r3, sl
 8006822:	009b      	lsls	r3, r3, #2
 8006824:	442b      	add	r3, r5
 8006826:	681a      	ldr	r2, [r3, #0]
 8006828:	464b      	mov	r3, r9
 800682a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	442b      	add	r3, r5
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	441a      	add	r2, r3
 8006836:	4643      	mov	r3, r8
 8006838:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800683c:	009b      	lsls	r3, r3, #2
 800683e:	442b      	add	r3, r5
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4413      	add	r3, r2
		 >> SCALEBITS);
 8006844:	141a      	asrs	r2, r3, #16
      outptr[col] = (JSAMPLE)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	4423      	add	r3, r4
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 800684e:	3401      	adds	r4, #1
 8006850:	69bb      	ldr	r3, [r7, #24]
 8006852:	429c      	cmp	r4, r3
 8006854:	d3d9      	bcc.n	800680a <rgb_gray_convert+0x64>
  while (--num_rows >= 0) {
 8006856:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006858:	3b01      	subs	r3, #1
 800685a:	643b      	str	r3, [r7, #64]	; 0x40
 800685c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800685e:	2b00      	cmp	r3, #0
 8006860:	dab3      	bge.n	80067ca <rgb_gray_convert+0x24>
    }
  }
}
 8006862:	bf00      	nop
 8006864:	bf00      	nop
 8006866:	3724      	adds	r7, #36	; 0x24
 8006868:	46bd      	mov	sp, r7
 800686a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 800686e:	4770      	bx	lr

08006870 <rgb_convert>:

METHODDEF(void)
rgb_convert (j_decompress_ptr cinfo,
	     JSAMPIMAGE input_buf, JDIMENSION input_row,
	     JSAMPARRAY output_buf, int num_rows)
{
 8006870:	b4f0      	push	{r4, r5, r6, r7}
 8006872:	b086      	sub	sp, #24
 8006874:	af00      	add	r7, sp, #0
 8006876:	60f8      	str	r0, [r7, #12]
 8006878:	60b9      	str	r1, [r7, #8]
 800687a:	607a      	str	r2, [r7, #4]
 800687c:	603b      	str	r3, [r7, #0]
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 800687e:	68fb      	ldr	r3, [r7, #12]
 8006880:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006882:	617b      	str	r3, [r7, #20]

  while (--num_rows >= 0) {
 8006884:	e030      	b.n	80068e8 <rgb_convert+0x78>
    inptr0 = input_buf[0][input_row];
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	009b      	lsls	r3, r3, #2
 800688e:	4413      	add	r3, r2
 8006890:	681e      	ldr	r6, [r3, #0]
    inptr1 = input_buf[1][input_row];
 8006892:	68bb      	ldr	r3, [r7, #8]
 8006894:	3304      	adds	r3, #4
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	009b      	lsls	r3, r3, #2
 800689c:	4413      	add	r3, r2
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	4619      	mov	r1, r3
    inptr2 = input_buf[2][input_row];
 80068a2:	68bb      	ldr	r3, [r7, #8]
 80068a4:	3308      	adds	r3, #8
 80068a6:	681a      	ldr	r2, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	009b      	lsls	r3, r3, #2
 80068ac:	4413      	add	r3, r2
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	4618      	mov	r0, r3
    input_row++;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	3301      	adds	r3, #1
 80068b6:	607b      	str	r3, [r7, #4]
    outptr = *output_buf++;
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	1d1a      	adds	r2, r3, #4
 80068bc:	603a      	str	r2, [r7, #0]
 80068be:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 80068c0:	2400      	movs	r4, #0
 80068c2:	e00e      	b.n	80068e2 <rgb_convert+0x72>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED]   = inptr0[col];
 80068c4:	1933      	adds	r3, r6, r4
 80068c6:	781b      	ldrb	r3, [r3, #0]
 80068c8:	702b      	strb	r3, [r5, #0]
      outptr[RGB_GREEN] = inptr1[col];
 80068ca:	460b      	mov	r3, r1
 80068cc:	191a      	adds	r2, r3, r4
 80068ce:	1c6b      	adds	r3, r5, #1
 80068d0:	7812      	ldrb	r2, [r2, #0]
 80068d2:	701a      	strb	r2, [r3, #0]
      outptr[RGB_BLUE]  = inptr2[col];
 80068d4:	4603      	mov	r3, r0
 80068d6:	191a      	adds	r2, r3, r4
 80068d8:	1cab      	adds	r3, r5, #2
 80068da:	7812      	ldrb	r2, [r2, #0]
 80068dc:	701a      	strb	r2, [r3, #0]
      outptr += RGB_PIXELSIZE;
 80068de:	3503      	adds	r5, #3
    for (col = 0; col < num_cols; col++) {
 80068e0:	3401      	adds	r4, #1
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	429c      	cmp	r4, r3
 80068e6:	d3ed      	bcc.n	80068c4 <rgb_convert+0x54>
  while (--num_rows >= 0) {
 80068e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068ea:	3b01      	subs	r3, #1
 80068ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80068ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	dac8      	bge.n	8006886 <rgb_convert+0x16>
    }
  }
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	3718      	adds	r7, #24
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bcf0      	pop	{r4, r5, r6, r7}
 80068fe:	4770      	bx	lr

08006900 <null_convert>:

METHODDEF(void)
null_convert (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION input_row,
	      JSAMPARRAY output_buf, int num_rows)
{
 8006900:	b4f0      	push	{r4, r5, r6, r7}
 8006902:	b086      	sub	sp, #24
 8006904:	af00      	add	r7, sp, #0
 8006906:	60f8      	str	r0, [r7, #12]
 8006908:	60b9      	str	r1, [r7, #8]
 800690a:	607a      	str	r2, [r7, #4]
 800690c:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
  register JDIMENSION count;
  register int num_components = cinfo->num_components;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	6a5e      	ldr	r6, [r3, #36]	; 0x24
  JDIMENSION num_cols = cinfo->output_width;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006916:	613b      	str	r3, [r7, #16]
  int ci;

  while (--num_rows >= 0) {
 8006918:	e028      	b.n	800696c <null_convert+0x6c>
    for (ci = 0; ci < num_components; ci++) {
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
 800691e:	e01c      	b.n	800695a <null_convert+0x5a>
      inptr = input_buf[ci][input_row];
 8006920:	697b      	ldr	r3, [r7, #20]
 8006922:	009b      	lsls	r3, r3, #2
 8006924:	68ba      	ldr	r2, [r7, #8]
 8006926:	4413      	add	r3, r2
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	009b      	lsls	r3, r3, #2
 800692e:	4413      	add	r3, r2
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	4619      	mov	r1, r3
      outptr = output_buf[0] + ci;
 8006934:	683b      	ldr	r3, [r7, #0]
 8006936:	681a      	ldr	r2, [r3, #0]
 8006938:	697b      	ldr	r3, [r7, #20]
 800693a:	18d5      	adds	r5, r2, r3
      for (count = num_cols; count > 0; count--) {
 800693c:	693c      	ldr	r4, [r7, #16]
 800693e:	e007      	b.n	8006950 <null_convert+0x50>
	*outptr = *inptr++;	/* needn't bother with GETJSAMPLE() here */
 8006940:	460b      	mov	r3, r1
 8006942:	1c5a      	adds	r2, r3, #1
 8006944:	4611      	mov	r1, r2
 8006946:	781b      	ldrb	r3, [r3, #0]
 8006948:	702b      	strb	r3, [r5, #0]
	outptr += num_components;
 800694a:	4633      	mov	r3, r6
 800694c:	441d      	add	r5, r3
      for (count = num_cols; count > 0; count--) {
 800694e:	3c01      	subs	r4, #1
 8006950:	2c00      	cmp	r4, #0
 8006952:	d1f5      	bne.n	8006940 <null_convert+0x40>
    for (ci = 0; ci < num_components; ci++) {
 8006954:	697b      	ldr	r3, [r7, #20]
 8006956:	3301      	adds	r3, #1
 8006958:	617b      	str	r3, [r7, #20]
 800695a:	697b      	ldr	r3, [r7, #20]
 800695c:	42b3      	cmp	r3, r6
 800695e:	dbdf      	blt.n	8006920 <null_convert+0x20>
      }
    }
    input_row++;
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	3301      	adds	r3, #1
 8006964:	607b      	str	r3, [r7, #4]
    output_buf++;
 8006966:	683b      	ldr	r3, [r7, #0]
 8006968:	3304      	adds	r3, #4
 800696a:	603b      	str	r3, [r7, #0]
  while (--num_rows >= 0) {
 800696c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800696e:	3b01      	subs	r3, #1
 8006970:	62bb      	str	r3, [r7, #40]	; 0x28
 8006972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006974:	2b00      	cmp	r3, #0
 8006976:	dad0      	bge.n	800691a <null_convert+0x1a>
  }
}
 8006978:	bf00      	nop
 800697a:	bf00      	nop
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bcf0      	pop	{r4, r5, r6, r7}
 8006982:	4770      	bx	lr

08006984 <grayscale_convert>:

METHODDEF(void)
grayscale_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af02      	add	r7, sp, #8
 800698a:	60f8      	str	r0, [r7, #12]
 800698c:	60b9      	str	r1, [r7, #8]
 800698e:	607a      	str	r2, [r7, #4]
 8006990:	603b      	str	r3, [r7, #0]
  jcopy_sample_rows(input_buf[0], (int) input_row, output_buf, 0,
 8006992:	68bb      	ldr	r3, [r7, #8]
 8006994:	6818      	ldr	r0, [r3, #0]
 8006996:	6879      	ldr	r1, [r7, #4]
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800699c:	9301      	str	r3, [sp, #4]
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	9300      	str	r3, [sp, #0]
 80069a2:	2300      	movs	r3, #0
 80069a4:	683a      	ldr	r2, [r7, #0]
 80069a6:	f018 fc93 	bl	801f2d0 <jcopy_sample_rows>
		    num_rows, cinfo->output_width);
}
 80069aa:	bf00      	nop
 80069ac:	3710      	adds	r7, #16
 80069ae:	46bd      	mov	sp, r7
 80069b0:	bd80      	pop	{r7, pc}

080069b2 <gray_rgb_convert>:

METHODDEF(void)
gray_rgb_convert (j_decompress_ptr cinfo,
		  JSAMPIMAGE input_buf, JDIMENSION input_row,
		  JSAMPARRAY output_buf, int num_rows)
{
 80069b2:	b4f0      	push	{r4, r5, r6, r7}
 80069b4:	b086      	sub	sp, #24
 80069b6:	af00      	add	r7, sp, #0
 80069b8:	60f8      	str	r0, [r7, #12]
 80069ba:	60b9      	str	r1, [r7, #8]
 80069bc:	607a      	str	r2, [r7, #4]
 80069be:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	617b      	str	r3, [r7, #20]

  while (--num_rows >= 0) {
 80069c6:	e01b      	b.n	8006a00 <gray_rgb_convert+0x4e>
    inptr = input_buf[0][input_row++];
 80069c8:	68bb      	ldr	r3, [r7, #8]
 80069ca:	681a      	ldr	r2, [r3, #0]
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	1c59      	adds	r1, r3, #1
 80069d0:	6079      	str	r1, [r7, #4]
 80069d2:	009b      	lsls	r3, r3, #2
 80069d4:	4413      	add	r3, r2
 80069d6:	681e      	ldr	r6, [r3, #0]
    outptr = *output_buf++;
 80069d8:	683b      	ldr	r3, [r7, #0]
 80069da:	1d1a      	adds	r2, r3, #4
 80069dc:	603a      	str	r2, [r7, #0]
 80069de:	681c      	ldr	r4, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 80069e0:	2500      	movs	r5, #0
 80069e2:	e00a      	b.n	80069fa <gray_rgb_convert+0x48>
      /* We can dispense with GETJSAMPLE() here */
      outptr[RGB_RED] = outptr[RGB_GREEN] = outptr[RGB_BLUE] = inptr[col];
 80069e4:	1973      	adds	r3, r6, r5
 80069e6:	1ca2      	adds	r2, r4, #2
 80069e8:	781b      	ldrb	r3, [r3, #0]
 80069ea:	7013      	strb	r3, [r2, #0]
 80069ec:	1c63      	adds	r3, r4, #1
 80069ee:	7812      	ldrb	r2, [r2, #0]
 80069f0:	701a      	strb	r2, [r3, #0]
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	7023      	strb	r3, [r4, #0]
      outptr += RGB_PIXELSIZE;
 80069f6:	3403      	adds	r4, #3
    for (col = 0; col < num_cols; col++) {
 80069f8:	3501      	adds	r5, #1
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	429d      	cmp	r5, r3
 80069fe:	d3f1      	bcc.n	80069e4 <gray_rgb_convert+0x32>
  while (--num_rows >= 0) {
 8006a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a02:	3b01      	subs	r3, #1
 8006a04:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	dadd      	bge.n	80069c8 <gray_rgb_convert+0x16>
    }
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	bf00      	nop
 8006a10:	3718      	adds	r7, #24
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bcf0      	pop	{r4, r5, r6, r7}
 8006a16:	4770      	bx	lr

08006a18 <ycck_cmyk_convert>:

METHODDEF(void)
ycck_cmyk_convert (j_decompress_ptr cinfo,
		   JSAMPIMAGE input_buf, JDIMENSION input_row,
		   JSAMPARRAY output_buf, int num_rows)
{
 8006a18:	e92d 07f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006a1c:	b08f      	sub	sp, #60	; 0x3c
 8006a1e:	af00      	add	r7, sp, #0
 8006a20:	62f8      	str	r0, [r7, #44]	; 0x2c
 8006a22:	62b9      	str	r1, [r7, #40]	; 0x28
 8006a24:	627a      	str	r2, [r7, #36]	; 0x24
 8006a26:	623b      	str	r3, [r7, #32]
  my_cconvert_ptr cconvert = (my_cconvert_ptr) cinfo->cconvert;
 8006a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a2a:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 8006a2e:	637b      	str	r3, [r7, #52]	; 0x34
  register int y, cb, cr;
  register JSAMPROW outptr;
  register JSAMPROW inptr0, inptr1, inptr2, inptr3;
  register JDIMENSION col;
  JDIMENSION num_cols = cinfo->output_width;
 8006a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a34:	633b      	str	r3, [r7, #48]	; 0x30
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 8006a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006a38:	f8d3 614c 	ldr.w	r6, [r3, #332]	; 0x14c
  register int * Crrtab = cconvert->Cr_r_tab;
 8006a3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	4618      	mov	r0, r3
  register int * Cbbtab = cconvert->Cb_b_tab;
 8006a42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a44:	68db      	ldr	r3, [r3, #12]
 8006a46:	61fb      	str	r3, [r7, #28]
  register INT32 * Crgtab = cconvert->Cr_g_tab;
 8006a48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a4a:	691b      	ldr	r3, [r3, #16]
 8006a4c:	61bb      	str	r3, [r7, #24]
  register INT32 * Cbgtab = cconvert->Cb_g_tab;
 8006a4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	617b      	str	r3, [r7, #20]
  SHIFT_TEMPS

  while (--num_rows >= 0) {
 8006a54:	e067      	b.n	8006b26 <ycck_cmyk_convert+0x10e>
    inptr0 = input_buf[0][input_row];
 8006a56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a5c:	009b      	lsls	r3, r3, #2
 8006a5e:	4413      	add	r3, r2
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	613b      	str	r3, [r7, #16]
    inptr1 = input_buf[1][input_row];
 8006a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a66:	3304      	adds	r3, #4
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a6c:	009b      	lsls	r3, r3, #2
 8006a6e:	4413      	add	r3, r2
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	60fb      	str	r3, [r7, #12]
    inptr2 = input_buf[2][input_row];
 8006a74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a76:	3308      	adds	r3, #8
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7c:	009b      	lsls	r3, r3, #2
 8006a7e:	4413      	add	r3, r2
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	60bb      	str	r3, [r7, #8]
    inptr3 = input_buf[3][input_row];
 8006a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a86:	330c      	adds	r3, #12
 8006a88:	681a      	ldr	r2, [r3, #0]
 8006a8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a8c:	009b      	lsls	r3, r3, #2
 8006a8e:	4413      	add	r3, r2
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	607b      	str	r3, [r7, #4]
    input_row++;
 8006a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a96:	3301      	adds	r3, #1
 8006a98:	627b      	str	r3, [r7, #36]	; 0x24
    outptr = *output_buf++;
 8006a9a:	6a3b      	ldr	r3, [r7, #32]
 8006a9c:	1d1a      	adds	r2, r3, #4
 8006a9e:	623a      	str	r2, [r7, #32]
 8006aa0:	681d      	ldr	r5, [r3, #0]
    for (col = 0; col < num_cols; col++) {
 8006aa2:	2400      	movs	r4, #0
 8006aa4:	e03c      	b.n	8006b20 <ycck_cmyk_convert+0x108>
      y  = GETJSAMPLE(inptr0[col]);
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	4423      	add	r3, r4
 8006aaa:	781b      	ldrb	r3, [r3, #0]
 8006aac:	4698      	mov	r8, r3
      cb = GETJSAMPLE(inptr1[col]);
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	4423      	add	r3, r4
 8006ab2:	781b      	ldrb	r3, [r3, #0]
 8006ab4:	469a      	mov	sl, r3
      cr = GETJSAMPLE(inptr2[col]);
 8006ab6:	68bb      	ldr	r3, [r7, #8]
 8006ab8:	4423      	add	r3, r4
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	4699      	mov	r9, r3
      /* Range-limiting is essential due to noise introduced by DCT losses. */
      outptr[0] = range_limit[MAXJSAMPLE - (y + Crrtab[cr])];	/* red */
 8006abe:	464b      	mov	r3, r9
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	4413      	add	r3, r2
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	4443      	add	r3, r8
 8006aca:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006ace:	4433      	add	r3, r6
 8006ad0:	781b      	ldrb	r3, [r3, #0]
 8006ad2:	702b      	strb	r3, [r5, #0]
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
			      ((int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr],
 8006ad4:	4653      	mov	r3, sl
 8006ad6:	009b      	lsls	r3, r3, #2
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	4413      	add	r3, r2
 8006adc:	681a      	ldr	r2, [r3, #0]
 8006ade:	464b      	mov	r3, r9
 8006ae0:	009b      	lsls	r3, r3, #2
 8006ae2:	69b9      	ldr	r1, [r7, #24]
 8006ae4:	440b      	add	r3, r1
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	4413      	add	r3, r2
 8006aea:	141b      	asrs	r3, r3, #16
      outptr[1] = range_limit[MAXJSAMPLE - (y +			/* green */
 8006aec:	4443      	add	r3, r8
 8006aee:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006af2:	4433      	add	r3, r6
 8006af4:	1c6a      	adds	r2, r5, #1
 8006af6:	781b      	ldrb	r3, [r3, #0]
 8006af8:	7013      	strb	r3, [r2, #0]
						 SCALEBITS)))];
      outptr[2] = range_limit[MAXJSAMPLE - (y + Cbbtab[cb])];	/* blue */
 8006afa:	4653      	mov	r3, sl
 8006afc:	009b      	lsls	r3, r3, #2
 8006afe:	69fa      	ldr	r2, [r7, #28]
 8006b00:	4413      	add	r3, r2
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	4443      	add	r3, r8
 8006b06:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 8006b0a:	18f2      	adds	r2, r6, r3
 8006b0c:	1cab      	adds	r3, r5, #2
 8006b0e:	7812      	ldrb	r2, [r2, #0]
 8006b10:	701a      	strb	r2, [r3, #0]
      /* K passes through unchanged */
      outptr[3] = inptr3[col];	/* don't need GETJSAMPLE here */
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	191a      	adds	r2, r3, r4
 8006b16:	1ceb      	adds	r3, r5, #3
 8006b18:	7812      	ldrb	r2, [r2, #0]
 8006b1a:	701a      	strb	r2, [r3, #0]
      outptr += 4;
 8006b1c:	3504      	adds	r5, #4
    for (col = 0; col < num_cols; col++) {
 8006b1e:	3401      	adds	r4, #1
 8006b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b22:	429c      	cmp	r4, r3
 8006b24:	d3bf      	bcc.n	8006aa6 <ycck_cmyk_convert+0x8e>
  while (--num_rows >= 0) {
 8006b26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b28:	3b01      	subs	r3, #1
 8006b2a:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	da91      	bge.n	8006a56 <ycck_cmyk_convert+0x3e>
    }
  }
}
 8006b32:	bf00      	nop
 8006b34:	bf00      	nop
 8006b36:	373c      	adds	r7, #60	; 0x3c
 8006b38:	46bd      	mov	sp, r7
 8006b3a:	e8bd 07f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl}
 8006b3e:	4770      	bx	lr

08006b40 <start_pass_dcolor>:
 * Empty method for start_pass.
 */

METHODDEF(void)
start_pass_dcolor (j_decompress_ptr cinfo)
{
 8006b40:	b480      	push	{r7}
 8006b42:	b083      	sub	sp, #12
 8006b44:	af00      	add	r7, sp, #0
 8006b46:	6078      	str	r0, [r7, #4]
  /* no work needed */
}
 8006b48:	bf00      	nop
 8006b4a:	370c      	adds	r7, #12
 8006b4c:	46bd      	mov	sp, r7
 8006b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b52:	4770      	bx	lr

08006b54 <jinit_color_deconverter>:
 * Module initialization routine for output colorspace conversion.
 */

GLOBAL(void)
jinit_color_deconverter (j_decompress_ptr cinfo)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b084      	sub	sp, #16
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
  my_cconvert_ptr cconvert;
  int ci;

  cconvert = (my_cconvert_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	685b      	ldr	r3, [r3, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	221c      	movs	r2, #28
 8006b64:	2101      	movs	r1, #1
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	4798      	blx	r3
 8006b6a:	60b8      	str	r0, [r7, #8]
				SIZEOF(my_color_deconverter));
  cinfo->cconvert = (struct jpeg_color_deconverter *) cconvert;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	68ba      	ldr	r2, [r7, #8]
 8006b70:	f8c3 21dc 	str.w	r2, [r3, #476]	; 0x1dc
  cconvert->pub.start_pass = start_pass_dcolor;
 8006b74:	68bb      	ldr	r3, [r7, #8]
 8006b76:	4a88      	ldr	r2, [pc, #544]	; (8006d98 <jinit_color_deconverter+0x244>)
 8006b78:	601a      	str	r2, [r3, #0]

  /* Make sure num_components agrees with jpeg_color_space */
  switch (cinfo->jpeg_color_space) {
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b80:	2b05      	cmp	r3, #5
 8006b82:	dc33      	bgt.n	8006bec <jinit_color_deconverter+0x98>
 8006b84:	2b04      	cmp	r3, #4
 8006b86:	da23      	bge.n	8006bd0 <jinit_color_deconverter+0x7c>
 8006b88:	2b01      	cmp	r3, #1
 8006b8a:	d005      	beq.n	8006b98 <jinit_color_deconverter+0x44>
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dd2d      	ble.n	8006bec <jinit_color_deconverter+0x98>
 8006b90:	3b02      	subs	r3, #2
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d82a      	bhi.n	8006bec <jinit_color_deconverter+0x98>
 8006b96:	e00d      	b.n	8006bb4 <jinit_color_deconverter+0x60>
  case JCS_GRAYSCALE:
    if (cinfo->num_components != 1)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b9c:	2b01      	cmp	r3, #1
 8006b9e:	d033      	beq.n	8006c08 <jinit_color_deconverter+0xb4>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8006ba0:	687b      	ldr	r3, [r7, #4]
 8006ba2:	681b      	ldr	r3, [r3, #0]
 8006ba4:	220b      	movs	r2, #11
 8006ba6:	615a      	str	r2, [r3, #20]
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	6878      	ldr	r0, [r7, #4]
 8006bb0:	4798      	blx	r3
    break;
 8006bb2:	e029      	b.n	8006c08 <jinit_color_deconverter+0xb4>

  case JCS_RGB:
  case JCS_YCbCr:
    if (cinfo->num_components != 3)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb8:	2b03      	cmp	r3, #3
 8006bba:	d027      	beq.n	8006c0c <jinit_color_deconverter+0xb8>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	220b      	movs	r2, #11
 8006bc2:	615a      	str	r2, [r3, #20]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	6878      	ldr	r0, [r7, #4]
 8006bcc:	4798      	blx	r3
    break;
 8006bce:	e01d      	b.n	8006c0c <jinit_color_deconverter+0xb8>

  case JCS_CMYK:
  case JCS_YCCK:
    if (cinfo->num_components != 4)
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bd4:	2b04      	cmp	r3, #4
 8006bd6:	d01b      	beq.n	8006c10 <jinit_color_deconverter+0xbc>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	220b      	movs	r2, #11
 8006bde:	615a      	str	r2, [r3, #20]
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	4798      	blx	r3
    break;
 8006bea:	e011      	b.n	8006c10 <jinit_color_deconverter+0xbc>

  default:			/* JCS_UNKNOWN can be anything */
    if (cinfo->num_components < 1)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	dc0f      	bgt.n	8006c14 <jinit_color_deconverter+0xc0>
      ERREXIT(cinfo, JERR_BAD_J_COLORSPACE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	220b      	movs	r2, #11
 8006bfa:	615a      	str	r2, [r3, #20]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	4798      	blx	r3
    break;
 8006c06:	e005      	b.n	8006c14 <jinit_color_deconverter+0xc0>
    break;
 8006c08:	bf00      	nop
 8006c0a:	e004      	b.n	8006c16 <jinit_color_deconverter+0xc2>
    break;
 8006c0c:	bf00      	nop
 8006c0e:	e002      	b.n	8006c16 <jinit_color_deconverter+0xc2>
    break;
 8006c10:	bf00      	nop
 8006c12:	e000      	b.n	8006c16 <jinit_color_deconverter+0xc2>
    break;
 8006c14:	bf00      	nop
  /* Set out_color_components and conversion method based on requested space.
   * Also clear the component_needed flags for any unused components,
   * so that earlier pipeline stages can avoid useless computation.
   */

  switch (cinfo->out_color_space) {
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 8006c1c:	2b04      	cmp	r3, #4
 8006c1e:	d06f      	beq.n	8006d00 <jinit_color_deconverter+0x1ac>
 8006c20:	2b04      	cmp	r3, #4
 8006c22:	f300 808f 	bgt.w	8006d44 <jinit_color_deconverter+0x1f0>
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d002      	beq.n	8006c30 <jinit_color_deconverter+0xdc>
 8006c2a:	2b02      	cmp	r3, #2
 8006c2c:	d03d      	beq.n	8006caa <jinit_color_deconverter+0x156>
 8006c2e:	e089      	b.n	8006d44 <jinit_color_deconverter+0x1f0>
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2201      	movs	r2, #1
 8006c34:	679a      	str	r2, [r3, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d004      	beq.n	8006c4a <jinit_color_deconverter+0xf6>
	cinfo->jpeg_color_space == JCS_YCbCr) {
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 8006c46:	2b03      	cmp	r3, #3
 8006c48:	d118      	bne.n	8006c7c <jinit_color_deconverter+0x128>
      cconvert->pub.color_convert = grayscale_convert;
 8006c4a:	68bb      	ldr	r3, [r7, #8]
 8006c4c:	4a53      	ldr	r2, [pc, #332]	; (8006d9c <jinit_color_deconverter+0x248>)
 8006c4e:	605a      	str	r2, [r3, #4]
      /* For color->grayscale conversion, only the Y (0) component is needed */
      for (ci = 1; ci < cinfo->num_components; ci++)
 8006c50:	2301      	movs	r3, #1
 8006c52:	60fb      	str	r3, [r7, #12]
 8006c54:	e00c      	b.n	8006c70 <jinit_color_deconverter+0x11c>
	cinfo->comp_info[ci].component_needed = FALSE;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	2158      	movs	r1, #88	; 0x58
 8006c60:	fb01 f303 	mul.w	r3, r1, r3
 8006c64:	4413      	add	r3, r2
 8006c66:	2200      	movs	r2, #0
 8006c68:	635a      	str	r2, [r3, #52]	; 0x34
      for (ci = 1; ci < cinfo->num_components; ci++)
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	60fb      	str	r3, [r7, #12]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c74:	68fa      	ldr	r2, [r7, #12]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	dbed      	blt.n	8006c56 <jinit_color_deconverter+0x102>
    if (cinfo->jpeg_color_space == JCS_GRAYSCALE ||
 8006c7a:	e015      	b.n	8006ca8 <jinit_color_deconverter+0x154>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c82:	2b02      	cmp	r3, #2
 8006c84:	d106      	bne.n	8006c94 <jinit_color_deconverter+0x140>
      cconvert->pub.color_convert = rgb_gray_convert;
 8006c86:	68bb      	ldr	r3, [r7, #8]
 8006c88:	4a45      	ldr	r2, [pc, #276]	; (8006da0 <jinit_color_deconverter+0x24c>)
 8006c8a:	605a      	str	r2, [r3, #4]
      build_rgb_y_table(cinfo);
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f7ff fd44 	bl	800671a <build_rgb_y_table>
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 8006c92:	e071      	b.n	8006d78 <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	221c      	movs	r2, #28
 8006c9a:	615a      	str	r2, [r3, #20]
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	4798      	blx	r3
    break;
 8006ca6:	e067      	b.n	8006d78 <jinit_color_deconverter+0x224>
 8006ca8:	e066      	b.n	8006d78 <jinit_color_deconverter+0x224>

  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2203      	movs	r2, #3
 8006cae:	679a      	str	r2, [r3, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCbCr) {
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb6:	2b03      	cmp	r3, #3
 8006cb8:	d106      	bne.n	8006cc8 <jinit_color_deconverter+0x174>
      cconvert->pub.color_convert = ycc_rgb_convert;
 8006cba:	68bb      	ldr	r3, [r7, #8]
 8006cbc:	4a39      	ldr	r2, [pc, #228]	; (8006da4 <jinit_color_deconverter+0x250>)
 8006cbe:	605a      	str	r2, [r3, #4]
      build_ycc_rgb_table(cinfo);
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7ff fc29 	bl	8006518 <build_ycc_rgb_table>
      cconvert->pub.color_convert = gray_rgb_convert;
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
      cconvert->pub.color_convert = rgb_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 8006cc6:	e057      	b.n	8006d78 <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_GRAYSCALE) {
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cce:	2b01      	cmp	r3, #1
 8006cd0:	d103      	bne.n	8006cda <jinit_color_deconverter+0x186>
      cconvert->pub.color_convert = gray_rgb_convert;
 8006cd2:	68bb      	ldr	r3, [r7, #8]
 8006cd4:	4a34      	ldr	r2, [pc, #208]	; (8006da8 <jinit_color_deconverter+0x254>)
 8006cd6:	605a      	str	r2, [r3, #4]
    break;
 8006cd8:	e04e      	b.n	8006d78 <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_RGB) {
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ce0:	2b02      	cmp	r3, #2
 8006ce2:	d103      	bne.n	8006cec <jinit_color_deconverter+0x198>
      cconvert->pub.color_convert = rgb_convert;
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4a31      	ldr	r2, [pc, #196]	; (8006dac <jinit_color_deconverter+0x258>)
 8006ce8:	605a      	str	r2, [r3, #4]
    break;
 8006cea:	e045      	b.n	8006d78 <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	221c      	movs	r2, #28
 8006cf2:	615a      	str	r2, [r3, #20]
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
    break;
 8006cfe:	e03b      	b.n	8006d78 <jinit_color_deconverter+0x224>

  case JCS_CMYK:
    cinfo->out_color_components = 4;
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	2204      	movs	r2, #4
 8006d04:	679a      	str	r2, [r3, #120]	; 0x78
    if (cinfo->jpeg_color_space == JCS_YCCK) {
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d0c:	2b05      	cmp	r3, #5
 8006d0e:	d106      	bne.n	8006d1e <jinit_color_deconverter+0x1ca>
      cconvert->pub.color_convert = ycck_cmyk_convert;
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	4a27      	ldr	r2, [pc, #156]	; (8006db0 <jinit_color_deconverter+0x25c>)
 8006d14:	605a      	str	r2, [r3, #4]
      build_ycc_rgb_table(cinfo);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f7ff fbfe 	bl	8006518 <build_ycc_rgb_table>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
      cconvert->pub.color_convert = null_convert;
    } else
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 8006d1c:	e02c      	b.n	8006d78 <jinit_color_deconverter+0x224>
    } else if (cinfo->jpeg_color_space == JCS_CMYK) {
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d24:	2b04      	cmp	r3, #4
 8006d26:	d103      	bne.n	8006d30 <jinit_color_deconverter+0x1dc>
      cconvert->pub.color_convert = null_convert;
 8006d28:	68bb      	ldr	r3, [r7, #8]
 8006d2a:	4a22      	ldr	r2, [pc, #136]	; (8006db4 <jinit_color_deconverter+0x260>)
 8006d2c:	605a      	str	r2, [r3, #4]
    break;
 8006d2e:	e023      	b.n	8006d78 <jinit_color_deconverter+0x224>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	221c      	movs	r2, #28
 8006d36:	615a      	str	r2, [r3, #20]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	6878      	ldr	r0, [r7, #4]
 8006d40:	4798      	blx	r3
    break;
 8006d42:	e019      	b.n	8006d78 <jinit_color_deconverter+0x224>

  default:
    /* Permit null conversion to same output space */
    if (cinfo->out_color_space == cinfo->jpeg_color_space) {
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f893 2029 	ldrb.w	r2, [r3, #41]	; 0x29
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d107      	bne.n	8006d64 <jinit_color_deconverter+0x210>
      cinfo->out_color_components = cinfo->num_components;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	679a      	str	r2, [r3, #120]	; 0x78
      cconvert->pub.color_convert = null_convert;
 8006d5c:	68bb      	ldr	r3, [r7, #8]
 8006d5e:	4a15      	ldr	r2, [pc, #84]	; (8006db4 <jinit_color_deconverter+0x260>)
 8006d60:	605a      	str	r2, [r3, #4]
    } else			/* unsupported non-null conversion */
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
    break;
 8006d62:	e008      	b.n	8006d76 <jinit_color_deconverter+0x222>
      ERREXIT(cinfo, JERR_CONVERSION_NOTIMPL);
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	221c      	movs	r2, #28
 8006d6a:	615a      	str	r2, [r3, #20]
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	4798      	blx	r3
    break;
 8006d76:	bf00      	nop
  }

  if (cinfo->quantize_colors)
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d7c:	2b00      	cmp	r3, #0
 8006d7e:	d003      	beq.n	8006d88 <jinit_color_deconverter+0x234>
    cinfo->output_components = 1; /* single colormapped output component */
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2201      	movs	r2, #1
 8006d84:	67da      	str	r2, [r3, #124]	; 0x7c
  else
    cinfo->output_components = cinfo->out_color_components;
}
 8006d86:	e003      	b.n	8006d90 <jinit_color_deconverter+0x23c>
    cinfo->output_components = cinfo->out_color_components;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	67da      	str	r2, [r3, #124]	; 0x7c
}
 8006d90:	bf00      	nop
 8006d92:	3710      	adds	r7, #16
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}
 8006d98:	08006b41 	.word	0x08006b41
 8006d9c:	08006985 	.word	0x08006985
 8006da0:	080067a7 	.word	0x080067a7
 8006da4:	08006619 	.word	0x08006619
 8006da8:	080069b3 	.word	0x080069b3
 8006dac:	08006871 	.word	0x08006871
 8006db0:	08006a19 	.word	0x08006a19
 8006db4:	08006901 	.word	0x08006901

08006db8 <start_pass>:
 * a matching multiplier table.
 */

METHODDEF(void)
start_pass (j_decompress_ptr cinfo)
{
 8006db8:	b590      	push	{r4, r7, lr}
 8006dba:	b08f      	sub	sp, #60	; 0x3c
 8006dbc:	af00      	add	r7, sp, #0
 8006dbe:	6078      	str	r0, [r7, #4]
  my_idct_ptr idct = (my_idct_ptr) cinfo->idct;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 8006dc6:	61bb      	str	r3, [r7, #24]
  int ci, i;
  jpeg_component_info *compptr;
  int method = 0;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	62bb      	str	r3, [r7, #40]	; 0x28
  inverse_DCT_method_ptr method_ptr = NULL;
 8006dcc:	2300      	movs	r3, #0
 8006dce:	627b      	str	r3, [r7, #36]	; 0x24
  JQUANT_TBL * qtbl;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	637b      	str	r3, [r7, #52]	; 0x34
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8006dda:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006ddc:	e30d      	b.n	80073fa <start_pass+0x642>
       ci++, compptr++) {
    /* Select the proper IDCT routine for this component's scaling */
    switch ((compptr->DCT_h_scaled_size << 8) + compptr->DCT_v_scaled_size) {
 8006dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006de2:	021a      	lsls	r2, r3, #8
 8006de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006de6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006de8:	4413      	add	r3, r2
 8006dea:	f241 0210 	movw	r2, #4112	; 0x1010
 8006dee:	4293      	cmp	r3, r2
 8006df0:	f000 8168 	beq.w	80070c4 <start_pass+0x30c>
 8006df4:	f241 0210 	movw	r2, #4112	; 0x1010
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	f300 81de 	bgt.w	80071ba <start_pass+0x402>
 8006dfe:	f241 0208 	movw	r2, #4104	; 0x1008
 8006e02:	4293      	cmp	r3, r2
 8006e04:	f000 8163 	beq.w	80070ce <start_pass+0x316>
 8006e08:	f241 0208 	movw	r2, #4104	; 0x1008
 8006e0c:	4293      	cmp	r3, r2
 8006e0e:	f300 81d4 	bgt.w	80071ba <start_pass+0x402>
 8006e12:	f640 720f 	movw	r2, #3855	; 0xf0f
 8006e16:	4293      	cmp	r3, r2
 8006e18:	f000 814f 	beq.w	80070ba <start_pass+0x302>
 8006e1c:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 8006e20:	f280 81cb 	bge.w	80071ba <start_pass+0x402>
 8006e24:	f640 620e 	movw	r2, #3598	; 0xe0e
 8006e28:	4293      	cmp	r3, r2
 8006e2a:	f000 8141 	beq.w	80070b0 <start_pass+0x2f8>
 8006e2e:	f640 620e 	movw	r2, #3598	; 0xe0e
 8006e32:	4293      	cmp	r3, r2
 8006e34:	f300 81c1 	bgt.w	80071ba <start_pass+0x402>
 8006e38:	f640 6207 	movw	r2, #3591	; 0xe07
 8006e3c:	4293      	cmp	r3, r2
 8006e3e:	f000 814b 	beq.w	80070d8 <start_pass+0x320>
 8006e42:	f640 6207 	movw	r2, #3591	; 0xe07
 8006e46:	4293      	cmp	r3, r2
 8006e48:	f300 81b7 	bgt.w	80071ba <start_pass+0x402>
 8006e4c:	f640 520d 	movw	r2, #3341	; 0xd0d
 8006e50:	4293      	cmp	r3, r2
 8006e52:	f000 8128 	beq.w	80070a6 <start_pass+0x2ee>
 8006e56:	f640 520d 	movw	r2, #3341	; 0xd0d
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	f300 81ad 	bgt.w	80071ba <start_pass+0x402>
 8006e60:	f640 420c 	movw	r2, #3084	; 0xc0c
 8006e64:	4293      	cmp	r3, r2
 8006e66:	f000 8119 	beq.w	800709c <start_pass+0x2e4>
 8006e6a:	f640 420c 	movw	r2, #3084	; 0xc0c
 8006e6e:	4293      	cmp	r3, r2
 8006e70:	f300 81a3 	bgt.w	80071ba <start_pass+0x402>
 8006e74:	f640 4206 	movw	r2, #3078	; 0xc06
 8006e78:	4293      	cmp	r3, r2
 8006e7a:	f000 8132 	beq.w	80070e2 <start_pass+0x32a>
 8006e7e:	f640 4206 	movw	r2, #3078	; 0xc06
 8006e82:	4293      	cmp	r3, r2
 8006e84:	f300 8199 	bgt.w	80071ba <start_pass+0x402>
 8006e88:	f640 320b 	movw	r2, #2827	; 0xb0b
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	f000 8100 	beq.w	8007092 <start_pass+0x2da>
 8006e92:	f640 320b 	movw	r2, #2827	; 0xb0b
 8006e96:	4293      	cmp	r3, r2
 8006e98:	f300 818f 	bgt.w	80071ba <start_pass+0x402>
 8006e9c:	f640 220a 	movw	r2, #2570	; 0xa0a
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	f000 80f1 	beq.w	8007088 <start_pass+0x2d0>
 8006ea6:	f640 220a 	movw	r2, #2570	; 0xa0a
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	f300 8185 	bgt.w	80071ba <start_pass+0x402>
 8006eb0:	f640 2205 	movw	r2, #2565	; 0xa05
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	f000 8119 	beq.w	80070ec <start_pass+0x334>
 8006eba:	f640 2205 	movw	r2, #2565	; 0xa05
 8006ebe:	4293      	cmp	r3, r2
 8006ec0:	f300 817b 	bgt.w	80071ba <start_pass+0x402>
 8006ec4:	f640 1209 	movw	r2, #2313	; 0x909
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	f000 80d8 	beq.w	800707e <start_pass+0x2c6>
 8006ece:	f640 1209 	movw	r2, #2313	; 0x909
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	f300 8171 	bgt.w	80071ba <start_pass+0x402>
 8006ed8:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006edc:	f000 811f 	beq.w	800711e <start_pass+0x366>
 8006ee0:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8006ee4:	f300 8169 	bgt.w	80071ba <start_pass+0x402>
 8006ee8:	f640 0208 	movw	r2, #2056	; 0x808
 8006eec:	4293      	cmp	r3, r2
 8006eee:	f000 813e 	beq.w	800716e <start_pass+0x3b6>
 8006ef2:	f640 0208 	movw	r2, #2056	; 0x808
 8006ef6:	4293      	cmp	r3, r2
 8006ef8:	f300 815f 	bgt.w	80071ba <start_pass+0x402>
 8006efc:	f640 0204 	movw	r2, #2052	; 0x804
 8006f00:	4293      	cmp	r3, r2
 8006f02:	f000 80f8 	beq.w	80070f6 <start_pass+0x33e>
 8006f06:	f640 0204 	movw	r2, #2052	; 0x804
 8006f0a:	4293      	cmp	r3, r2
 8006f0c:	f300 8155 	bgt.w	80071ba <start_pass+0x402>
 8006f10:	f240 720e 	movw	r2, #1806	; 0x70e
 8006f14:	4293      	cmp	r3, r2
 8006f16:	f000 8107 	beq.w	8007128 <start_pass+0x370>
 8006f1a:	f240 720e 	movw	r2, #1806	; 0x70e
 8006f1e:	4293      	cmp	r3, r2
 8006f20:	f300 814b 	bgt.w	80071ba <start_pass+0x402>
 8006f24:	f240 7207 	movw	r2, #1799	; 0x707
 8006f28:	4293      	cmp	r3, r2
 8006f2a:	f000 80a3 	beq.w	8007074 <start_pass+0x2bc>
 8006f2e:	f5b3 6fe1 	cmp.w	r3, #1800	; 0x708
 8006f32:	f280 8142 	bge.w	80071ba <start_pass+0x402>
 8006f36:	f240 620c 	movw	r2, #1548	; 0x60c
 8006f3a:	4293      	cmp	r3, r2
 8006f3c:	f000 80f9 	beq.w	8007132 <start_pass+0x37a>
 8006f40:	f240 620c 	movw	r2, #1548	; 0x60c
 8006f44:	4293      	cmp	r3, r2
 8006f46:	f300 8138 	bgt.w	80071ba <start_pass+0x402>
 8006f4a:	f240 6206 	movw	r2, #1542	; 0x606
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	f000 808b 	beq.w	800706a <start_pass+0x2b2>
 8006f54:	f240 6206 	movw	r2, #1542	; 0x606
 8006f58:	4293      	cmp	r3, r2
 8006f5a:	f300 812e 	bgt.w	80071ba <start_pass+0x402>
 8006f5e:	f240 6203 	movw	r2, #1539	; 0x603
 8006f62:	4293      	cmp	r3, r2
 8006f64:	f000 80cc 	beq.w	8007100 <start_pass+0x348>
 8006f68:	f240 6203 	movw	r2, #1539	; 0x603
 8006f6c:	4293      	cmp	r3, r2
 8006f6e:	f300 8124 	bgt.w	80071ba <start_pass+0x402>
 8006f72:	f240 520a 	movw	r2, #1290	; 0x50a
 8006f76:	4293      	cmp	r3, r2
 8006f78:	f000 80e0 	beq.w	800713c <start_pass+0x384>
 8006f7c:	f240 520a 	movw	r2, #1290	; 0x50a
 8006f80:	4293      	cmp	r3, r2
 8006f82:	f300 811a 	bgt.w	80071ba <start_pass+0x402>
 8006f86:	f240 5205 	movw	r2, #1285	; 0x505
 8006f8a:	4293      	cmp	r3, r2
 8006f8c:	d068      	beq.n	8007060 <start_pass+0x2a8>
 8006f8e:	f240 5205 	movw	r2, #1285	; 0x505
 8006f92:	4293      	cmp	r3, r2
 8006f94:	f300 8111 	bgt.w	80071ba <start_pass+0x402>
 8006f98:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8006f9c:	f000 80d3 	beq.w	8007146 <start_pass+0x38e>
 8006fa0:	f5b3 6f81 	cmp.w	r3, #1032	; 0x408
 8006fa4:	f300 8109 	bgt.w	80071ba <start_pass+0x402>
 8006fa8:	f240 4204 	movw	r2, #1028	; 0x404
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d052      	beq.n	8007056 <start_pass+0x29e>
 8006fb0:	f240 4204 	movw	r2, #1028	; 0x404
 8006fb4:	4293      	cmp	r3, r2
 8006fb6:	f300 8100 	bgt.w	80071ba <start_pass+0x402>
 8006fba:	f240 4202 	movw	r2, #1026	; 0x402
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	f000 80a3 	beq.w	800710a <start_pass+0x352>
 8006fc4:	f240 4202 	movw	r2, #1026	; 0x402
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	f300 80f6 	bgt.w	80071ba <start_pass+0x402>
 8006fce:	f240 3206 	movw	r2, #774	; 0x306
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	f000 80bc 	beq.w	8007150 <start_pass+0x398>
 8006fd8:	f240 3206 	movw	r2, #774	; 0x306
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	f300 80ec 	bgt.w	80071ba <start_pass+0x402>
 8006fe2:	f240 3203 	movw	r2, #771	; 0x303
 8006fe6:	4293      	cmp	r3, r2
 8006fe8:	d030      	beq.n	800704c <start_pass+0x294>
 8006fea:	f5b3 7f41 	cmp.w	r3, #772	; 0x304
 8006fee:	f280 80e4 	bge.w	80071ba <start_pass+0x402>
 8006ff2:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8006ff6:	f000 80b0 	beq.w	800715a <start_pass+0x3a2>
 8006ffa:	f5b3 7f01 	cmp.w	r3, #516	; 0x204
 8006ffe:	f300 80dc 	bgt.w	80071ba <start_pass+0x402>
 8007002:	f240 2202 	movw	r2, #514	; 0x202
 8007006:	4293      	cmp	r3, r2
 8007008:	d01b      	beq.n	8007042 <start_pass+0x28a>
 800700a:	f240 2202 	movw	r2, #514	; 0x202
 800700e:	4293      	cmp	r3, r2
 8007010:	f300 80d3 	bgt.w	80071ba <start_pass+0x402>
 8007014:	f240 2201 	movw	r2, #513	; 0x201
 8007018:	4293      	cmp	r3, r2
 800701a:	d07b      	beq.n	8007114 <start_pass+0x35c>
 800701c:	f240 2201 	movw	r2, #513	; 0x201
 8007020:	4293      	cmp	r3, r2
 8007022:	f300 80ca 	bgt.w	80071ba <start_pass+0x402>
 8007026:	f240 1201 	movw	r2, #257	; 0x101
 800702a:	4293      	cmp	r3, r2
 800702c:	d004      	beq.n	8007038 <start_pass+0x280>
 800702e:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
 8007032:	f000 8097 	beq.w	8007164 <start_pass+0x3ac>
 8007036:	e0c0      	b.n	80071ba <start_pass+0x402>
#ifdef IDCT_SCALING_SUPPORTED
    case ((1 << 8) + 1):
      method_ptr = jpeg_idct_1x1;
 8007038:	4b91      	ldr	r3, [pc, #580]	; (8007280 <start_pass+0x4c8>)
 800703a:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800703c:	2300      	movs	r3, #0
 800703e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007040:	e0cf      	b.n	80071e2 <start_pass+0x42a>
    case ((2 << 8) + 2):
      method_ptr = jpeg_idct_2x2;
 8007042:	4b90      	ldr	r3, [pc, #576]	; (8007284 <start_pass+0x4cc>)
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007046:	2300      	movs	r3, #0
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800704a:	e0ca      	b.n	80071e2 <start_pass+0x42a>
    case ((3 << 8) + 3):
      method_ptr = jpeg_idct_3x3;
 800704c:	4b8e      	ldr	r3, [pc, #568]	; (8007288 <start_pass+0x4d0>)
 800704e:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007050:	2300      	movs	r3, #0
 8007052:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007054:	e0c5      	b.n	80071e2 <start_pass+0x42a>
    case ((4 << 8) + 4):
      method_ptr = jpeg_idct_4x4;
 8007056:	4b8d      	ldr	r3, [pc, #564]	; (800728c <start_pass+0x4d4>)
 8007058:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800705a:	2300      	movs	r3, #0
 800705c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800705e:	e0c0      	b.n	80071e2 <start_pass+0x42a>
    case ((5 << 8) + 5):
      method_ptr = jpeg_idct_5x5;
 8007060:	4b8b      	ldr	r3, [pc, #556]	; (8007290 <start_pass+0x4d8>)
 8007062:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007064:	2300      	movs	r3, #0
 8007066:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007068:	e0bb      	b.n	80071e2 <start_pass+0x42a>
    case ((6 << 8) + 6):
      method_ptr = jpeg_idct_6x6;
 800706a:	4b8a      	ldr	r3, [pc, #552]	; (8007294 <start_pass+0x4dc>)
 800706c:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800706e:	2300      	movs	r3, #0
 8007070:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007072:	e0b6      	b.n	80071e2 <start_pass+0x42a>
    case ((7 << 8) + 7):
      method_ptr = jpeg_idct_7x7;
 8007074:	4b88      	ldr	r3, [pc, #544]	; (8007298 <start_pass+0x4e0>)
 8007076:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007078:	2300      	movs	r3, #0
 800707a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800707c:	e0b1      	b.n	80071e2 <start_pass+0x42a>
    case ((9 << 8) + 9):
      method_ptr = jpeg_idct_9x9;
 800707e:	4b87      	ldr	r3, [pc, #540]	; (800729c <start_pass+0x4e4>)
 8007080:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007082:	2300      	movs	r3, #0
 8007084:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007086:	e0ac      	b.n	80071e2 <start_pass+0x42a>
    case ((10 << 8) + 10):
      method_ptr = jpeg_idct_10x10;
 8007088:	4b85      	ldr	r3, [pc, #532]	; (80072a0 <start_pass+0x4e8>)
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800708c:	2300      	movs	r3, #0
 800708e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007090:	e0a7      	b.n	80071e2 <start_pass+0x42a>
    case ((11 << 8) + 11):
      method_ptr = jpeg_idct_11x11;
 8007092:	4b84      	ldr	r3, [pc, #528]	; (80072a4 <start_pass+0x4ec>)
 8007094:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007096:	2300      	movs	r3, #0
 8007098:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800709a:	e0a2      	b.n	80071e2 <start_pass+0x42a>
    case ((12 << 8) + 12):
      method_ptr = jpeg_idct_12x12;
 800709c:	4b82      	ldr	r3, [pc, #520]	; (80072a8 <start_pass+0x4f0>)
 800709e:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070a0:	2300      	movs	r3, #0
 80070a2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070a4:	e09d      	b.n	80071e2 <start_pass+0x42a>
    case ((13 << 8) + 13):
      method_ptr = jpeg_idct_13x13;
 80070a6:	4b81      	ldr	r3, [pc, #516]	; (80072ac <start_pass+0x4f4>)
 80070a8:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070aa:	2300      	movs	r3, #0
 80070ac:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070ae:	e098      	b.n	80071e2 <start_pass+0x42a>
    case ((14 << 8) + 14):
      method_ptr = jpeg_idct_14x14;
 80070b0:	4b7f      	ldr	r3, [pc, #508]	; (80072b0 <start_pass+0x4f8>)
 80070b2:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070b4:	2300      	movs	r3, #0
 80070b6:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070b8:	e093      	b.n	80071e2 <start_pass+0x42a>
    case ((15 << 8) + 15):
      method_ptr = jpeg_idct_15x15;
 80070ba:	4b7e      	ldr	r3, [pc, #504]	; (80072b4 <start_pass+0x4fc>)
 80070bc:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070be:	2300      	movs	r3, #0
 80070c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070c2:	e08e      	b.n	80071e2 <start_pass+0x42a>
    case ((16 << 8) + 16):
      method_ptr = jpeg_idct_16x16;
 80070c4:	4b7c      	ldr	r3, [pc, #496]	; (80072b8 <start_pass+0x500>)
 80070c6:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070c8:	2300      	movs	r3, #0
 80070ca:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070cc:	e089      	b.n	80071e2 <start_pass+0x42a>
    case ((16 << 8) + 8):
      method_ptr = jpeg_idct_16x8;
 80070ce:	4b7b      	ldr	r3, [pc, #492]	; (80072bc <start_pass+0x504>)
 80070d0:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070d2:	2300      	movs	r3, #0
 80070d4:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070d6:	e084      	b.n	80071e2 <start_pass+0x42a>
    case ((14 << 8) + 7):
      method_ptr = jpeg_idct_14x7;
 80070d8:	4b79      	ldr	r3, [pc, #484]	; (80072c0 <start_pass+0x508>)
 80070da:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070dc:	2300      	movs	r3, #0
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070e0:	e07f      	b.n	80071e2 <start_pass+0x42a>
    case ((12 << 8) + 6):
      method_ptr = jpeg_idct_12x6;
 80070e2:	4b78      	ldr	r3, [pc, #480]	; (80072c4 <start_pass+0x50c>)
 80070e4:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070e6:	2300      	movs	r3, #0
 80070e8:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070ea:	e07a      	b.n	80071e2 <start_pass+0x42a>
    case ((10 << 8) + 5):
      method_ptr = jpeg_idct_10x5;
 80070ec:	4b76      	ldr	r3, [pc, #472]	; (80072c8 <start_pass+0x510>)
 80070ee:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070f0:	2300      	movs	r3, #0
 80070f2:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070f4:	e075      	b.n	80071e2 <start_pass+0x42a>
    case ((8 << 8) + 4):
      method_ptr = jpeg_idct_8x4;
 80070f6:	4b75      	ldr	r3, [pc, #468]	; (80072cc <start_pass+0x514>)
 80070f8:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 80070fa:	2300      	movs	r3, #0
 80070fc:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80070fe:	e070      	b.n	80071e2 <start_pass+0x42a>
    case ((6 << 8) + 3):
      method_ptr = jpeg_idct_6x3;
 8007100:	4b73      	ldr	r3, [pc, #460]	; (80072d0 <start_pass+0x518>)
 8007102:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007104:	2300      	movs	r3, #0
 8007106:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007108:	e06b      	b.n	80071e2 <start_pass+0x42a>
    case ((4 << 8) + 2):
      method_ptr = jpeg_idct_4x2;
 800710a:	4b72      	ldr	r3, [pc, #456]	; (80072d4 <start_pass+0x51c>)
 800710c:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800710e:	2300      	movs	r3, #0
 8007110:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007112:	e066      	b.n	80071e2 <start_pass+0x42a>
    case ((2 << 8) + 1):
      method_ptr = jpeg_idct_2x1;
 8007114:	4b70      	ldr	r3, [pc, #448]	; (80072d8 <start_pass+0x520>)
 8007116:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007118:	2300      	movs	r3, #0
 800711a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800711c:	e061      	b.n	80071e2 <start_pass+0x42a>
    case ((8 << 8) + 16):
      method_ptr = jpeg_idct_8x16;
 800711e:	4b6f      	ldr	r3, [pc, #444]	; (80072dc <start_pass+0x524>)
 8007120:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007122:	2300      	movs	r3, #0
 8007124:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007126:	e05c      	b.n	80071e2 <start_pass+0x42a>
    case ((7 << 8) + 14):
      method_ptr = jpeg_idct_7x14;
 8007128:	4b6d      	ldr	r3, [pc, #436]	; (80072e0 <start_pass+0x528>)
 800712a:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800712c:	2300      	movs	r3, #0
 800712e:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007130:	e057      	b.n	80071e2 <start_pass+0x42a>
    case ((6 << 8) + 12):
      method_ptr = jpeg_idct_6x12;
 8007132:	4b6c      	ldr	r3, [pc, #432]	; (80072e4 <start_pass+0x52c>)
 8007134:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007136:	2300      	movs	r3, #0
 8007138:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800713a:	e052      	b.n	80071e2 <start_pass+0x42a>
    case ((5 << 8) + 10):
      method_ptr = jpeg_idct_5x10;
 800713c:	4b6a      	ldr	r3, [pc, #424]	; (80072e8 <start_pass+0x530>)
 800713e:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007140:	2300      	movs	r3, #0
 8007142:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007144:	e04d      	b.n	80071e2 <start_pass+0x42a>
    case ((4 << 8) + 8):
      method_ptr = jpeg_idct_4x8;
 8007146:	4b69      	ldr	r3, [pc, #420]	; (80072ec <start_pass+0x534>)
 8007148:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800714a:	2300      	movs	r3, #0
 800714c:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800714e:	e048      	b.n	80071e2 <start_pass+0x42a>
    case ((3 << 8) + 6):
      method_ptr = jpeg_idct_3x6;
 8007150:	4b67      	ldr	r3, [pc, #412]	; (80072f0 <start_pass+0x538>)
 8007152:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007154:	2300      	movs	r3, #0
 8007156:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007158:	e043      	b.n	80071e2 <start_pass+0x42a>
    case ((2 << 8) + 4):
      method_ptr = jpeg_idct_2x4;
 800715a:	4b66      	ldr	r3, [pc, #408]	; (80072f4 <start_pass+0x53c>)
 800715c:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 800715e:	2300      	movs	r3, #0
 8007160:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8007162:	e03e      	b.n	80071e2 <start_pass+0x42a>
    case ((1 << 8) + 2):
      method_ptr = jpeg_idct_1x2;
 8007164:	4b64      	ldr	r3, [pc, #400]	; (80072f8 <start_pass+0x540>)
 8007166:	627b      	str	r3, [r7, #36]	; 0x24
      method = JDCT_ISLOW;	/* jidctint uses islow-style table */
 8007168:	2300      	movs	r3, #0
 800716a:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 800716c:	e039      	b.n	80071e2 <start_pass+0x42a>
#endif
    case ((DCTSIZE << 8) + DCTSIZE):
      switch (cinfo->dct_method) {
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8007174:	2b02      	cmp	r3, #2
 8007176:	d010      	beq.n	800719a <start_pass+0x3e2>
 8007178:	2b02      	cmp	r3, #2
 800717a:	dc13      	bgt.n	80071a4 <start_pass+0x3ec>
 800717c:	2b00      	cmp	r3, #0
 800717e:	d002      	beq.n	8007186 <start_pass+0x3ce>
 8007180:	2b01      	cmp	r3, #1
 8007182:	d005      	beq.n	8007190 <start_pass+0x3d8>
 8007184:	e00e      	b.n	80071a4 <start_pass+0x3ec>
#ifdef DCT_ISLOW_SUPPORTED
      case JDCT_ISLOW:
	method_ptr = jpeg_idct_islow;
 8007186:	4b5d      	ldr	r3, [pc, #372]	; (80072fc <start_pass+0x544>)
 8007188:	627b      	str	r3, [r7, #36]	; 0x24
	method = JDCT_ISLOW;
 800718a:	2300      	movs	r3, #0
 800718c:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 800718e:	e013      	b.n	80071b8 <start_pass+0x400>
#endif
#ifdef DCT_IFAST_SUPPORTED
      case JDCT_IFAST:
	method_ptr = jpeg_idct_ifast;
 8007190:	4b5b      	ldr	r3, [pc, #364]	; (8007300 <start_pass+0x548>)
 8007192:	627b      	str	r3, [r7, #36]	; 0x24
	method = JDCT_IFAST;
 8007194:	2301      	movs	r3, #1
 8007196:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 8007198:	e00e      	b.n	80071b8 <start_pass+0x400>
#endif
#ifdef DCT_FLOAT_SUPPORTED
      case JDCT_FLOAT:
	method_ptr = jpeg_idct_float;
 800719a:	4b5a      	ldr	r3, [pc, #360]	; (8007304 <start_pass+0x54c>)
 800719c:	627b      	str	r3, [r7, #36]	; 0x24
	method = JDCT_FLOAT;
 800719e:	2302      	movs	r3, #2
 80071a0:	62bb      	str	r3, [r7, #40]	; 0x28
	break;
 80071a2:	e009      	b.n	80071b8 <start_pass+0x400>
#endif
      default:
	ERREXIT(cinfo, JERR_NOT_COMPILED);
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	2231      	movs	r2, #49	; 0x31
 80071aa:	615a      	str	r2, [r3, #20]
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	6878      	ldr	r0, [r7, #4]
 80071b4:	4798      	blx	r3
	break;
 80071b6:	bf00      	nop
      }
      break;
 80071b8:	e013      	b.n	80071e2 <start_pass+0x42a>
    default:
      ERREXIT2(cinfo, JERR_BAD_DCTSIZE,
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2207      	movs	r2, #7
 80071c0:	615a      	str	r2, [r3, #20]
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80071ca:	619a      	str	r2, [r3, #24]
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	681b      	ldr	r3, [r3, #0]
 80071d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80071d2:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80071d4:	61da      	str	r2, [r3, #28]
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	6878      	ldr	r0, [r7, #4]
 80071de:	4798      	blx	r3
	       compptr->DCT_h_scaled_size, compptr->DCT_v_scaled_size);
      break;
 80071e0:	bf00      	nop
    }
    idct->pub.inverse_DCT[ci] = method_ptr;
 80071e2:	69ba      	ldr	r2, [r7, #24]
 80071e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071ec:	605a      	str	r2, [r3, #4]
     * or if we already built the table.  Also, if no quant table
     * has yet been saved for the component, we leave the
     * multiplier table all-zero; we'll be reading zeroes from the
     * coefficient controller's buffer anyway.
     */
    if (! compptr->component_needed || idct->cur_method[ci] == method)
 80071ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80071f2:	2b00      	cmp	r3, #0
 80071f4:	f000 80f8 	beq.w	80073e8 <start_pass+0x630>
 80071f8:	69ba      	ldr	r2, [r7, #24]
 80071fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80071fc:	330a      	adds	r3, #10
 80071fe:	009b      	lsls	r3, r3, #2
 8007200:	4413      	add	r3, r2
 8007202:	685b      	ldr	r3, [r3, #4]
 8007204:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007206:	429a      	cmp	r2, r3
 8007208:	f000 80ee 	beq.w	80073e8 <start_pass+0x630>
      continue;
    qtbl = compptr->quant_table;
 800720c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800720e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007210:	617b      	str	r3, [r7, #20]
    if (qtbl == NULL)		/* happens if no data yet for component */
 8007212:	697b      	ldr	r3, [r7, #20]
 8007214:	2b00      	cmp	r3, #0
 8007216:	f000 80e9 	beq.w	80073ec <start_pass+0x634>
      continue;
    idct->cur_method[ci] = method;
 800721a:	69ba      	ldr	r2, [r7, #24]
 800721c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800721e:	330a      	adds	r3, #10
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4413      	add	r3, r2
 8007224:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007226:	605a      	str	r2, [r3, #4]
    switch (method) {
 8007228:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800722a:	2b02      	cmp	r3, #2
 800722c:	f000 8086 	beq.w	800733c <start_pass+0x584>
 8007230:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007232:	2b02      	cmp	r3, #2
 8007234:	f300 80ce 	bgt.w	80073d4 <start_pass+0x61c>
 8007238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800723a:	2b00      	cmp	r3, #0
 800723c:	d003      	beq.n	8007246 <start_pass+0x48e>
 800723e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007240:	2b01      	cmp	r3, #1
 8007242:	d017      	beq.n	8007274 <start_pass+0x4bc>
 8007244:	e0c6      	b.n	80073d4 <start_pass+0x61c>
    case JDCT_ISLOW:
      {
	/* For LL&M IDCT method, multipliers are equal to raw quantization
	 * coefficients, but are stored as ints to ensure access efficiency.
	 */
	ISLOW_MULT_TYPE * ismtbl = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8007246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007248:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800724a:	60bb      	str	r3, [r7, #8]
	for (i = 0; i < DCTSIZE2; i++) {
 800724c:	2300      	movs	r3, #0
 800724e:	633b      	str	r3, [r7, #48]	; 0x30
 8007250:	e00c      	b.n	800726c <start_pass+0x4b4>
	  ismtbl[i] = (ISLOW_MULT_TYPE) qtbl->quantval[i];
 8007252:	697b      	ldr	r3, [r7, #20]
 8007254:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007256:	f833 1012 	ldrh.w	r1, [r3, r2, lsl #1]
 800725a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800725c:	009b      	lsls	r3, r3, #2
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	4413      	add	r3, r2
 8007262:	460a      	mov	r2, r1
 8007264:	601a      	str	r2, [r3, #0]
	for (i = 0; i < DCTSIZE2; i++) {
 8007266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007268:	3301      	adds	r3, #1
 800726a:	633b      	str	r3, [r7, #48]	; 0x30
 800726c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800726e:	2b3f      	cmp	r3, #63	; 0x3f
 8007270:	ddef      	ble.n	8007252 <start_pass+0x49a>
	}
      }
      break;
 8007272:	e0bc      	b.n	80073ee <start_pass+0x636>
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * For integer operation, the multiplier table is to be scaled by
	 * IFAST_SCALE_BITS.
	 */
	IFAST_MULT_TYPE * ifmtbl = (IFAST_MULT_TYPE *) compptr->dct_table;
 8007274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007276:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007278:	60fb      	str	r3, [r7, #12]
	   8867, 12299, 11585, 10426,  8867,  6967,  4799,  2446,
	   4520,  6270,  5906,  5315,  4520,  3552,  2446,  1247
	};
	SHIFT_TEMPS

	for (i = 0; i < DCTSIZE2; i++) {
 800727a:	2300      	movs	r3, #0
 800727c:	633b      	str	r3, [r7, #48]	; 0x30
 800727e:	e059      	b.n	8007334 <start_pass+0x57c>
 8007280:	08011ab7 	.word	0x08011ab7
 8007284:	080119a1 	.word	0x080119a1
 8007288:	080117f1 	.word	0x080117f1
 800728c:	080115b5 	.word	0x080115b5
 8007290:	080111e9 	.word	0x080111e9
 8007294:	08010d81 	.word	0x08010d81
 8007298:	08010719 	.word	0x08010719
 800729c:	08011b11 	.word	0x08011b11
 80072a0:	08012219 	.word	0x08012219
 80072a4:	080129ed 	.word	0x080129ed
 80072a8:	08013371 	.word	0x08013371
 80072ac:	08013c8d 	.word	0x08013c8d
 80072b0:	08014789 	.word	0x08014789
 80072b4:	08015201 	.word	0x08015201
 80072b8:	08015d09 	.word	0x08015d09
 80072bc:	080169e5 	.word	0x080169e5
 80072c0:	08017531 	.word	0x08017531
 80072c4:	08017db9 	.word	0x08017db9
 80072c8:	08018495 	.word	0x08018495
 80072cc:	08018a71 	.word	0x08018a71
 80072d0:	08018f81 	.word	0x08018f81
 80072d4:	08019249 	.word	0x08019249
 80072d8:	080193cd 	.word	0x080193cd
 80072dc:	0801945d 	.word	0x0801945d
 80072e0:	08019e51 	.word	0x08019e51
 80072e4:	0801a6a1 	.word	0x0801a6a1
 80072e8:	0801ad59 	.word	0x0801ad59
 80072ec:	0801b339 	.word	0x0801b339
 80072f0:	0801b965 	.word	0x0801b965
 80072f4:	0801bc35 	.word	0x0801bc35
 80072f8:	0801bdc5 	.word	0x0801bdc5
 80072fc:	0800fde1 	.word	0x0800fde1
 8007300:	0800f5f9 	.word	0x0800f5f9
 8007304:	0800edc1 	.word	0x0800edc1
	  ifmtbl[i] = (IFAST_MULT_TYPE)
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800730c:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8007310:	4619      	mov	r1, r3
 8007312:	4a3f      	ldr	r2, [pc, #252]	; (8007410 <start_pass+0x658>)
 8007314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007316:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800731a:	fb03 f301 	mul.w	r3, r3, r1
 800731e:	f503 6200 	add.w	r2, r3, #2048	; 0x800
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 8007322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007324:	009b      	lsls	r3, r3, #2
 8007326:	68f9      	ldr	r1, [r7, #12]
 8007328:	440b      	add	r3, r1
	    DESCALE(MULTIPLY16V16((INT32) qtbl->quantval[i],
 800732a:	1312      	asrs	r2, r2, #12
	  ifmtbl[i] = (IFAST_MULT_TYPE)
 800732c:	601a      	str	r2, [r3, #0]
	for (i = 0; i < DCTSIZE2; i++) {
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	3301      	adds	r3, #1
 8007332:	633b      	str	r3, [r7, #48]	; 0x30
 8007334:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007336:	2b3f      	cmp	r3, #63	; 0x3f
 8007338:	dde6      	ble.n	8007308 <start_pass+0x550>
				  (INT32) aanscales[i]),
		    CONST_BITS-IFAST_SCALE_BITS);
	}
      }
      break;
 800733a:	e058      	b.n	80073ee <start_pass+0x636>
	 * coefficients scaled by scalefactor[row]*scalefactor[col], where
	 *   scalefactor[0] = 1
	 *   scalefactor[k] = cos(k*PI/16) * sqrt(2)    for k=1..7
	 * We apply a further scale factor of 1/8.
	 */
	FLOAT_MULT_TYPE * fmtbl = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800733c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800733e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007340:	613b      	str	r3, [r7, #16]
	static const double aanscalefactor[DCTSIZE] = {
	  1.0, 1.387039845, 1.306562965, 1.175875602,
	  1.0, 0.785694958, 0.541196100, 0.275899379
	};

	i = 0;
 8007342:	2300      	movs	r3, #0
 8007344:	633b      	str	r3, [r7, #48]	; 0x30
	for (row = 0; row < DCTSIZE; row++) {
 8007346:	2300      	movs	r3, #0
 8007348:	623b      	str	r3, [r7, #32]
 800734a:	e03f      	b.n	80073cc <start_pass+0x614>
	  for (col = 0; col < DCTSIZE; col++) {
 800734c:	2300      	movs	r3, #0
 800734e:	61fb      	str	r3, [r7, #28]
 8007350:	e036      	b.n	80073c0 <start_pass+0x608>
	    fmtbl[i] = (FLOAT_MULT_TYPE)
	      ((double) qtbl->quantval[i] *
 8007352:	697b      	ldr	r3, [r7, #20]
 8007354:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007356:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800735a:	4618      	mov	r0, r3
 800735c:	f7f9 f8ca 	bl	80004f4 <__aeabi_ui2d>
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 8007360:	4a2c      	ldr	r2, [pc, #176]	; (8007414 <start_pass+0x65c>)
 8007362:	6a3b      	ldr	r3, [r7, #32]
 8007364:	00db      	lsls	r3, r3, #3
 8007366:	4413      	add	r3, r2
 8007368:	e9d3 2300 	ldrd	r2, r3, [r3]
	      ((double) qtbl->quantval[i] *
 800736c:	f7f9 f93c 	bl	80005e8 <__aeabi_dmul>
 8007370:	4602      	mov	r2, r0
 8007372:	460b      	mov	r3, r1
 8007374:	4610      	mov	r0, r2
 8007376:	4619      	mov	r1, r3
	       aanscalefactor[row] * aanscalefactor[col] * 0.125);
 8007378:	4a26      	ldr	r2, [pc, #152]	; (8007414 <start_pass+0x65c>)
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	00db      	lsls	r3, r3, #3
 800737e:	4413      	add	r3, r2
 8007380:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007384:	f7f9 f930 	bl	80005e8 <__aeabi_dmul>
 8007388:	4602      	mov	r2, r0
 800738a:	460b      	mov	r3, r1
 800738c:	4610      	mov	r0, r2
 800738e:	4619      	mov	r1, r3
 8007390:	f04f 0200 	mov.w	r2, #0
 8007394:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8007398:	f7f9 f926 	bl	80005e8 <__aeabi_dmul>
 800739c:	4602      	mov	r2, r0
 800739e:	460b      	mov	r3, r1
 80073a0:	4610      	mov	r0, r2
 80073a2:	4619      	mov	r1, r3
	    fmtbl[i] = (FLOAT_MULT_TYPE)
 80073a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073a6:	009b      	lsls	r3, r3, #2
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	18d4      	adds	r4, r2, r3
 80073ac:	f7f9 fb2e 	bl	8000a0c <__aeabi_d2f>
 80073b0:	4603      	mov	r3, r0
 80073b2:	6023      	str	r3, [r4, #0]
	    i++;
 80073b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073b6:	3301      	adds	r3, #1
 80073b8:	633b      	str	r3, [r7, #48]	; 0x30
	  for (col = 0; col < DCTSIZE; col++) {
 80073ba:	69fb      	ldr	r3, [r7, #28]
 80073bc:	3301      	adds	r3, #1
 80073be:	61fb      	str	r3, [r7, #28]
 80073c0:	69fb      	ldr	r3, [r7, #28]
 80073c2:	2b07      	cmp	r3, #7
 80073c4:	ddc5      	ble.n	8007352 <start_pass+0x59a>
	for (row = 0; row < DCTSIZE; row++) {
 80073c6:	6a3b      	ldr	r3, [r7, #32]
 80073c8:	3301      	adds	r3, #1
 80073ca:	623b      	str	r3, [r7, #32]
 80073cc:	6a3b      	ldr	r3, [r7, #32]
 80073ce:	2b07      	cmp	r3, #7
 80073d0:	ddbc      	ble.n	800734c <start_pass+0x594>
	  }
	}
      }
      break;
 80073d2:	e00c      	b.n	80073ee <start_pass+0x636>
#endif
    default:
      ERREXIT(cinfo, JERR_NOT_COMPILED);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	2231      	movs	r2, #49	; 0x31
 80073da:	615a      	str	r2, [r3, #20]
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	6878      	ldr	r0, [r7, #4]
 80073e4:	4798      	blx	r3
      break;
 80073e6:	e002      	b.n	80073ee <start_pass+0x636>
      continue;
 80073e8:	bf00      	nop
 80073ea:	e000      	b.n	80073ee <start_pass+0x636>
      continue;
 80073ec:	bf00      	nop
       ci++, compptr++) {
 80073ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073f0:	3301      	adds	r3, #1
 80073f2:	637b      	str	r3, [r7, #52]	; 0x34
 80073f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073f6:	3358      	adds	r3, #88	; 0x58
 80073f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007400:	429a      	cmp	r2, r3
 8007402:	f6ff acec 	blt.w	8006dde <start_pass+0x26>
    }
  }
}
 8007406:	bf00      	nop
 8007408:	bf00      	nop
 800740a:	373c      	adds	r7, #60	; 0x3c
 800740c:	46bd      	mov	sp, r7
 800740e:	bd90      	pop	{r4, r7, pc}
 8007410:	08021138 	.word	0x08021138
 8007414:	080211b8 	.word	0x080211b8

08007418 <jinit_inverse_dct>:
 * Initialize IDCT manager.
 */

GLOBAL(void)
jinit_inverse_dct (j_decompress_ptr cinfo)
{
 8007418:	b580      	push	{r7, lr}
 800741a:	b086      	sub	sp, #24
 800741c:	af00      	add	r7, sp, #0
 800741e:	6078      	str	r0, [r7, #4]
  my_idct_ptr idct;
  int ci;
  jpeg_component_info *compptr;

  idct = (my_idct_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	685b      	ldr	r3, [r3, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	2254      	movs	r2, #84	; 0x54
 8007428:	2101      	movs	r1, #1
 800742a:	6878      	ldr	r0, [r7, #4]
 800742c:	4798      	blx	r3
 800742e:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_idct_controller));
  cinfo->idct = (struct jpeg_inverse_dct *) idct;
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	68fa      	ldr	r2, [r7, #12]
 8007434:	f8c3 21d4 	str.w	r2, [r3, #468]	; 0x1d4
  idct->pub.start_pass = start_pass;
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4a1a      	ldr	r2, [pc, #104]	; (80074a4 <jinit_inverse_dct+0x8c>)
 800743c:	601a      	str	r2, [r3, #0]

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800743e:	2300      	movs	r3, #0
 8007440:	617b      	str	r3, [r7, #20]
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8007448:	613b      	str	r3, [r7, #16]
 800744a:	e020      	b.n	800748e <jinit_inverse_dct+0x76>
       ci++, compptr++) {
    /* Allocate and pre-zero a multiplier table for each component */
    compptr->dct_table =
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	685b      	ldr	r3, [r3, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007456:	2101      	movs	r1, #1
 8007458:	6878      	ldr	r0, [r7, #4]
 800745a:	4798      	blx	r3
 800745c:	4602      	mov	r2, r0
    compptr->dct_table =
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	655a      	str	r2, [r3, #84]	; 0x54
				  SIZEOF(multiplier_table));
    MEMZERO(compptr->dct_table, SIZEOF(multiplier_table));
 8007462:	693b      	ldr	r3, [r7, #16]
 8007464:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007466:	f44f 7280 	mov.w	r2, #256	; 0x100
 800746a:	2100      	movs	r1, #0
 800746c:	4618      	mov	r0, r3
 800746e:	f017 ffb3 	bl	801f3d8 <memset>
    /* Mark multiplier table not yet set up for any method */
    idct->cur_method[ci] = -1;
 8007472:	68fa      	ldr	r2, [r7, #12]
 8007474:	697b      	ldr	r3, [r7, #20]
 8007476:	330a      	adds	r3, #10
 8007478:	009b      	lsls	r3, r3, #2
 800747a:	4413      	add	r3, r2
 800747c:	f04f 32ff 	mov.w	r2, #4294967295
 8007480:	605a      	str	r2, [r3, #4]
       ci++, compptr++) {
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	3301      	adds	r3, #1
 8007486:	617b      	str	r3, [r7, #20]
 8007488:	693b      	ldr	r3, [r7, #16]
 800748a:	3358      	adds	r3, #88	; 0x58
 800748c:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007492:	697a      	ldr	r2, [r7, #20]
 8007494:	429a      	cmp	r2, r3
 8007496:	dbd9      	blt.n	800744c <jinit_inverse_dct+0x34>
  }
}
 8007498:	bf00      	nop
 800749a:	bf00      	nop
 800749c:	3718      	adds	r7, #24
 800749e:	46bd      	mov	sp, r7
 80074a0:	bd80      	pop	{r7, pc}
 80074a2:	bf00      	nop
 80074a4:	08006db9 	.word	0x08006db9

080074a8 <jpeg_make_d_derived_tbl>:
 */

LOCAL(void)
jpeg_make_d_derived_tbl (j_decompress_ptr cinfo, boolean isDC, int tblno,
			 d_derived_tbl ** pdtbl)
{
 80074a8:	b590      	push	{r4, r7, lr}
 80074aa:	f2ad 5d4c 	subw	sp, sp, #1356	; 0x54c
 80074ae:	af00      	add	r7, sp, #0
 80074b0:	f107 040c 	add.w	r4, r7, #12
 80074b4:	6020      	str	r0, [r4, #0]
 80074b6:	f107 0008 	add.w	r0, r7, #8
 80074ba:	6001      	str	r1, [r0, #0]
 80074bc:	1d39      	adds	r1, r7, #4
 80074be:	600a      	str	r2, [r1, #0]
 80074c0:	463a      	mov	r2, r7
 80074c2:	6013      	str	r3, [r2, #0]
  /* Note that huffsize[] and huffcode[] are filled in code-length order,
   * paralleling the order of the symbols themselves in htbl->huffval[].
   */

  /* Find the input Huffman table */
  if (tblno < 0 || tblno >= NUM_HUFF_TBLS)
 80074c4:	1d3b      	adds	r3, r7, #4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	db03      	blt.n	80074d4 <jpeg_make_d_derived_tbl+0x2c>
 80074cc:	1d3b      	adds	r3, r7, #4
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	2b03      	cmp	r3, #3
 80074d2:	dd15      	ble.n	8007500 <jpeg_make_d_derived_tbl+0x58>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 80074d4:	f107 030c 	add.w	r3, r7, #12
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2234      	movs	r2, #52	; 0x34
 80074de:	615a      	str	r2, [r3, #20]
 80074e0:	f107 030c 	add.w	r3, r7, #12
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	1d3a      	adds	r2, r7, #4
 80074ea:	6812      	ldr	r2, [r2, #0]
 80074ec:	619a      	str	r2, [r3, #24]
 80074ee:	f107 030c 	add.w	r3, r7, #12
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f107 020c 	add.w	r2, r7, #12
 80074fc:	6810      	ldr	r0, [r2, #0]
 80074fe:	4798      	blx	r3
  htbl =
    isDC ? cinfo->dc_huff_tbl_ptrs[tblno] : cinfo->ac_huff_tbl_ptrs[tblno];
 8007500:	f107 0308 	add.w	r3, r7, #8
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2b00      	cmp	r3, #0
 8007508:	d009      	beq.n	800751e <jpeg_make_d_derived_tbl+0x76>
 800750a:	f107 030c 	add.w	r3, r7, #12
 800750e:	681a      	ldr	r2, [r3, #0]
 8007510:	1d3b      	adds	r3, r7, #4
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	332c      	adds	r3, #44	; 0x2c
 8007516:	009b      	lsls	r3, r3, #2
 8007518:	4413      	add	r3, r2
 800751a:	685b      	ldr	r3, [r3, #4]
 800751c:	e008      	b.n	8007530 <jpeg_make_d_derived_tbl+0x88>
 800751e:	f107 030c 	add.w	r3, r7, #12
 8007522:	681a      	ldr	r2, [r3, #0]
 8007524:	1d3b      	adds	r3, r7, #4
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3330      	adds	r3, #48	; 0x30
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	4413      	add	r3, r2
 800752e:	685b      	ldr	r3, [r3, #4]
  htbl =
 8007530:	f8c7 3528 	str.w	r3, [r7, #1320]	; 0x528
  if (htbl == NULL)
 8007534:	f8d7 3528 	ldr.w	r3, [r7, #1320]	; 0x528
 8007538:	2b00      	cmp	r3, #0
 800753a:	d115      	bne.n	8007568 <jpeg_make_d_derived_tbl+0xc0>
    ERREXIT1(cinfo, JERR_NO_HUFF_TABLE, tblno);
 800753c:	f107 030c 	add.w	r3, r7, #12
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	2234      	movs	r2, #52	; 0x34
 8007546:	615a      	str	r2, [r3, #20]
 8007548:	f107 030c 	add.w	r3, r7, #12
 800754c:	681b      	ldr	r3, [r3, #0]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	1d3a      	adds	r2, r7, #4
 8007552:	6812      	ldr	r2, [r2, #0]
 8007554:	619a      	str	r2, [r3, #24]
 8007556:	f107 030c 	add.w	r3, r7, #12
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	f107 020c 	add.w	r2, r7, #12
 8007564:	6810      	ldr	r0, [r2, #0]
 8007566:	4798      	blx	r3

  /* Allocate a workspace if we haven't already done so. */
  if (*pdtbl == NULL)
 8007568:	463b      	mov	r3, r7
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2b00      	cmp	r3, #0
 8007570:	d10f      	bne.n	8007592 <jpeg_make_d_derived_tbl+0xea>
    *pdtbl = (d_derived_tbl *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8007572:	f107 030c 	add.w	r3, r7, #12
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	685b      	ldr	r3, [r3, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	f107 000c 	add.w	r0, r7, #12
 8007580:	f44f 62b2 	mov.w	r2, #1424	; 0x590
 8007584:	2101      	movs	r1, #1
 8007586:	6800      	ldr	r0, [r0, #0]
 8007588:	4798      	blx	r3
 800758a:	4602      	mov	r2, r0
    *pdtbl = (d_derived_tbl *)
 800758c:	463b      	mov	r3, r7
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	601a      	str	r2, [r3, #0]
				  SIZEOF(d_derived_tbl));
  dtbl = *pdtbl;
 8007592:	463b      	mov	r3, r7
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f8c7 3524 	str.w	r3, [r7, #1316]	; 0x524
  dtbl->pub = htbl;		/* fill in back link */
 800759c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80075a0:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80075a4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
  /* Figure C.1: make table of Huffman code length for each symbol */

  p = 0;
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
  for (l = 1; l <= 16; l++) {
 80075ae:	2301      	movs	r3, #1
 80075b0:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80075b4:	e03a      	b.n	800762c <jpeg_make_d_derived_tbl+0x184>
    i = (int) htbl->bits[l];
 80075b6:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80075ba:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80075be:	4413      	add	r3, r2
 80075c0:	781b      	ldrb	r3, [r3, #0]
 80075c2:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
    if (i < 0 || p + i > 256)	/* protect against table overrun */
 80075c6:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	db07      	blt.n	80075de <jpeg_make_d_derived_tbl+0x136>
 80075ce:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80075d2:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80075d6:	4413      	add	r3, r2
 80075d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075dc:	dd1a      	ble.n	8007614 <jpeg_make_d_derived_tbl+0x16c>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 80075de:	f107 030c 	add.w	r3, r7, #12
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	681b      	ldr	r3, [r3, #0]
 80075e6:	2209      	movs	r2, #9
 80075e8:	615a      	str	r2, [r3, #20]
 80075ea:	f107 030c 	add.w	r3, r7, #12
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	f107 020c 	add.w	r2, r7, #12
 80075f8:	6810      	ldr	r0, [r2, #0]
 80075fa:	4798      	blx	r3
    while (i--)
 80075fc:	e00a      	b.n	8007614 <jpeg_make_d_derived_tbl+0x16c>
      huffsize[p++] = (char) l;
 80075fe:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8007602:	1c5a      	adds	r2, r3, #1
 8007604:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 8007608:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800760c:	b2d1      	uxtb	r1, r2
 800760e:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8007612:	54d1      	strb	r1, [r2, r3]
    while (i--)
 8007614:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007618:	1e5a      	subs	r2, r3, #1
 800761a:	f8c7 2540 	str.w	r2, [r7, #1344]	; 0x540
 800761e:	2b00      	cmp	r3, #0
 8007620:	d1ed      	bne.n	80075fe <jpeg_make_d_derived_tbl+0x156>
  for (l = 1; l <= 16; l++) {
 8007622:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007626:	3301      	adds	r3, #1
 8007628:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800762c:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007630:	2b10      	cmp	r3, #16
 8007632:	ddc0      	ble.n	80075b6 <jpeg_make_d_derived_tbl+0x10e>
  }
  huffsize[p] = 0;
 8007634:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8007638:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800763c:	4413      	add	r3, r2
 800763e:	2200      	movs	r2, #0
 8007640:	701a      	strb	r2, [r3, #0]
  numsymbols = p;
 8007642:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8007646:	f8c7 3520 	str.w	r3, [r7, #1312]	; 0x520
  
  /* Figure C.2: generate the codes themselves */
  /* We also validate that the counts represent a legal Huffman code tree. */
  
  code = 0;
 800764a:	2300      	movs	r3, #0
 800764c:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
  si = huffsize[0];
 8007650:	f507 6383 	add.w	r3, r7, #1048	; 0x418
 8007654:	781b      	ldrb	r3, [r3, #0]
 8007656:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
  p = 0;
 800765a:	2300      	movs	r3, #0
 800765c:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
  while (huffsize[p]) {
 8007660:	e03b      	b.n	80076da <jpeg_make_d_derived_tbl+0x232>
    while (((int) huffsize[p]) == si) {
      huffcode[p++] = code;
 8007662:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8007666:	1c5a      	adds	r2, r3, #1
 8007668:	f8c7 2544 	str.w	r2, [r7, #1348]	; 0x544
 800766c:	f107 0214 	add.w	r2, r7, #20
 8007670:	f8d7 152c 	ldr.w	r1, [r7, #1324]	; 0x52c
 8007674:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      code++;
 8007678:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 800767c:	3301      	adds	r3, #1
 800767e:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    while (((int) huffsize[p]) == si) {
 8007682:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 8007686:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800768a:	4413      	add	r3, r2
 800768c:	781b      	ldrb	r3, [r3, #0]
 800768e:	461a      	mov	r2, r3
 8007690:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 8007694:	4293      	cmp	r3, r2
 8007696:	d0e4      	beq.n	8007662 <jpeg_make_d_derived_tbl+0x1ba>
    }
    /* code is now 1 more than the last code used for codelength si; but
     * it must still fit in si bits, since no code is allowed to be all ones.
     */
    if (((INT32) code) >= (((INT32) 1) << si))
 8007698:	2201      	movs	r2, #1
 800769a:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 800769e:	409a      	lsls	r2, r3
 80076a0:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80076a4:	429a      	cmp	r2, r3
 80076a6:	dc0e      	bgt.n	80076c6 <jpeg_make_d_derived_tbl+0x21e>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 80076a8:	f107 030c 	add.w	r3, r7, #12
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2209      	movs	r2, #9
 80076b2:	615a      	str	r2, [r3, #20]
 80076b4:	f107 030c 	add.w	r3, r7, #12
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	f107 020c 	add.w	r2, r7, #12
 80076c2:	6810      	ldr	r0, [r2, #0]
 80076c4:	4798      	blx	r3
    code <<= 1;
 80076c6:	f8d7 352c 	ldr.w	r3, [r7, #1324]	; 0x52c
 80076ca:	005b      	lsls	r3, r3, #1
 80076cc:	f8c7 352c 	str.w	r3, [r7, #1324]	; 0x52c
    si++;
 80076d0:	f8d7 3538 	ldr.w	r3, [r7, #1336]	; 0x538
 80076d4:	3301      	adds	r3, #1
 80076d6:	f8c7 3538 	str.w	r3, [r7, #1336]	; 0x538
  while (huffsize[p]) {
 80076da:	f507 6283 	add.w	r2, r7, #1048	; 0x418
 80076de:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80076e2:	4413      	add	r3, r2
 80076e4:	781b      	ldrb	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d1cb      	bne.n	8007682 <jpeg_make_d_derived_tbl+0x1da>
  }

  /* Figure F.15: generate decoding tables for bit-sequential decoding */

  p = 0;
 80076ea:	2300      	movs	r3, #0
 80076ec:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
  for (l = 1; l <= 16; l++) {
 80076f0:	2301      	movs	r3, #1
 80076f2:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80076f6:	e040      	b.n	800777a <jpeg_make_d_derived_tbl+0x2d2>
    if (htbl->bits[l]) {
 80076f8:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80076fc:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007700:	4413      	add	r3, r2
 8007702:	781b      	ldrb	r3, [r3, #0]
 8007704:	2b00      	cmp	r3, #0
 8007706:	d02b      	beq.n	8007760 <jpeg_make_d_derived_tbl+0x2b8>
      /* valoffset[l] = huffval[] index of 1st symbol of code length l,
       * minus the minimum code of length l
       */
      dtbl->valoffset[l] = (INT32) p - (INT32) huffcode[p];
 8007708:	f107 0314 	add.w	r3, r7, #20
 800770c:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 8007710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007714:	461a      	mov	r2, r3
 8007716:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800771a:	1a99      	subs	r1, r3, r2
 800771c:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8007720:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8007724:	3212      	adds	r2, #18
 8007726:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      p += htbl->bits[l];
 800772a:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 800772e:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007732:	4413      	add	r3, r2
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	461a      	mov	r2, r3
 8007738:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800773c:	4413      	add	r3, r2
 800773e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
      dtbl->maxcode[l] = huffcode[p-1]; /* maximum code of length l */
 8007742:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 8007746:	1e5a      	subs	r2, r3, #1
 8007748:	f107 0314 	add.w	r3, r7, #20
 800774c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007750:	4619      	mov	r1, r3
 8007752:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8007756:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 800775a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 800775e:	e007      	b.n	8007770 <jpeg_make_d_derived_tbl+0x2c8>
    } else {
      dtbl->maxcode[l] = -1;	/* -1 if no codes of this length */
 8007760:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8007764:	f8d7 253c 	ldr.w	r2, [r7, #1340]	; 0x53c
 8007768:	f04f 31ff 	mov.w	r1, #4294967295
 800776c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (l = 1; l <= 16; l++) {
 8007770:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007774:	3301      	adds	r3, #1
 8007776:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 800777a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800777e:	2b10      	cmp	r3, #16
 8007780:	ddba      	ble.n	80076f8 <jpeg_make_d_derived_tbl+0x250>
    }
  }
  dtbl->maxcode[17] = 0xFFFFFL; /* ensures jpeg_huff_decode terminates */
 8007782:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 8007786:	4a56      	ldr	r2, [pc, #344]	; (80078e0 <jpeg_make_d_derived_tbl+0x438>)
 8007788:	645a      	str	r2, [r3, #68]	; 0x44
   * then we iterate through the Huffman codes that are short enough and
   * fill in all the entries that correspond to bit sequences starting
   * with that code.
   */

  MEMZERO(dtbl->look_nbits, SIZEOF(dtbl->look_nbits));
 800778a:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 800778e:	3390      	adds	r3, #144	; 0x90
 8007790:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8007794:	2100      	movs	r1, #0
 8007796:	4618      	mov	r0, r3
 8007798:	f017 fe1e 	bl	801f3d8 <memset>

  p = 0;
 800779c:	2300      	movs	r3, #0
 800779e:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 80077a2:	2301      	movs	r3, #1
 80077a4:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 80077a8:	e05c      	b.n	8007864 <jpeg_make_d_derived_tbl+0x3bc>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 80077aa:	2301      	movs	r3, #1
 80077ac:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 80077b0:	e048      	b.n	8007844 <jpeg_make_d_derived_tbl+0x39c>
      /* l = current code's length, p = its index in huffcode[] & huffval[]. */
      /* Generate left-justified code followed by all possible bit sequences */
      lookbits = huffcode[p] << (HUFF_LOOKAHEAD-l);
 80077b2:	f107 0314 	add.w	r3, r7, #20
 80077b6:	f8d7 2544 	ldr.w	r2, [r7, #1348]	; 0x544
 80077ba:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80077be:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80077c2:	f1c3 0308 	rsb	r3, r3, #8
 80077c6:	fa02 f303 	lsl.w	r3, r2, r3
 80077ca:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 80077ce:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 80077d2:	f1c3 0308 	rsb	r3, r3, #8
 80077d6:	2201      	movs	r2, #1
 80077d8:	fa02 f303 	lsl.w	r3, r2, r3
 80077dc:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 80077e0:	e022      	b.n	8007828 <jpeg_make_d_derived_tbl+0x380>
	dtbl->look_nbits[lookbits] = l;
 80077e2:	f8d7 3524 	ldr.w	r3, [r7, #1316]	; 0x524
 80077e6:	f8d7 2534 	ldr.w	r2, [r7, #1332]	; 0x534
 80077ea:	3224      	adds	r2, #36	; 0x24
 80077ec:	f8d7 153c 	ldr.w	r1, [r7, #1340]	; 0x53c
 80077f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	dtbl->look_sym[lookbits] = htbl->huffval[p];
 80077f4:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 80077f8:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 80077fc:	4413      	add	r3, r2
 80077fe:	3311      	adds	r3, #17
 8007800:	7819      	ldrb	r1, [r3, #0]
 8007802:	f8d7 2524 	ldr.w	r2, [r7, #1316]	; 0x524
 8007806:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 800780a:	4413      	add	r3, r2
 800780c:	f503 6392 	add.w	r3, r3, #1168	; 0x490
 8007810:	460a      	mov	r2, r1
 8007812:	701a      	strb	r2, [r3, #0]
	lookbits++;
 8007814:	f8d7 3534 	ldr.w	r3, [r7, #1332]	; 0x534
 8007818:	3301      	adds	r3, #1
 800781a:	f8c7 3534 	str.w	r3, [r7, #1332]	; 0x534
      for (ctr = 1 << (HUFF_LOOKAHEAD-l); ctr > 0; ctr--) {
 800781e:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 8007822:	3b01      	subs	r3, #1
 8007824:	f8c7 3530 	str.w	r3, [r7, #1328]	; 0x530
 8007828:	f8d7 3530 	ldr.w	r3, [r7, #1328]	; 0x530
 800782c:	2b00      	cmp	r3, #0
 800782e:	dcd8      	bgt.n	80077e2 <jpeg_make_d_derived_tbl+0x33a>
    for (i = 1; i <= (int) htbl->bits[l]; i++, p++) {
 8007830:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007834:	3301      	adds	r3, #1
 8007836:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800783a:	f8d7 3544 	ldr.w	r3, [r7, #1348]	; 0x544
 800783e:	3301      	adds	r3, #1
 8007840:	f8c7 3544 	str.w	r3, [r7, #1348]	; 0x544
 8007844:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8007848:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800784c:	4413      	add	r3, r2
 800784e:	781b      	ldrb	r3, [r3, #0]
 8007850:	461a      	mov	r2, r3
 8007852:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007856:	4293      	cmp	r3, r2
 8007858:	ddab      	ble.n	80077b2 <jpeg_make_d_derived_tbl+0x30a>
  for (l = 1; l <= HUFF_LOOKAHEAD; l++) {
 800785a:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 800785e:	3301      	adds	r3, #1
 8007860:	f8c7 353c 	str.w	r3, [r7, #1340]	; 0x53c
 8007864:	f8d7 353c 	ldr.w	r3, [r7, #1340]	; 0x53c
 8007868:	2b08      	cmp	r3, #8
 800786a:	dd9e      	ble.n	80077aa <jpeg_make_d_derived_tbl+0x302>
   * For AC tables, we make no check, but accept all byte values 0..255.
   * For DC tables, we require the symbols to be in range 0..15.
   * (Tighter bounds could be applied depending on the data depth and mode,
   * but this is sufficient to ensure safe decoding.)
   */
  if (isDC) {
 800786c:	f107 0308 	add.w	r3, r7, #8
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	2b00      	cmp	r3, #0
 8007874:	d02e      	beq.n	80078d4 <jpeg_make_d_derived_tbl+0x42c>
    for (i = 0; i < numsymbols; i++) {
 8007876:	2300      	movs	r3, #0
 8007878:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 800787c:	e024      	b.n	80078c8 <jpeg_make_d_derived_tbl+0x420>
      int sym = htbl->huffval[i];
 800787e:	f8d7 2528 	ldr.w	r2, [r7, #1320]	; 0x528
 8007882:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 8007886:	4413      	add	r3, r2
 8007888:	3311      	adds	r3, #17
 800788a:	781b      	ldrb	r3, [r3, #0]
 800788c:	f8c7 351c 	str.w	r3, [r7, #1308]	; 0x51c
      if (sym < 0 || sym > 15)
 8007890:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 8007894:	2b00      	cmp	r3, #0
 8007896:	db03      	blt.n	80078a0 <jpeg_make_d_derived_tbl+0x3f8>
 8007898:	f8d7 351c 	ldr.w	r3, [r7, #1308]	; 0x51c
 800789c:	2b0f      	cmp	r3, #15
 800789e:	dd0e      	ble.n	80078be <jpeg_make_d_derived_tbl+0x416>
	ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 80078a0:	f107 030c 	add.w	r3, r7, #12
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	2209      	movs	r2, #9
 80078aa:	615a      	str	r2, [r3, #20]
 80078ac:	f107 030c 	add.w	r3, r7, #12
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	f107 020c 	add.w	r2, r7, #12
 80078ba:	6810      	ldr	r0, [r2, #0]
 80078bc:	4798      	blx	r3
    for (i = 0; i < numsymbols; i++) {
 80078be:	f8d7 3540 	ldr.w	r3, [r7, #1344]	; 0x540
 80078c2:	3301      	adds	r3, #1
 80078c4:	f8c7 3540 	str.w	r3, [r7, #1344]	; 0x540
 80078c8:	f8d7 2540 	ldr.w	r2, [r7, #1344]	; 0x540
 80078cc:	f8d7 3520 	ldr.w	r3, [r7, #1312]	; 0x520
 80078d0:	429a      	cmp	r2, r3
 80078d2:	dbd4      	blt.n	800787e <jpeg_make_d_derived_tbl+0x3d6>
    }
  }
}
 80078d4:	bf00      	nop
 80078d6:	f207 574c 	addw	r7, r7, #1356	; 0x54c
 80078da:	46bd      	mov	sp, r7
 80078dc:	bd90      	pop	{r4, r7, pc}
 80078de:	bf00      	nop
 80078e0:	000fffff 	.word	0x000fffff

080078e4 <jpeg_fill_bit_buffer>:
LOCAL(boolean)
jpeg_fill_bit_buffer (bitread_working_state * state,
		      register bit_buf_type get_buffer, register int bits_left,
		      int nbits)
/* Load up the bit buffer to a depth of at least nbits */
{
 80078e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078e6:	b087      	sub	sp, #28
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	60f8      	str	r0, [r7, #12]
 80078ec:	6079      	str	r1, [r7, #4]
 80078ee:	4615      	mov	r5, r2
 80078f0:	60bb      	str	r3, [r7, #8]
  /* Copy heavily used state fields into locals (hopefully registers) */
  register const JOCTET * next_input_byte = state->next_input_byte;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681e      	ldr	r6, [r3, #0]
  register size_t bytes_in_buffer = state->bytes_in_buffer;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	685c      	ldr	r4, [r3, #4]
  j_decompress_ptr cinfo = state->cinfo;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	691b      	ldr	r3, [r3, #16]
 80078fe:	617b      	str	r3, [r7, #20]

  /* Attempt to load at least MIN_GET_BITS bits into get_buffer. */
  /* (It is assumed that no request will be for more than that many bits.) */
  /* We fail to do so only if we hit a marker or are forced to suspend. */

  if (cinfo->unread_marker == 0) {	/* cannot advance past a marker */
 8007900:	697b      	ldr	r3, [r7, #20]
 8007902:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8007906:	2b00      	cmp	r3, #0
 8007908:	d143      	bne.n	8007992 <jpeg_fill_bit_buffer+0xae>
    while (bits_left < MIN_GET_BITS) {
 800790a:	e03f      	b.n	800798c <jpeg_fill_bit_buffer+0xa8>
      register int c;

      /* Attempt to read a byte */
      if (bytes_in_buffer == 0) {
 800790c:	2c00      	cmp	r4, #0
 800790e:	d10f      	bne.n	8007930 <jpeg_fill_bit_buffer+0x4c>
	if (! (*cinfo->src->fill_input_buffer) (cinfo))
 8007910:	697b      	ldr	r3, [r7, #20]
 8007912:	699b      	ldr	r3, [r3, #24]
 8007914:	68db      	ldr	r3, [r3, #12]
 8007916:	6978      	ldr	r0, [r7, #20]
 8007918:	4798      	blx	r3
 800791a:	4603      	mov	r3, r0
 800791c:	2b00      	cmp	r3, #0
 800791e:	d101      	bne.n	8007924 <jpeg_fill_bit_buffer+0x40>
	  return FALSE;
 8007920:	2300      	movs	r3, #0
 8007922:	e060      	b.n	80079e6 <jpeg_fill_bit_buffer+0x102>
	next_input_byte = cinfo->src->next_input_byte;
 8007924:	697b      	ldr	r3, [r7, #20]
 8007926:	699b      	ldr	r3, [r3, #24]
 8007928:	681e      	ldr	r6, [r3, #0]
	bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800792a:	697b      	ldr	r3, [r7, #20]
 800792c:	699b      	ldr	r3, [r3, #24]
 800792e:	685c      	ldr	r4, [r3, #4]
      }
      bytes_in_buffer--;
 8007930:	3c01      	subs	r4, #1
      c = GETJOCTET(*next_input_byte++);
 8007932:	4633      	mov	r3, r6
 8007934:	1c5e      	adds	r6, r3, #1
 8007936:	781b      	ldrb	r3, [r3, #0]
 8007938:	461a      	mov	r2, r3

      /* If it's 0xFF, check and discard stuffed zero byte */
      if (c == 0xFF) {
 800793a:	2bff      	cmp	r3, #255	; 0xff
 800793c:	d121      	bne.n	8007982 <jpeg_fill_bit_buffer+0x9e>
	 * so that we can save a valid unread_marker value.  NOTE: we will
	 * accept multiple FF's followed by a 0 as meaning a single FF data
	 * byte.  This data pattern is not valid according to the standard.
	 */
	do {
	  if (bytes_in_buffer == 0) {
 800793e:	2c00      	cmp	r4, #0
 8007940:	d10f      	bne.n	8007962 <jpeg_fill_bit_buffer+0x7e>
	    if (! (*cinfo->src->fill_input_buffer) (cinfo))
 8007942:	697b      	ldr	r3, [r7, #20]
 8007944:	699b      	ldr	r3, [r3, #24]
 8007946:	68db      	ldr	r3, [r3, #12]
 8007948:	6978      	ldr	r0, [r7, #20]
 800794a:	4798      	blx	r3
 800794c:	4603      	mov	r3, r0
 800794e:	2b00      	cmp	r3, #0
 8007950:	d101      	bne.n	8007956 <jpeg_fill_bit_buffer+0x72>
	      return FALSE;
 8007952:	2300      	movs	r3, #0
 8007954:	e047      	b.n	80079e6 <jpeg_fill_bit_buffer+0x102>
	    next_input_byte = cinfo->src->next_input_byte;
 8007956:	697b      	ldr	r3, [r7, #20]
 8007958:	699b      	ldr	r3, [r3, #24]
 800795a:	681e      	ldr	r6, [r3, #0]
	    bytes_in_buffer = cinfo->src->bytes_in_buffer;
 800795c:	697b      	ldr	r3, [r7, #20]
 800795e:	699b      	ldr	r3, [r3, #24]
 8007960:	685c      	ldr	r4, [r3, #4]
	  }
	  bytes_in_buffer--;
 8007962:	3c01      	subs	r4, #1
	  c = GETJOCTET(*next_input_byte++);
 8007964:	4633      	mov	r3, r6
 8007966:	1c5e      	adds	r6, r3, #1
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	461a      	mov	r2, r3
	} while (c == 0xFF);
 800796c:	2bff      	cmp	r3, #255	; 0xff
 800796e:	d0e6      	beq.n	800793e <jpeg_fill_bit_buffer+0x5a>

	if (c == 0) {
 8007970:	2b00      	cmp	r3, #0
 8007972:	d102      	bne.n	800797a <jpeg_fill_bit_buffer+0x96>
	  /* Found FF/00, which represents an FF data byte */
	  c = 0xFF;
 8007974:	23ff      	movs	r3, #255	; 0xff
 8007976:	461a      	mov	r2, r3
 8007978:	e003      	b.n	8007982 <jpeg_fill_bit_buffer+0x9e>
	   * bitread working state, not straight into permanent state.  But
	   * once we have hit a marker, we cannot need to suspend within the
	   * current MCU, because we will read no more bytes from the data
	   * source.  So it is OK to update permanent state right away.
	   */
	  cinfo->unread_marker = c;
 800797a:	697b      	ldr	r3, [r7, #20]
 800797c:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
	  /* See if we need to insert some fake zero bits. */
	  goto no_more_bytes;
 8007980:	e008      	b.n	8007994 <jpeg_fill_bit_buffer+0xb0>
	}
      }

      /* OK, load c into get_buffer */
      get_buffer = (get_buffer << 8) | c;
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	021b      	lsls	r3, r3, #8
 8007986:	431a      	orrs	r2, r3
 8007988:	607a      	str	r2, [r7, #4]
      bits_left += 8;
 800798a:	3508      	adds	r5, #8
    while (bits_left < MIN_GET_BITS) {
 800798c:	2d18      	cmp	r5, #24
 800798e:	ddbd      	ble.n	800790c <jpeg_fill_bit_buffer+0x28>
 8007990:	e01f      	b.n	80079d2 <jpeg_fill_bit_buffer+0xee>
    } /* end while */
  } else {
  no_more_bytes:
 8007992:	bf00      	nop
    /* We get here if we've read the marker that terminates the compressed
     * data segment.  There should be enough bits in the buffer register
     * to satisfy the request; if so, no problem.
     */
    if (nbits > bits_left) {
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	42ab      	cmp	r3, r5
 8007998:	dd1b      	ble.n	80079d2 <jpeg_fill_bit_buffer+0xee>
      /* Uh-oh.  Report corrupted data to user and stuff zeroes into
       * the data stream, so that we can produce some kind of image.
       * We use a nonvolatile flag to ensure that only one warning message
       * appears per data segment.
       */
      if (! ((huff_entropy_ptr) cinfo->entropy)->insufficient_data) {
 800799a:	697b      	ldr	r3, [r7, #20]
 800799c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80079a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d10f      	bne.n	80079c6 <jpeg_fill_bit_buffer+0xe2>
	WARNMS(cinfo, JWRN_HIT_MARKER);
 80079a6:	697b      	ldr	r3, [r7, #20]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	2278      	movs	r2, #120	; 0x78
 80079ac:	615a      	str	r2, [r3, #20]
 80079ae:	697b      	ldr	r3, [r7, #20]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	685b      	ldr	r3, [r3, #4]
 80079b4:	f04f 31ff 	mov.w	r1, #4294967295
 80079b8:	6978      	ldr	r0, [r7, #20]
 80079ba:	4798      	blx	r3
	((huff_entropy_ptr) cinfo->entropy)->insufficient_data = TRUE;
 80079bc:	697b      	ldr	r3, [r7, #20]
 80079be:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 80079c2:	2201      	movs	r2, #1
 80079c4:	625a      	str	r2, [r3, #36]	; 0x24
      }
      /* Fill the buffer with zero bits */
      get_buffer <<= MIN_GET_BITS - bits_left;
 80079c6:	f1c5 0319 	rsb	r3, r5, #25
 80079ca:	687a      	ldr	r2, [r7, #4]
 80079cc:	409a      	lsls	r2, r3
 80079ce:	607a      	str	r2, [r7, #4]
      bits_left = MIN_GET_BITS;
 80079d0:	2519      	movs	r5, #25
    }
  }

  /* Unload the local registers */
  state->next_input_byte = next_input_byte;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	601e      	str	r6, [r3, #0]
  state->bytes_in_buffer = bytes_in_buffer;
 80079d6:	68fb      	ldr	r3, [r7, #12]
 80079d8:	605c      	str	r4, [r3, #4]
  state->get_buffer = get_buffer;
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	687a      	ldr	r2, [r7, #4]
 80079de:	609a      	str	r2, [r3, #8]
  state->bits_left = bits_left;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	60dd      	str	r5, [r3, #12]

  return TRUE;
 80079e4:	2301      	movs	r3, #1
}
 80079e6:	4618      	mov	r0, r3
 80079e8:	371c      	adds	r7, #28
 80079ea:	46bd      	mov	sp, r7
 80079ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080079f0 <jpeg_huff_decode>:

LOCAL(int)
jpeg_huff_decode (bitread_working_state * state,
		  register bit_buf_type get_buffer, register int bits_left,
		  d_derived_tbl * htbl, int min_bits)
{
 80079f0:	b5b0      	push	{r4, r5, r7, lr}
 80079f2:	b082      	sub	sp, #8
 80079f4:	af00      	add	r7, sp, #0
 80079f6:	6078      	str	r0, [r7, #4]
 80079f8:	603b      	str	r3, [r7, #0]
  register int l = min_bits;
 80079fa:	69bc      	ldr	r4, [r7, #24]
  register INT32 code;

  /* HUFF_DECODE has determined that the code is at least min_bits */
  /* bits long, so fetch that many bits in one swoop. */

  CHECK_BIT_BUFFER(*state, l, return -1);
 80079fc:	42a2      	cmp	r2, r4
 80079fe:	da0d      	bge.n	8007a1c <jpeg_huff_decode+0x2c>
 8007a00:	4623      	mov	r3, r4
 8007a02:	6878      	ldr	r0, [r7, #4]
 8007a04:	f7ff ff6e 	bl	80078e4 <jpeg_fill_bit_buffer>
 8007a08:	4603      	mov	r3, r0
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d102      	bne.n	8007a14 <jpeg_huff_decode+0x24>
 8007a0e:	f04f 33ff 	mov.w	r3, #4294967295
 8007a12:	e04b      	b.n	8007aac <jpeg_huff_decode+0xbc>
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	6899      	ldr	r1, [r3, #8]
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	68da      	ldr	r2, [r3, #12]
  code = GET_BITS(l);
 8007a1c:	1b12      	subs	r2, r2, r4
 8007a1e:	fa41 f002 	asr.w	r0, r1, r2
 8007a22:	4b24      	ldr	r3, [pc, #144]	; (8007ab4 <jpeg_huff_decode+0xc4>)
 8007a24:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a28:	ea00 0503 	and.w	r5, r0, r3

  /* Collect the rest of the Huffman code one bit at a time. */
  /* This is per Figure F.16 in the JPEG spec. */

  while (code > htbl->maxcode[l]) {
 8007a2c:	e017      	b.n	8007a5e <jpeg_huff_decode+0x6e>
    code <<= 1;
 8007a2e:	006d      	lsls	r5, r5, #1
    CHECK_BIT_BUFFER(*state, 1, return -1);
 8007a30:	2a00      	cmp	r2, #0
 8007a32:	dc0d      	bgt.n	8007a50 <jpeg_huff_decode+0x60>
 8007a34:	2301      	movs	r3, #1
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff ff54 	bl	80078e4 <jpeg_fill_bit_buffer>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d102      	bne.n	8007a48 <jpeg_huff_decode+0x58>
 8007a42:	f04f 33ff 	mov.w	r3, #4294967295
 8007a46:	e031      	b.n	8007aac <jpeg_huff_decode+0xbc>
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	6899      	ldr	r1, [r3, #8]
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	68da      	ldr	r2, [r3, #12]
    code |= GET_BITS(1);
 8007a50:	3a01      	subs	r2, #1
 8007a52:	fa41 f302 	asr.w	r3, r1, r2
 8007a56:	2001      	movs	r0, #1
 8007a58:	4003      	ands	r3, r0
 8007a5a:	431d      	orrs	r5, r3
    l++;
 8007a5c:	3401      	adds	r4, #1
  while (code > htbl->maxcode[l]) {
 8007a5e:	683b      	ldr	r3, [r7, #0]
 8007a60:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8007a64:	429d      	cmp	r5, r3
 8007a66:	dce2      	bgt.n	8007a2e <jpeg_huff_decode+0x3e>
  }

  /* Unload the local registers */
  state->get_buffer = get_buffer;
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	6099      	str	r1, [r3, #8]
  state->bits_left = bits_left;
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	60da      	str	r2, [r3, #12]

  /* With garbage input we may reach the sentinel value l = 17. */

  if (l > 16) {
 8007a70:	2c10      	cmp	r4, #16
 8007a72:	dd10      	ble.n	8007a96 <jpeg_huff_decode+0xa6>
    WARNMS(state->cinfo, JWRN_HUFF_BAD_CODE);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	2279      	movs	r2, #121	; 0x79
 8007a7c:	615a      	str	r2, [r3, #20]
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	691b      	ldr	r3, [r3, #16]
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	685b      	ldr	r3, [r3, #4]
 8007a86:	687a      	ldr	r2, [r7, #4]
 8007a88:	6912      	ldr	r2, [r2, #16]
 8007a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8007a8e:	4610      	mov	r0, r2
 8007a90:	4798      	blx	r3
    return 0;			/* fake a zero as the safest result */
 8007a92:	2300      	movs	r3, #0
 8007a94:	e00a      	b.n	8007aac <jpeg_huff_decode+0xbc>
  }

  return htbl->pub->huffval[ (int) (code + htbl->valoffset[l]) ];
 8007a96:	683b      	ldr	r3, [r7, #0]
 8007a98:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	f104 0112 	add.w	r1, r4, #18
 8007aa2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8007aa6:	442b      	add	r3, r5
 8007aa8:	4413      	add	r3, r2
 8007aaa:	7c5b      	ldrb	r3, [r3, #17]
}
 8007aac:	4618      	mov	r0, r3
 8007aae:	3708      	adds	r7, #8
 8007ab0:	46bd      	mov	sp, r7
 8007ab2:	bdb0      	pop	{r4, r5, r7, pc}
 8007ab4:	08021524 	.word	0x08021524

08007ab8 <process_restart>:
 * Returns FALSE if must suspend.
 */

LOCAL(boolean)
process_restart (j_decompress_ptr cinfo)
{
 8007ab8:	b580      	push	{r7, lr}
 8007aba:	b084      	sub	sp, #16
 8007abc:	af00      	add	r7, sp, #0
 8007abe:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007ac0:	687b      	ldr	r3, [r7, #4]
 8007ac2:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8007ac6:	60bb      	str	r3, [r7, #8]
  int ci;

  /* Throw away any unused bits remaining in bit buffer; */
  /* include any full bytes in next_marker's count of discarded bytes */
  cinfo->marker->discarded_bytes += entropy->bitstate.bits_left / 8;
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8007ace:	699a      	ldr	r2, [r3, #24]
 8007ad0:	68bb      	ldr	r3, [r7, #8]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	da00      	bge.n	8007ada <process_restart+0x22>
 8007ad8:	3307      	adds	r3, #7
 8007ada:	10db      	asrs	r3, r3, #3
 8007adc:	4619      	mov	r1, r3
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8007ae4:	440a      	add	r2, r1
 8007ae6:	619a      	str	r2, [r3, #24]
  entropy->bitstate.bits_left = 0;
 8007ae8:	68bb      	ldr	r3, [r7, #8]
 8007aea:	2200      	movs	r2, #0
 8007aec:	60da      	str	r2, [r3, #12]

  /* Advance past the RSTn marker */
  if (! (*cinfo->marker->read_restart_marker) (cinfo))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	4798      	blx	r3
 8007afa:	4603      	mov	r3, r0
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d101      	bne.n	8007b04 <process_restart+0x4c>
    return FALSE;
 8007b00:	2300      	movs	r3, #0
 8007b02:	e023      	b.n	8007b4c <process_restart+0x94>

  /* Re-initialize DC predictions to 0 */
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 8007b04:	2300      	movs	r3, #0
 8007b06:	60fb      	str	r3, [r7, #12]
 8007b08:	e009      	b.n	8007b1e <process_restart+0x66>
    entropy->saved.last_dc_val[ci] = 0;
 8007b0a:	68ba      	ldr	r2, [r7, #8]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	3304      	adds	r3, #4
 8007b10:	009b      	lsls	r3, r3, #2
 8007b12:	4413      	add	r3, r2
 8007b14:	2200      	movs	r2, #0
 8007b16:	605a      	str	r2, [r3, #4]
  for (ci = 0; ci < cinfo->comps_in_scan; ci++)
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	3301      	adds	r3, #1
 8007b1c:	60fb      	str	r3, [r7, #12]
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8007b24:	68fa      	ldr	r2, [r7, #12]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	dbef      	blt.n	8007b0a <process_restart+0x52>
  /* Re-init EOB run count, too */
  entropy->saved.EOBRUN = 0;
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	611a      	str	r2, [r3, #16]

  /* Reset restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 8007b36:	68bb      	ldr	r3, [r7, #8]
 8007b38:	629a      	str	r2, [r3, #40]	; 0x28
  /* Reset out-of-data flag, unless read_restart_marker left us smack up
   * against a marker.  In that case we will end up treating the next data
   * segment as empty, and we can avoid producing bogus output pixels by
   * leaving the flag set.
   */
  if (cinfo->unread_marker == 0)
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d102      	bne.n	8007b4a <process_restart+0x92>
    entropy->insufficient_data = FALSE;
 8007b44:	68bb      	ldr	r3, [r7, #8]
 8007b46:	2200      	movs	r2, #0
 8007b48:	625a      	str	r2, [r3, #36]	; 0x24

  return TRUE;
 8007b4a:	2301      	movs	r3, #1
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <decode_mcu_DC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_DC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 8007b54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007b58:	b096      	sub	sp, #88	; 0x58
 8007b5a:	af02      	add	r7, sp, #8
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8007b66:	64bb      	str	r3, [r7, #72]	; 0x48
  int Al = cinfo->Al;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007b6e:	647b      	str	r3, [r7, #68]	; 0x44
  savable_state state;
  d_derived_tbl * tbl;
  jpeg_component_info * compptr;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007b76:	2b00      	cmp	r3, #0
 8007b78:	d00b      	beq.n	8007b92 <decode_mcu_DC_first+0x3e>
    if (entropy->restarts_to_go == 0)
 8007b7a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d107      	bne.n	8007b92 <decode_mcu_DC_first+0x3e>
      if (! process_restart(cinfo))
 8007b82:	6878      	ldr	r0, [r7, #4]
 8007b84:	f7ff ff98 	bl	8007ab8 <process_restart>
 8007b88:	4603      	mov	r3, r0
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d101      	bne.n	8007b92 <decode_mcu_DC_first+0x3e>
	return FALSE;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	e0d6      	b.n	8007d40 <decode_mcu_DC_first+0x1ec>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 8007b92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	f040 80cc 	bne.w	8007d34 <decode_mcu_DC_first+0x1e0>

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	633b      	str	r3, [r7, #48]	; 0x30
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	699b      	ldr	r3, [r3, #24]
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	623b      	str	r3, [r7, #32]
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	699b      	ldr	r3, [r3, #24]
 8007bac:	685b      	ldr	r3, [r3, #4]
 8007bae:	627b      	str	r3, [r7, #36]	; 0x24
 8007bb0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bb2:	689e      	ldr	r6, [r3, #8]
 8007bb4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bb6:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 8007bb8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007bba:	f107 050c 	add.w	r5, r7, #12
 8007bbe:	f103 0c10 	add.w	ip, r3, #16
 8007bc2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8007bc6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8007bc8:	f8dc 3000 	ldr.w	r3, [ip]
 8007bcc:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007bce:	2300      	movs	r3, #0
 8007bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd2:	e093      	b.n	8007cfc <decode_mcu_DC_first+0x1a8>
      block = MCU_data[blkn];
 8007bd4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	4413      	add	r3, r2
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	643b      	str	r3, [r7, #64]	; 0x40
      ci = cinfo->MCU_membership[blkn];
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007be4:	325c      	adds	r2, #92	; 0x5c
 8007be6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007bea:	63fb      	str	r3, [r7, #60]	; 0x3c
      compptr = cinfo->cur_comp_info[ci];
 8007bec:	687a      	ldr	r2, [r7, #4]
 8007bee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007bf0:	3354      	adds	r3, #84	; 0x54
 8007bf2:	009b      	lsls	r3, r3, #2
 8007bf4:	4413      	add	r3, r2
 8007bf6:	685b      	ldr	r3, [r3, #4]
 8007bf8:	63bb      	str	r3, [r7, #56]	; 0x38
      tbl = entropy->derived_tbls[compptr->dc_tbl_no];
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	695b      	ldr	r3, [r3, #20]
 8007bfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c00:	330a      	adds	r3, #10
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	4413      	add	r3, r2
 8007c06:	685b      	ldr	r3, [r3, #4]
 8007c08:	637b      	str	r3, [r7, #52]	; 0x34

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      HUFF_DECODE(s, br_state, tbl, return FALSE, label1);
 8007c0a:	2c07      	cmp	r4, #7
 8007c0c:	dc11      	bgt.n	8007c32 <decode_mcu_DC_first+0xde>
 8007c0e:	f107 0020 	add.w	r0, r7, #32
 8007c12:	2300      	movs	r3, #0
 8007c14:	4622      	mov	r2, r4
 8007c16:	4631      	mov	r1, r6
 8007c18:	f7ff fe64 	bl	80078e4 <jpeg_fill_bit_buffer>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d101      	bne.n	8007c26 <decode_mcu_DC_first+0xd2>
 8007c22:	2300      	movs	r3, #0
 8007c24:	e08c      	b.n	8007d40 <decode_mcu_DC_first+0x1ec>
 8007c26:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007c28:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8007c2a:	2c07      	cmp	r4, #7
 8007c2c:	dc01      	bgt.n	8007c32 <decode_mcu_DC_first+0xde>
 8007c2e:	2501      	movs	r5, #1
 8007c30:	e015      	b.n	8007c5e <decode_mcu_DC_first+0x10a>
 8007c32:	f1a4 0308 	sub.w	r3, r4, #8
 8007c36:	fa46 f303 	asr.w	r3, r6, r3
 8007c3a:	22ff      	movs	r2, #255	; 0xff
 8007c3c:	ea03 0802 	and.w	r8, r3, r2
 8007c40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c42:	f108 0224 	add.w	r2, r8, #36	; 0x24
 8007c46:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8007c4a:	2d00      	cmp	r5, #0
 8007c4c:	d006      	beq.n	8007c5c <decode_mcu_DC_first+0x108>
 8007c4e:	1b64      	subs	r4, r4, r5
 8007c50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c52:	4443      	add	r3, r8
 8007c54:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8007c58:	461d      	mov	r5, r3
 8007c5a:	e00f      	b.n	8007c7c <decode_mcu_DC_first+0x128>
 8007c5c:	2509      	movs	r5, #9
 8007c5e:	f107 0020 	add.w	r0, r7, #32
 8007c62:	9500      	str	r5, [sp, #0]
 8007c64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007c66:	4622      	mov	r2, r4
 8007c68:	4631      	mov	r1, r6
 8007c6a:	f7ff fec1 	bl	80079f0 <jpeg_huff_decode>
 8007c6e:	4605      	mov	r5, r0
 8007c70:	2d00      	cmp	r5, #0
 8007c72:	da01      	bge.n	8007c78 <decode_mcu_DC_first+0x124>
 8007c74:	2300      	movs	r3, #0
 8007c76:	e063      	b.n	8007d40 <decode_mcu_DC_first+0x1ec>
 8007c78:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007c7a:	6afc      	ldr	r4, [r7, #44]	; 0x2c
      if (s) {
 8007c7c:	2d00      	cmp	r5, #0
 8007c7e:	d025      	beq.n	8007ccc <decode_mcu_DC_first+0x178>
	CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007c80:	42ac      	cmp	r4, r5
 8007c82:	da0d      	bge.n	8007ca0 <decode_mcu_DC_first+0x14c>
 8007c84:	f107 0020 	add.w	r0, r7, #32
 8007c88:	462b      	mov	r3, r5
 8007c8a:	4622      	mov	r2, r4
 8007c8c:	4631      	mov	r1, r6
 8007c8e:	f7ff fe29 	bl	80078e4 <jpeg_fill_bit_buffer>
 8007c92:	4603      	mov	r3, r0
 8007c94:	2b00      	cmp	r3, #0
 8007c96:	d101      	bne.n	8007c9c <decode_mcu_DC_first+0x148>
 8007c98:	2300      	movs	r3, #0
 8007c9a:	e051      	b.n	8007d40 <decode_mcu_DC_first+0x1ec>
 8007c9c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 8007c9e:	6afc      	ldr	r4, [r7, #44]	; 0x2c
	r = GET_BITS(s);
 8007ca0:	1b64      	subs	r4, r4, r5
 8007ca2:	fa46 f204 	asr.w	r2, r6, r4
 8007ca6:	4b29      	ldr	r3, [pc, #164]	; (8007d4c <decode_mcu_DC_first+0x1f8>)
 8007ca8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007cac:	ea02 0803 	and.w	r8, r2, r3
	s = HUFF_EXTEND(r, s);
 8007cb0:	1e6b      	subs	r3, r5, #1
 8007cb2:	4a26      	ldr	r2, [pc, #152]	; (8007d4c <decode_mcu_DC_first+0x1f8>)
 8007cb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007cb8:	4598      	cmp	r8, r3
 8007cba:	dc05      	bgt.n	8007cc8 <decode_mcu_DC_first+0x174>
 8007cbc:	4b23      	ldr	r3, [pc, #140]	; (8007d4c <decode_mcu_DC_first+0x1f8>)
 8007cbe:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007cc2:	eba8 0303 	sub.w	r3, r8, r3
 8007cc6:	e000      	b.n	8007cca <decode_mcu_DC_first+0x176>
 8007cc8:	4643      	mov	r3, r8
 8007cca:	461d      	mov	r5, r3
      }

      /* Convert DC difference to actual value, update last_dc_val */
      s += state.last_dc_val[ci];
 8007ccc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cce:	009b      	lsls	r3, r3, #2
 8007cd0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007cd4:	4413      	add	r3, r2
 8007cd6:	f853 3c40 	ldr.w	r3, [r3, #-64]
 8007cda:	441d      	add	r5, r3
      state.last_dc_val[ci] = s;
 8007cdc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007cde:	009b      	lsls	r3, r3, #2
 8007ce0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8007ce4:	4413      	add	r3, r2
 8007ce6:	f843 5c40 	str.w	r5, [r3, #-64]
      /* Scale and output the coefficient (assumes jpeg_natural_order[0]=0) */
      (*block)[0] = (JCOEF) (s << Al);
 8007cea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007cec:	fa05 f303 	lsl.w	r3, r5, r3
 8007cf0:	b21a      	sxth	r2, r3
 8007cf2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007cf4:	801a      	strh	r2, [r3, #0]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007cf6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8007d02:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8007d04:	429a      	cmp	r2, r3
 8007d06:	f6ff af65 	blt.w	8007bd4 <decode_mcu_DC_first+0x80>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	699b      	ldr	r3, [r3, #24]
 8007d0e:	6a3a      	ldr	r2, [r7, #32]
 8007d10:	601a      	str	r2, [r3, #0]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	699b      	ldr	r3, [r3, #24]
 8007d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d18:	605a      	str	r2, [r3, #4]
 8007d1a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d1c:	609e      	str	r6, [r3, #8]
 8007d1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d20:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 8007d22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d24:	f103 0410 	add.w	r4, r3, #16
 8007d28:	f107 050c 	add.w	r5, r7, #12
 8007d2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8007d2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8007d30:	682b      	ldr	r3, [r5, #0]
 8007d32:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 8007d34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d38:	1e5a      	subs	r2, r3, #1
 8007d3a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007d3c:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 8007d3e:	2301      	movs	r3, #1
}
 8007d40:	4618      	mov	r0, r3
 8007d42:	3750      	adds	r7, #80	; 0x50
 8007d44:	46bd      	mov	sp, r7
 8007d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007d4a:	bf00      	nop
 8007d4c:	08021524 	.word	0x08021524

08007d50 <decode_mcu_AC_first>:
 * or first pass of successive approximation).
 */

METHODDEF(boolean)
decode_mcu_AC_first (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 8007d50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007d52:	b093      	sub	sp, #76	; 0x4c
 8007d54:	af02      	add	r7, sp, #8
 8007d56:	60f8      	str	r0, [r7, #12]
 8007d58:	60b9      	str	r1, [r7, #8]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8007d60:	63bb      	str	r3, [r7, #56]	; 0x38
  JBLOCKROW block;
  BITREAD_STATE_VARS;
  d_derived_tbl * tbl;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d00b      	beq.n	8007d84 <decode_mcu_AC_first+0x34>
    if (entropy->restarts_to_go == 0)
 8007d6c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d107      	bne.n	8007d84 <decode_mcu_AC_first+0x34>
      if (! process_restart(cinfo))
 8007d74:	68f8      	ldr	r0, [r7, #12]
 8007d76:	f7ff fe9f 	bl	8007ab8 <process_restart>
 8007d7a:	4603      	mov	r3, r0
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d101      	bne.n	8007d84 <decode_mcu_AC_first+0x34>
	return FALSE;
 8007d80:	2300      	movs	r3, #0
 8007d82:	e0f7      	b.n	8007f74 <decode_mcu_AC_first+0x224>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 8007d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	f040 80ed 	bne.w	8007f68 <decode_mcu_AC_first+0x218>

    Se = cinfo->Se;
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8007d94:	637b      	str	r3, [r7, #52]	; 0x34
    Al = cinfo->Al;
 8007d96:	68fb      	ldr	r3, [r7, #12]
 8007d98:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007d9c:	633b      	str	r3, [r7, #48]	; 0x30
    natural_order = cinfo->natural_order;
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 8007da4:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Load up working state.
     * We can avoid loading/saving bitread state if in an EOB run.
     */
    EOBRUN = entropy->saved.EOBRUN;	/* only part of saved state we need */
 8007da6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007da8:	691b      	ldr	r3, [r3, #16]
 8007daa:	63fb      	str	r3, [r7, #60]	; 0x3c

    /* There is always only one block per MCU */

    if (EOBRUN > 0)		/* if it's a band of zeroes... */
 8007dac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d003      	beq.n	8007dba <decode_mcu_AC_first+0x6a>
      EOBRUN--;			/* ...process it now (we do nothing) */
 8007db2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007db4:	3b01      	subs	r3, #1
 8007db6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007db8:	e0d3      	b.n	8007f62 <decode_mcu_AC_first+0x212>
    else {
      BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	623b      	str	r3, [r7, #32]
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	699b      	ldr	r3, [r3, #24]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	613b      	str	r3, [r7, #16]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	699b      	ldr	r3, [r3, #24]
 8007dca:	685b      	ldr	r3, [r3, #4]
 8007dcc:	617b      	str	r3, [r7, #20]
 8007dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	607b      	str	r3, [r7, #4]
 8007dd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007dd6:	68dc      	ldr	r4, [r3, #12]
      block = MCU_data[0];
 8007dd8:	68bb      	ldr	r3, [r7, #8]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	62bb      	str	r3, [r7, #40]	; 0x28
      tbl = entropy->ac_derived_tbl;
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007de2:	627b      	str	r3, [r7, #36]	; 0x24

      for (k = cinfo->Ss; k <= Se; k++) {
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8007dea:	603b      	str	r3, [r7, #0]
 8007dec:	e0a7      	b.n	8007f3e <decode_mcu_AC_first+0x1ee>
	HUFF_DECODE(s, br_state, tbl, return FALSE, label2);
 8007dee:	2c07      	cmp	r4, #7
 8007df0:	dc12      	bgt.n	8007e18 <decode_mcu_AC_first+0xc8>
 8007df2:	f107 0010 	add.w	r0, r7, #16
 8007df6:	2300      	movs	r3, #0
 8007df8:	4622      	mov	r2, r4
 8007dfa:	6879      	ldr	r1, [r7, #4]
 8007dfc:	f7ff fd72 	bl	80078e4 <jpeg_fill_bit_buffer>
 8007e00:	4603      	mov	r3, r0
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d101      	bne.n	8007e0a <decode_mcu_AC_first+0xba>
 8007e06:	2300      	movs	r3, #0
 8007e08:	e0b4      	b.n	8007f74 <decode_mcu_AC_first+0x224>
 8007e0a:	69bb      	ldr	r3, [r7, #24]
 8007e0c:	607b      	str	r3, [r7, #4]
 8007e0e:	69fc      	ldr	r4, [r7, #28]
 8007e10:	2c07      	cmp	r4, #7
 8007e12:	dc01      	bgt.n	8007e18 <decode_mcu_AC_first+0xc8>
 8007e14:	2501      	movs	r5, #1
 8007e16:	e016      	b.n	8007e46 <decode_mcu_AC_first+0xf6>
 8007e18:	f1a4 0308 	sub.w	r3, r4, #8
 8007e1c:	687a      	ldr	r2, [r7, #4]
 8007e1e:	fa42 f303 	asr.w	r3, r2, r3
 8007e22:	22ff      	movs	r2, #255	; 0xff
 8007e24:	ea03 0602 	and.w	r6, r3, r2
 8007e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e2a:	f106 0224 	add.w	r2, r6, #36	; 0x24
 8007e2e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8007e32:	2d00      	cmp	r5, #0
 8007e34:	d006      	beq.n	8007e44 <decode_mcu_AC_first+0xf4>
 8007e36:	1b64      	subs	r4, r4, r5
 8007e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e3a:	4433      	add	r3, r6
 8007e3c:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8007e40:	461e      	mov	r6, r3
 8007e42:	e010      	b.n	8007e66 <decode_mcu_AC_first+0x116>
 8007e44:	2509      	movs	r5, #9
 8007e46:	f107 0010 	add.w	r0, r7, #16
 8007e4a:	9500      	str	r5, [sp, #0]
 8007e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e4e:	4622      	mov	r2, r4
 8007e50:	6879      	ldr	r1, [r7, #4]
 8007e52:	f7ff fdcd 	bl	80079f0 <jpeg_huff_decode>
 8007e56:	4606      	mov	r6, r0
 8007e58:	2e00      	cmp	r6, #0
 8007e5a:	da01      	bge.n	8007e60 <decode_mcu_AC_first+0x110>
 8007e5c:	2300      	movs	r3, #0
 8007e5e:	e089      	b.n	8007f74 <decode_mcu_AC_first+0x224>
 8007e60:	69bb      	ldr	r3, [r7, #24]
 8007e62:	607b      	str	r3, [r7, #4]
 8007e64:	69fc      	ldr	r4, [r7, #28]
	r = s >> 4;
 8007e66:	1135      	asrs	r5, r6, #4
	s &= 15;
 8007e68:	f006 060f 	and.w	r6, r6, #15
	if (s) {
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	d036      	beq.n	8007ede <decode_mcu_AC_first+0x18e>
	  k += r;
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	442b      	add	r3, r5
 8007e74:	603b      	str	r3, [r7, #0]
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8007e76:	42b4      	cmp	r4, r6
 8007e78:	da0e      	bge.n	8007e98 <decode_mcu_AC_first+0x148>
 8007e7a:	f107 0010 	add.w	r0, r7, #16
 8007e7e:	4633      	mov	r3, r6
 8007e80:	4622      	mov	r2, r4
 8007e82:	6879      	ldr	r1, [r7, #4]
 8007e84:	f7ff fd2e 	bl	80078e4 <jpeg_fill_bit_buffer>
 8007e88:	4603      	mov	r3, r0
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d101      	bne.n	8007e92 <decode_mcu_AC_first+0x142>
 8007e8e:	2300      	movs	r3, #0
 8007e90:	e070      	b.n	8007f74 <decode_mcu_AC_first+0x224>
 8007e92:	69bb      	ldr	r3, [r7, #24]
 8007e94:	607b      	str	r3, [r7, #4]
 8007e96:	69fc      	ldr	r4, [r7, #28]
	  r = GET_BITS(s);
 8007e98:	1ba4      	subs	r4, r4, r6
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	fa43 f204 	asr.w	r2, r3, r4
 8007ea0:	4b36      	ldr	r3, [pc, #216]	; (8007f7c <decode_mcu_AC_first+0x22c>)
 8007ea2:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007ea6:	ea02 0503 	and.w	r5, r2, r3
	  s = HUFF_EXTEND(r, s);
 8007eaa:	1e73      	subs	r3, r6, #1
 8007eac:	4a33      	ldr	r2, [pc, #204]	; (8007f7c <decode_mcu_AC_first+0x22c>)
 8007eae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007eb2:	429d      	cmp	r5, r3
 8007eb4:	dc04      	bgt.n	8007ec0 <decode_mcu_AC_first+0x170>
 8007eb6:	4b31      	ldr	r3, [pc, #196]	; (8007f7c <decode_mcu_AC_first+0x22c>)
 8007eb8:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 8007ebc:	1aeb      	subs	r3, r5, r3
 8007ebe:	e000      	b.n	8007ec2 <decode_mcu_AC_first+0x172>
 8007ec0:	462b      	mov	r3, r5
 8007ec2:	461e      	mov	r6, r3
	  /* Scale and output coefficient in natural (dezigzagged) order */
	  (*block)[natural_order[k]] = (JCOEF) (s << Al);
 8007ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ec6:	fa06 f103 	lsl.w	r1, r6, r3
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	009b      	lsls	r3, r3, #2
 8007ece:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ed0:	4413      	add	r3, r2
 8007ed2:	681a      	ldr	r2, [r3, #0]
 8007ed4:	b209      	sxth	r1, r1
 8007ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed8:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8007edc:	e02c      	b.n	8007f38 <decode_mcu_AC_first+0x1e8>
	} else {
	  if (r == 15) {	/* ZRL */
 8007ede:	2d0f      	cmp	r5, #15
 8007ee0:	d103      	bne.n	8007eea <decode_mcu_AC_first+0x19a>
	    k += 15;		/* skip 15 zeroes in band */
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	330f      	adds	r3, #15
 8007ee6:	603b      	str	r3, [r7, #0]
 8007ee8:	e026      	b.n	8007f38 <decode_mcu_AC_first+0x1e8>
	  } else {		/* EOBr, run length is 2^r + appended bits */
	    EOBRUN = 1 << r;
 8007eea:	2301      	movs	r3, #1
 8007eec:	40ab      	lsls	r3, r5
 8007eee:	63fb      	str	r3, [r7, #60]	; 0x3c
	    if (r) {		/* EOBr, r > 0 */
 8007ef0:	2d00      	cmp	r5, #0
 8007ef2:	d01d      	beq.n	8007f30 <decode_mcu_AC_first+0x1e0>
	      CHECK_BIT_BUFFER(br_state, r, return FALSE);
 8007ef4:	42ac      	cmp	r4, r5
 8007ef6:	da0e      	bge.n	8007f16 <decode_mcu_AC_first+0x1c6>
 8007ef8:	f107 0010 	add.w	r0, r7, #16
 8007efc:	462b      	mov	r3, r5
 8007efe:	4622      	mov	r2, r4
 8007f00:	6879      	ldr	r1, [r7, #4]
 8007f02:	f7ff fcef 	bl	80078e4 <jpeg_fill_bit_buffer>
 8007f06:	4603      	mov	r3, r0
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d101      	bne.n	8007f10 <decode_mcu_AC_first+0x1c0>
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	e031      	b.n	8007f74 <decode_mcu_AC_first+0x224>
 8007f10:	69bb      	ldr	r3, [r7, #24]
 8007f12:	607b      	str	r3, [r7, #4]
 8007f14:	69fc      	ldr	r4, [r7, #28]
	      r = GET_BITS(r);
 8007f16:	1b64      	subs	r4, r4, r5
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	fa43 f204 	asr.w	r2, r3, r4
 8007f1e:	4b17      	ldr	r3, [pc, #92]	; (8007f7c <decode_mcu_AC_first+0x22c>)
 8007f20:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8007f24:	ea02 0503 	and.w	r5, r2, r3
	      EOBRUN += r;
 8007f28:	462a      	mov	r2, r5
 8007f2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f2c:	4413      	add	r3, r2
 8007f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
	    }
	    EOBRUN--;		/* this band is processed at this moment */
 8007f30:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f32:	3b01      	subs	r3, #1
 8007f34:	63fb      	str	r3, [r7, #60]	; 0x3c
	    break;		/* force end-of-band */
 8007f36:	e007      	b.n	8007f48 <decode_mcu_AC_first+0x1f8>
      for (k = cinfo->Ss; k <= Se; k++) {
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	603b      	str	r3, [r7, #0]
 8007f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f40:	683a      	ldr	r2, [r7, #0]
 8007f42:	429a      	cmp	r2, r3
 8007f44:	f77f af53 	ble.w	8007dee <decode_mcu_AC_first+0x9e>
	  }
	}
      }

      BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	699b      	ldr	r3, [r3, #24]
 8007f4c:	693a      	ldr	r2, [r7, #16]
 8007f4e:	601a      	str	r2, [r3, #0]
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	699b      	ldr	r3, [r3, #24]
 8007f54:	697a      	ldr	r2, [r7, #20]
 8007f56:	605a      	str	r2, [r3, #4]
 8007f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f5a:	687a      	ldr	r2, [r7, #4]
 8007f5c:	609a      	str	r2, [r3, #8]
 8007f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f60:	60dc      	str	r4, [r3, #12]
    }

    /* Completed MCU, so update state */
    entropy->saved.EOBRUN = EOBRUN;	/* only part of saved state we need */
 8007f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f66:	611a      	str	r2, [r3, #16]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 8007f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f6c:	1e5a      	subs	r2, r3, #1
 8007f6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f70:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 8007f72:	2301      	movs	r3, #1
}
 8007f74:	4618      	mov	r0, r3
 8007f76:	3744      	adds	r7, #68	; 0x44
 8007f78:	46bd      	mov	sp, r7
 8007f7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007f7c:	08021524 	.word	0x08021524

08007f80 <decode_mcu_DC_refine>:
 * is not very clear on the point.
 */

METHODDEF(boolean)
decode_mcu_DC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 8007f80:	b5b0      	push	{r4, r5, r7, lr}
 8007f82:	b08c      	sub	sp, #48	; 0x30
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
 8007f88:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8007f90:	62bb      	str	r3, [r7, #40]	; 0x28
  int p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8007f98:	2201      	movs	r2, #1
 8007f9a:	fa02 f303 	lsl.w	r3, r2, r3
 8007f9e:	627b      	str	r3, [r7, #36]	; 0x24
  int blkn;
  JBLOCKROW block;
  BITREAD_STATE_VARS;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d00b      	beq.n	8007fc2 <decode_mcu_DC_refine+0x42>
    if (entropy->restarts_to_go == 0)
 8007faa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d107      	bne.n	8007fc2 <decode_mcu_DC_refine+0x42>
      if (! process_restart(cinfo))
 8007fb2:	6878      	ldr	r0, [r7, #4]
 8007fb4:	f7ff fd80 	bl	8007ab8 <process_restart>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d101      	bne.n	8007fc2 <decode_mcu_DC_refine+0x42>
	return FALSE;
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	e051      	b.n	8008066 <decode_mcu_DC_refine+0xe6>
  /* Not worth the cycles to check insufficient_data here,
   * since we will not change the data anyway if we read zeroes.
   */

  /* Load up working state */
  BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	61fb      	str	r3, [r7, #28]
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	699b      	ldr	r3, [r3, #24]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	60fb      	str	r3, [r7, #12]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	699b      	ldr	r3, [r3, #24]
 8007fd2:	685b      	ldr	r3, [r3, #4]
 8007fd4:	613b      	str	r3, [r7, #16]
 8007fd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fd8:	689d      	ldr	r5, [r3, #8]
 8007fda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fdc:	68dc      	ldr	r4, [r3, #12]

  /* Outer loop handles each block in the MCU */

  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8007fde:	2300      	movs	r3, #0
 8007fe0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007fe2:	e028      	b.n	8008036 <decode_mcu_DC_refine+0xb6>
    block = MCU_data[blkn];
 8007fe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	683a      	ldr	r2, [r7, #0]
 8007fea:	4413      	add	r3, r2
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	623b      	str	r3, [r7, #32]

    /* Encoded data is simply the next bit of the two's-complement DC value */
    CHECK_BIT_BUFFER(br_state, 1, return FALSE);
 8007ff0:	2c00      	cmp	r4, #0
 8007ff2:	dc0d      	bgt.n	8008010 <decode_mcu_DC_refine+0x90>
 8007ff4:	f107 000c 	add.w	r0, r7, #12
 8007ff8:	2301      	movs	r3, #1
 8007ffa:	4622      	mov	r2, r4
 8007ffc:	4629      	mov	r1, r5
 8007ffe:	f7ff fc71 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008002:	4603      	mov	r3, r0
 8008004:	2b00      	cmp	r3, #0
 8008006:	d101      	bne.n	800800c <decode_mcu_DC_refine+0x8c>
 8008008:	2300      	movs	r3, #0
 800800a:	e02c      	b.n	8008066 <decode_mcu_DC_refine+0xe6>
 800800c:	697d      	ldr	r5, [r7, #20]
 800800e:	69bc      	ldr	r4, [r7, #24]
    if (GET_BITS(1))
 8008010:	3c01      	subs	r4, #1
 8008012:	fa45 f304 	asr.w	r3, r5, r4
 8008016:	2201      	movs	r2, #1
 8008018:	4013      	ands	r3, r2
 800801a:	2b00      	cmp	r3, #0
 800801c:	d008      	beq.n	8008030 <decode_mcu_DC_refine+0xb0>
      (*block)[0] |= p1;
 800801e:	6a3b      	ldr	r3, [r7, #32]
 8008020:	f9b3 2000 	ldrsh.w	r2, [r3]
 8008024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008026:	b21b      	sxth	r3, r3
 8008028:	4313      	orrs	r3, r2
 800802a:	b21a      	sxth	r2, r3
 800802c:	6a3b      	ldr	r3, [r7, #32]
 800802e:	801a      	strh	r2, [r3, #0]
  for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008032:	3301      	adds	r3, #1
 8008034:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800803c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800803e:	429a      	cmp	r2, r3
 8008040:	dbd0      	blt.n	8007fe4 <decode_mcu_DC_refine+0x64>
    /* Note: since we use |=, repeating the assignment later is safe */
  }

  /* Completed MCU, so update state */
  BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	699b      	ldr	r3, [r3, #24]
 8008046:	68fa      	ldr	r2, [r7, #12]
 8008048:	601a      	str	r2, [r3, #0]
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	699b      	ldr	r3, [r3, #24]
 800804e:	693a      	ldr	r2, [r7, #16]
 8008050:	605a      	str	r2, [r3, #4]
 8008052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008054:	609d      	str	r5, [r3, #8]
 8008056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008058:	60dc      	str	r4, [r3, #12]

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 800805a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800805c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800805e:	1e5a      	subs	r2, r3, #1
 8008060:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008062:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 8008064:	2301      	movs	r3, #1
}
 8008066:	4618      	mov	r0, r3
 8008068:	3730      	adds	r7, #48	; 0x30
 800806a:	46bd      	mov	sp, r7
 800806c:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008070 <decode_mcu_AC_refine>:
 * MCU decoding for AC successive approximation refinement scan.
 */

METHODDEF(boolean)
decode_mcu_AC_refine (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{   
 8008070:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008074:	b0d6      	sub	sp, #344	; 0x158
 8008076:	af02      	add	r7, sp, #8
 8008078:	f107 030c 	add.w	r3, r7, #12
 800807c:	6018      	str	r0, [r3, #0]
 800807e:	f107 0308 	add.w	r3, r7, #8
 8008082:	6019      	str	r1, [r3, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8008084:	f107 030c 	add.w	r3, r7, #12
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800808e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  d_derived_tbl * tbl;
  int num_newnz;
  int newnz_pos[DCTSIZE2];

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8008092:	f107 030c 	add.w	r3, r7, #12
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800809c:	2b00      	cmp	r3, #0
 800809e:	d00e      	beq.n	80080be <decode_mcu_AC_refine+0x4e>
    if (entropy->restarts_to_go == 0)
 80080a0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80080a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d109      	bne.n	80080be <decode_mcu_AC_refine+0x4e>
      if (! process_restart(cinfo))
 80080aa:	f107 030c 	add.w	r3, r7, #12
 80080ae:	6818      	ldr	r0, [r3, #0]
 80080b0:	f7ff fd02 	bl	8007ab8 <process_restart>
 80080b4:	4603      	mov	r3, r0
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d101      	bne.n	80080be <decode_mcu_AC_refine+0x4e>
	return FALSE;
 80080ba:	2300      	movs	r3, #0
 80080bc:	e23a      	b.n	8008534 <decode_mcu_AC_refine+0x4c4>
  }

  /* If we've run out of data, don't modify the MCU.
   */
  if (! entropy->insufficient_data) {
 80080be:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80080c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c4:	2b00      	cmp	r3, #0
 80080c6:	f040 820b 	bne.w	80084e0 <decode_mcu_AC_refine+0x470>

    Se = cinfo->Se;
 80080ca:	f107 030c 	add.w	r3, r7, #12
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 80080d4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    p1 = 1 << cinfo->Al;	/* 1 in the bit position being coded */
 80080d8:	f107 030c 	add.w	r3, r7, #12
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80080e2:	2201      	movs	r2, #1
 80080e4:	fa02 f303 	lsl.w	r3, r2, r3
 80080e8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    m1 = (-1) << cinfo->Al;	/* -1 in the bit position being coded */
 80080ec:	f107 030c 	add.w	r3, r7, #12
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 80080f6:	f04f 32ff 	mov.w	r2, #4294967295
 80080fa:	fa02 f303 	lsl.w	r3, r2, r3
 80080fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    natural_order = cinfo->natural_order;
 8008102:	f107 030c 	add.w	r3, r7, #12
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800810c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8008110:	f107 030c 	add.w	r3, r7, #12
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800811a:	f107 030c 	add.w	r3, r7, #12
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	699b      	ldr	r3, [r3, #24]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8008128:	f107 030c 	add.w	r3, r7, #12
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	699b      	ldr	r3, [r3, #24]
 8008130:	685b      	ldr	r3, [r3, #4]
 8008132:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8008136:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800813a:	689d      	ldr	r5, [r3, #8]
 800813c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008140:	68dc      	ldr	r4, [r3, #12]
    EOBRUN = entropy->saved.EOBRUN; /* only part of saved state we need */
 8008142:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8008146:	691b      	ldr	r3, [r3, #16]
 8008148:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    /* There is always only one block per MCU */
    block = MCU_data[0];
 800814c:	f107 0308 	add.w	r3, r7, #8
 8008150:	681b      	ldr	r3, [r3, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tbl = entropy->ac_derived_tbl;
 8008158:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800815c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800815e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
     * nonzero coefficients in the block, because otherwise we'd get confused
     * next time about which coefficients were already nonzero.
     * But we need not undo addition of bits to already-nonzero coefficients;
     * instead, we can test the current bit to see if we already did it.
     */
    num_newnz = 0;
 8008162:	2300      	movs	r3, #0
 8008164:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    /* initialize coefficient loop counter to start of band */
    k = cinfo->Ss;
 8008168:	f107 030c 	add.w	r3, r7, #12
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008172:	607b      	str	r3, [r7, #4]

    if (EOBRUN == 0) {
 8008174:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8008178:	2b00      	cmp	r3, #0
 800817a:	f040 8130 	bne.w	80083de <decode_mcu_AC_refine+0x36e>
      for (; k <= Se; k++) {
 800817e:	e126      	b.n	80083ce <decode_mcu_AC_refine+0x35e>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 8008180:	2c07      	cmp	r4, #7
 8008182:	dc12      	bgt.n	80081aa <decode_mcu_AC_refine+0x13a>
 8008184:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8008188:	2300      	movs	r3, #0
 800818a:	4622      	mov	r2, r4
 800818c:	4629      	mov	r1, r5
 800818e:	f7ff fba9 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008192:	4603      	mov	r3, r0
 8008194:	2b00      	cmp	r3, #0
 8008196:	f000 81ac 	beq.w	80084f2 <decode_mcu_AC_refine+0x482>
 800819a:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 800819e:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
 80081a2:	2c07      	cmp	r4, #7
 80081a4:	dc01      	bgt.n	80081aa <decode_mcu_AC_refine+0x13a>
 80081a6:	2601      	movs	r6, #1
 80081a8:	e017      	b.n	80081da <decode_mcu_AC_refine+0x16a>
 80081aa:	f1a4 0308 	sub.w	r3, r4, #8
 80081ae:	fa45 f303 	asr.w	r3, r5, r3
 80081b2:	22ff      	movs	r2, #255	; 0xff
 80081b4:	ea03 0802 	and.w	r8, r3, r2
 80081b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081bc:	f108 0224 	add.w	r2, r8, #36	; 0x24
 80081c0:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80081c4:	2e00      	cmp	r6, #0
 80081c6:	d007      	beq.n	80081d8 <decode_mcu_AC_refine+0x168>
 80081c8:	1ba4      	subs	r4, r4, r6
 80081ca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081ce:	4443      	add	r3, r8
 80081d0:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 80081d4:	603b      	str	r3, [r7, #0]
 80081d6:	e012      	b.n	80081fe <decode_mcu_AC_refine+0x18e>
 80081d8:	2609      	movs	r6, #9
 80081da:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80081de:	9600      	str	r6, [sp, #0]
 80081e0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80081e4:	4622      	mov	r2, r4
 80081e6:	4629      	mov	r1, r5
 80081e8:	f7ff fc02 	bl	80079f0 <jpeg_huff_decode>
 80081ec:	4603      	mov	r3, r0
 80081ee:	603b      	str	r3, [r7, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f2c0 8180 	blt.w	80084f6 <decode_mcu_AC_refine+0x486>
 80081f6:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 80081fa:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	r = s >> 4;
 80081fe:	683b      	ldr	r3, [r7, #0]
 8008200:	111e      	asrs	r6, r3, #4
	s &= 15;
 8008202:	f003 030f 	and.w	r3, r3, #15
 8008206:	603b      	str	r3, [r7, #0]
	if (s) {
 8008208:	2b00      	cmp	r3, #0
 800820a:	d032      	beq.n	8008272 <decode_mcu_AC_refine+0x202>
	  if (s != 1)		/* size of new coef should always be 1 */
 800820c:	2b01      	cmp	r3, #1
 800820e:	d010      	beq.n	8008232 <decode_mcu_AC_refine+0x1c2>
	    WARNMS(cinfo, JWRN_HUFF_BAD_CODE);
 8008210:	f107 030c 	add.w	r3, r7, #12
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	681b      	ldr	r3, [r3, #0]
 8008218:	2279      	movs	r2, #121	; 0x79
 800821a:	615a      	str	r2, [r3, #20]
 800821c:	f107 030c 	add.w	r3, r7, #12
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	681b      	ldr	r3, [r3, #0]
 8008224:	685b      	ldr	r3, [r3, #4]
 8008226:	f107 020c 	add.w	r2, r7, #12
 800822a:	f04f 31ff 	mov.w	r1, #4294967295
 800822e:	6810      	ldr	r0, [r2, #0]
 8008230:	4798      	blx	r3
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 8008232:	2c00      	cmp	r4, #0
 8008234:	dc0e      	bgt.n	8008254 <decode_mcu_AC_refine+0x1e4>
 8008236:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800823a:	2301      	movs	r3, #1
 800823c:	4622      	mov	r2, r4
 800823e:	4629      	mov	r1, r5
 8008240:	f7ff fb50 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008244:	4603      	mov	r3, r0
 8008246:	2b00      	cmp	r3, #0
 8008248:	f000 8157 	beq.w	80084fa <decode_mcu_AC_refine+0x48a>
 800824c:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8008250:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	  if (GET_BITS(1))
 8008254:	3c01      	subs	r4, #1
 8008256:	fa45 f304 	asr.w	r3, r5, r4
 800825a:	2201      	movs	r2, #1
 800825c:	4013      	ands	r3, r2
 800825e:	2b00      	cmp	r3, #0
 8008260:	d003      	beq.n	800826a <decode_mcu_AC_refine+0x1fa>
	    s = p1;		/* newly nonzero coef is positive */
 8008262:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008266:	603b      	str	r3, [r7, #0]
 8008268:	e02c      	b.n	80082c4 <decode_mcu_AC_refine+0x254>
	  else
	    s = m1;		/* newly nonzero coef is negative */
 800826a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800826e:	603b      	str	r3, [r7, #0]
 8008270:	e028      	b.n	80082c4 <decode_mcu_AC_refine+0x254>
	} else {
	  if (r != 15) {
 8008272:	2e0f      	cmp	r6, #15
 8008274:	d026      	beq.n	80082c4 <decode_mcu_AC_refine+0x254>
	    EOBRUN = 1 << r;	/* EOBr, run length is 2^r + appended bits */
 8008276:	2301      	movs	r3, #1
 8008278:	40b3      	lsls	r3, r6
 800827a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	    if (r) {
 800827e:	2e00      	cmp	r6, #0
 8008280:	f000 80ac 	beq.w	80083dc <decode_mcu_AC_refine+0x36c>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 8008284:	42b4      	cmp	r4, r6
 8008286:	da0e      	bge.n	80082a6 <decode_mcu_AC_refine+0x236>
 8008288:	f507 7088 	add.w	r0, r7, #272	; 0x110
 800828c:	4633      	mov	r3, r6
 800828e:	4622      	mov	r2, r4
 8008290:	4629      	mov	r1, r5
 8008292:	f7ff fb27 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008296:	4603      	mov	r3, r0
 8008298:	2b00      	cmp	r3, #0
 800829a:	f000 8130 	beq.w	80084fe <decode_mcu_AC_refine+0x48e>
 800829e:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 80082a2:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	      r = GET_BITS(r);
 80082a6:	1ba4      	subs	r4, r4, r6
 80082a8:	fa45 f204 	asr.w	r2, r5, r4
 80082ac:	4ba4      	ldr	r3, [pc, #656]	; (8008540 <decode_mcu_AC_refine+0x4d0>)
 80082ae:	f853 3026 	ldr.w	r3, [r3, r6, lsl #2]
 80082b2:	ea02 0603 	and.w	r6, r2, r3
	      EOBRUN += r;
 80082b6:	4632      	mov	r2, r6
 80082b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80082bc:	4413      	add	r3, r2
 80082be:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	    }
	    break;		/* rest of block is handled by EOB logic */
 80082c2:	e08b      	b.n	80083dc <decode_mcu_AC_refine+0x36c>
	/* Advance over already-nonzero coefs and r still-zero coefs,
	 * appending correction bits to the nonzeroes.  A correction bit is 1
	 * if the absolute value of the coefficient must be increased.
	 */
	do {
	  thiscoef = *block + natural_order[k];
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	009b      	lsls	r3, r3, #2
 80082c8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80082cc:	4413      	add	r3, r2
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	005b      	lsls	r3, r3, #1
 80082d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80082d6:	4413      	add	r3, r2
 80082d8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	  if (*thiscoef != 0) {
 80082dc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80082e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d045      	beq.n	8008374 <decode_mcu_AC_refine+0x304>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 80082e8:	2c00      	cmp	r4, #0
 80082ea:	dc0e      	bgt.n	800830a <decode_mcu_AC_refine+0x29a>
 80082ec:	f507 7088 	add.w	r0, r7, #272	; 0x110
 80082f0:	2301      	movs	r3, #1
 80082f2:	4622      	mov	r2, r4
 80082f4:	4629      	mov	r1, r5
 80082f6:	f7ff faf5 	bl	80078e4 <jpeg_fill_bit_buffer>
 80082fa:	4603      	mov	r3, r0
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f000 8100 	beq.w	8008502 <decode_mcu_AC_refine+0x492>
 8008302:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8008306:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	    if (GET_BITS(1)) {
 800830a:	3c01      	subs	r4, #1
 800830c:	fa45 f304 	asr.w	r3, r5, r4
 8008310:	2201      	movs	r2, #1
 8008312:	4013      	ands	r3, r2
 8008314:	2b00      	cmp	r3, #0
 8008316:	d030      	beq.n	800837a <decode_mcu_AC_refine+0x30a>
	      if ((*thiscoef & p1) == 0) { /* do nothing if already set it */
 8008318:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800831c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008320:	461a      	mov	r2, r3
 8008322:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008326:	4013      	ands	r3, r2
 8008328:	2b00      	cmp	r3, #0
 800832a:	d126      	bne.n	800837a <decode_mcu_AC_refine+0x30a>
		if (*thiscoef >= 0)
 800832c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008330:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008334:	2b00      	cmp	r3, #0
 8008336:	db0e      	blt.n	8008356 <decode_mcu_AC_refine+0x2e6>
		  *thiscoef += p1;
 8008338:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800833c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008340:	b29a      	uxth	r2, r3
 8008342:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008346:	b29b      	uxth	r3, r3
 8008348:	4413      	add	r3, r2
 800834a:	b29b      	uxth	r3, r3
 800834c:	b21a      	sxth	r2, r3
 800834e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008352:	801a      	strh	r2, [r3, #0]
 8008354:	e011      	b.n	800837a <decode_mcu_AC_refine+0x30a>
		else
		  *thiscoef += m1;
 8008356:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800835a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800835e:	b29a      	uxth	r2, r3
 8008360:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008364:	b29b      	uxth	r3, r3
 8008366:	4413      	add	r3, r2
 8008368:	b29b      	uxth	r3, r3
 800836a:	b21a      	sxth	r2, r3
 800836c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008370:	801a      	strh	r2, [r3, #0]
 8008372:	e002      	b.n	800837a <decode_mcu_AC_refine+0x30a>
	      }
	    }
	  } else {
	    if (--r < 0)
 8008374:	3e01      	subs	r6, #1
 8008376:	2e00      	cmp	r6, #0
 8008378:	db08      	blt.n	800838c <decode_mcu_AC_refine+0x31c>
	      break;		/* reached target zero coefficient */
	  }
	  k++;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	3301      	adds	r3, #1
 800837e:	461a      	mov	r2, r3
 8008380:	607a      	str	r2, [r7, #4]
	} while (k <= Se);
 8008382:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8008386:	429a      	cmp	r2, r3
 8008388:	dd9c      	ble.n	80082c4 <decode_mcu_AC_refine+0x254>
 800838a:	e000      	b.n	800838e <decode_mcu_AC_refine+0x31e>
	      break;		/* reached target zero coefficient */
 800838c:	bf00      	nop
	if (s) {
 800838e:	6839      	ldr	r1, [r7, #0]
 8008390:	2900      	cmp	r1, #0
 8008392:	d019      	beq.n	80083c8 <decode_mcu_AC_refine+0x358>
	  int pos = natural_order[k];
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	009b      	lsls	r3, r3, #2
 8008398:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800839c:	4413      	add	r3, r2
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
	  /* Output newly nonzero coefficient */
	  (*block)[pos] = (JCOEF) s;
 80083a4:	b209      	sxth	r1, r1
 80083a6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80083aa:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80083ae:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	  /* Remember its position in case we have to suspend */
	  newnz_pos[num_newnz++] = pos;
 80083b2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80083b6:	1c5a      	adds	r2, r3, #1
 80083b8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 80083bc:	f107 0210 	add.w	r2, r7, #16
 80083c0:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80083c4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      for (; k <= Se; k++) {
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	3301      	adds	r3, #1
 80083cc:	607b      	str	r3, [r7, #4]
 80083ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80083d2:	687a      	ldr	r2, [r7, #4]
 80083d4:	429a      	cmp	r2, r3
 80083d6:	f77f aed3 	ble.w	8008180 <decode_mcu_AC_refine+0x110>
 80083da:	e000      	b.n	80083de <decode_mcu_AC_refine+0x36e>
	    break;		/* rest of block is handled by EOB logic */
 80083dc:	bf00      	nop
	}
      }
    }

    if (EOBRUN > 0) {
 80083de:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d063      	beq.n	80084ae <decode_mcu_AC_refine+0x43e>
      /* Scan any remaining coefficient positions after the end-of-band
       * (the last newly nonzero coefficient, if any).  Append a correction
       * bit to each already-nonzero coefficient.  A correction bit is 1
       * if the absolute value of the coefficient must be increased.
       */
      for (; k <= Se; k++) {
 80083e6:	e058      	b.n	800849a <decode_mcu_AC_refine+0x42a>
	thiscoef = *block + natural_order[k];
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	009b      	lsls	r3, r3, #2
 80083ec:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80083f0:	4413      	add	r3, r2
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	005b      	lsls	r3, r3, #1
 80083f6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80083fa:	4413      	add	r3, r2
 80083fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
	if (*thiscoef != 0) {
 8008400:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008404:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008408:	2b00      	cmp	r3, #0
 800840a:	d043      	beq.n	8008494 <decode_mcu_AC_refine+0x424>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 800840c:	2c00      	cmp	r4, #0
 800840e:	dc0d      	bgt.n	800842c <decode_mcu_AC_refine+0x3bc>
 8008410:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8008414:	2301      	movs	r3, #1
 8008416:	4622      	mov	r2, r4
 8008418:	4629      	mov	r1, r5
 800841a:	f7ff fa63 	bl	80078e4 <jpeg_fill_bit_buffer>
 800841e:	4603      	mov	r3, r0
 8008420:	2b00      	cmp	r3, #0
 8008422:	d070      	beq.n	8008506 <decode_mcu_AC_refine+0x496>
 8008424:	f8d7 5118 	ldr.w	r5, [r7, #280]	; 0x118
 8008428:	f8d7 411c 	ldr.w	r4, [r7, #284]	; 0x11c
	  if (GET_BITS(1)) {
 800842c:	3c01      	subs	r4, #1
 800842e:	fa45 f304 	asr.w	r3, r5, r4
 8008432:	2201      	movs	r2, #1
 8008434:	4013      	ands	r3, r2
 8008436:	2b00      	cmp	r3, #0
 8008438:	d02c      	beq.n	8008494 <decode_mcu_AC_refine+0x424>
	    if ((*thiscoef & p1) == 0) { /* do nothing if already changed it */
 800843a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800843e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008442:	461a      	mov	r2, r3
 8008444:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008448:	4013      	ands	r3, r2
 800844a:	2b00      	cmp	r3, #0
 800844c:	d122      	bne.n	8008494 <decode_mcu_AC_refine+0x424>
	      if (*thiscoef >= 0)
 800844e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008452:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008456:	2b00      	cmp	r3, #0
 8008458:	db0e      	blt.n	8008478 <decode_mcu_AC_refine+0x408>
		*thiscoef += p1;
 800845a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800845e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008462:	b29a      	uxth	r2, r3
 8008464:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8008468:	b29b      	uxth	r3, r3
 800846a:	4413      	add	r3, r2
 800846c:	b29b      	uxth	r3, r3
 800846e:	b21a      	sxth	r2, r3
 8008470:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008474:	801a      	strh	r2, [r3, #0]
 8008476:	e00d      	b.n	8008494 <decode_mcu_AC_refine+0x424>
	      else
		*thiscoef += m1;
 8008478:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800847c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8008480:	b29a      	uxth	r2, r3
 8008482:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8008486:	b29b      	uxth	r3, r3
 8008488:	4413      	add	r3, r2
 800848a:	b29b      	uxth	r3, r3
 800848c:	b21a      	sxth	r2, r3
 800848e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8008492:	801a      	strh	r2, [r3, #0]
      for (; k <= Se; k++) {
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	3301      	adds	r3, #1
 8008498:	607b      	str	r3, [r7, #4]
 800849a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	dda1      	ble.n	80083e8 <decode_mcu_AC_refine+0x378>
	    }
	  }
	}
      }
      /* Count one block completed in EOB run */
      EOBRUN--;
 80084a4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80084a8:	3b01      	subs	r3, #1
 80084aa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 80084ae:	f107 030c 	add.w	r3, r7, #12
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	699b      	ldr	r3, [r3, #24]
 80084b6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 80084ba:	601a      	str	r2, [r3, #0]
 80084bc:	f107 030c 	add.w	r3, r7, #12
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	699b      	ldr	r3, [r3, #24]
 80084c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80084c8:	605a      	str	r2, [r3, #4]
 80084ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80084ce:	609d      	str	r5, [r3, #8]
 80084d0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80084d4:	60dc      	str	r4, [r3, #12]
    entropy->saved.EOBRUN = EOBRUN; /* only part of saved state we need */
 80084d6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80084da:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80084de:	611a      	str	r2, [r3, #16]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 80084e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80084e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084e6:	1e5a      	subs	r2, r3, #1
 80084e8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80084ec:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 80084ee:	2301      	movs	r3, #1
 80084f0:	e020      	b.n	8008534 <decode_mcu_AC_refine+0x4c4>
	HUFF_DECODE(s, br_state, tbl, goto undoit, label3);
 80084f2:	bf00      	nop
 80084f4:	e019      	b.n	800852a <decode_mcu_AC_refine+0x4ba>
 80084f6:	bf00      	nop
 80084f8:	e017      	b.n	800852a <decode_mcu_AC_refine+0x4ba>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 80084fa:	bf00      	nop
 80084fc:	e015      	b.n	800852a <decode_mcu_AC_refine+0x4ba>
	      CHECK_BIT_BUFFER(br_state, r, goto undoit);
 80084fe:	bf00      	nop
 8008500:	e013      	b.n	800852a <decode_mcu_AC_refine+0x4ba>
	    CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 8008502:	bf00      	nop
 8008504:	e011      	b.n	800852a <decode_mcu_AC_refine+0x4ba>
	  CHECK_BIT_BUFFER(br_state, 1, goto undoit);
 8008506:	bf00      	nop

undoit:
  /* Re-zero any output coefficients that we made newly nonzero */
  while (num_newnz > 0)
 8008508:	e00f      	b.n	800852a <decode_mcu_AC_refine+0x4ba>
    (*block)[newnz_pos[--num_newnz]] = 0;
 800850a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800850e:	3b01      	subs	r3, #1
 8008510:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 8008514:	f107 0310 	add.w	r3, r7, #16
 8008518:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800851c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008520:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8008524:	2100      	movs	r1, #0
 8008526:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  while (num_newnz > 0)
 800852a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 800852e:	2b00      	cmp	r3, #0
 8008530:	dceb      	bgt.n	800850a <decode_mcu_AC_refine+0x49a>

  return FALSE;
 8008532:	2300      	movs	r3, #0
}
 8008534:	4618      	mov	r0, r3
 8008536:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 800853a:	46bd      	mov	sp, r7
 800853c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008540:	08021524 	.word	0x08021524

08008544 <decode_mcu_sub>:
 * partial blocks.
 */

METHODDEF(boolean)
decode_mcu_sub (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8008544:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008548:	b097      	sub	sp, #92	; 0x5c
 800854a:	af02      	add	r7, sp, #8
 800854c:	6078      	str	r0, [r7, #4]
 800854e:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8008556:	64bb      	str	r3, [r7, #72]	; 0x48
  int Se, blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800855e:	2b00      	cmp	r3, #0
 8008560:	d00b      	beq.n	800857a <decode_mcu_sub+0x36>
    if (entropy->restarts_to_go == 0)
 8008562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008564:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008566:	2b00      	cmp	r3, #0
 8008568:	d107      	bne.n	800857a <decode_mcu_sub+0x36>
      if (! process_restart(cinfo))
 800856a:	6878      	ldr	r0, [r7, #4]
 800856c:	f7ff faa4 	bl	8007ab8 <process_restart>
 8008570:	4603      	mov	r3, r0
 8008572:	2b00      	cmp	r3, #0
 8008574:	d101      	bne.n	800857a <decode_mcu_sub+0x36>
	return FALSE;
 8008576:	2300      	movs	r3, #0
 8008578:	e1d4      	b.n	8008924 <decode_mcu_sub+0x3e0>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800857a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800857c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800857e:	2b00      	cmp	r3, #0
 8008580:	f040 81ca 	bne.w	8008918 <decode_mcu_sub+0x3d4>

    natural_order = cinfo->natural_order;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	f8d3 31ac 	ldr.w	r3, [r3, #428]	; 0x1ac
 800858a:	647b      	str	r3, [r7, #68]	; 0x44
    Se = cinfo->lim_Se;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008592:	643b      	str	r3, [r7, #64]	; 0x40

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	699b      	ldr	r3, [r3, #24]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	61fb      	str	r3, [r7, #28]
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	699b      	ldr	r3, [r3, #24]
 80085a4:	685b      	ldr	r3, [r3, #4]
 80085a6:	623b      	str	r3, [r7, #32]
 80085a8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085aa:	689e      	ldr	r6, [r3, #8]
 80085ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085ae:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 80085b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085b2:	f107 0508 	add.w	r5, r7, #8
 80085b6:	f103 0c10 	add.w	ip, r3, #16
 80085ba:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 80085be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80085c0:	f8dc 3000 	ldr.w	r3, [ip]
 80085c4:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80085c6:	2300      	movs	r3, #0
 80085c8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085ca:	e189      	b.n	80088e0 <decode_mcu_sub+0x39c>
      JBLOCKROW block = MCU_data[blkn];
 80085cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80085ce:	009b      	lsls	r3, r3, #2
 80085d0:	683a      	ldr	r2, [r7, #0]
 80085d2:	4413      	add	r3, r2
 80085d4:	681b      	ldr	r3, [r3, #0]
 80085d6:	63fb      	str	r3, [r7, #60]	; 0x3c
      int coef_limit, ci;

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      htbl = entropy->dc_cur_tbls[blkn];
 80085d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085da:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80085dc:	3218      	adds	r2, #24
 80085de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80085e2:	63bb      	str	r3, [r7, #56]	; 0x38
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 80085e4:	2c07      	cmp	r4, #7
 80085e6:	dc11      	bgt.n	800860c <decode_mcu_sub+0xc8>
 80085e8:	f107 001c 	add.w	r0, r7, #28
 80085ec:	2300      	movs	r3, #0
 80085ee:	4622      	mov	r2, r4
 80085f0:	4631      	mov	r1, r6
 80085f2:	f7ff f977 	bl	80078e4 <jpeg_fill_bit_buffer>
 80085f6:	4603      	mov	r3, r0
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d101      	bne.n	8008600 <decode_mcu_sub+0xbc>
 80085fc:	2300      	movs	r3, #0
 80085fe:	e191      	b.n	8008924 <decode_mcu_sub+0x3e0>
 8008600:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008602:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8008604:	2c07      	cmp	r4, #7
 8008606:	dc01      	bgt.n	800860c <decode_mcu_sub+0xc8>
 8008608:	2501      	movs	r5, #1
 800860a:	e015      	b.n	8008638 <decode_mcu_sub+0xf4>
 800860c:	f1a4 0308 	sub.w	r3, r4, #8
 8008610:	fa46 f303 	asr.w	r3, r6, r3
 8008614:	22ff      	movs	r2, #255	; 0xff
 8008616:	ea03 0802 	and.w	r8, r3, r2
 800861a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800861c:	f108 0224 	add.w	r2, r8, #36	; 0x24
 8008620:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008624:	2d00      	cmp	r5, #0
 8008626:	d006      	beq.n	8008636 <decode_mcu_sub+0xf2>
 8008628:	1b64      	subs	r4, r4, r5
 800862a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800862c:	4443      	add	r3, r8
 800862e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8008632:	461d      	mov	r5, r3
 8008634:	e00f      	b.n	8008656 <decode_mcu_sub+0x112>
 8008636:	2509      	movs	r5, #9
 8008638:	f107 001c 	add.w	r0, r7, #28
 800863c:	9500      	str	r5, [sp, #0]
 800863e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008640:	4622      	mov	r2, r4
 8008642:	4631      	mov	r1, r6
 8008644:	f7ff f9d4 	bl	80079f0 <jpeg_huff_decode>
 8008648:	4605      	mov	r5, r0
 800864a:	2d00      	cmp	r5, #0
 800864c:	da01      	bge.n	8008652 <decode_mcu_sub+0x10e>
 800864e:	2300      	movs	r3, #0
 8008650:	e168      	b.n	8008924 <decode_mcu_sub+0x3e0>
 8008652:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008654:	6abc      	ldr	r4, [r7, #40]	; 0x28

      htbl = entropy->ac_cur_tbls[blkn];
 8008656:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008658:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800865a:	3222      	adds	r2, #34	; 0x22
 800865c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008660:	63bb      	str	r3, [r7, #56]	; 0x38
      k = 1;
 8008662:	f04f 0801 	mov.w	r8, #1
      coef_limit = entropy->coef_limit[blkn];
 8008666:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008668:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800866a:	322c      	adds	r2, #44	; 0x2c
 800866c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008670:	637b      	str	r3, [r7, #52]	; 0x34
      if (coef_limit) {
 8008672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008674:	2b00      	cmp	r3, #0
 8008676:	f000 80bc 	beq.w	80087f2 <decode_mcu_sub+0x2ae>
	/* Convert DC difference to actual value, update last_dc_val */
	if (s) {
 800867a:	2d00      	cmp	r5, #0
 800867c:	d025      	beq.n	80086ca <decode_mcu_sub+0x186>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800867e:	42ac      	cmp	r4, r5
 8008680:	da0d      	bge.n	800869e <decode_mcu_sub+0x15a>
 8008682:	f107 001c 	add.w	r0, r7, #28
 8008686:	462b      	mov	r3, r5
 8008688:	4622      	mov	r2, r4
 800868a:	4631      	mov	r1, r6
 800868c:	f7ff f92a 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008690:	4603      	mov	r3, r0
 8008692:	2b00      	cmp	r3, #0
 8008694:	d101      	bne.n	800869a <decode_mcu_sub+0x156>
 8008696:	2300      	movs	r3, #0
 8008698:	e144      	b.n	8008924 <decode_mcu_sub+0x3e0>
 800869a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800869c:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  r = GET_BITS(s);
 800869e:	1b64      	subs	r4, r4, r5
 80086a0:	fa46 f204 	asr.w	r2, r6, r4
 80086a4:	4ba2      	ldr	r3, [pc, #648]	; (8008930 <decode_mcu_sub+0x3ec>)
 80086a6:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80086aa:	ea02 0903 	and.w	r9, r2, r3
	  s = HUFF_EXTEND(r, s);
 80086ae:	1e6b      	subs	r3, r5, #1
 80086b0:	4a9f      	ldr	r2, [pc, #636]	; (8008930 <decode_mcu_sub+0x3ec>)
 80086b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80086b6:	4599      	cmp	r9, r3
 80086b8:	dc05      	bgt.n	80086c6 <decode_mcu_sub+0x182>
 80086ba:	4b9d      	ldr	r3, [pc, #628]	; (8008930 <decode_mcu_sub+0x3ec>)
 80086bc:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80086c0:	eba9 0303 	sub.w	r3, r9, r3
 80086c4:	e000      	b.n	80086c8 <decode_mcu_sub+0x184>
 80086c6:	464b      	mov	r3, r9
 80086c8:	461d      	mov	r5, r3
	}
	ci = cinfo->MCU_membership[blkn];
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80086ce:	325c      	adds	r2, #92	; 0x5c
 80086d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80086d4:	633b      	str	r3, [r7, #48]	; 0x30
	s += state.last_dc_val[ci];
 80086d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086d8:	009b      	lsls	r3, r3, #2
 80086da:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80086de:	4413      	add	r3, r2
 80086e0:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80086e4:	441d      	add	r5, r3
	state.last_dc_val[ci] = s;
 80086e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086e8:	009b      	lsls	r3, r3, #2
 80086ea:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80086ee:	4413      	add	r3, r2
 80086f0:	f843 5c44 	str.w	r5, [r3, #-68]
	/* Output the DC coefficient */
	(*block)[0] = (JCOEF) s;
 80086f4:	b22a      	sxth	r2, r5
 80086f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80086f8:	801a      	strh	r2, [r3, #0]

	/* Section F.2.2.2: decode the AC coefficients */
	/* Since zeroes are skipped, output area must be cleared beforehand */
	for (; k < coef_limit; k++) {
 80086fa:	e076      	b.n	80087ea <decode_mcu_sub+0x2a6>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 80086fc:	2c07      	cmp	r4, #7
 80086fe:	dc11      	bgt.n	8008724 <decode_mcu_sub+0x1e0>
 8008700:	f107 001c 	add.w	r0, r7, #28
 8008704:	2300      	movs	r3, #0
 8008706:	4622      	mov	r2, r4
 8008708:	4631      	mov	r1, r6
 800870a:	f7ff f8eb 	bl	80078e4 <jpeg_fill_bit_buffer>
 800870e:	4603      	mov	r3, r0
 8008710:	2b00      	cmp	r3, #0
 8008712:	d101      	bne.n	8008718 <decode_mcu_sub+0x1d4>
 8008714:	2300      	movs	r3, #0
 8008716:	e105      	b.n	8008924 <decode_mcu_sub+0x3e0>
 8008718:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800871a:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800871c:	2c07      	cmp	r4, #7
 800871e:	dc01      	bgt.n	8008724 <decode_mcu_sub+0x1e0>
 8008720:	2501      	movs	r5, #1
 8008722:	e015      	b.n	8008750 <decode_mcu_sub+0x20c>
 8008724:	f1a4 0308 	sub.w	r3, r4, #8
 8008728:	fa46 f303 	asr.w	r3, r6, r3
 800872c:	22ff      	movs	r2, #255	; 0xff
 800872e:	ea03 0902 	and.w	r9, r3, r2
 8008732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008734:	f109 0224 	add.w	r2, r9, #36	; 0x24
 8008738:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800873c:	2d00      	cmp	r5, #0
 800873e:	d006      	beq.n	800874e <decode_mcu_sub+0x20a>
 8008740:	1b64      	subs	r4, r4, r5
 8008742:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008744:	444b      	add	r3, r9
 8008746:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 800874a:	461d      	mov	r5, r3
 800874c:	e00f      	b.n	800876e <decode_mcu_sub+0x22a>
 800874e:	2509      	movs	r5, #9
 8008750:	f107 001c 	add.w	r0, r7, #28
 8008754:	9500      	str	r5, [sp, #0]
 8008756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008758:	4622      	mov	r2, r4
 800875a:	4631      	mov	r1, r6
 800875c:	f7ff f948 	bl	80079f0 <jpeg_huff_decode>
 8008760:	4605      	mov	r5, r0
 8008762:	2d00      	cmp	r5, #0
 8008764:	da01      	bge.n	800876a <decode_mcu_sub+0x226>
 8008766:	2300      	movs	r3, #0
 8008768:	e0dc      	b.n	8008924 <decode_mcu_sub+0x3e0>
 800876a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800876c:	6abc      	ldr	r4, [r7, #40]	; 0x28

	  r = s >> 4;
 800876e:	ea4f 1925 	mov.w	r9, r5, asr #4
	  s &= 15;
 8008772:	f005 050f 	and.w	r5, r5, #15

	  if (s) {
 8008776:	2d00      	cmp	r5, #0
 8008778:	d030      	beq.n	80087dc <decode_mcu_sub+0x298>
	    k += r;
 800877a:	44c8      	add	r8, r9
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800877c:	42ac      	cmp	r4, r5
 800877e:	da0d      	bge.n	800879c <decode_mcu_sub+0x258>
 8008780:	f107 001c 	add.w	r0, r7, #28
 8008784:	462b      	mov	r3, r5
 8008786:	4622      	mov	r2, r4
 8008788:	4631      	mov	r1, r6
 800878a:	f7ff f8ab 	bl	80078e4 <jpeg_fill_bit_buffer>
 800878e:	4603      	mov	r3, r0
 8008790:	2b00      	cmp	r3, #0
 8008792:	d101      	bne.n	8008798 <decode_mcu_sub+0x254>
 8008794:	2300      	movs	r3, #0
 8008796:	e0c5      	b.n	8008924 <decode_mcu_sub+0x3e0>
 8008798:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800879a:	6abc      	ldr	r4, [r7, #40]	; 0x28
	    r = GET_BITS(s);
 800879c:	1b64      	subs	r4, r4, r5
 800879e:	fa46 f204 	asr.w	r2, r6, r4
 80087a2:	4b63      	ldr	r3, [pc, #396]	; (8008930 <decode_mcu_sub+0x3ec>)
 80087a4:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80087a8:	ea02 0903 	and.w	r9, r2, r3
	    s = HUFF_EXTEND(r, s);
 80087ac:	1e6b      	subs	r3, r5, #1
 80087ae:	4a60      	ldr	r2, [pc, #384]	; (8008930 <decode_mcu_sub+0x3ec>)
 80087b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80087b4:	4599      	cmp	r9, r3
 80087b6:	dc05      	bgt.n	80087c4 <decode_mcu_sub+0x280>
 80087b8:	4b5d      	ldr	r3, [pc, #372]	; (8008930 <decode_mcu_sub+0x3ec>)
 80087ba:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80087be:	eba9 0303 	sub.w	r3, r9, r3
 80087c2:	e000      	b.n	80087c6 <decode_mcu_sub+0x282>
 80087c4:	464b      	mov	r3, r9
 80087c6:	461d      	mov	r5, r3
	    /* Output coefficient in natural (dezigzagged) order.
	     * Note: the extra entries in natural_order[] will save us
	     * if k > Se, which could happen if the data is corrupted.
	     */
	    (*block)[natural_order[k]] = (JCOEF) s;
 80087c8:	4643      	mov	r3, r8
 80087ca:	009b      	lsls	r3, r3, #2
 80087cc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80087ce:	4413      	add	r3, r2
 80087d0:	681a      	ldr	r2, [r3, #0]
 80087d2:	b229      	sxth	r1, r5
 80087d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80087d6:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 80087da:	e004      	b.n	80087e6 <decode_mcu_sub+0x2a2>
	  } else {
	    if (r != 15)
 80087dc:	f1b9 0f0f 	cmp.w	r9, #15
 80087e0:	d178      	bne.n	80088d4 <decode_mcu_sub+0x390>
	      goto EndOfBlock;
	    k += 15;
 80087e2:	f108 080f 	add.w	r8, r8, #15
	for (; k < coef_limit; k++) {
 80087e6:	f108 0801 	add.w	r8, r8, #1
 80087ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80087ec:	4598      	cmp	r8, r3
 80087ee:	db85      	blt.n	80086fc <decode_mcu_sub+0x1b8>
 80087f0:	e06c      	b.n	80088cc <decode_mcu_sub+0x388>
	  }
	}
      } else {
	if (s) {
 80087f2:	2d00      	cmp	r5, #0
 80087f4:	d06a      	beq.n	80088cc <decode_mcu_sub+0x388>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 80087f6:	42ac      	cmp	r4, r5
 80087f8:	da0d      	bge.n	8008816 <decode_mcu_sub+0x2d2>
 80087fa:	f107 001c 	add.w	r0, r7, #28
 80087fe:	462b      	mov	r3, r5
 8008800:	4622      	mov	r2, r4
 8008802:	4631      	mov	r1, r6
 8008804:	f7ff f86e 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d101      	bne.n	8008812 <decode_mcu_sub+0x2ce>
 800880e:	2300      	movs	r3, #0
 8008810:	e088      	b.n	8008924 <decode_mcu_sub+0x3e0>
 8008812:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008814:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  DROP_BITS(s);
 8008816:	1b64      	subs	r4, r4, r5
	}
      }

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (; k <= Se; k++) {
 8008818:	e058      	b.n	80088cc <decode_mcu_sub+0x388>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 800881a:	2c07      	cmp	r4, #7
 800881c:	dc11      	bgt.n	8008842 <decode_mcu_sub+0x2fe>
 800881e:	f107 001c 	add.w	r0, r7, #28
 8008822:	2300      	movs	r3, #0
 8008824:	4622      	mov	r2, r4
 8008826:	4631      	mov	r1, r6
 8008828:	f7ff f85c 	bl	80078e4 <jpeg_fill_bit_buffer>
 800882c:	4603      	mov	r3, r0
 800882e:	2b00      	cmp	r3, #0
 8008830:	d101      	bne.n	8008836 <decode_mcu_sub+0x2f2>
 8008832:	2300      	movs	r3, #0
 8008834:	e076      	b.n	8008924 <decode_mcu_sub+0x3e0>
 8008836:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008838:	6abc      	ldr	r4, [r7, #40]	; 0x28
 800883a:	2c07      	cmp	r4, #7
 800883c:	dc01      	bgt.n	8008842 <decode_mcu_sub+0x2fe>
 800883e:	2501      	movs	r5, #1
 8008840:	e015      	b.n	800886e <decode_mcu_sub+0x32a>
 8008842:	f1a4 0308 	sub.w	r3, r4, #8
 8008846:	fa46 f303 	asr.w	r3, r6, r3
 800884a:	22ff      	movs	r2, #255	; 0xff
 800884c:	ea03 0902 	and.w	r9, r3, r2
 8008850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008852:	f109 0224 	add.w	r2, r9, #36	; 0x24
 8008856:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 800885a:	2d00      	cmp	r5, #0
 800885c:	d006      	beq.n	800886c <decode_mcu_sub+0x328>
 800885e:	1b64      	subs	r4, r4, r5
 8008860:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008862:	444b      	add	r3, r9
 8008864:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8008868:	461d      	mov	r5, r3
 800886a:	e00f      	b.n	800888c <decode_mcu_sub+0x348>
 800886c:	2509      	movs	r5, #9
 800886e:	f107 001c 	add.w	r0, r7, #28
 8008872:	9500      	str	r5, [sp, #0]
 8008874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008876:	4622      	mov	r2, r4
 8008878:	4631      	mov	r1, r6
 800887a:	f7ff f8b9 	bl	80079f0 <jpeg_huff_decode>
 800887e:	4605      	mov	r5, r0
 8008880:	2d00      	cmp	r5, #0
 8008882:	da01      	bge.n	8008888 <decode_mcu_sub+0x344>
 8008884:	2300      	movs	r3, #0
 8008886:	e04d      	b.n	8008924 <decode_mcu_sub+0x3e0>
 8008888:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800888a:	6abc      	ldr	r4, [r7, #40]	; 0x28

	r = s >> 4;
 800888c:	ea4f 1925 	mov.w	r9, r5, asr #4
	s &= 15;
 8008890:	f005 050f 	and.w	r5, r5, #15

	if (s) {
 8008894:	2d00      	cmp	r5, #0
 8008896:	d012      	beq.n	80088be <decode_mcu_sub+0x37a>
	  k += r;
 8008898:	44c8      	add	r8, r9
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 800889a:	42ac      	cmp	r4, r5
 800889c:	da0d      	bge.n	80088ba <decode_mcu_sub+0x376>
 800889e:	f107 001c 	add.w	r0, r7, #28
 80088a2:	462b      	mov	r3, r5
 80088a4:	4622      	mov	r2, r4
 80088a6:	4631      	mov	r1, r6
 80088a8:	f7ff f81c 	bl	80078e4 <jpeg_fill_bit_buffer>
 80088ac:	4603      	mov	r3, r0
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d101      	bne.n	80088b6 <decode_mcu_sub+0x372>
 80088b2:	2300      	movs	r3, #0
 80088b4:	e036      	b.n	8008924 <decode_mcu_sub+0x3e0>
 80088b6:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80088b8:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  DROP_BITS(s);
 80088ba:	1b64      	subs	r4, r4, r5
 80088bc:	e004      	b.n	80088c8 <decode_mcu_sub+0x384>
	} else {
	  if (r != 15)
 80088be:	f1b9 0f0f 	cmp.w	r9, #15
 80088c2:	d109      	bne.n	80088d8 <decode_mcu_sub+0x394>
	    break;
	  k += 15;
 80088c4:	f108 080f 	add.w	r8, r8, #15
      for (; k <= Se; k++) {
 80088c8:	f108 0801 	add.w	r8, r8, #1
 80088cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80088ce:	4598      	cmp	r8, r3
 80088d0:	dda3      	ble.n	800881a <decode_mcu_sub+0x2d6>
	}
      }

      EndOfBlock: ;
 80088d2:	e002      	b.n	80088da <decode_mcu_sub+0x396>
	      goto EndOfBlock;
 80088d4:	bf00      	nop
 80088d6:	e000      	b.n	80088da <decode_mcu_sub+0x396>
	    break;
 80088d8:	bf00      	nop
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80088da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088dc:	3301      	adds	r3, #1
 80088de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80088e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80088e8:	429a      	cmp	r2, r3
 80088ea:	f6ff ae6f 	blt.w	80085cc <decode_mcu_sub+0x88>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	699b      	ldr	r3, [r3, #24]
 80088f2:	69fa      	ldr	r2, [r7, #28]
 80088f4:	601a      	str	r2, [r3, #0]
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	699b      	ldr	r3, [r3, #24]
 80088fa:	6a3a      	ldr	r2, [r7, #32]
 80088fc:	605a      	str	r2, [r3, #4]
 80088fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008900:	609e      	str	r6, [r3, #8]
 8008902:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008904:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 8008906:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008908:	f103 0410 	add.w	r4, r3, #16
 800890c:	f107 0508 	add.w	r5, r7, #8
 8008910:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008912:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008914:	682b      	ldr	r3, [r5, #0]
 8008916:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 8008918:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800891a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800891c:	1e5a      	subs	r2, r3, #1
 800891e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008920:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 8008922:	2301      	movs	r3, #1
}
 8008924:	4618      	mov	r0, r3
 8008926:	3754      	adds	r7, #84	; 0x54
 8008928:	46bd      	mov	sp, r7
 800892a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800892e:	bf00      	nop
 8008930:	08021524 	.word	0x08021524

08008934 <decode_mcu>:
 * full-size blocks.
 */

METHODDEF(boolean)
decode_mcu (j_decompress_ptr cinfo, JBLOCKROW *MCU_data)
{
 8008934:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008938:	b095      	sub	sp, #84	; 0x54
 800893a:	af02      	add	r7, sp, #8
 800893c:	6078      	str	r0, [r7, #4]
 800893e:	6039      	str	r1, [r7, #0]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8008946:	643b      	str	r3, [r7, #64]	; 0x40
  int blkn;
  BITREAD_STATE_VARS;
  savable_state state;

  /* Process restart marker if needed; may have to suspend */
  if (cinfo->restart_interval) {
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	f8d3 3118 	ldr.w	r3, [r3, #280]	; 0x118
 800894e:	2b00      	cmp	r3, #0
 8008950:	d00b      	beq.n	800896a <decode_mcu+0x36>
    if (entropy->restarts_to_go == 0)
 8008952:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008954:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008956:	2b00      	cmp	r3, #0
 8008958:	d107      	bne.n	800896a <decode_mcu+0x36>
      if (! process_restart(cinfo))
 800895a:	6878      	ldr	r0, [r7, #4]
 800895c:	f7ff f8ac 	bl	8007ab8 <process_restart>
 8008960:	4603      	mov	r3, r0
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <decode_mcu+0x36>
	return FALSE;
 8008966:	2300      	movs	r3, #0
 8008968:	e1ca      	b.n	8008d00 <decode_mcu+0x3cc>
  }

  /* If we've run out of data, just leave the MCU set to zeroes.
   * This way, we return uniform gray for the remainder of the segment.
   */
  if (! entropy->insufficient_data) {
 800896a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800896c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800896e:	2b00      	cmp	r3, #0
 8008970:	f040 81c0 	bne.w	8008cf4 <decode_mcu+0x3c0>

    /* Load up working state */
    BITREAD_LOAD_STATE(cinfo,entropy->bitstate);
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	699b      	ldr	r3, [r3, #24]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	61fb      	str	r3, [r7, #28]
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	699b      	ldr	r3, [r3, #24]
 8008984:	685b      	ldr	r3, [r3, #4]
 8008986:	623b      	str	r3, [r7, #32]
 8008988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898a:	689e      	ldr	r6, [r3, #8]
 800898c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800898e:	68dc      	ldr	r4, [r3, #12]
    ASSIGN_STATE(state, entropy->saved);
 8008990:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008992:	f107 0508 	add.w	r5, r7, #8
 8008996:	f103 0c10 	add.w	ip, r3, #16
 800899a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800899e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80089a0:	f8dc 3000 	ldr.w	r3, [ip]
 80089a4:	602b      	str	r3, [r5, #0]

    /* Outer loop handles each block in the MCU */

    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80089a6:	2300      	movs	r3, #0
 80089a8:	647b      	str	r3, [r7, #68]	; 0x44
 80089aa:	e187      	b.n	8008cbc <decode_mcu+0x388>
      JBLOCKROW block = MCU_data[blkn];
 80089ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80089ae:	009b      	lsls	r3, r3, #2
 80089b0:	683a      	ldr	r2, [r7, #0]
 80089b2:	4413      	add	r3, r2
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	63fb      	str	r3, [r7, #60]	; 0x3c
      int coef_limit, ci;

      /* Decode a single block's worth of coefficients */

      /* Section F.2.2.1: decode the DC coefficient difference */
      htbl = entropy->dc_cur_tbls[blkn];
 80089b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80089bc:	3218      	adds	r2, #24
 80089be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80089c2:	63bb      	str	r3, [r7, #56]	; 0x38
      HUFF_DECODE(s, br_state, htbl, return FALSE, label1);
 80089c4:	2c07      	cmp	r4, #7
 80089c6:	dc11      	bgt.n	80089ec <decode_mcu+0xb8>
 80089c8:	f107 001c 	add.w	r0, r7, #28
 80089cc:	2300      	movs	r3, #0
 80089ce:	4622      	mov	r2, r4
 80089d0:	4631      	mov	r1, r6
 80089d2:	f7fe ff87 	bl	80078e4 <jpeg_fill_bit_buffer>
 80089d6:	4603      	mov	r3, r0
 80089d8:	2b00      	cmp	r3, #0
 80089da:	d101      	bne.n	80089e0 <decode_mcu+0xac>
 80089dc:	2300      	movs	r3, #0
 80089de:	e18f      	b.n	8008d00 <decode_mcu+0x3cc>
 80089e0:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 80089e2:	6abc      	ldr	r4, [r7, #40]	; 0x28
 80089e4:	2c07      	cmp	r4, #7
 80089e6:	dc01      	bgt.n	80089ec <decode_mcu+0xb8>
 80089e8:	2501      	movs	r5, #1
 80089ea:	e015      	b.n	8008a18 <decode_mcu+0xe4>
 80089ec:	f1a4 0308 	sub.w	r3, r4, #8
 80089f0:	fa46 f303 	asr.w	r3, r6, r3
 80089f4:	22ff      	movs	r2, #255	; 0xff
 80089f6:	ea03 0802 	and.w	r8, r3, r2
 80089fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089fc:	f108 0224 	add.w	r2, r8, #36	; 0x24
 8008a00:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008a04:	2d00      	cmp	r5, #0
 8008a06:	d006      	beq.n	8008a16 <decode_mcu+0xe2>
 8008a08:	1b64      	subs	r4, r4, r5
 8008a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a0c:	4443      	add	r3, r8
 8008a0e:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8008a12:	461d      	mov	r5, r3
 8008a14:	e00f      	b.n	8008a36 <decode_mcu+0x102>
 8008a16:	2509      	movs	r5, #9
 8008a18:	f107 001c 	add.w	r0, r7, #28
 8008a1c:	9500      	str	r5, [sp, #0]
 8008a1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008a20:	4622      	mov	r2, r4
 8008a22:	4631      	mov	r1, r6
 8008a24:	f7fe ffe4 	bl	80079f0 <jpeg_huff_decode>
 8008a28:	4605      	mov	r5, r0
 8008a2a:	2d00      	cmp	r5, #0
 8008a2c:	da01      	bge.n	8008a32 <decode_mcu+0xfe>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	e166      	b.n	8008d00 <decode_mcu+0x3cc>
 8008a32:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008a34:	6abc      	ldr	r4, [r7, #40]	; 0x28

      htbl = entropy->ac_cur_tbls[blkn];
 8008a36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a3a:	3222      	adds	r2, #34	; 0x22
 8008a3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a40:	63bb      	str	r3, [r7, #56]	; 0x38
      k = 1;
 8008a42:	f04f 0801 	mov.w	r8, #1
      coef_limit = entropy->coef_limit[blkn];
 8008a46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008a48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008a4a:	322c      	adds	r2, #44	; 0x2c
 8008a4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a50:	637b      	str	r3, [r7, #52]	; 0x34
      if (coef_limit) {
 8008a52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	f000 80ba 	beq.w	8008bce <decode_mcu+0x29a>
	/* Convert DC difference to actual value, update last_dc_val */
	if (s) {
 8008a5a:	2d00      	cmp	r5, #0
 8008a5c:	d025      	beq.n	8008aaa <decode_mcu+0x176>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8008a5e:	42ac      	cmp	r4, r5
 8008a60:	da0d      	bge.n	8008a7e <decode_mcu+0x14a>
 8008a62:	f107 001c 	add.w	r0, r7, #28
 8008a66:	462b      	mov	r3, r5
 8008a68:	4622      	mov	r2, r4
 8008a6a:	4631      	mov	r1, r6
 8008a6c:	f7fe ff3a 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008a70:	4603      	mov	r3, r0
 8008a72:	2b00      	cmp	r3, #0
 8008a74:	d101      	bne.n	8008a7a <decode_mcu+0x146>
 8008a76:	2300      	movs	r3, #0
 8008a78:	e142      	b.n	8008d00 <decode_mcu+0x3cc>
 8008a7a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008a7c:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  r = GET_BITS(s);
 8008a7e:	1b64      	subs	r4, r4, r5
 8008a80:	fa46 f204 	asr.w	r2, r6, r4
 8008a84:	4ba1      	ldr	r3, [pc, #644]	; (8008d0c <decode_mcu+0x3d8>)
 8008a86:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008a8a:	ea02 0903 	and.w	r9, r2, r3
	  s = HUFF_EXTEND(r, s);
 8008a8e:	1e6b      	subs	r3, r5, #1
 8008a90:	4a9e      	ldr	r2, [pc, #632]	; (8008d0c <decode_mcu+0x3d8>)
 8008a92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008a96:	4599      	cmp	r9, r3
 8008a98:	dc05      	bgt.n	8008aa6 <decode_mcu+0x172>
 8008a9a:	4b9c      	ldr	r3, [pc, #624]	; (8008d0c <decode_mcu+0x3d8>)
 8008a9c:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008aa0:	eba9 0303 	sub.w	r3, r9, r3
 8008aa4:	e000      	b.n	8008aa8 <decode_mcu+0x174>
 8008aa6:	464b      	mov	r3, r9
 8008aa8:	461d      	mov	r5, r3
	}
	ci = cinfo->MCU_membership[blkn];
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008aae:	325c      	adds	r2, #92	; 0x5c
 8008ab0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ab4:	633b      	str	r3, [r7, #48]	; 0x30
	s += state.last_dc_val[ci];
 8008ab6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008abe:	4413      	add	r3, r2
 8008ac0:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8008ac4:	441d      	add	r5, r3
	state.last_dc_val[ci] = s;
 8008ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ac8:	009b      	lsls	r3, r3, #2
 8008aca:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8008ace:	4413      	add	r3, r2
 8008ad0:	f843 5c3c 	str.w	r5, [r3, #-60]
	/* Output the DC coefficient */
	(*block)[0] = (JCOEF) s;
 8008ad4:	b22a      	sxth	r2, r5
 8008ad6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ad8:	801a      	strh	r2, [r3, #0]

	/* Section F.2.2.2: decode the AC coefficients */
	/* Since zeroes are skipped, output area must be cleared beforehand */
	for (; k < coef_limit; k++) {
 8008ada:	e074      	b.n	8008bc6 <decode_mcu+0x292>
	  HUFF_DECODE(s, br_state, htbl, return FALSE, label2);
 8008adc:	2c07      	cmp	r4, #7
 8008ade:	dc11      	bgt.n	8008b04 <decode_mcu+0x1d0>
 8008ae0:	f107 001c 	add.w	r0, r7, #28
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	4622      	mov	r2, r4
 8008ae8:	4631      	mov	r1, r6
 8008aea:	f7fe fefb 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008aee:	4603      	mov	r3, r0
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d101      	bne.n	8008af8 <decode_mcu+0x1c4>
 8008af4:	2300      	movs	r3, #0
 8008af6:	e103      	b.n	8008d00 <decode_mcu+0x3cc>
 8008af8:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008afa:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8008afc:	2c07      	cmp	r4, #7
 8008afe:	dc01      	bgt.n	8008b04 <decode_mcu+0x1d0>
 8008b00:	2501      	movs	r5, #1
 8008b02:	e015      	b.n	8008b30 <decode_mcu+0x1fc>
 8008b04:	f1a4 0308 	sub.w	r3, r4, #8
 8008b08:	fa46 f303 	asr.w	r3, r6, r3
 8008b0c:	22ff      	movs	r2, #255	; 0xff
 8008b0e:	ea03 0902 	and.w	r9, r3, r2
 8008b12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b14:	f109 0224 	add.w	r2, r9, #36	; 0x24
 8008b18:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008b1c:	2d00      	cmp	r5, #0
 8008b1e:	d006      	beq.n	8008b2e <decode_mcu+0x1fa>
 8008b20:	1b64      	subs	r4, r4, r5
 8008b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b24:	444b      	add	r3, r9
 8008b26:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8008b2a:	461d      	mov	r5, r3
 8008b2c:	e00f      	b.n	8008b4e <decode_mcu+0x21a>
 8008b2e:	2509      	movs	r5, #9
 8008b30:	f107 001c 	add.w	r0, r7, #28
 8008b34:	9500      	str	r5, [sp, #0]
 8008b36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b38:	4622      	mov	r2, r4
 8008b3a:	4631      	mov	r1, r6
 8008b3c:	f7fe ff58 	bl	80079f0 <jpeg_huff_decode>
 8008b40:	4605      	mov	r5, r0
 8008b42:	2d00      	cmp	r5, #0
 8008b44:	da01      	bge.n	8008b4a <decode_mcu+0x216>
 8008b46:	2300      	movs	r3, #0
 8008b48:	e0da      	b.n	8008d00 <decode_mcu+0x3cc>
 8008b4a:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008b4c:	6abc      	ldr	r4, [r7, #40]	; 0x28

	  r = s >> 4;
 8008b4e:	ea4f 1925 	mov.w	r9, r5, asr #4
	  s &= 15;
 8008b52:	f005 050f 	and.w	r5, r5, #15

	  if (s) {
 8008b56:	2d00      	cmp	r5, #0
 8008b58:	d02e      	beq.n	8008bb8 <decode_mcu+0x284>
	    k += r;
 8008b5a:	44c8      	add	r8, r9
	    CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8008b5c:	42ac      	cmp	r4, r5
 8008b5e:	da0d      	bge.n	8008b7c <decode_mcu+0x248>
 8008b60:	f107 001c 	add.w	r0, r7, #28
 8008b64:	462b      	mov	r3, r5
 8008b66:	4622      	mov	r2, r4
 8008b68:	4631      	mov	r1, r6
 8008b6a:	f7fe febb 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008b6e:	4603      	mov	r3, r0
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d101      	bne.n	8008b78 <decode_mcu+0x244>
 8008b74:	2300      	movs	r3, #0
 8008b76:	e0c3      	b.n	8008d00 <decode_mcu+0x3cc>
 8008b78:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008b7a:	6abc      	ldr	r4, [r7, #40]	; 0x28
	    r = GET_BITS(s);
 8008b7c:	1b64      	subs	r4, r4, r5
 8008b7e:	fa46 f204 	asr.w	r2, r6, r4
 8008b82:	4b62      	ldr	r3, [pc, #392]	; (8008d0c <decode_mcu+0x3d8>)
 8008b84:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008b88:	ea02 0903 	and.w	r9, r2, r3
	    s = HUFF_EXTEND(r, s);
 8008b8c:	1e6b      	subs	r3, r5, #1
 8008b8e:	4a5f      	ldr	r2, [pc, #380]	; (8008d0c <decode_mcu+0x3d8>)
 8008b90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b94:	4599      	cmp	r9, r3
 8008b96:	dc05      	bgt.n	8008ba4 <decode_mcu+0x270>
 8008b98:	4b5c      	ldr	r3, [pc, #368]	; (8008d0c <decode_mcu+0x3d8>)
 8008b9a:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8008b9e:	eba9 0303 	sub.w	r3, r9, r3
 8008ba2:	e000      	b.n	8008ba6 <decode_mcu+0x272>
 8008ba4:	464b      	mov	r3, r9
 8008ba6:	461d      	mov	r5, r3
	    /* Output coefficient in natural (dezigzagged) order.
	     * Note: the extra entries in jpeg_natural_order[] will save us
	     * if k >= DCTSIZE2, which could happen if the data is corrupted.
	     */
	    (*block)[jpeg_natural_order[k]] = (JCOEF) s;
 8008ba8:	4b59      	ldr	r3, [pc, #356]	; (8008d10 <decode_mcu+0x3dc>)
 8008baa:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8008bae:	b229      	sxth	r1, r5
 8008bb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008bb2:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
 8008bb6:	e004      	b.n	8008bc2 <decode_mcu+0x28e>
	  } else {
	    if (r != 15)
 8008bb8:	f1b9 0f0f 	cmp.w	r9, #15
 8008bbc:	d178      	bne.n	8008cb0 <decode_mcu+0x37c>
	      goto EndOfBlock;
	    k += 15;
 8008bbe:	f108 080f 	add.w	r8, r8, #15
	for (; k < coef_limit; k++) {
 8008bc2:	f108 0801 	add.w	r8, r8, #1
 8008bc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bc8:	4598      	cmp	r8, r3
 8008bca:	db87      	blt.n	8008adc <decode_mcu+0x1a8>
 8008bcc:	e06c      	b.n	8008ca8 <decode_mcu+0x374>
	  }
	}
      } else {
	if (s) {
 8008bce:	2d00      	cmp	r5, #0
 8008bd0:	d06a      	beq.n	8008ca8 <decode_mcu+0x374>
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8008bd2:	42ac      	cmp	r4, r5
 8008bd4:	da0d      	bge.n	8008bf2 <decode_mcu+0x2be>
 8008bd6:	f107 001c 	add.w	r0, r7, #28
 8008bda:	462b      	mov	r3, r5
 8008bdc:	4622      	mov	r2, r4
 8008bde:	4631      	mov	r1, r6
 8008be0:	f7fe fe80 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008be4:	4603      	mov	r3, r0
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d101      	bne.n	8008bee <decode_mcu+0x2ba>
 8008bea:	2300      	movs	r3, #0
 8008bec:	e088      	b.n	8008d00 <decode_mcu+0x3cc>
 8008bee:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008bf0:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  DROP_BITS(s);
 8008bf2:	1b64      	subs	r4, r4, r5
	}
      }

      /* Section F.2.2.2: decode the AC coefficients */
      /* In this path we just discard the values */
      for (; k < DCTSIZE2; k++) {
 8008bf4:	e058      	b.n	8008ca8 <decode_mcu+0x374>
	HUFF_DECODE(s, br_state, htbl, return FALSE, label3);
 8008bf6:	2c07      	cmp	r4, #7
 8008bf8:	dc11      	bgt.n	8008c1e <decode_mcu+0x2ea>
 8008bfa:	f107 001c 	add.w	r0, r7, #28
 8008bfe:	2300      	movs	r3, #0
 8008c00:	4622      	mov	r2, r4
 8008c02:	4631      	mov	r1, r6
 8008c04:	f7fe fe6e 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d101      	bne.n	8008c12 <decode_mcu+0x2de>
 8008c0e:	2300      	movs	r3, #0
 8008c10:	e076      	b.n	8008d00 <decode_mcu+0x3cc>
 8008c12:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008c14:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8008c16:	2c07      	cmp	r4, #7
 8008c18:	dc01      	bgt.n	8008c1e <decode_mcu+0x2ea>
 8008c1a:	2501      	movs	r5, #1
 8008c1c:	e015      	b.n	8008c4a <decode_mcu+0x316>
 8008c1e:	f1a4 0308 	sub.w	r3, r4, #8
 8008c22:	fa46 f303 	asr.w	r3, r6, r3
 8008c26:	22ff      	movs	r2, #255	; 0xff
 8008c28:	ea03 0902 	and.w	r9, r3, r2
 8008c2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c2e:	f109 0224 	add.w	r2, r9, #36	; 0x24
 8008c32:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8008c36:	2d00      	cmp	r5, #0
 8008c38:	d006      	beq.n	8008c48 <decode_mcu+0x314>
 8008c3a:	1b64      	subs	r4, r4, r5
 8008c3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c3e:	444b      	add	r3, r9
 8008c40:	f893 3490 	ldrb.w	r3, [r3, #1168]	; 0x490
 8008c44:	461d      	mov	r5, r3
 8008c46:	e00f      	b.n	8008c68 <decode_mcu+0x334>
 8008c48:	2509      	movs	r5, #9
 8008c4a:	f107 001c 	add.w	r0, r7, #28
 8008c4e:	9500      	str	r5, [sp, #0]
 8008c50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c52:	4622      	mov	r2, r4
 8008c54:	4631      	mov	r1, r6
 8008c56:	f7fe fecb 	bl	80079f0 <jpeg_huff_decode>
 8008c5a:	4605      	mov	r5, r0
 8008c5c:	2d00      	cmp	r5, #0
 8008c5e:	da01      	bge.n	8008c64 <decode_mcu+0x330>
 8008c60:	2300      	movs	r3, #0
 8008c62:	e04d      	b.n	8008d00 <decode_mcu+0x3cc>
 8008c64:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008c66:	6abc      	ldr	r4, [r7, #40]	; 0x28

	r = s >> 4;
 8008c68:	ea4f 1925 	mov.w	r9, r5, asr #4
	s &= 15;
 8008c6c:	f005 050f 	and.w	r5, r5, #15

	if (s) {
 8008c70:	2d00      	cmp	r5, #0
 8008c72:	d012      	beq.n	8008c9a <decode_mcu+0x366>
	  k += r;
 8008c74:	44c8      	add	r8, r9
	  CHECK_BIT_BUFFER(br_state, s, return FALSE);
 8008c76:	42ac      	cmp	r4, r5
 8008c78:	da0d      	bge.n	8008c96 <decode_mcu+0x362>
 8008c7a:	f107 001c 	add.w	r0, r7, #28
 8008c7e:	462b      	mov	r3, r5
 8008c80:	4622      	mov	r2, r4
 8008c82:	4631      	mov	r1, r6
 8008c84:	f7fe fe2e 	bl	80078e4 <jpeg_fill_bit_buffer>
 8008c88:	4603      	mov	r3, r0
 8008c8a:	2b00      	cmp	r3, #0
 8008c8c:	d101      	bne.n	8008c92 <decode_mcu+0x35e>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	e036      	b.n	8008d00 <decode_mcu+0x3cc>
 8008c92:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 8008c94:	6abc      	ldr	r4, [r7, #40]	; 0x28
	  DROP_BITS(s);
 8008c96:	1b64      	subs	r4, r4, r5
 8008c98:	e004      	b.n	8008ca4 <decode_mcu+0x370>
	} else {
	  if (r != 15)
 8008c9a:	f1b9 0f0f 	cmp.w	r9, #15
 8008c9e:	d109      	bne.n	8008cb4 <decode_mcu+0x380>
	    break;
	  k += 15;
 8008ca0:	f108 080f 	add.w	r8, r8, #15
      for (; k < DCTSIZE2; k++) {
 8008ca4:	f108 0801 	add.w	r8, r8, #1
 8008ca8:	f1b8 0f3f 	cmp.w	r8, #63	; 0x3f
 8008cac:	dda3      	ble.n	8008bf6 <decode_mcu+0x2c2>
	}
      }

      EndOfBlock: ;
 8008cae:	e002      	b.n	8008cb6 <decode_mcu+0x382>
	      goto EndOfBlock;
 8008cb0:	bf00      	nop
 8008cb2:	e000      	b.n	8008cb6 <decode_mcu+0x382>
	    break;
 8008cb4:	bf00      	nop
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8008cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008cb8:	3301      	adds	r3, #1
 8008cba:	647b      	str	r3, [r7, #68]	; 0x44
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 8008cc2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008cc4:	429a      	cmp	r2, r3
 8008cc6:	f6ff ae71 	blt.w	80089ac <decode_mcu+0x78>
    }

    /* Completed MCU, so update state */
    BITREAD_SAVE_STATE(cinfo,entropy->bitstate);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	699b      	ldr	r3, [r3, #24]
 8008cce:	69fa      	ldr	r2, [r7, #28]
 8008cd0:	601a      	str	r2, [r3, #0]
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	699b      	ldr	r3, [r3, #24]
 8008cd6:	6a3a      	ldr	r2, [r7, #32]
 8008cd8:	605a      	str	r2, [r3, #4]
 8008cda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cdc:	609e      	str	r6, [r3, #8]
 8008cde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce0:	60dc      	str	r4, [r3, #12]
    ASSIGN_STATE(entropy->saved, state);
 8008ce2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008ce4:	f103 0410 	add.w	r4, r3, #16
 8008ce8:	f107 0508 	add.w	r5, r7, #8
 8008cec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008cee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008cf0:	682b      	ldr	r3, [r5, #0]
 8008cf2:	6023      	str	r3, [r4, #0]
  }

  /* Account for restart interval (no-op if not using restarts) */
  entropy->restarts_to_go--;
 8008cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cf6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf8:	1e5a      	subs	r2, r3, #1
 8008cfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cfc:	629a      	str	r2, [r3, #40]	; 0x28

  return TRUE;
 8008cfe:	2301      	movs	r3, #1
}
 8008d00:	4618      	mov	r0, r3
 8008d02:	374c      	adds	r7, #76	; 0x4c
 8008d04:	46bd      	mov	sp, r7
 8008d06:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008d0a:	bf00      	nop
 8008d0c:	08021524 	.word	0x08021524
 8008d10:	08021880 	.word	0x08021880

08008d14 <start_pass_huff_decoder>:
 * Initialize for a Huffman-compressed scan.
 */

METHODDEF(void)
start_pass_huff_decoder (j_decompress_ptr cinfo)
{
 8008d14:	b580      	push	{r7, lr}
 8008d16:	b08c      	sub	sp, #48	; 0x30
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy = (huff_entropy_ptr) cinfo->entropy;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 8008d22:	61fb      	str	r3, [r7, #28]
  int ci, blkn, tbl, i;
  jpeg_component_info * compptr;

  if (cinfo->progressive_mode) {
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	f000 8133 	beq.w	8008f96 <start_pass_huff_decoder+0x282>
    /* Validate progressive scan parameters */
    if (cinfo->Ss == 0) {
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d105      	bne.n	8008d46 <start_pass_huff_decoder+0x32>
      if (cinfo->Se != 0)
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d015      	beq.n	8008d70 <start_pass_huff_decoder+0x5c>
	goto bad;
 8008d44:	e02d      	b.n	8008da2 <start_pass_huff_decoder+0x8e>
    } else {
      /* need not check Ss/Se < 0 since they came from unsigned bytes */
      if (cinfo->Se < cinfo->Ss || cinfo->Se > cinfo->lim_Se)
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008d52:	429a      	cmp	r2, r3
 8008d54:	db20      	blt.n	8008d98 <start_pass_huff_decoder+0x84>
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008d62:	429a      	cmp	r2, r3
 8008d64:	dc18      	bgt.n	8008d98 <start_pass_huff_decoder+0x84>
	goto bad;
      /* AC scans may have only one component */
      if (cinfo->comps_in_scan != 1)
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8008d6c:	2b01      	cmp	r3, #1
 8008d6e:	d115      	bne.n	8008d9c <start_pass_huff_decoder+0x88>
	goto bad;
    }
    if (cinfo->Ah != 0) {
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008d76:	2b00      	cmp	r3, #0
 8008d78:	d008      	beq.n	8008d8c <start_pass_huff_decoder+0x78>
      /* Successive approximation refinement scan: must have Al = Ah-1. */
      if (cinfo->Ah-1 != cinfo->Al)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008d80:	1e5a      	subs	r2, r3, #1
 8008d82:	687b      	ldr	r3, [r7, #4]
 8008d84:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d109      	bne.n	8008da0 <start_pass_huff_decoder+0x8c>
	goto bad;
    }
    if (cinfo->Al > 13) {	/* need not check for < 0 */
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8008d92:	2b0d      	cmp	r3, #13
 8008d94:	dd26      	ble.n	8008de4 <start_pass_huff_decoder+0xd0>
       * but the spec doesn't say so, and we try to be liberal about what we
       * accept.  Note: large Al values could result in out-of-range DC
       * coefficients during early scans, leading to bizarre displays due to
       * overflows in the IDCT math.  But we won't crash.
       */
      bad:
 8008d96:	e004      	b.n	8008da2 <start_pass_huff_decoder+0x8e>
	goto bad;
 8008d98:	bf00      	nop
 8008d9a:	e002      	b.n	8008da2 <start_pass_huff_decoder+0x8e>
	goto bad;
 8008d9c:	bf00      	nop
 8008d9e:	e000      	b.n	8008da2 <start_pass_huff_decoder+0x8e>
	goto bad;
 8008da0:	bf00      	nop
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	2211      	movs	r2, #17
 8008da8:	615a      	str	r2, [r3, #20]
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	687a      	ldr	r2, [r7, #4]
 8008db0:	f8d2 2198 	ldr.w	r2, [r2, #408]	; 0x198
 8008db4:	619a      	str	r2, [r3, #24]
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	687a      	ldr	r2, [r7, #4]
 8008dbc:	f8d2 219c 	ldr.w	r2, [r2, #412]	; 0x19c
 8008dc0:	61da      	str	r2, [r3, #28]
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	681b      	ldr	r3, [r3, #0]
 8008dc6:	687a      	ldr	r2, [r7, #4]
 8008dc8:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 8008dcc:	621a      	str	r2, [r3, #32]
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	687a      	ldr	r2, [r7, #4]
 8008dd4:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8008dd8:	625a      	str	r2, [r3, #36]	; 0x24
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	6878      	ldr	r0, [r7, #4]
 8008de2:	4798      	blx	r3
    }
    /* Update progression status, and verify that scan order is legal.
     * Note that inter-scan inconsistencies are treated as warnings
     * not fatal errors ... not clear if this is right way to behave.
     */
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008de4:	2300      	movs	r3, #0
 8008de6:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008de8:	e064      	b.n	8008eb4 <start_pass_huff_decoder+0x1a0>
      int coefi, cindex = cinfo->cur_comp_info[ci]->component_index;
 8008dea:	687a      	ldr	r2, [r7, #4]
 8008dec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008dee:	3354      	adds	r3, #84	; 0x54
 8008df0:	009b      	lsls	r3, r3, #2
 8008df2:	4413      	add	r3, r2
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	685b      	ldr	r3, [r3, #4]
 8008df8:	613b      	str	r3, [r7, #16]
      int *coef_bit_ptr = & cinfo->coef_bits[cindex][0];
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
 8008e00:	693b      	ldr	r3, [r7, #16]
 8008e02:	021b      	lsls	r3, r3, #8
 8008e04:	4413      	add	r3, r2
 8008e06:	60fb      	str	r3, [r7, #12]
      if (cinfo->Ss && coef_bit_ptr[0] < 0) /* AC without prior DC scan */
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008e0e:	2b00      	cmp	r3, #0
 8008e10:	d016      	beq.n	8008e40 <start_pass_huff_decoder+0x12c>
 8008e12:	68fb      	ldr	r3, [r7, #12]
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	da12      	bge.n	8008e40 <start_pass_huff_decoder+0x12c>
	WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, 0);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	2276      	movs	r2, #118	; 0x76
 8008e20:	615a      	str	r2, [r3, #20]
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	693a      	ldr	r2, [r7, #16]
 8008e28:	619a      	str	r2, [r3, #24]
 8008e2a:	687b      	ldr	r3, [r7, #4]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	61da      	str	r2, [r3, #28]
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	685b      	ldr	r3, [r3, #4]
 8008e38:	f04f 31ff 	mov.w	r1, #4294967295
 8008e3c:	6878      	ldr	r0, [r7, #4]
 8008e3e:	4798      	blx	r3
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008e46:	623b      	str	r3, [r7, #32]
 8008e48:	e02b      	b.n	8008ea2 <start_pass_huff_decoder+0x18e>
	int expected = (coef_bit_ptr[coefi] < 0) ? 0 : coef_bit_ptr[coefi];
 8008e4a:	6a3b      	ldr	r3, [r7, #32]
 8008e4c:	009b      	lsls	r3, r3, #2
 8008e4e:	68fa      	ldr	r2, [r7, #12]
 8008e50:	4413      	add	r3, r2
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008e58:	60bb      	str	r3, [r7, #8]
	if (cinfo->Ah != expected)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008e60:	68ba      	ldr	r2, [r7, #8]
 8008e62:	429a      	cmp	r2, r3
 8008e64:	d012      	beq.n	8008e8c <start_pass_huff_decoder+0x178>
	  WARNMS2(cinfo, JWRN_BOGUS_PROGRESSION, cindex, coefi);
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	2276      	movs	r2, #118	; 0x76
 8008e6c:	615a      	str	r2, [r3, #20]
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	693a      	ldr	r2, [r7, #16]
 8008e74:	619a      	str	r2, [r3, #24]
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	6a3a      	ldr	r2, [r7, #32]
 8008e7c:	61da      	str	r2, [r3, #28]
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	685b      	ldr	r3, [r3, #4]
 8008e84:	f04f 31ff 	mov.w	r1, #4294967295
 8008e88:	6878      	ldr	r0, [r7, #4]
 8008e8a:	4798      	blx	r3
	coef_bit_ptr[coefi] = cinfo->Al;
 8008e8c:	6a3b      	ldr	r3, [r7, #32]
 8008e8e:	009b      	lsls	r3, r3, #2
 8008e90:	68fa      	ldr	r2, [r7, #12]
 8008e92:	4413      	add	r3, r2
 8008e94:	687a      	ldr	r2, [r7, #4]
 8008e96:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 8008e9a:	601a      	str	r2, [r3, #0]
      for (coefi = cinfo->Ss; coefi <= cinfo->Se; coefi++) {
 8008e9c:	6a3b      	ldr	r3, [r7, #32]
 8008e9e:	3301      	adds	r3, #1
 8008ea0:	623b      	str	r3, [r7, #32]
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008ea8:	6a3a      	ldr	r2, [r7, #32]
 8008eaa:	429a      	cmp	r2, r3
 8008eac:	ddcd      	ble.n	8008e4a <start_pass_huff_decoder+0x136>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008eae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb0:	3301      	adds	r3, #1
 8008eb2:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8008eba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ebc:	429a      	cmp	r2, r3
 8008ebe:	db94      	blt.n	8008dea <start_pass_huff_decoder+0xd6>
      }
    }

    /* Select MCU decoding routine */
    if (cinfo->Ah == 0) {
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008ec6:	2b00      	cmp	r3, #0
 8008ec8:	d10c      	bne.n	8008ee4 <start_pass_huff_decoder+0x1d0>
      if (cinfo->Ss == 0)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d103      	bne.n	8008edc <start_pass_huff_decoder+0x1c8>
	entropy->pub.decode_mcu = decode_mcu_DC_first;
 8008ed4:	69fb      	ldr	r3, [r7, #28]
 8008ed6:	4a6a      	ldr	r2, [pc, #424]	; (8009080 <start_pass_huff_decoder+0x36c>)
 8008ed8:	605a      	str	r2, [r3, #4]
 8008eda:	e00f      	b.n	8008efc <start_pass_huff_decoder+0x1e8>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_first;
 8008edc:	69fb      	ldr	r3, [r7, #28]
 8008ede:	4a69      	ldr	r2, [pc, #420]	; (8009084 <start_pass_huff_decoder+0x370>)
 8008ee0:	605a      	str	r2, [r3, #4]
 8008ee2:	e00b      	b.n	8008efc <start_pass_huff_decoder+0x1e8>
    } else {
      if (cinfo->Ss == 0)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008eea:	2b00      	cmp	r3, #0
 8008eec:	d103      	bne.n	8008ef6 <start_pass_huff_decoder+0x1e2>
	entropy->pub.decode_mcu = decode_mcu_DC_refine;
 8008eee:	69fb      	ldr	r3, [r7, #28]
 8008ef0:	4a65      	ldr	r2, [pc, #404]	; (8009088 <start_pass_huff_decoder+0x374>)
 8008ef2:	605a      	str	r2, [r3, #4]
 8008ef4:	e002      	b.n	8008efc <start_pass_huff_decoder+0x1e8>
      else
	entropy->pub.decode_mcu = decode_mcu_AC_refine;
 8008ef6:	69fb      	ldr	r3, [r7, #28]
 8008ef8:	4a64      	ldr	r2, [pc, #400]	; (800908c <start_pass_huff_decoder+0x378>)
 8008efa:	605a      	str	r2, [r3, #4]
    }

    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008efc:	2300      	movs	r3, #0
 8008efe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f00:	e03f      	b.n	8008f82 <start_pass_huff_decoder+0x26e>
      compptr = cinfo->cur_comp_info[ci];
 8008f02:	687a      	ldr	r2, [r7, #4]
 8008f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f06:	3354      	adds	r3, #84	; 0x54
 8008f08:	009b      	lsls	r3, r3, #2
 8008f0a:	4413      	add	r3, r2
 8008f0c:	685b      	ldr	r3, [r3, #4]
 8008f0e:	61bb      	str	r3, [r7, #24]
      /* Make sure requested tables are present, and compute derived tables.
       * We may build same derived table more than once, but it's not expensive.
       */
      if (cinfo->Ss == 0) {
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d113      	bne.n	8008f42 <start_pass_huff_decoder+0x22e>
	if (cinfo->Ah == 0) {	/* DC refinement needs no table */
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d124      	bne.n	8008f6e <start_pass_huff_decoder+0x25a>
	  tbl = compptr->dc_tbl_no;
 8008f24:	69bb      	ldr	r3, [r7, #24]
 8008f26:	695b      	ldr	r3, [r3, #20]
 8008f28:	617b      	str	r3, [r7, #20]
	  jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	330a      	adds	r3, #10
 8008f2e:	009b      	lsls	r3, r3, #2
 8008f30:	69fa      	ldr	r2, [r7, #28]
 8008f32:	4413      	add	r3, r2
 8008f34:	3304      	adds	r3, #4
 8008f36:	697a      	ldr	r2, [r7, #20]
 8008f38:	2101      	movs	r1, #1
 8008f3a:	6878      	ldr	r0, [r7, #4]
 8008f3c:	f7fe fab4 	bl	80074a8 <jpeg_make_d_derived_tbl>
 8008f40:	e015      	b.n	8008f6e <start_pass_huff_decoder+0x25a>
				  & entropy->derived_tbls[tbl]);
	}
      } else {
	tbl = compptr->ac_tbl_no;
 8008f42:	69bb      	ldr	r3, [r7, #24]
 8008f44:	699b      	ldr	r3, [r3, #24]
 8008f46:	617b      	str	r3, [r7, #20]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 8008f48:	697b      	ldr	r3, [r7, #20]
 8008f4a:	330a      	adds	r3, #10
 8008f4c:	009b      	lsls	r3, r3, #2
 8008f4e:	69fa      	ldr	r2, [r7, #28]
 8008f50:	4413      	add	r3, r2
 8008f52:	3304      	adds	r3, #4
 8008f54:	697a      	ldr	r2, [r7, #20]
 8008f56:	2100      	movs	r1, #0
 8008f58:	6878      	ldr	r0, [r7, #4]
 8008f5a:	f7fe faa5 	bl	80074a8 <jpeg_make_d_derived_tbl>
				& entropy->derived_tbls[tbl]);
	/* remember the single active table */
	entropy->ac_derived_tbl = entropy->derived_tbls[tbl];
 8008f5e:	69fa      	ldr	r2, [r7, #28]
 8008f60:	697b      	ldr	r3, [r7, #20]
 8008f62:	330a      	adds	r3, #10
 8008f64:	009b      	lsls	r3, r3, #2
 8008f66:	4413      	add	r3, r2
 8008f68:	685a      	ldr	r2, [r3, #4]
 8008f6a:	69fb      	ldr	r3, [r7, #28]
 8008f6c:	63da      	str	r2, [r3, #60]	; 0x3c
      }
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
 8008f6e:	69fa      	ldr	r2, [r7, #28]
 8008f70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f72:	3304      	adds	r3, #4
 8008f74:	009b      	lsls	r3, r3, #2
 8008f76:	4413      	add	r3, r2
 8008f78:	2200      	movs	r2, #0
 8008f7a:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8008f7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7e:	3301      	adds	r3, #1
 8008f80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8008f88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f8a:	429a      	cmp	r2, r3
 8008f8c:	dbb9      	blt.n	8008f02 <start_pass_huff_decoder+0x1ee>
    }

    /* Initialize private state variables */
    entropy->saved.EOBRUN = 0;
 8008f8e:	69fb      	ldr	r3, [r7, #28]
 8008f90:	2200      	movs	r2, #0
 8008f92:	611a      	str	r2, [r3, #16]
 8008f94:	e21a      	b.n	80093cc <start_pass_huff_decoder+0x6b8>
  } else {
    /* Check that the scan parameters Ss, Se, Ah/Al are OK for sequential JPEG.
     * This ought to be an error condition, but we make it a warning because
     * there are some baseline files out there with all zeroes in these bytes.
     */
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	f8d3 3198 	ldr.w	r3, [r3, #408]	; 0x198
 8008f9c:	2b00      	cmp	r3, #0
 8008f9e:	d11b      	bne.n	8008fd8 <start_pass_huff_decoder+0x2c4>
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	f8d3 31a0 	ldr.w	r3, [r3, #416]	; 0x1a0
 8008fa6:	2b00      	cmp	r3, #0
 8008fa8:	d116      	bne.n	8008fd8 <start_pass_huff_decoder+0x2c4>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8d3 31a4 	ldr.w	r3, [r3, #420]	; 0x1a4
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d111      	bne.n	8008fd8 <start_pass_huff_decoder+0x2c4>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
    if (cinfo->Ss != 0 || cinfo->Ah != 0 || cinfo->Al != 0 ||
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d104      	bne.n	8008fc8 <start_pass_huff_decoder+0x2b4>
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8008fc4:	2b3f      	cmp	r3, #63	; 0x3f
 8008fc6:	dc12      	bgt.n	8008fee <start_pass_huff_decoder+0x2da>
	cinfo->Se != cinfo->lim_Se))
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
	((cinfo->is_baseline || cinfo->Se < DCTSIZE2) &&
 8008fd4:	429a      	cmp	r2, r3
 8008fd6:	d00a      	beq.n	8008fee <start_pass_huff_decoder+0x2da>
      WARNMS(cinfo, JWRN_NOT_SEQUENTIAL);
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	227d      	movs	r2, #125	; 0x7d
 8008fde:	615a      	str	r2, [r3, #20]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	685b      	ldr	r3, [r3, #4]
 8008fe6:	f04f 31ff 	mov.w	r1, #4294967295
 8008fea:	6878      	ldr	r0, [r7, #4]
 8008fec:	4798      	blx	r3
     * This is not necessary, but it appears that this version is slightly
     * more performant in the given implementation.
     * With an improved implementation we would prefer a single optimized
     * function.
     */
    if (cinfo->lim_Se != DCTSIZE2-1)
 8008fee:	687b      	ldr	r3, [r7, #4]
 8008ff0:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 8008ff4:	2b3f      	cmp	r3, #63	; 0x3f
 8008ff6:	d003      	beq.n	8009000 <start_pass_huff_decoder+0x2ec>
      entropy->pub.decode_mcu = decode_mcu_sub;
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	4a25      	ldr	r2, [pc, #148]	; (8009090 <start_pass_huff_decoder+0x37c>)
 8008ffc:	605a      	str	r2, [r3, #4]
 8008ffe:	e002      	b.n	8009006 <start_pass_huff_decoder+0x2f2>
    else
      entropy->pub.decode_mcu = decode_mcu;
 8009000:	69fb      	ldr	r3, [r7, #28]
 8009002:	4a24      	ldr	r2, [pc, #144]	; (8009094 <start_pass_huff_decoder+0x380>)
 8009004:	605a      	str	r2, [r3, #4]

    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009006:	2300      	movs	r3, #0
 8009008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800900a:	e02f      	b.n	800906c <start_pass_huff_decoder+0x358>
      compptr = cinfo->cur_comp_info[ci];
 800900c:	687a      	ldr	r2, [r7, #4]
 800900e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009010:	3354      	adds	r3, #84	; 0x54
 8009012:	009b      	lsls	r3, r3, #2
 8009014:	4413      	add	r3, r2
 8009016:	685b      	ldr	r3, [r3, #4]
 8009018:	61bb      	str	r3, [r7, #24]
      /* Compute derived values for Huffman tables */
      /* We may do this more than once for a table, but it's not expensive */
      tbl = compptr->dc_tbl_no;
 800901a:	69bb      	ldr	r3, [r7, #24]
 800901c:	695b      	ldr	r3, [r3, #20]
 800901e:	617b      	str	r3, [r7, #20]
      jpeg_make_d_derived_tbl(cinfo, TRUE, tbl,
 8009020:	697b      	ldr	r3, [r7, #20]
 8009022:	3310      	adds	r3, #16
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	69fa      	ldr	r2, [r7, #28]
 8009028:	4413      	add	r3, r2
 800902a:	697a      	ldr	r2, [r7, #20]
 800902c:	2101      	movs	r1, #1
 800902e:	6878      	ldr	r0, [r7, #4]
 8009030:	f7fe fa3a 	bl	80074a8 <jpeg_make_d_derived_tbl>
			      & entropy->dc_derived_tbls[tbl]);
      if (cinfo->lim_Se) {	/* AC needs no table when not present */
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d00c      	beq.n	8009058 <start_pass_huff_decoder+0x344>
	tbl = compptr->ac_tbl_no;
 800903e:	69bb      	ldr	r3, [r7, #24]
 8009040:	699b      	ldr	r3, [r3, #24]
 8009042:	617b      	str	r3, [r7, #20]
	jpeg_make_d_derived_tbl(cinfo, FALSE, tbl,
 8009044:	697b      	ldr	r3, [r7, #20]
 8009046:	3314      	adds	r3, #20
 8009048:	009b      	lsls	r3, r3, #2
 800904a:	69fa      	ldr	r2, [r7, #28]
 800904c:	4413      	add	r3, r2
 800904e:	697a      	ldr	r2, [r7, #20]
 8009050:	2100      	movs	r1, #0
 8009052:	6878      	ldr	r0, [r7, #4]
 8009054:	f7fe fa28 	bl	80074a8 <jpeg_make_d_derived_tbl>
				& entropy->ac_derived_tbls[tbl]);
      }
      /* Initialize DC predictions to 0 */
      entropy->saved.last_dc_val[ci] = 0;
 8009058:	69fa      	ldr	r2, [r7, #28]
 800905a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800905c:	3304      	adds	r3, #4
 800905e:	009b      	lsls	r3, r3, #2
 8009060:	4413      	add	r3, r2
 8009062:	2200      	movs	r2, #0
 8009064:	605a      	str	r2, [r3, #4]
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 8009066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009068:	3301      	adds	r3, #1
 800906a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 8009072:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009074:	429a      	cmp	r2, r3
 8009076:	dbc9      	blt.n	800900c <start_pass_huff_decoder+0x2f8>
    }

    /* Precalculate decoding info for each block in an MCU of this scan */
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 8009078:	2300      	movs	r3, #0
 800907a:	62bb      	str	r3, [r7, #40]	; 0x28
 800907c:	e19f      	b.n	80093be <start_pass_huff_decoder+0x6aa>
 800907e:	bf00      	nop
 8009080:	08007b55 	.word	0x08007b55
 8009084:	08007d51 	.word	0x08007d51
 8009088:	08007f81 	.word	0x08007f81
 800908c:	08008071 	.word	0x08008071
 8009090:	08008545 	.word	0x08008545
 8009094:	08008935 	.word	0x08008935
      ci = cinfo->MCU_membership[blkn];
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800909c:	325c      	adds	r2, #92	; 0x5c
 800909e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80090a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      compptr = cinfo->cur_comp_info[ci];
 80090a4:	687a      	ldr	r2, [r7, #4]
 80090a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090a8:	3354      	adds	r3, #84	; 0x54
 80090aa:	009b      	lsls	r3, r3, #2
 80090ac:	4413      	add	r3, r2
 80090ae:	685b      	ldr	r3, [r3, #4]
 80090b0:	61bb      	str	r3, [r7, #24]
      /* Precalculate which table to use for each block */
      entropy->dc_cur_tbls[blkn] = entropy->dc_derived_tbls[compptr->dc_tbl_no];
 80090b2:	69bb      	ldr	r3, [r7, #24]
 80090b4:	695a      	ldr	r2, [r3, #20]
 80090b6:	69fb      	ldr	r3, [r7, #28]
 80090b8:	3210      	adds	r2, #16
 80090ba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090be:	69fb      	ldr	r3, [r7, #28]
 80090c0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090c2:	3218      	adds	r2, #24
 80090c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      entropy->ac_cur_tbls[blkn] = entropy->ac_derived_tbls[compptr->ac_tbl_no];
 80090c8:	69bb      	ldr	r3, [r7, #24]
 80090ca:	699a      	ldr	r2, [r3, #24]
 80090cc:	69fb      	ldr	r3, [r7, #28]
 80090ce:	3214      	adds	r2, #20
 80090d0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80090d4:	69fb      	ldr	r3, [r7, #28]
 80090d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80090d8:	3222      	adds	r2, #34	; 0x22
 80090da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      /* Decide whether we really care about the coefficient values */
      if (compptr->component_needed) {
 80090de:	69bb      	ldr	r3, [r7, #24]
 80090e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 8162 	beq.w	80093ac <start_pass_huff_decoder+0x698>
	ci = compptr->DCT_v_scaled_size;
 80090e8:	69bb      	ldr	r3, [r7, #24]
 80090ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	i = compptr->DCT_h_scaled_size;
 80090ee:	69bb      	ldr	r3, [r7, #24]
 80090f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090f2:	627b      	str	r3, [r7, #36]	; 0x24
	switch (cinfo->lim_Se) {
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	f8d3 31b0 	ldr.w	r3, [r3, #432]	; 0x1b0
 80090fa:	2b30      	cmp	r3, #48	; 0x30
 80090fc:	f200 8136 	bhi.w	800936c <start_pass_huff_decoder+0x658>
 8009100:	a201      	add	r2, pc, #4	; (adr r2, 8009108 <start_pass_huff_decoder+0x3f4>)
 8009102:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009106:	bf00      	nop
 8009108:	080091cd 	.word	0x080091cd
 800910c:	0800936d 	.word	0x0800936d
 8009110:	0800936d 	.word	0x0800936d
 8009114:	080091db 	.word	0x080091db
 8009118:	0800936d 	.word	0x0800936d
 800911c:	0800936d 	.word	0x0800936d
 8009120:	0800936d 	.word	0x0800936d
 8009124:	0800936d 	.word	0x0800936d
 8009128:	0800921b 	.word	0x0800921b
 800912c:	0800936d 	.word	0x0800936d
 8009130:	0800936d 	.word	0x0800936d
 8009134:	0800936d 	.word	0x0800936d
 8009138:	0800936d 	.word	0x0800936d
 800913c:	0800936d 	.word	0x0800936d
 8009140:	0800936d 	.word	0x0800936d
 8009144:	0800925f 	.word	0x0800925f
 8009148:	0800936d 	.word	0x0800936d
 800914c:	0800936d 	.word	0x0800936d
 8009150:	0800936d 	.word	0x0800936d
 8009154:	0800936d 	.word	0x0800936d
 8009158:	0800936d 	.word	0x0800936d
 800915c:	0800936d 	.word	0x0800936d
 8009160:	0800936d 	.word	0x0800936d
 8009164:	0800936d 	.word	0x0800936d
 8009168:	0800929f 	.word	0x0800929f
 800916c:	0800936d 	.word	0x0800936d
 8009170:	0800936d 	.word	0x0800936d
 8009174:	0800936d 	.word	0x0800936d
 8009178:	0800936d 	.word	0x0800936d
 800917c:	0800936d 	.word	0x0800936d
 8009180:	0800936d 	.word	0x0800936d
 8009184:	0800936d 	.word	0x0800936d
 8009188:	0800936d 	.word	0x0800936d
 800918c:	0800936d 	.word	0x0800936d
 8009190:	0800936d 	.word	0x0800936d
 8009194:	080092e3 	.word	0x080092e3
 8009198:	0800936d 	.word	0x0800936d
 800919c:	0800936d 	.word	0x0800936d
 80091a0:	0800936d 	.word	0x0800936d
 80091a4:	0800936d 	.word	0x0800936d
 80091a8:	0800936d 	.word	0x0800936d
 80091ac:	0800936d 	.word	0x0800936d
 80091b0:	0800936d 	.word	0x0800936d
 80091b4:	0800936d 	.word	0x0800936d
 80091b8:	0800936d 	.word	0x0800936d
 80091bc:	0800936d 	.word	0x0800936d
 80091c0:	0800936d 	.word	0x0800936d
 80091c4:	0800936d 	.word	0x0800936d
 80091c8:	08009329 	.word	0x08009329
	case (1*1-1):
	  entropy->coef_limit[blkn] = 1;
 80091cc:	69fb      	ldr	r3, [r7, #28]
 80091ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80091d0:	322c      	adds	r2, #44	; 0x2c
 80091d2:	2101      	movs	r1, #1
 80091d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 80091d8:	e0ee      	b.n	80093b8 <start_pass_huff_decoder+0x6a4>
	case (2*2-1):
	  if (ci <= 0 || ci > 2) ci = 2;
 80091da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091dc:	2b00      	cmp	r3, #0
 80091de:	dd02      	ble.n	80091e6 <start_pass_huff_decoder+0x4d2>
 80091e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091e2:	2b02      	cmp	r3, #2
 80091e4:	dd01      	ble.n	80091ea <start_pass_huff_decoder+0x4d6>
 80091e6:	2302      	movs	r3, #2
 80091e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 2) i = 2;
 80091ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	dd02      	ble.n	80091f6 <start_pass_huff_decoder+0x4e2>
 80091f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091f2:	2b02      	cmp	r3, #2
 80091f4:	dd01      	ble.n	80091fa <start_pass_huff_decoder+0x4e6>
 80091f6:	2302      	movs	r3, #2
 80091f8:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order2[ci - 1][i - 1];
 80091fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80091fc:	1e5a      	subs	r2, r3, #1
 80091fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009200:	3b01      	subs	r3, #1
 8009202:	497b      	ldr	r1, [pc, #492]	; (80093f0 <start_pass_huff_decoder+0x6dc>)
 8009204:	0052      	lsls	r2, r2, #1
 8009206:	4413      	add	r3, r2
 8009208:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800920c:	1c59      	adds	r1, r3, #1
 800920e:	69fb      	ldr	r3, [r7, #28]
 8009210:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009212:	322c      	adds	r2, #44	; 0x2c
 8009214:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 8009218:	e0ce      	b.n	80093b8 <start_pass_huff_decoder+0x6a4>
	case (3*3-1):
	  if (ci <= 0 || ci > 3) ci = 3;
 800921a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800921c:	2b00      	cmp	r3, #0
 800921e:	dd02      	ble.n	8009226 <start_pass_huff_decoder+0x512>
 8009220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009222:	2b03      	cmp	r3, #3
 8009224:	dd01      	ble.n	800922a <start_pass_huff_decoder+0x516>
 8009226:	2303      	movs	r3, #3
 8009228:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 3) i = 3;
 800922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800922c:	2b00      	cmp	r3, #0
 800922e:	dd02      	ble.n	8009236 <start_pass_huff_decoder+0x522>
 8009230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009232:	2b03      	cmp	r3, #3
 8009234:	dd01      	ble.n	800923a <start_pass_huff_decoder+0x526>
 8009236:	2303      	movs	r3, #3
 8009238:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order3[ci - 1][i - 1];
 800923a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800923c:	1e5a      	subs	r2, r3, #1
 800923e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009240:	1e59      	subs	r1, r3, #1
 8009242:	486c      	ldr	r0, [pc, #432]	; (80093f4 <start_pass_huff_decoder+0x6e0>)
 8009244:	4613      	mov	r3, r2
 8009246:	005b      	lsls	r3, r3, #1
 8009248:	4413      	add	r3, r2
 800924a:	440b      	add	r3, r1
 800924c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8009250:	1c59      	adds	r1, r3, #1
 8009252:	69fb      	ldr	r3, [r7, #28]
 8009254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009256:	322c      	adds	r2, #44	; 0x2c
 8009258:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800925c:	e0ac      	b.n	80093b8 <start_pass_huff_decoder+0x6a4>
	case (4*4-1):
	  if (ci <= 0 || ci > 4) ci = 4;
 800925e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009260:	2b00      	cmp	r3, #0
 8009262:	dd02      	ble.n	800926a <start_pass_huff_decoder+0x556>
 8009264:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009266:	2b04      	cmp	r3, #4
 8009268:	dd01      	ble.n	800926e <start_pass_huff_decoder+0x55a>
 800926a:	2304      	movs	r3, #4
 800926c:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 4) i = 4;
 800926e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009270:	2b00      	cmp	r3, #0
 8009272:	dd02      	ble.n	800927a <start_pass_huff_decoder+0x566>
 8009274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009276:	2b04      	cmp	r3, #4
 8009278:	dd01      	ble.n	800927e <start_pass_huff_decoder+0x56a>
 800927a:	2304      	movs	r3, #4
 800927c:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order4[ci - 1][i - 1];
 800927e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009280:	1e5a      	subs	r2, r3, #1
 8009282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009284:	3b01      	subs	r3, #1
 8009286:	495c      	ldr	r1, [pc, #368]	; (80093f8 <start_pass_huff_decoder+0x6e4>)
 8009288:	0092      	lsls	r2, r2, #2
 800928a:	4413      	add	r3, r2
 800928c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8009290:	1c59      	adds	r1, r3, #1
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009296:	322c      	adds	r2, #44	; 0x2c
 8009298:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800929c:	e08c      	b.n	80093b8 <start_pass_huff_decoder+0x6a4>
	case (5*5-1):
	  if (ci <= 0 || ci > 5) ci = 5;
 800929e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a0:	2b00      	cmp	r3, #0
 80092a2:	dd02      	ble.n	80092aa <start_pass_huff_decoder+0x596>
 80092a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092a6:	2b05      	cmp	r3, #5
 80092a8:	dd01      	ble.n	80092ae <start_pass_huff_decoder+0x59a>
 80092aa:	2305      	movs	r3, #5
 80092ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 5) i = 5;
 80092ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b0:	2b00      	cmp	r3, #0
 80092b2:	dd02      	ble.n	80092ba <start_pass_huff_decoder+0x5a6>
 80092b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092b6:	2b05      	cmp	r3, #5
 80092b8:	dd01      	ble.n	80092be <start_pass_huff_decoder+0x5aa>
 80092ba:	2305      	movs	r3, #5
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order5[ci - 1][i - 1];
 80092be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092c0:	1e5a      	subs	r2, r3, #1
 80092c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c4:	1e59      	subs	r1, r3, #1
 80092c6:	484d      	ldr	r0, [pc, #308]	; (80093fc <start_pass_huff_decoder+0x6e8>)
 80092c8:	4613      	mov	r3, r2
 80092ca:	009b      	lsls	r3, r3, #2
 80092cc:	4413      	add	r3, r2
 80092ce:	440b      	add	r3, r1
 80092d0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80092d4:	1c59      	adds	r1, r3, #1
 80092d6:	69fb      	ldr	r3, [r7, #28]
 80092d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80092da:	322c      	adds	r2, #44	; 0x2c
 80092dc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 80092e0:	e06a      	b.n	80093b8 <start_pass_huff_decoder+0x6a4>
	case (6*6-1):
	  if (ci <= 0 || ci > 6) ci = 6;
 80092e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	dd02      	ble.n	80092ee <start_pass_huff_decoder+0x5da>
 80092e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80092ea:	2b06      	cmp	r3, #6
 80092ec:	dd01      	ble.n	80092f2 <start_pass_huff_decoder+0x5de>
 80092ee:	2306      	movs	r3, #6
 80092f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 6) i = 6;
 80092f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	dd02      	ble.n	80092fe <start_pass_huff_decoder+0x5ea>
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	2b06      	cmp	r3, #6
 80092fc:	dd01      	ble.n	8009302 <start_pass_huff_decoder+0x5ee>
 80092fe:	2306      	movs	r3, #6
 8009300:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order6[ci - 1][i - 1];
 8009302:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009304:	1e5a      	subs	r2, r3, #1
 8009306:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009308:	1e59      	subs	r1, r3, #1
 800930a:	483d      	ldr	r0, [pc, #244]	; (8009400 <start_pass_huff_decoder+0x6ec>)
 800930c:	4613      	mov	r3, r2
 800930e:	005b      	lsls	r3, r3, #1
 8009310:	4413      	add	r3, r2
 8009312:	005b      	lsls	r3, r3, #1
 8009314:	440b      	add	r3, r1
 8009316:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800931a:	1c59      	adds	r1, r3, #1
 800931c:	69fb      	ldr	r3, [r7, #28]
 800931e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009320:	322c      	adds	r2, #44	; 0x2c
 8009322:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 8009326:	e047      	b.n	80093b8 <start_pass_huff_decoder+0x6a4>
	case (7*7-1):
	  if (ci <= 0 || ci > 7) ci = 7;
 8009328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800932a:	2b00      	cmp	r3, #0
 800932c:	dd02      	ble.n	8009334 <start_pass_huff_decoder+0x620>
 800932e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009330:	2b07      	cmp	r3, #7
 8009332:	dd01      	ble.n	8009338 <start_pass_huff_decoder+0x624>
 8009334:	2307      	movs	r3, #7
 8009336:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 7) i = 7;
 8009338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933a:	2b00      	cmp	r3, #0
 800933c:	dd02      	ble.n	8009344 <start_pass_huff_decoder+0x630>
 800933e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009340:	2b07      	cmp	r3, #7
 8009342:	dd01      	ble.n	8009348 <start_pass_huff_decoder+0x634>
 8009344:	2307      	movs	r3, #7
 8009346:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order7[ci - 1][i - 1];
 8009348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800934a:	1e5a      	subs	r2, r3, #1
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	1e59      	subs	r1, r3, #1
 8009350:	482c      	ldr	r0, [pc, #176]	; (8009404 <start_pass_huff_decoder+0x6f0>)
 8009352:	4613      	mov	r3, r2
 8009354:	00db      	lsls	r3, r3, #3
 8009356:	1a9b      	subs	r3, r3, r2
 8009358:	440b      	add	r3, r1
 800935a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 800935e:	1c59      	adds	r1, r3, #1
 8009360:	69fb      	ldr	r3, [r7, #28]
 8009362:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009364:	322c      	adds	r2, #44	; 0x2c
 8009366:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 800936a:	e025      	b.n	80093b8 <start_pass_huff_decoder+0x6a4>
	default:
	  if (ci <= 0 || ci > 8) ci = 8;
 800936c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800936e:	2b00      	cmp	r3, #0
 8009370:	dd02      	ble.n	8009378 <start_pass_huff_decoder+0x664>
 8009372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009374:	2b08      	cmp	r3, #8
 8009376:	dd01      	ble.n	800937c <start_pass_huff_decoder+0x668>
 8009378:	2308      	movs	r3, #8
 800937a:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if (i <= 0 || i > 8) i = 8;
 800937c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937e:	2b00      	cmp	r3, #0
 8009380:	dd02      	ble.n	8009388 <start_pass_huff_decoder+0x674>
 8009382:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009384:	2b08      	cmp	r3, #8
 8009386:	dd01      	ble.n	800938c <start_pass_huff_decoder+0x678>
 8009388:	2308      	movs	r3, #8
 800938a:	627b      	str	r3, [r7, #36]	; 0x24
	  entropy->coef_limit[blkn] = 1 + jpeg_zigzag_order[ci - 1][i - 1];
 800938c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800938e:	1e5a      	subs	r2, r3, #1
 8009390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009392:	3b01      	subs	r3, #1
 8009394:	491c      	ldr	r1, [pc, #112]	; (8009408 <start_pass_huff_decoder+0x6f4>)
 8009396:	00d2      	lsls	r2, r2, #3
 8009398:	4413      	add	r3, r2
 800939a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800939e:	1c59      	adds	r1, r3, #1
 80093a0:	69fb      	ldr	r3, [r7, #28]
 80093a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093a4:	322c      	adds	r2, #44	; 0x2c
 80093a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	  break;
 80093aa:	e005      	b.n	80093b8 <start_pass_huff_decoder+0x6a4>
	}
      } else {
	entropy->coef_limit[blkn] = 0;
 80093ac:	69fb      	ldr	r3, [r7, #28]
 80093ae:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093b0:	322c      	adds	r2, #44	; 0x2c
 80093b2:	2100      	movs	r1, #0
 80093b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (blkn = 0; blkn < cinfo->blocks_in_MCU; blkn++) {
 80093b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093ba:	3301      	adds	r3, #1
 80093bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 80093c4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80093c6:	429a      	cmp	r2, r3
 80093c8:	f6ff ae66 	blt.w	8009098 <start_pass_huff_decoder+0x384>
      }
    }
  }

  /* Initialize bitread state variables */
  entropy->bitstate.bits_left = 0;
 80093cc:	69fb      	ldr	r3, [r7, #28]
 80093ce:	2200      	movs	r2, #0
 80093d0:	60da      	str	r2, [r3, #12]
  entropy->bitstate.get_buffer = 0; /* unnecessary, but keeps Purify quiet */
 80093d2:	69fb      	ldr	r3, [r7, #28]
 80093d4:	2200      	movs	r2, #0
 80093d6:	609a      	str	r2, [r3, #8]
  entropy->insufficient_data = FALSE;
 80093d8:	69fb      	ldr	r3, [r7, #28]
 80093da:	2200      	movs	r2, #0
 80093dc:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize restart counter */
  entropy->restarts_to_go = cinfo->restart_interval;
 80093de:	687b      	ldr	r3, [r7, #4]
 80093e0:	f8d3 2118 	ldr.w	r2, [r3, #280]	; 0x118
 80093e4:	69fb      	ldr	r3, [r7, #28]
 80093e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80093e8:	bf00      	nop
 80093ea:	3730      	adds	r7, #48	; 0x30
 80093ec:	46bd      	mov	sp, r7
 80093ee:	bd80      	pop	{r7, pc}
 80093f0:	08021514 	.word	0x08021514
 80093f4:	080214f0 	.word	0x080214f0
 80093f8:	080214b0 	.word	0x080214b0
 80093fc:	0802144c 	.word	0x0802144c
 8009400:	080213bc 	.word	0x080213bc
 8009404:	080212f8 	.word	0x080212f8
 8009408:	080211f8 	.word	0x080211f8

0800940c <jinit_huff_decoder>:
 * Module initialization routine for Huffman entropy decoding.
 */

GLOBAL(void)
jinit_huff_decoder (j_decompress_ptr cinfo)
{
 800940c:	b580      	push	{r7, lr}
 800940e:	b086      	sub	sp, #24
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
  huff_entropy_ptr entropy;
  int i;

  entropy = (huff_entropy_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	681b      	ldr	r3, [r3, #0]
 800941a:	22d8      	movs	r2, #216	; 0xd8
 800941c:	2101      	movs	r1, #1
 800941e:	6878      	ldr	r0, [r7, #4]
 8009420:	4798      	blx	r3
 8009422:	60b8      	str	r0, [r7, #8]
				SIZEOF(huff_entropy_decoder));
  cinfo->entropy = (struct jpeg_entropy_decoder *) entropy;
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	68ba      	ldr	r2, [r7, #8]
 8009428:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
  entropy->pub.start_pass = start_pass_huff_decoder;
 800942c:	68bb      	ldr	r3, [r7, #8]
 800942e:	4a30      	ldr	r2, [pc, #192]	; (80094f0 <jinit_huff_decoder+0xe4>)
 8009430:	601a      	str	r2, [r3, #0]

  if (cinfo->progressive_mode) {
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009438:	2b00      	cmp	r3, #0
 800943a:	d03b      	beq.n	80094b4 <jinit_huff_decoder+0xa8>
    /* Create progression status table */
    int *coef_bit_ptr, ci;
    cinfo->coef_bits = (int (*)[DCTSIZE2])
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	685b      	ldr	r3, [r3, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
				  cinfo->num_components*DCTSIZE2*SIZEOF(int));
 8009442:	687a      	ldr	r2, [r7, #4]
 8009444:	6a52      	ldr	r2, [r2, #36]	; 0x24
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 8009446:	0212      	lsls	r2, r2, #8
 8009448:	2101      	movs	r1, #1
 800944a:	6878      	ldr	r0, [r7, #4]
 800944c:	4798      	blx	r3
 800944e:	4602      	mov	r2, r0
    cinfo->coef_bits = (int (*)[DCTSIZE2])
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    coef_bit_ptr = & cinfo->coef_bits[0][0];
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 800945c:	613b      	str	r3, [r7, #16]
    for (ci = 0; ci < cinfo->num_components; ci++)
 800945e:	2300      	movs	r3, #0
 8009460:	60fb      	str	r3, [r7, #12]
 8009462:	e011      	b.n	8009488 <jinit_huff_decoder+0x7c>
      for (i = 0; i < DCTSIZE2; i++)
 8009464:	2300      	movs	r3, #0
 8009466:	617b      	str	r3, [r7, #20]
 8009468:	e008      	b.n	800947c <jinit_huff_decoder+0x70>
	*coef_bit_ptr++ = -1;
 800946a:	693b      	ldr	r3, [r7, #16]
 800946c:	1d1a      	adds	r2, r3, #4
 800946e:	613a      	str	r2, [r7, #16]
 8009470:	f04f 32ff 	mov.w	r2, #4294967295
 8009474:	601a      	str	r2, [r3, #0]
      for (i = 0; i < DCTSIZE2; i++)
 8009476:	697b      	ldr	r3, [r7, #20]
 8009478:	3301      	adds	r3, #1
 800947a:	617b      	str	r3, [r7, #20]
 800947c:	697b      	ldr	r3, [r7, #20]
 800947e:	2b3f      	cmp	r3, #63	; 0x3f
 8009480:	ddf3      	ble.n	800946a <jinit_huff_decoder+0x5e>
    for (ci = 0; ci < cinfo->num_components; ci++)
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3301      	adds	r3, #1
 8009486:	60fb      	str	r3, [r7, #12]
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800948c:	68fa      	ldr	r2, [r7, #12]
 800948e:	429a      	cmp	r2, r3
 8009490:	dbe8      	blt.n	8009464 <jinit_huff_decoder+0x58>

    /* Mark derived tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 8009492:	2300      	movs	r3, #0
 8009494:	617b      	str	r3, [r7, #20]
 8009496:	e009      	b.n	80094ac <jinit_huff_decoder+0xa0>
      entropy->derived_tbls[i] = NULL;
 8009498:	68ba      	ldr	r2, [r7, #8]
 800949a:	697b      	ldr	r3, [r7, #20]
 800949c:	330a      	adds	r3, #10
 800949e:	009b      	lsls	r3, r3, #2
 80094a0:	4413      	add	r3, r2
 80094a2:	2200      	movs	r2, #0
 80094a4:	605a      	str	r2, [r3, #4]
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 80094a6:	697b      	ldr	r3, [r7, #20]
 80094a8:	3301      	adds	r3, #1
 80094aa:	617b      	str	r3, [r7, #20]
 80094ac:	697b      	ldr	r3, [r7, #20]
 80094ae:	2b03      	cmp	r3, #3
 80094b0:	ddf2      	ble.n	8009498 <jinit_huff_decoder+0x8c>
    /* Mark tables unallocated */
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
    }
  }
}
 80094b2:	e018      	b.n	80094e6 <jinit_huff_decoder+0xda>
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 80094b4:	2300      	movs	r3, #0
 80094b6:	617b      	str	r3, [r7, #20]
 80094b8:	e012      	b.n	80094e0 <jinit_huff_decoder+0xd4>
      entropy->dc_derived_tbls[i] = entropy->ac_derived_tbls[i] = NULL;
 80094ba:	68bb      	ldr	r3, [r7, #8]
 80094bc:	697a      	ldr	r2, [r7, #20]
 80094be:	3214      	adds	r2, #20
 80094c0:	2100      	movs	r1, #0
 80094c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 80094c6:	68bb      	ldr	r3, [r7, #8]
 80094c8:	697a      	ldr	r2, [r7, #20]
 80094ca:	3214      	adds	r2, #20
 80094cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80094d0:	68bb      	ldr	r3, [r7, #8]
 80094d2:	697a      	ldr	r2, [r7, #20]
 80094d4:	3210      	adds	r2, #16
 80094d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    for (i = 0; i < NUM_HUFF_TBLS; i++) {
 80094da:	697b      	ldr	r3, [r7, #20]
 80094dc:	3301      	adds	r3, #1
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	697b      	ldr	r3, [r7, #20]
 80094e2:	2b03      	cmp	r3, #3
 80094e4:	dde9      	ble.n	80094ba <jinit_huff_decoder+0xae>
}
 80094e6:	bf00      	nop
 80094e8:	3718      	adds	r7, #24
 80094ea:	46bd      	mov	sp, r7
 80094ec:	bd80      	pop	{r7, pc}
 80094ee:	bf00      	nop
 80094f0:	08008d15 	.word	0x08008d15

080094f4 <jpeg_core_output_dimensions>:
GLOBAL(void)
jpeg_core_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase.
 * This function is used for transcoding and full decompression.
 */
{
 80094f4:	b580      	push	{r7, lr}
 80094f6:	b084      	sub	sp, #16
 80094f8:	af00      	add	r7, sp, #0
 80094fa:	6078      	str	r0, [r7, #4]
#ifdef IDCT_SCALING_SUPPORTED
  int ci;
  jpeg_component_info *compptr;

  /* Compute actual output image dimensions and DCT scaling choices. */
  if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom) {
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009500:	687a      	ldr	r2, [r7, #4]
 8009502:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 8009506:	fb02 f203 	mul.w	r2, r2, r3
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800950e:	429a      	cmp	r2, r3
 8009510:	d824      	bhi.n	800955c <jpeg_core_output_dimensions+0x68>
    /* Provide 1/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width, (long) cinfo->block_size);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	69db      	ldr	r3, [r3, #28]
 8009516:	461a      	mov	r2, r3
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800951e:	4619      	mov	r1, r3
 8009520:	4610      	mov	r0, r2
 8009522:	f015 fea9 	bl	801f278 <jdiv_round_up>
 8009526:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009528:	461a      	mov	r2, r3
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height, (long) cinfo->block_size);
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	6a1b      	ldr	r3, [r3, #32]
 8009532:	461a      	mov	r2, r3
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800953a:	4619      	mov	r1, r3
 800953c:	4610      	mov	r0, r2
 800953e:	f015 fe9b 	bl	801f278 <jdiv_round_up>
 8009542:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 8009544:	461a      	mov	r2, r3
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 1;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	2201      	movs	r2, #1
 800954e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 1;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2201      	movs	r2, #1
 8009556:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800955a:	e349      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 2) {
 800955c:	687b      	ldr	r3, [r7, #4]
 800955e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009560:	687a      	ldr	r2, [r7, #4]
 8009562:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 8009566:	fb02 f203 	mul.w	r2, r2, r3
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800956e:	005b      	lsls	r3, r3, #1
 8009570:	429a      	cmp	r2, r3
 8009572:	d824      	bhi.n	80095be <jpeg_core_output_dimensions+0xca>
    /* Provide 2/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 2L, (long) cinfo->block_size);
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	69db      	ldr	r3, [r3, #28]
 8009578:	005a      	lsls	r2, r3, #1
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009580:	4619      	mov	r1, r3
 8009582:	4610      	mov	r0, r2
 8009584:	f015 fe78 	bl	801f278 <jdiv_round_up>
 8009588:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800958a:	461a      	mov	r2, r3
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 2L, (long) cinfo->block_size);
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6a1b      	ldr	r3, [r3, #32]
 8009594:	005a      	lsls	r2, r3, #1
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800959c:	4619      	mov	r1, r3
 800959e:	4610      	mov	r0, r2
 80095a0:	f015 fe6a 	bl	801f278 <jdiv_round_up>
 80095a4:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 80095a6:	461a      	mov	r2, r3
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 2;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	2202      	movs	r2, #2
 80095b0:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 2;
 80095b4:	687b      	ldr	r3, [r7, #4]
 80095b6:	2202      	movs	r2, #2
 80095b8:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80095bc:	e318      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 3) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80095c2:	687a      	ldr	r2, [r7, #4]
 80095c4:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 80095c8:	fb02 f103 	mul.w	r1, r2, r3
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095d0:	4613      	mov	r3, r2
 80095d2:	005b      	lsls	r3, r3, #1
 80095d4:	4413      	add	r3, r2
 80095d6:	4299      	cmp	r1, r3
 80095d8:	d82a      	bhi.n	8009630 <jpeg_core_output_dimensions+0x13c>
    /* Provide 3/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 3L, (long) cinfo->block_size);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	69db      	ldr	r3, [r3, #28]
 80095de:	461a      	mov	r2, r3
 80095e0:	4613      	mov	r3, r2
 80095e2:	005b      	lsls	r3, r3, #1
 80095e4:	441a      	add	r2, r3
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80095ec:	4619      	mov	r1, r3
 80095ee:	4610      	mov	r0, r2
 80095f0:	f015 fe42 	bl	801f278 <jdiv_round_up>
 80095f4:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 80095f6:	461a      	mov	r2, r3
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 3L, (long) cinfo->block_size);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6a1b      	ldr	r3, [r3, #32]
 8009600:	461a      	mov	r2, r3
 8009602:	4613      	mov	r3, r2
 8009604:	005b      	lsls	r3, r3, #1
 8009606:	441a      	add	r2, r3
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800960e:	4619      	mov	r1, r3
 8009610:	4610      	mov	r0, r2
 8009612:	f015 fe31 	bl	801f278 <jdiv_round_up>
 8009616:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 8009618:	461a      	mov	r2, r3
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 3;
 800961e:	687b      	ldr	r3, [r7, #4]
 8009620:	2203      	movs	r2, #3
 8009622:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 3;
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	2203      	movs	r2, #3
 800962a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800962e:	e2df      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 4) {
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009634:	687a      	ldr	r2, [r7, #4]
 8009636:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800963a:	fb02 f203 	mul.w	r2, r2, r3
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009642:	009b      	lsls	r3, r3, #2
 8009644:	429a      	cmp	r2, r3
 8009646:	d824      	bhi.n	8009692 <jpeg_core_output_dimensions+0x19e>
    /* Provide 4/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 4L, (long) cinfo->block_size);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	69db      	ldr	r3, [r3, #28]
 800964c:	009a      	lsls	r2, r3, #2
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009654:	4619      	mov	r1, r3
 8009656:	4610      	mov	r0, r2
 8009658:	f015 fe0e 	bl	801f278 <jdiv_round_up>
 800965c:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800965e:	461a      	mov	r2, r3
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 4L, (long) cinfo->block_size);
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6a1b      	ldr	r3, [r3, #32]
 8009668:	009a      	lsls	r2, r3, #2
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009670:	4619      	mov	r1, r3
 8009672:	4610      	mov	r0, r2
 8009674:	f015 fe00 	bl	801f278 <jdiv_round_up>
 8009678:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800967a:	461a      	mov	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 4;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2204      	movs	r2, #4
 8009684:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 4;
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	2204      	movs	r2, #4
 800968c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8009690:	e2ae      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 5) {
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009696:	687a      	ldr	r2, [r7, #4]
 8009698:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800969c:	fb02 f103 	mul.w	r1, r2, r3
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80096a4:	4613      	mov	r3, r2
 80096a6:	009b      	lsls	r3, r3, #2
 80096a8:	4413      	add	r3, r2
 80096aa:	4299      	cmp	r1, r3
 80096ac:	d82a      	bhi.n	8009704 <jpeg_core_output_dimensions+0x210>
    /* Provide 5/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 5L, (long) cinfo->block_size);
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	69db      	ldr	r3, [r3, #28]
 80096b2:	461a      	mov	r2, r3
 80096b4:	4613      	mov	r3, r2
 80096b6:	009b      	lsls	r3, r3, #2
 80096b8:	441a      	add	r2, r3
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80096c0:	4619      	mov	r1, r3
 80096c2:	4610      	mov	r0, r2
 80096c4:	f015 fdd8 	bl	801f278 <jdiv_round_up>
 80096c8:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 80096ca:	461a      	mov	r2, r3
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 5L, (long) cinfo->block_size);
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6a1b      	ldr	r3, [r3, #32]
 80096d4:	461a      	mov	r2, r3
 80096d6:	4613      	mov	r3, r2
 80096d8:	009b      	lsls	r3, r3, #2
 80096da:	441a      	add	r2, r3
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80096e2:	4619      	mov	r1, r3
 80096e4:	4610      	mov	r0, r2
 80096e6:	f015 fdc7 	bl	801f278 <jdiv_round_up>
 80096ea:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 80096ec:	461a      	mov	r2, r3
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 5;
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	2205      	movs	r2, #5
 80096f6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 5;
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	2205      	movs	r2, #5
 80096fe:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8009702:	e275      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 6) {
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009708:	687a      	ldr	r2, [r7, #4]
 800970a:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800970e:	fb02 f103 	mul.w	r1, r2, r3
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009716:	4613      	mov	r3, r2
 8009718:	005b      	lsls	r3, r3, #1
 800971a:	4413      	add	r3, r2
 800971c:	005b      	lsls	r3, r3, #1
 800971e:	4299      	cmp	r1, r3
 8009720:	d82e      	bhi.n	8009780 <jpeg_core_output_dimensions+0x28c>
    /* Provide 6/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 6L, (long) cinfo->block_size);
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	69db      	ldr	r3, [r3, #28]
 8009726:	461a      	mov	r2, r3
 8009728:	4613      	mov	r3, r2
 800972a:	005b      	lsls	r3, r3, #1
 800972c:	4413      	add	r3, r2
 800972e:	005b      	lsls	r3, r3, #1
 8009730:	461a      	mov	r2, r3
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009738:	4619      	mov	r1, r3
 800973a:	4610      	mov	r0, r2
 800973c:	f015 fd9c 	bl	801f278 <jdiv_round_up>
 8009740:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009742:	461a      	mov	r2, r3
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 6L, (long) cinfo->block_size);
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6a1b      	ldr	r3, [r3, #32]
 800974c:	461a      	mov	r2, r3
 800974e:	4613      	mov	r3, r2
 8009750:	005b      	lsls	r3, r3, #1
 8009752:	4413      	add	r3, r2
 8009754:	005b      	lsls	r3, r3, #1
 8009756:	461a      	mov	r2, r3
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800975e:	4619      	mov	r1, r3
 8009760:	4610      	mov	r0, r2
 8009762:	f015 fd89 	bl	801f278 <jdiv_round_up>
 8009766:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 8009768:	461a      	mov	r2, r3
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 6;
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	2206      	movs	r2, #6
 8009772:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 6;
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	2206      	movs	r2, #6
 800977a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 800977e:	e237      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 7) {
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009784:	687a      	ldr	r2, [r7, #4]
 8009786:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800978a:	fb02 f103 	mul.w	r1, r2, r3
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009792:	4613      	mov	r3, r2
 8009794:	00db      	lsls	r3, r3, #3
 8009796:	1a9b      	subs	r3, r3, r2
 8009798:	4299      	cmp	r1, r3
 800979a:	d82a      	bhi.n	80097f2 <jpeg_core_output_dimensions+0x2fe>
    /* Provide 7/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 7L, (long) cinfo->block_size);
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	69db      	ldr	r3, [r3, #28]
 80097a0:	461a      	mov	r2, r3
 80097a2:	4613      	mov	r3, r2
 80097a4:	00db      	lsls	r3, r3, #3
 80097a6:	1a9a      	subs	r2, r3, r2
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80097ae:	4619      	mov	r1, r3
 80097b0:	4610      	mov	r0, r2
 80097b2:	f015 fd61 	bl	801f278 <jdiv_round_up>
 80097b6:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 80097b8:	461a      	mov	r2, r3
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 7L, (long) cinfo->block_size);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	461a      	mov	r2, r3
 80097c4:	4613      	mov	r3, r2
 80097c6:	00db      	lsls	r3, r3, #3
 80097c8:	1a9a      	subs	r2, r3, r2
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80097d0:	4619      	mov	r1, r3
 80097d2:	4610      	mov	r0, r2
 80097d4:	f015 fd50 	bl	801f278 <jdiv_round_up>
 80097d8:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 80097da:	461a      	mov	r2, r3
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 7;
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	2207      	movs	r2, #7
 80097e4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 7;
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	2207      	movs	r2, #7
 80097ec:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80097f0:	e1fe      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 8) {
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80097f6:	687a      	ldr	r2, [r7, #4]
 80097f8:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 80097fc:	fb02 f203 	mul.w	r2, r2, r3
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009804:	00db      	lsls	r3, r3, #3
 8009806:	429a      	cmp	r2, r3
 8009808:	d824      	bhi.n	8009854 <jpeg_core_output_dimensions+0x360>
    /* Provide 8/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 8L, (long) cinfo->block_size);
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	69db      	ldr	r3, [r3, #28]
 800980e:	00da      	lsls	r2, r3, #3
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009816:	4619      	mov	r1, r3
 8009818:	4610      	mov	r0, r2
 800981a:	f015 fd2d 	bl	801f278 <jdiv_round_up>
 800981e:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009820:	461a      	mov	r2, r3
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 8L, (long) cinfo->block_size);
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	00da      	lsls	r2, r3, #3
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009832:	4619      	mov	r1, r3
 8009834:	4610      	mov	r0, r2
 8009836:	f015 fd1f 	bl	801f278 <jdiv_round_up>
 800983a:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800983c:	461a      	mov	r2, r3
 800983e:	687b      	ldr	r3, [r7, #4]
 8009840:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 8;
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	2208      	movs	r2, #8
 8009846:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 8;
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	2208      	movs	r2, #8
 800984e:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8009852:	e1cd      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 9) {
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009858:	687a      	ldr	r2, [r7, #4]
 800985a:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800985e:	fb02 f103 	mul.w	r1, r2, r3
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009866:	4613      	mov	r3, r2
 8009868:	00db      	lsls	r3, r3, #3
 800986a:	4413      	add	r3, r2
 800986c:	4299      	cmp	r1, r3
 800986e:	d82a      	bhi.n	80098c6 <jpeg_core_output_dimensions+0x3d2>
    /* Provide 9/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 9L, (long) cinfo->block_size);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	69db      	ldr	r3, [r3, #28]
 8009874:	461a      	mov	r2, r3
 8009876:	4613      	mov	r3, r2
 8009878:	00db      	lsls	r3, r3, #3
 800987a:	441a      	add	r2, r3
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009882:	4619      	mov	r1, r3
 8009884:	4610      	mov	r0, r2
 8009886:	f015 fcf7 	bl	801f278 <jdiv_round_up>
 800988a:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 800988c:	461a      	mov	r2, r3
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 9L, (long) cinfo->block_size);
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	6a1b      	ldr	r3, [r3, #32]
 8009896:	461a      	mov	r2, r3
 8009898:	4613      	mov	r3, r2
 800989a:	00db      	lsls	r3, r3, #3
 800989c:	441a      	add	r2, r3
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80098a4:	4619      	mov	r1, r3
 80098a6:	4610      	mov	r0, r2
 80098a8:	f015 fce6 	bl	801f278 <jdiv_round_up>
 80098ac:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 80098ae:	461a      	mov	r2, r3
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 9;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2209      	movs	r2, #9
 80098b8:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 9;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2209      	movs	r2, #9
 80098c0:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80098c4:	e194      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 10) {
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 80098d0:	fb02 f103 	mul.w	r1, r2, r3
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80098d8:	4613      	mov	r3, r2
 80098da:	009b      	lsls	r3, r3, #2
 80098dc:	4413      	add	r3, r2
 80098de:	005b      	lsls	r3, r3, #1
 80098e0:	4299      	cmp	r1, r3
 80098e2:	d82e      	bhi.n	8009942 <jpeg_core_output_dimensions+0x44e>
    /* Provide 10/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 10L, (long) cinfo->block_size);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	69db      	ldr	r3, [r3, #28]
 80098e8:	461a      	mov	r2, r3
 80098ea:	4613      	mov	r3, r2
 80098ec:	009b      	lsls	r3, r3, #2
 80098ee:	4413      	add	r3, r2
 80098f0:	005b      	lsls	r3, r3, #1
 80098f2:	461a      	mov	r2, r3
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80098fa:	4619      	mov	r1, r3
 80098fc:	4610      	mov	r0, r2
 80098fe:	f015 fcbb 	bl	801f278 <jdiv_round_up>
 8009902:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009904:	461a      	mov	r2, r3
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 10L, (long) cinfo->block_size);
 800990a:	687b      	ldr	r3, [r7, #4]
 800990c:	6a1b      	ldr	r3, [r3, #32]
 800990e:	461a      	mov	r2, r3
 8009910:	4613      	mov	r3, r2
 8009912:	009b      	lsls	r3, r3, #2
 8009914:	4413      	add	r3, r2
 8009916:	005b      	lsls	r3, r3, #1
 8009918:	461a      	mov	r2, r3
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009920:	4619      	mov	r1, r3
 8009922:	4610      	mov	r0, r2
 8009924:	f015 fca8 	bl	801f278 <jdiv_round_up>
 8009928:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 800992a:	461a      	mov	r2, r3
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 10;
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	220a      	movs	r2, #10
 8009934:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 10;
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	220a      	movs	r2, #10
 800993c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8009940:	e156      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 11) {
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009946:	687a      	ldr	r2, [r7, #4]
 8009948:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800994c:	fb02 f103 	mul.w	r1, r2, r3
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009954:	4613      	mov	r3, r2
 8009956:	009b      	lsls	r3, r3, #2
 8009958:	4413      	add	r3, r2
 800995a:	005b      	lsls	r3, r3, #1
 800995c:	4413      	add	r3, r2
 800995e:	4299      	cmp	r1, r3
 8009960:	d82e      	bhi.n	80099c0 <jpeg_core_output_dimensions+0x4cc>
    /* Provide 11/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 11L, (long) cinfo->block_size);
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	69db      	ldr	r3, [r3, #28]
 8009966:	461a      	mov	r2, r3
 8009968:	4613      	mov	r3, r2
 800996a:	009b      	lsls	r3, r3, #2
 800996c:	4413      	add	r3, r2
 800996e:	005b      	lsls	r3, r3, #1
 8009970:	441a      	add	r2, r3
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009978:	4619      	mov	r1, r3
 800997a:	4610      	mov	r0, r2
 800997c:	f015 fc7c 	bl	801f278 <jdiv_round_up>
 8009980:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009982:	461a      	mov	r2, r3
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 11L, (long) cinfo->block_size);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	6a1b      	ldr	r3, [r3, #32]
 800998c:	461a      	mov	r2, r3
 800998e:	4613      	mov	r3, r2
 8009990:	009b      	lsls	r3, r3, #2
 8009992:	4413      	add	r3, r2
 8009994:	005b      	lsls	r3, r3, #1
 8009996:	441a      	add	r2, r3
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 800999e:	4619      	mov	r1, r3
 80099a0:	4610      	mov	r0, r2
 80099a2:	f015 fc69 	bl	801f278 <jdiv_round_up>
 80099a6:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 80099a8:	461a      	mov	r2, r3
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 11;
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	220b      	movs	r2, #11
 80099b2:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 11;
 80099b6:	687b      	ldr	r3, [r7, #4]
 80099b8:	220b      	movs	r2, #11
 80099ba:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 80099be:	e117      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 12) {
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099c4:	687a      	ldr	r2, [r7, #4]
 80099c6:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 80099ca:	fb02 f103 	mul.w	r1, r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80099d2:	4613      	mov	r3, r2
 80099d4:	005b      	lsls	r3, r3, #1
 80099d6:	4413      	add	r3, r2
 80099d8:	009b      	lsls	r3, r3, #2
 80099da:	4299      	cmp	r1, r3
 80099dc:	d82e      	bhi.n	8009a3c <jpeg_core_output_dimensions+0x548>
    /* Provide 12/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 12L, (long) cinfo->block_size);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	69db      	ldr	r3, [r3, #28]
 80099e2:	461a      	mov	r2, r3
 80099e4:	4613      	mov	r3, r2
 80099e6:	005b      	lsls	r3, r3, #1
 80099e8:	4413      	add	r3, r2
 80099ea:	009b      	lsls	r3, r3, #2
 80099ec:	461a      	mov	r2, r3
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 80099f4:	4619      	mov	r1, r3
 80099f6:	4610      	mov	r0, r2
 80099f8:	f015 fc3e 	bl	801f278 <jdiv_round_up>
 80099fc:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 80099fe:	461a      	mov	r2, r3
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 12L, (long) cinfo->block_size);
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	6a1b      	ldr	r3, [r3, #32]
 8009a08:	461a      	mov	r2, r3
 8009a0a:	4613      	mov	r3, r2
 8009a0c:	005b      	lsls	r3, r3, #1
 8009a0e:	4413      	add	r3, r2
 8009a10:	009b      	lsls	r3, r3, #2
 8009a12:	461a      	mov	r2, r3
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009a1a:	4619      	mov	r1, r3
 8009a1c:	4610      	mov	r0, r2
 8009a1e:	f015 fc2b 	bl	801f278 <jdiv_round_up>
 8009a22:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 8009a24:	461a      	mov	r2, r3
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 12;
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	220c      	movs	r2, #12
 8009a2e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 12;
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	220c      	movs	r2, #12
 8009a36:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8009a3a:	e0d9      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 13) {
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a40:	687a      	ldr	r2, [r7, #4]
 8009a42:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 8009a46:	fb02 f103 	mul.w	r1, r2, r3
 8009a4a:	687b      	ldr	r3, [r7, #4]
 8009a4c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009a4e:	4613      	mov	r3, r2
 8009a50:	005b      	lsls	r3, r3, #1
 8009a52:	4413      	add	r3, r2
 8009a54:	009b      	lsls	r3, r3, #2
 8009a56:	4413      	add	r3, r2
 8009a58:	4299      	cmp	r1, r3
 8009a5a:	d82e      	bhi.n	8009aba <jpeg_core_output_dimensions+0x5c6>
    /* Provide 13/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 13L, (long) cinfo->block_size);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	69db      	ldr	r3, [r3, #28]
 8009a60:	461a      	mov	r2, r3
 8009a62:	4613      	mov	r3, r2
 8009a64:	005b      	lsls	r3, r3, #1
 8009a66:	4413      	add	r3, r2
 8009a68:	009b      	lsls	r3, r3, #2
 8009a6a:	441a      	add	r2, r3
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009a72:	4619      	mov	r1, r3
 8009a74:	4610      	mov	r0, r2
 8009a76:	f015 fbff 	bl	801f278 <jdiv_round_up>
 8009a7a:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009a7c:	461a      	mov	r2, r3
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 13L, (long) cinfo->block_size);
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	6a1b      	ldr	r3, [r3, #32]
 8009a86:	461a      	mov	r2, r3
 8009a88:	4613      	mov	r3, r2
 8009a8a:	005b      	lsls	r3, r3, #1
 8009a8c:	4413      	add	r3, r2
 8009a8e:	009b      	lsls	r3, r3, #2
 8009a90:	441a      	add	r2, r3
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009a98:	4619      	mov	r1, r3
 8009a9a:	4610      	mov	r0, r2
 8009a9c:	f015 fbec 	bl	801f278 <jdiv_round_up>
 8009aa0:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 8009aa2:	461a      	mov	r2, r3
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 13;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	220d      	movs	r2, #13
 8009aac:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 13;
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	220d      	movs	r2, #13
 8009ab4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8009ab8:	e09a      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 14) {
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009abe:	687a      	ldr	r2, [r7, #4]
 8009ac0:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 8009ac4:	fb02 f103 	mul.w	r1, r2, r3
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009acc:	4613      	mov	r3, r2
 8009ace:	00db      	lsls	r3, r3, #3
 8009ad0:	1a9b      	subs	r3, r3, r2
 8009ad2:	005b      	lsls	r3, r3, #1
 8009ad4:	4299      	cmp	r1, r3
 8009ad6:	d82e      	bhi.n	8009b36 <jpeg_core_output_dimensions+0x642>
    /* Provide 14/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 14L, (long) cinfo->block_size);
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	69db      	ldr	r3, [r3, #28]
 8009adc:	461a      	mov	r2, r3
 8009ade:	4613      	mov	r3, r2
 8009ae0:	00db      	lsls	r3, r3, #3
 8009ae2:	1a9b      	subs	r3, r3, r2
 8009ae4:	005b      	lsls	r3, r3, #1
 8009ae6:	461a      	mov	r2, r3
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009aee:	4619      	mov	r1, r3
 8009af0:	4610      	mov	r0, r2
 8009af2:	f015 fbc1 	bl	801f278 <jdiv_round_up>
 8009af6:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009af8:	461a      	mov	r2, r3
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 14L, (long) cinfo->block_size);
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	6a1b      	ldr	r3, [r3, #32]
 8009b02:	461a      	mov	r2, r3
 8009b04:	4613      	mov	r3, r2
 8009b06:	00db      	lsls	r3, r3, #3
 8009b08:	1a9b      	subs	r3, r3, r2
 8009b0a:	005b      	lsls	r3, r3, #1
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009b14:	4619      	mov	r1, r3
 8009b16:	4610      	mov	r0, r2
 8009b18:	f015 fbae 	bl	801f278 <jdiv_round_up>
 8009b1c:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 8009b1e:	461a      	mov	r2, r3
 8009b20:	687b      	ldr	r3, [r7, #4]
 8009b22:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 14;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	220e      	movs	r2, #14
 8009b28:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 14;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	220e      	movs	r2, #14
 8009b30:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8009b34:	e05c      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else if (cinfo->scale_num * cinfo->block_size <= cinfo->scale_denom * 15) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009b3a:	687a      	ldr	r2, [r7, #4]
 8009b3c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 8009b40:	fb02 f103 	mul.w	r1, r2, r3
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b48:	4613      	mov	r3, r2
 8009b4a:	011b      	lsls	r3, r3, #4
 8009b4c:	1a9b      	subs	r3, r3, r2
 8009b4e:	4299      	cmp	r1, r3
 8009b50:	d82a      	bhi.n	8009ba8 <jpeg_core_output_dimensions+0x6b4>
    /* Provide 15/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 15L, (long) cinfo->block_size);
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	69db      	ldr	r3, [r3, #28]
 8009b56:	461a      	mov	r2, r3
 8009b58:	4613      	mov	r3, r2
 8009b5a:	011b      	lsls	r3, r3, #4
 8009b5c:	1a9a      	subs	r2, r3, r2
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009b64:	4619      	mov	r1, r3
 8009b66:	4610      	mov	r0, r2
 8009b68:	f015 fb86 	bl	801f278 <jdiv_round_up>
 8009b6c:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009b6e:	461a      	mov	r2, r3
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 15L, (long) cinfo->block_size);
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a1b      	ldr	r3, [r3, #32]
 8009b78:	461a      	mov	r2, r3
 8009b7a:	4613      	mov	r3, r2
 8009b7c:	011b      	lsls	r3, r3, #4
 8009b7e:	1a9a      	subs	r2, r3, r2
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009b86:	4619      	mov	r1, r3
 8009b88:	4610      	mov	r0, r2
 8009b8a:	f015 fb75 	bl	801f278 <jdiv_round_up>
 8009b8e:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 8009b90:	461a      	mov	r2, r3
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 15;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	220f      	movs	r2, #15
 8009b9a:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 15;
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	220f      	movs	r2, #15
 8009ba2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
 8009ba6:	e023      	b.n	8009bf0 <jpeg_core_output_dimensions+0x6fc>
  } else {
    /* Provide 16/block_size scaling */
    cinfo->output_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * 16L, (long) cinfo->block_size);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	69db      	ldr	r3, [r3, #28]
 8009bac:	011a      	lsls	r2, r3, #4
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009bb4:	4619      	mov	r1, r3
 8009bb6:	4610      	mov	r0, r2
 8009bb8:	f015 fb5e 	bl	801f278 <jdiv_round_up>
 8009bbc:	4603      	mov	r3, r0
    cinfo->output_width = (JDIMENSION)
 8009bbe:	461a      	mov	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	671a      	str	r2, [r3, #112]	; 0x70
    cinfo->output_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * 16L, (long) cinfo->block_size);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	6a1b      	ldr	r3, [r3, #32]
 8009bc8:	011a      	lsls	r2, r3, #4
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	f8d3 31a8 	ldr.w	r3, [r3, #424]	; 0x1a8
 8009bd0:	4619      	mov	r1, r3
 8009bd2:	4610      	mov	r0, r2
 8009bd4:	f015 fb50 	bl	801f278 <jdiv_round_up>
 8009bd8:	4603      	mov	r3, r0
    cinfo->output_height = (JDIMENSION)
 8009bda:	461a      	mov	r2, r3
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	675a      	str	r2, [r3, #116]	; 0x74
    cinfo->min_DCT_h_scaled_size = 16;
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	2210      	movs	r2, #16
 8009be4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
    cinfo->min_DCT_v_scaled_size = 16;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2210      	movs	r2, #16
 8009bec:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
  }

  /* Recompute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009bfa:	60bb      	str	r3, [r7, #8]
 8009bfc:	e00f      	b.n	8009c1e <jpeg_core_output_dimensions+0x72a>
       ci++, compptr++) {
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
 8009c04:	68bb      	ldr	r3, [r7, #8]
 8009c06:	625a      	str	r2, [r3, #36]	; 0x24
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size;
 8009c08:	687b      	ldr	r3, [r7, #4]
 8009c0a:	f8d3 2144 	ldr.w	r2, [r3, #324]	; 0x144
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	629a      	str	r2, [r3, #40]	; 0x28
       ci++, compptr++) {
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	3301      	adds	r3, #1
 8009c16:	60fb      	str	r3, [r7, #12]
 8009c18:	68bb      	ldr	r3, [r7, #8]
 8009c1a:	3358      	adds	r3, #88	; 0x58
 8009c1c:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009c1e:	687b      	ldr	r3, [r7, #4]
 8009c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c22:	68fa      	ldr	r2, [r7, #12]
 8009c24:	429a      	cmp	r2, r3
 8009c26:	dbea      	blt.n	8009bfe <jpeg_core_output_dimensions+0x70a>
  /* jdinput.c has already initialized DCT_scaled_size,
   * and has computed unscaled downsampled_width and downsampled_height.
   */

#endif /* IDCT_SCALING_SUPPORTED */
}
 8009c28:	bf00      	nop
 8009c2a:	bf00      	nop
 8009c2c:	3710      	adds	r7, #16
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
	...

08009c34 <initial_setup>:


LOCAL(void)
initial_setup (j_decompress_ptr cinfo)
/* Called once, when first SOS marker is reached */
{
 8009c34:	b580      	push	{r7, lr}
 8009c36:	b084      	sub	sp, #16
 8009c38:	af00      	add	r7, sp, #0
 8009c3a:	6078      	str	r0, [r7, #4]
  int ci;
  jpeg_component_info *compptr;

  /* Make sure image isn't bigger than I can handle */
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	6a1b      	ldr	r3, [r3, #32]
 8009c40:	461a      	mov	r2, r3
 8009c42:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 8009c46:	429a      	cmp	r2, r3
 8009c48:	dc06      	bgt.n	8009c58 <initial_setup+0x24>
      (long) cinfo->image_width > (long) JPEG_MAX_DIMENSION)
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	69db      	ldr	r3, [r3, #28]
 8009c4e:	461a      	mov	r2, r3
  if ((long) cinfo->image_height > (long) JPEG_MAX_DIMENSION ||
 8009c50:	f64f 73dc 	movw	r3, #65500	; 0xffdc
 8009c54:	429a      	cmp	r2, r3
 8009c56:	dd0d      	ble.n	8009c74 <initial_setup+0x40>
    ERREXIT1(cinfo, JERR_IMAGE_TOO_BIG, (unsigned int) JPEG_MAX_DIMENSION);
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	222a      	movs	r2, #42	; 0x2a
 8009c5e:	615a      	str	r2, [r3, #20]
 8009c60:	687b      	ldr	r3, [r7, #4]
 8009c62:	681b      	ldr	r3, [r3, #0]
 8009c64:	f64f 72dc 	movw	r2, #65500	; 0xffdc
 8009c68:	619a      	str	r2, [r3, #24]
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	6878      	ldr	r0, [r7, #4]
 8009c72:	4798      	blx	r3

  /* For now, precision must match compiled-in value... */
  if (cinfo->data_precision != BITS_IN_JSAMPLE)
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8009c7a:	2b08      	cmp	r3, #8
 8009c7c:	d00e      	beq.n	8009c9c <initial_setup+0x68>
    ERREXIT1(cinfo, JERR_BAD_PRECISION, cinfo->data_precision);
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	681b      	ldr	r3, [r3, #0]
 8009c82:	2210      	movs	r2, #16
 8009c84:	615a      	str	r2, [r3, #20]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	687a      	ldr	r2, [r7, #4]
 8009c8c:	f8d2 20d4 	ldr.w	r2, [r2, #212]	; 0xd4
 8009c90:	619a      	str	r2, [r3, #24]
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	6878      	ldr	r0, [r7, #4]
 8009c9a:	4798      	blx	r3

  /* Check that number of components won't exceed internal array sizes */
  if (cinfo->num_components > MAX_COMPONENTS)
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ca0:	2b0a      	cmp	r3, #10
 8009ca2:	dd11      	ble.n	8009cc8 <initial_setup+0x94>
    ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->num_components,
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	221b      	movs	r2, #27
 8009caa:	615a      	str	r2, [r3, #20]
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	687a      	ldr	r2, [r7, #4]
 8009cb2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009cb4:	619a      	str	r2, [r3, #24]
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	220a      	movs	r2, #10
 8009cbc:	61da      	str	r2, [r3, #28]
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	6878      	ldr	r0, [r7, #4]
 8009cc6:	4798      	blx	r3
	     MAX_COMPONENTS);

  /* Compute maximum sampling factors; check factor validity */
  cinfo->max_h_samp_factor = 1;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2201      	movs	r2, #1
 8009ccc:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
  cinfo->max_v_samp_factor = 1;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2201      	movs	r2, #1
 8009cd4:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009cd8:	2300      	movs	r3, #0
 8009cda:	60fb      	str	r3, [r7, #12]
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8009ce2:	60bb      	str	r3, [r7, #8]
 8009ce4:	e034      	b.n	8009d50 <initial_setup+0x11c>
       ci++, compptr++) {
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 8009ce6:	68bb      	ldr	r3, [r7, #8]
 8009ce8:	689b      	ldr	r3, [r3, #8]
 8009cea:	2b00      	cmp	r3, #0
 8009cec:	dd0b      	ble.n	8009d06 <initial_setup+0xd2>
 8009cee:	68bb      	ldr	r3, [r7, #8]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	2b04      	cmp	r3, #4
 8009cf4:	dc07      	bgt.n	8009d06 <initial_setup+0xd2>
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	68db      	ldr	r3, [r3, #12]
    if (compptr->h_samp_factor<=0 || compptr->h_samp_factor>MAX_SAMP_FACTOR ||
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	dd03      	ble.n	8009d06 <initial_setup+0xd2>
	compptr->v_samp_factor<=0 || compptr->v_samp_factor>MAX_SAMP_FACTOR)
 8009cfe:	68bb      	ldr	r3, [r7, #8]
 8009d00:	68db      	ldr	r3, [r3, #12]
 8009d02:	2b04      	cmp	r3, #4
 8009d04:	dd08      	ble.n	8009d18 <initial_setup+0xe4>
      ERREXIT(cinfo, JERR_BAD_SAMPLING);
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	2213      	movs	r2, #19
 8009d0c:	615a      	str	r2, [r3, #20]
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	681b      	ldr	r3, [r3, #0]
 8009d14:	6878      	ldr	r0, [r7, #4]
 8009d16:	4798      	blx	r3
    cinfo->max_h_samp_factor = MAX(cinfo->max_h_samp_factor,
 8009d18:	68bb      	ldr	r3, [r7, #8]
 8009d1a:	689a      	ldr	r2, [r3, #8]
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 8009d22:	429a      	cmp	r2, r3
 8009d24:	bfb8      	it	lt
 8009d26:	461a      	movlt	r2, r3
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f8c3 2138 	str.w	r2, [r3, #312]	; 0x138
				   compptr->h_samp_factor);
    cinfo->max_v_samp_factor = MAX(cinfo->max_v_samp_factor,
 8009d2e:	68bb      	ldr	r3, [r7, #8]
 8009d30:	68da      	ldr	r2, [r3, #12]
 8009d32:	687b      	ldr	r3, [r7, #4]
 8009d34:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 8009d38:	429a      	cmp	r2, r3
 8009d3a:	bfb8      	it	lt
 8009d3c:	461a      	movlt	r2, r3
 8009d3e:	687b      	ldr	r3, [r7, #4]
 8009d40:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
       ci++, compptr++) {
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	3301      	adds	r3, #1
 8009d48:	60fb      	str	r3, [r7, #12]
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	3358      	adds	r3, #88	; 0x58
 8009d4e:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009d54:	68fa      	ldr	r2, [r7, #12]
 8009d56:	429a      	cmp	r2, r3
 8009d58:	dbc5      	blt.n	8009ce6 <initial_setup+0xb2>
				   compptr->v_samp_factor);
  }

  /* Derive block_size, natural_order, and lim_Se */
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	d109      	bne.n	8009d78 <initial_setup+0x144>
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d011      	beq.n	8009d92 <initial_setup+0x15e>
      cinfo->comps_in_scan)) { /* no pseudo SOS marker */
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
  if (cinfo->is_baseline || (cinfo->progressive_mode &&
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	d00c      	beq.n	8009d92 <initial_setup+0x15e>
    cinfo->block_size = DCTSIZE;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	2208      	movs	r2, #8
 8009d7c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
    cinfo->natural_order = jpeg_natural_order;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	4aca      	ldr	r2, [pc, #808]	; (800a0ac <initial_setup+0x478>)
 8009d84:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
    cinfo->lim_Se = DCTSIZE2-1;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	223f      	movs	r2, #63	; 0x3f
 8009d8c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
 8009d90:	e1c9      	b.n	800a126 <initial_setup+0x4f2>
  } else
    switch (cinfo->Se) {
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	f8d3 319c 	ldr.w	r3, [r3, #412]	; 0x19c
 8009d98:	2bff      	cmp	r3, #255	; 0xff
 8009d9a:	f000 8195 	beq.w	800a0c8 <initial_setup+0x494>
 8009d9e:	2bff      	cmp	r3, #255	; 0xff
 8009da0:	f300 819f 	bgt.w	800a0e2 <initial_setup+0x4ae>
 8009da4:	2be0      	cmp	r3, #224	; 0xe0
 8009da6:	f000 8174 	beq.w	800a092 <initial_setup+0x45e>
 8009daa:	2be0      	cmp	r3, #224	; 0xe0
 8009dac:	f300 8199 	bgt.w	800a0e2 <initial_setup+0x4ae>
 8009db0:	2bc3      	cmp	r3, #195	; 0xc3
 8009db2:	f000 8161 	beq.w	800a078 <initial_setup+0x444>
 8009db6:	2bc3      	cmp	r3, #195	; 0xc3
 8009db8:	f300 8193 	bgt.w	800a0e2 <initial_setup+0x4ae>
 8009dbc:	2ba8      	cmp	r3, #168	; 0xa8
 8009dbe:	f000 814e 	beq.w	800a05e <initial_setup+0x42a>
 8009dc2:	2ba8      	cmp	r3, #168	; 0xa8
 8009dc4:	f300 818d 	bgt.w	800a0e2 <initial_setup+0x4ae>
 8009dc8:	2b8f      	cmp	r3, #143	; 0x8f
 8009dca:	f000 813b 	beq.w	800a044 <initial_setup+0x410>
 8009dce:	2b8f      	cmp	r3, #143	; 0x8f
 8009dd0:	f300 8187 	bgt.w	800a0e2 <initial_setup+0x4ae>
 8009dd4:	2b78      	cmp	r3, #120	; 0x78
 8009dd6:	f000 8128 	beq.w	800a02a <initial_setup+0x3f6>
 8009dda:	2b78      	cmp	r3, #120	; 0x78
 8009ddc:	f300 8181 	bgt.w	800a0e2 <initial_setup+0x4ae>
 8009de0:	2b63      	cmp	r3, #99	; 0x63
 8009de2:	f000 8115 	beq.w	800a010 <initial_setup+0x3dc>
 8009de6:	2b63      	cmp	r3, #99	; 0x63
 8009de8:	f300 817b 	bgt.w	800a0e2 <initial_setup+0x4ae>
 8009dec:	2b3f      	cmp	r3, #63	; 0x3f
 8009dee:	f300 8089 	bgt.w	8009f04 <initial_setup+0x2d0>
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f2c0 8175 	blt.w	800a0e2 <initial_setup+0x4ae>
 8009df8:	2b3f      	cmp	r3, #63	; 0x3f
 8009dfa:	f200 8172 	bhi.w	800a0e2 <initial_setup+0x4ae>
 8009dfe:	a201      	add	r2, pc, #4	; (adr r2, 8009e04 <initial_setup+0x1d0>)
 8009e00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e04:	08009f0b 	.word	0x08009f0b
 8009e08:	0800a0e3 	.word	0x0800a0e3
 8009e0c:	0800a0e3 	.word	0x0800a0e3
 8009e10:	08009f29 	.word	0x08009f29
 8009e14:	0800a0e3 	.word	0x0800a0e3
 8009e18:	0800a0e3 	.word	0x0800a0e3
 8009e1c:	0800a0e3 	.word	0x0800a0e3
 8009e20:	0800a0e3 	.word	0x0800a0e3
 8009e24:	08009f47 	.word	0x08009f47
 8009e28:	0800a0e3 	.word	0x0800a0e3
 8009e2c:	0800a0e3 	.word	0x0800a0e3
 8009e30:	0800a0e3 	.word	0x0800a0e3
 8009e34:	0800a0e3 	.word	0x0800a0e3
 8009e38:	0800a0e3 	.word	0x0800a0e3
 8009e3c:	0800a0e3 	.word	0x0800a0e3
 8009e40:	08009f65 	.word	0x08009f65
 8009e44:	0800a0e3 	.word	0x0800a0e3
 8009e48:	0800a0e3 	.word	0x0800a0e3
 8009e4c:	0800a0e3 	.word	0x0800a0e3
 8009e50:	0800a0e3 	.word	0x0800a0e3
 8009e54:	0800a0e3 	.word	0x0800a0e3
 8009e58:	0800a0e3 	.word	0x0800a0e3
 8009e5c:	0800a0e3 	.word	0x0800a0e3
 8009e60:	0800a0e3 	.word	0x0800a0e3
 8009e64:	08009f83 	.word	0x08009f83
 8009e68:	0800a0e3 	.word	0x0800a0e3
 8009e6c:	0800a0e3 	.word	0x0800a0e3
 8009e70:	0800a0e3 	.word	0x0800a0e3
 8009e74:	0800a0e3 	.word	0x0800a0e3
 8009e78:	0800a0e3 	.word	0x0800a0e3
 8009e7c:	0800a0e3 	.word	0x0800a0e3
 8009e80:	0800a0e3 	.word	0x0800a0e3
 8009e84:	0800a0e3 	.word	0x0800a0e3
 8009e88:	0800a0e3 	.word	0x0800a0e3
 8009e8c:	0800a0e3 	.word	0x0800a0e3
 8009e90:	08009fa1 	.word	0x08009fa1
 8009e94:	0800a0e3 	.word	0x0800a0e3
 8009e98:	0800a0e3 	.word	0x0800a0e3
 8009e9c:	0800a0e3 	.word	0x0800a0e3
 8009ea0:	0800a0e3 	.word	0x0800a0e3
 8009ea4:	0800a0e3 	.word	0x0800a0e3
 8009ea8:	0800a0e3 	.word	0x0800a0e3
 8009eac:	0800a0e3 	.word	0x0800a0e3
 8009eb0:	0800a0e3 	.word	0x0800a0e3
 8009eb4:	0800a0e3 	.word	0x0800a0e3
 8009eb8:	0800a0e3 	.word	0x0800a0e3
 8009ebc:	0800a0e3 	.word	0x0800a0e3
 8009ec0:	0800a0e3 	.word	0x0800a0e3
 8009ec4:	08009fbf 	.word	0x08009fbf
 8009ec8:	0800a0e3 	.word	0x0800a0e3
 8009ecc:	0800a0e3 	.word	0x0800a0e3
 8009ed0:	0800a0e3 	.word	0x0800a0e3
 8009ed4:	0800a0e3 	.word	0x0800a0e3
 8009ed8:	0800a0e3 	.word	0x0800a0e3
 8009edc:	0800a0e3 	.word	0x0800a0e3
 8009ee0:	0800a0e3 	.word	0x0800a0e3
 8009ee4:	0800a0e3 	.word	0x0800a0e3
 8009ee8:	0800a0e3 	.word	0x0800a0e3
 8009eec:	0800a0e3 	.word	0x0800a0e3
 8009ef0:	0800a0e3 	.word	0x0800a0e3
 8009ef4:	0800a0e3 	.word	0x0800a0e3
 8009ef8:	0800a0e3 	.word	0x0800a0e3
 8009efc:	0800a0e3 	.word	0x0800a0e3
 8009f00:	08009fdd 	.word	0x08009fdd
 8009f04:	2b50      	cmp	r3, #80	; 0x50
 8009f06:	d076      	beq.n	8009ff6 <initial_setup+0x3c2>
 8009f08:	e0eb      	b.n	800a0e2 <initial_setup+0x4ae>
    case (1*1-1):
      cinfo->block_size = 1;
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	2201      	movs	r2, #1
 8009f0e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order; /* not needed */
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	4a65      	ldr	r2, [pc, #404]	; (800a0ac <initial_setup+0x478>)
 8009f16:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 8009f26:	e0fe      	b.n	800a126 <initial_setup+0x4f2>
    case (2*2-1):
      cinfo->block_size = 2;
 8009f28:	687b      	ldr	r3, [r7, #4]
 8009f2a:	2202      	movs	r2, #2
 8009f2c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order2;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	4a5f      	ldr	r2, [pc, #380]	; (800a0b0 <initial_setup+0x47c>)
 8009f34:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 8009f44:	e0ef      	b.n	800a126 <initial_setup+0x4f2>
    case (3*3-1):
      cinfo->block_size = 3;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	2203      	movs	r2, #3
 8009f4a:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order3;
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	4a58      	ldr	r2, [pc, #352]	; (800a0b4 <initial_setup+0x480>)
 8009f52:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8009f5c:	687b      	ldr	r3, [r7, #4]
 8009f5e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 8009f62:	e0e0      	b.n	800a126 <initial_setup+0x4f2>
    case (4*4-1):
      cinfo->block_size = 4;
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	2204      	movs	r2, #4
 8009f68:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order4;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	4a52      	ldr	r2, [pc, #328]	; (800a0b8 <initial_setup+0x484>)
 8009f70:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 8009f80:	e0d1      	b.n	800a126 <initial_setup+0x4f2>
    case (5*5-1):
      cinfo->block_size = 5;
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	2205      	movs	r2, #5
 8009f86:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order5;
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	4a4b      	ldr	r2, [pc, #300]	; (800a0bc <initial_setup+0x488>)
 8009f8e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8009f98:	687b      	ldr	r3, [r7, #4]
 8009f9a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 8009f9e:	e0c2      	b.n	800a126 <initial_setup+0x4f2>
    case (6*6-1):
      cinfo->block_size = 6;
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	2206      	movs	r2, #6
 8009fa4:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order6;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	4a45      	ldr	r2, [pc, #276]	; (800a0c0 <initial_setup+0x48c>)
 8009fac:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8009fb0:	687b      	ldr	r3, [r7, #4]
 8009fb2:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 8009fbc:	e0b3      	b.n	800a126 <initial_setup+0x4f2>
    case (7*7-1):
      cinfo->block_size = 7;
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2207      	movs	r2, #7
 8009fc2:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order7;
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	4a3e      	ldr	r2, [pc, #248]	; (800a0c4 <initial_setup+0x490>)
 8009fca:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = cinfo->Se;
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	f8d3 219c 	ldr.w	r2, [r3, #412]	; 0x19c
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 8009fda:	e0a4      	b.n	800a126 <initial_setup+0x4f2>
    case (8*8-1):
      cinfo->block_size = 8;
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	2208      	movs	r2, #8
 8009fe0:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	4a31      	ldr	r2, [pc, #196]	; (800a0ac <initial_setup+0x478>)
 8009fe8:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	223f      	movs	r2, #63	; 0x3f
 8009ff0:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 8009ff4:	e097      	b.n	800a126 <initial_setup+0x4f2>
    case (9*9-1):
      cinfo->block_size = 9;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2209      	movs	r2, #9
 8009ffa:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	4a2a      	ldr	r2, [pc, #168]	; (800a0ac <initial_setup+0x478>)
 800a002:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	223f      	movs	r2, #63	; 0x3f
 800a00a:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800a00e:	e08a      	b.n	800a126 <initial_setup+0x4f2>
    case (10*10-1):
      cinfo->block_size = 10;
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	220a      	movs	r2, #10
 800a014:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	4a24      	ldr	r2, [pc, #144]	; (800a0ac <initial_setup+0x478>)
 800a01c:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	223f      	movs	r2, #63	; 0x3f
 800a024:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800a028:	e07d      	b.n	800a126 <initial_setup+0x4f2>
    case (11*11-1):
      cinfo->block_size = 11;
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	220b      	movs	r2, #11
 800a02e:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800a032:	687b      	ldr	r3, [r7, #4]
 800a034:	4a1d      	ldr	r2, [pc, #116]	; (800a0ac <initial_setup+0x478>)
 800a036:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	223f      	movs	r2, #63	; 0x3f
 800a03e:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800a042:	e070      	b.n	800a126 <initial_setup+0x4f2>
    case (12*12-1):
      cinfo->block_size = 12;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	220c      	movs	r2, #12
 800a048:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	4a17      	ldr	r2, [pc, #92]	; (800a0ac <initial_setup+0x478>)
 800a050:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	223f      	movs	r2, #63	; 0x3f
 800a058:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800a05c:	e063      	b.n	800a126 <initial_setup+0x4f2>
    case (13*13-1):
      cinfo->block_size = 13;
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	220d      	movs	r2, #13
 800a062:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	4a10      	ldr	r2, [pc, #64]	; (800a0ac <initial_setup+0x478>)
 800a06a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	223f      	movs	r2, #63	; 0x3f
 800a072:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800a076:	e056      	b.n	800a126 <initial_setup+0x4f2>
    case (14*14-1):
      cinfo->block_size = 14;
 800a078:	687b      	ldr	r3, [r7, #4]
 800a07a:	220e      	movs	r2, #14
 800a07c:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800a080:	687b      	ldr	r3, [r7, #4]
 800a082:	4a0a      	ldr	r2, [pc, #40]	; (800a0ac <initial_setup+0x478>)
 800a084:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800a088:	687b      	ldr	r3, [r7, #4]
 800a08a:	223f      	movs	r2, #63	; 0x3f
 800a08c:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800a090:	e049      	b.n	800a126 <initial_setup+0x4f2>
    case (15*15-1):
      cinfo->block_size = 15;
 800a092:	687b      	ldr	r3, [r7, #4]
 800a094:	220f      	movs	r2, #15
 800a096:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	4a03      	ldr	r2, [pc, #12]	; (800a0ac <initial_setup+0x478>)
 800a09e:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	223f      	movs	r2, #63	; 0x3f
 800a0a6:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800a0aa:	e03c      	b.n	800a126 <initial_setup+0x4f2>
 800a0ac:	08021880 	.word	0x08021880
 800a0b0:	08021d1c 	.word	0x08021d1c
 800a0b4:	08021cb8 	.word	0x08021cb8
 800a0b8:	08021c38 	.word	0x08021c38
 800a0bc:	08021b94 	.word	0x08021b94
 800a0c0:	08021ac4 	.word	0x08021ac4
 800a0c4:	080219c0 	.word	0x080219c0
    case (16*16-1):
      cinfo->block_size = 16;
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	2210      	movs	r2, #16
 800a0cc:	f8c3 21a8 	str.w	r2, [r3, #424]	; 0x1a8
      cinfo->natural_order = jpeg_natural_order;
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	4a6b      	ldr	r2, [pc, #428]	; (800a280 <initial_setup+0x64c>)
 800a0d4:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
      cinfo->lim_Se = DCTSIZE2-1;
 800a0d8:	687b      	ldr	r3, [r7, #4]
 800a0da:	223f      	movs	r2, #63	; 0x3f
 800a0dc:	f8c3 21b0 	str.w	r2, [r3, #432]	; 0x1b0
      break;
 800a0e0:	e021      	b.n	800a126 <initial_setup+0x4f2>
    default:
      ERREXIT4(cinfo, JERR_BAD_PROGRESSION,
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	2211      	movs	r2, #17
 800a0e8:	615a      	str	r2, [r3, #20]
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	687a      	ldr	r2, [r7, #4]
 800a0f0:	f8d2 2198 	ldr.w	r2, [r2, #408]	; 0x198
 800a0f4:	619a      	str	r2, [r3, #24]
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	681b      	ldr	r3, [r3, #0]
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	f8d2 219c 	ldr.w	r2, [r2, #412]	; 0x19c
 800a100:	61da      	str	r2, [r3, #28]
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	687a      	ldr	r2, [r7, #4]
 800a108:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 800a10c:	621a      	str	r2, [r3, #32]
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	681b      	ldr	r3, [r3, #0]
 800a112:	687a      	ldr	r2, [r7, #4]
 800a114:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800a118:	625a      	str	r2, [r3, #36]	; 0x24
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	6878      	ldr	r0, [r7, #4]
 800a122:	4798      	blx	r3
	       cinfo->Ss, cinfo->Se, cinfo->Ah, cinfo->Al);
      break;
 800a124:	bf00      	nop
   * In the full decompressor,
   * this will be overridden by jpeg_calc_output_dimensions in jdmaster.c;
   * but in the transcoder,
   * jpeg_calc_output_dimensions is not used, so we must do it here.
   */
  cinfo->min_DCT_h_scaled_size = cinfo->block_size;
 800a126:	687b      	ldr	r3, [r7, #4]
 800a128:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800a12c:	687b      	ldr	r3, [r7, #4]
 800a12e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  cinfo->min_DCT_v_scaled_size = cinfo->block_size;
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

  /* Compute dimensions of components */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a13e:	2300      	movs	r3, #0
 800a140:	60fb      	str	r3, [r7, #12]
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a148:	60bb      	str	r3, [r7, #8]
 800a14a:	e065      	b.n	800a218 <initial_setup+0x5e4>
       ci++, compptr++) {
    compptr->DCT_h_scaled_size = cinfo->block_size;
 800a14c:	687b      	ldr	r3, [r7, #4]
 800a14e:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800a152:	68bb      	ldr	r3, [r7, #8]
 800a154:	625a      	str	r2, [r3, #36]	; 0x24
    compptr->DCT_v_scaled_size = cinfo->block_size;
 800a156:	687b      	ldr	r3, [r7, #4]
 800a158:	f8d3 21a8 	ldr.w	r2, [r3, #424]	; 0x1a8
 800a15c:	68bb      	ldr	r3, [r7, #8]
 800a15e:	629a      	str	r2, [r3, #40]	; 0x28
    /* Size in DCT blocks */
    compptr->width_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800a160:	687b      	ldr	r3, [r7, #4]
 800a162:	69db      	ldr	r3, [r3, #28]
 800a164:	461a      	mov	r2, r3
 800a166:	68bb      	ldr	r3, [r7, #8]
 800a168:	689b      	ldr	r3, [r3, #8]
 800a16a:	fb03 f002 	mul.w	r0, r3, r2
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a174:	687a      	ldr	r2, [r7, #4]
 800a176:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800a17a:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800a17e:	4619      	mov	r1, r3
 800a180:	f015 f87a 	bl	801f278 <jdiv_round_up>
 800a184:	4603      	mov	r3, r0
    compptr->width_in_blocks = (JDIMENSION)
 800a186:	461a      	mov	r2, r3
 800a188:	68bb      	ldr	r3, [r7, #8]
 800a18a:	61da      	str	r2, [r3, #28]
    compptr->height_in_blocks = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a1b      	ldr	r3, [r3, #32]
 800a190:	461a      	mov	r2, r3
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	fb03 f002 	mul.w	r0, r3, r2
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800a19a:	687b      	ldr	r3, [r7, #4]
 800a19c:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a1a0:	687a      	ldr	r2, [r7, #4]
 800a1a2:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800a1a6:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800a1aa:	4619      	mov	r1, r3
 800a1ac:	f015 f864 	bl	801f278 <jdiv_round_up>
 800a1b0:	4603      	mov	r3, r0
    compptr->height_in_blocks = (JDIMENSION)
 800a1b2:	461a      	mov	r2, r3
 800a1b4:	68bb      	ldr	r3, [r7, #8]
 800a1b6:	621a      	str	r2, [r3, #32]
     * jdmaster.c if we are doing full decompression.  The transcoder library
     * doesn't use these values, but the calling application might.
     */
    /* Size in samples */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800a1b8:	687b      	ldr	r3, [r7, #4]
 800a1ba:	69db      	ldr	r3, [r3, #28]
 800a1bc:	461a      	mov	r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	689b      	ldr	r3, [r3, #8]
 800a1c2:	fb03 f202 	mul.w	r2, r3, r2
		    (long) cinfo->max_h_samp_factor);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
      jdiv_round_up((long) cinfo->image_width * (long) compptr->h_samp_factor,
 800a1cc:	4619      	mov	r1, r3
 800a1ce:	4610      	mov	r0, r2
 800a1d0:	f015 f852 	bl	801f278 <jdiv_round_up>
 800a1d4:	4603      	mov	r3, r0
    compptr->downsampled_width = (JDIMENSION)
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	62da      	str	r2, [r3, #44]	; 0x2c
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800a1dc:	687b      	ldr	r3, [r7, #4]
 800a1de:	6a1b      	ldr	r3, [r3, #32]
 800a1e0:	461a      	mov	r2, r3
 800a1e2:	68bb      	ldr	r3, [r7, #8]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	fb03 f202 	mul.w	r2, r3, r2
		    (long) cinfo->max_v_samp_factor);
 800a1ea:	687b      	ldr	r3, [r7, #4]
 800a1ec:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
      jdiv_round_up((long) cinfo->image_height * (long) compptr->v_samp_factor,
 800a1f0:	4619      	mov	r1, r3
 800a1f2:	4610      	mov	r0, r2
 800a1f4:	f015 f840 	bl	801f278 <jdiv_round_up>
 800a1f8:	4603      	mov	r3, r0
    compptr->downsampled_height = (JDIMENSION)
 800a1fa:	461a      	mov	r2, r3
 800a1fc:	68bb      	ldr	r3, [r7, #8]
 800a1fe:	631a      	str	r2, [r3, #48]	; 0x30
    /* Mark component needed, until color conversion says otherwise */
    compptr->component_needed = TRUE;
 800a200:	68bb      	ldr	r3, [r7, #8]
 800a202:	2201      	movs	r2, #1
 800a204:	635a      	str	r2, [r3, #52]	; 0x34
    /* Mark no quantization table yet saved for component */
    compptr->quant_table = NULL;
 800a206:	68bb      	ldr	r3, [r7, #8]
 800a208:	2200      	movs	r2, #0
 800a20a:	651a      	str	r2, [r3, #80]	; 0x50
       ci++, compptr++) {
 800a20c:	68fb      	ldr	r3, [r7, #12]
 800a20e:	3301      	adds	r3, #1
 800a210:	60fb      	str	r3, [r7, #12]
 800a212:	68bb      	ldr	r3, [r7, #8]
 800a214:	3358      	adds	r3, #88	; 0x58
 800a216:	60bb      	str	r3, [r7, #8]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a218:	687b      	ldr	r3, [r7, #4]
 800a21a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a21c:	68fa      	ldr	r2, [r7, #12]
 800a21e:	429a      	cmp	r2, r3
 800a220:	db94      	blt.n	800a14c <initial_setup+0x518>
  }

  /* Compute number of fully interleaved MCU rows. */
  cinfo->total_iMCU_rows = (JDIMENSION)
    jdiv_round_up((long) cinfo->image_height,
 800a222:	687b      	ldr	r3, [r7, #4]
 800a224:	6a1b      	ldr	r3, [r3, #32]
 800a226:	4618      	mov	r0, r3
	          (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a22e:	687a      	ldr	r2, [r7, #4]
 800a230:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800a234:	fb02 f303 	mul.w	r3, r2, r3
    jdiv_round_up((long) cinfo->image_height,
 800a238:	4619      	mov	r1, r3
 800a23a:	f015 f81d 	bl	801f278 <jdiv_round_up>
 800a23e:	4603      	mov	r3, r0
  cinfo->total_iMCU_rows = (JDIMENSION)
 800a240:	461a      	mov	r2, r3
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148

  /* Decide whether file contains multiple scans */
  if (cinfo->comps_in_scan < cinfo->num_components || cinfo->progressive_mode)
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	f8d3 2150 	ldr.w	r2, [r3, #336]	; 0x150
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a252:	429a      	cmp	r2, r3
 800a254:	db04      	blt.n	800a260 <initial_setup+0x62c>
 800a256:	687b      	ldr	r3, [r7, #4]
 800a258:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800a25c:	2b00      	cmp	r3, #0
 800a25e:	d005      	beq.n	800a26c <initial_setup+0x638>
    cinfo->inputctl->has_multiple_scans = TRUE;
 800a260:	687b      	ldr	r3, [r7, #4]
 800a262:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800a266:	2201      	movs	r2, #1
 800a268:	611a      	str	r2, [r3, #16]
 800a26a:	e005      	b.n	800a278 <initial_setup+0x644>
  else
    cinfo->inputctl->has_multiple_scans = FALSE;
 800a26c:	687b      	ldr	r3, [r7, #4]
 800a26e:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800a272:	2200      	movs	r2, #0
 800a274:	611a      	str	r2, [r3, #16]
}
 800a276:	bf00      	nop
 800a278:	bf00      	nop
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	08021880 	.word	0x08021880

0800a284 <per_scan_setup>:

LOCAL(void)
per_scan_setup (j_decompress_ptr cinfo)
/* Do computations that are needed before processing a JPEG scan */
/* cinfo->comps_in_scan and cinfo->cur_comp_info[] were set from SOS marker */
{
 800a284:	b580      	push	{r7, lr}
 800a286:	b086      	sub	sp, #24
 800a288:	af00      	add	r7, sp, #0
 800a28a:	6078      	str	r0, [r7, #4]
  int ci, mcublks, tmp;
  jpeg_component_info *compptr;
  
  if (cinfo->comps_in_scan == 1) {
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a292:	2b01      	cmp	r3, #1
 800a294:	d139      	bne.n	800a30a <per_scan_setup+0x86>
    
    /* Noninterleaved (single-component) scan */
    compptr = cinfo->cur_comp_info[0];
 800a296:	687b      	ldr	r3, [r7, #4]
 800a298:	f8d3 3154 	ldr.w	r3, [r3, #340]	; 0x154
 800a29c:	60bb      	str	r3, [r7, #8]
    
    /* Overall image size in MCUs */
    cinfo->MCUs_per_row = compptr->width_in_blocks;
 800a29e:	68bb      	ldr	r3, [r7, #8]
 800a2a0:	69da      	ldr	r2, [r3, #28]
 800a2a2:	687b      	ldr	r3, [r7, #4]
 800a2a4:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
    cinfo->MCU_rows_in_scan = compptr->height_in_blocks;
 800a2a8:	68bb      	ldr	r3, [r7, #8]
 800a2aa:	6a1a      	ldr	r2, [r3, #32]
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    
    /* For noninterleaved scan, always one block per MCU */
    compptr->MCU_width = 1;
 800a2b2:	68bb      	ldr	r3, [r7, #8]
 800a2b4:	2201      	movs	r2, #1
 800a2b6:	639a      	str	r2, [r3, #56]	; 0x38
    compptr->MCU_height = 1;
 800a2b8:	68bb      	ldr	r3, [r7, #8]
 800a2ba:	2201      	movs	r2, #1
 800a2bc:	63da      	str	r2, [r3, #60]	; 0x3c
    compptr->MCU_blocks = 1;
 800a2be:	68bb      	ldr	r3, [r7, #8]
 800a2c0:	2201      	movs	r2, #1
 800a2c2:	641a      	str	r2, [r3, #64]	; 0x40
    compptr->MCU_sample_width = compptr->DCT_h_scaled_size;
 800a2c4:	68bb      	ldr	r3, [r7, #8]
 800a2c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800a2c8:	68bb      	ldr	r3, [r7, #8]
 800a2ca:	645a      	str	r2, [r3, #68]	; 0x44
    compptr->last_col_width = 1;
 800a2cc:	68bb      	ldr	r3, [r7, #8]
 800a2ce:	2201      	movs	r2, #1
 800a2d0:	649a      	str	r2, [r3, #72]	; 0x48
    /* For noninterleaved scans, it is convenient to define last_row_height
     * as the number of block rows present in the last iMCU row.
     */
    tmp = (int) (compptr->height_in_blocks % compptr->v_samp_factor);
 800a2d2:	68bb      	ldr	r3, [r7, #8]
 800a2d4:	6a1b      	ldr	r3, [r3, #32]
 800a2d6:	68ba      	ldr	r2, [r7, #8]
 800a2d8:	68d2      	ldr	r2, [r2, #12]
 800a2da:	fbb3 f1f2 	udiv	r1, r3, r2
 800a2de:	fb02 f201 	mul.w	r2, r2, r1
 800a2e2:	1a9b      	subs	r3, r3, r2
 800a2e4:	60fb      	str	r3, [r7, #12]
    if (tmp == 0) tmp = compptr->v_samp_factor;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	d102      	bne.n	800a2f2 <per_scan_setup+0x6e>
 800a2ec:	68bb      	ldr	r3, [r7, #8]
 800a2ee:	68db      	ldr	r3, [r3, #12]
 800a2f0:	60fb      	str	r3, [r7, #12]
    compptr->last_row_height = tmp;
 800a2f2:	68bb      	ldr	r3, [r7, #8]
 800a2f4:	68fa      	ldr	r2, [r7, #12]
 800a2f6:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Prepare array describing MCU composition */
    cinfo->blocks_in_MCU = 1;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	2201      	movs	r2, #1
 800a2fc:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    cinfo->MCU_membership[0] = 0;
 800a300:	687b      	ldr	r3, [r7, #4]
 800a302:	2200      	movs	r2, #0
 800a304:	f8c3 2170 	str.w	r2, [r3, #368]	; 0x170
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
      }
    }
    
  }
}
 800a308:	e0bc      	b.n	800a484 <per_scan_setup+0x200>
    if (cinfo->comps_in_scan <= 0 || cinfo->comps_in_scan > MAX_COMPS_IN_SCAN)
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a310:	2b00      	cmp	r3, #0
 800a312:	dd04      	ble.n	800a31e <per_scan_setup+0x9a>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a31a:	2b04      	cmp	r3, #4
 800a31c:	dd12      	ble.n	800a344 <per_scan_setup+0xc0>
      ERREXIT2(cinfo, JERR_COMPONENT_COUNT, cinfo->comps_in_scan,
 800a31e:	687b      	ldr	r3, [r7, #4]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	221b      	movs	r2, #27
 800a324:	615a      	str	r2, [r3, #20]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	687a      	ldr	r2, [r7, #4]
 800a32c:	f8d2 2150 	ldr.w	r2, [r2, #336]	; 0x150
 800a330:	619a      	str	r2, [r3, #24]
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	681b      	ldr	r3, [r3, #0]
 800a336:	2204      	movs	r2, #4
 800a338:	61da      	str	r2, [r3, #28]
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	6878      	ldr	r0, [r7, #4]
 800a342:	4798      	blx	r3
      jdiv_round_up((long) cinfo->image_width,
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	69db      	ldr	r3, [r3, #28]
 800a348:	4618      	mov	r0, r3
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800a350:	687a      	ldr	r2, [r7, #4]
 800a352:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800a356:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width,
 800a35a:	4619      	mov	r1, r3
 800a35c:	f014 ff8c 	bl	801f278 <jdiv_round_up>
 800a360:	4603      	mov	r3, r0
    cinfo->MCUs_per_row = (JDIMENSION)
 800a362:	461a      	mov	r2, r3
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	f8c3 2164 	str.w	r2, [r3, #356]	; 0x164
      jdiv_round_up((long) cinfo->image_height,
 800a36a:	687b      	ldr	r3, [r7, #4]
 800a36c:	6a1b      	ldr	r3, [r3, #32]
 800a36e:	4618      	mov	r0, r3
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800a370:	687b      	ldr	r3, [r7, #4]
 800a372:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800a376:	687a      	ldr	r2, [r7, #4]
 800a378:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800a37c:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height,
 800a380:	4619      	mov	r1, r3
 800a382:	f014 ff79 	bl	801f278 <jdiv_round_up>
 800a386:	4603      	mov	r3, r0
    cinfo->MCU_rows_in_scan = (JDIMENSION)
 800a388:	461a      	mov	r2, r3
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	f8c3 2168 	str.w	r2, [r3, #360]	; 0x168
    cinfo->blocks_in_MCU = 0;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	2200      	movs	r2, #0
 800a394:	f8c3 216c 	str.w	r2, [r3, #364]	; 0x16c
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a398:	2300      	movs	r3, #0
 800a39a:	617b      	str	r3, [r7, #20]
 800a39c:	e06c      	b.n	800a478 <per_scan_setup+0x1f4>
      compptr = cinfo->cur_comp_info[ci];
 800a39e:	687a      	ldr	r2, [r7, #4]
 800a3a0:	697b      	ldr	r3, [r7, #20]
 800a3a2:	3354      	adds	r3, #84	; 0x54
 800a3a4:	009b      	lsls	r3, r3, #2
 800a3a6:	4413      	add	r3, r2
 800a3a8:	685b      	ldr	r3, [r3, #4]
 800a3aa:	60bb      	str	r3, [r7, #8]
      compptr->MCU_width = compptr->h_samp_factor;
 800a3ac:	68bb      	ldr	r3, [r7, #8]
 800a3ae:	689a      	ldr	r2, [r3, #8]
 800a3b0:	68bb      	ldr	r3, [r7, #8]
 800a3b2:	639a      	str	r2, [r3, #56]	; 0x38
      compptr->MCU_height = compptr->v_samp_factor;
 800a3b4:	68bb      	ldr	r3, [r7, #8]
 800a3b6:	68da      	ldr	r2, [r3, #12]
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	63da      	str	r2, [r3, #60]	; 0x3c
      compptr->MCU_blocks = compptr->MCU_width * compptr->MCU_height;
 800a3bc:	68bb      	ldr	r3, [r7, #8]
 800a3be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3c0:	68ba      	ldr	r2, [r7, #8]
 800a3c2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a3c4:	fb02 f203 	mul.w	r2, r2, r3
 800a3c8:	68bb      	ldr	r3, [r7, #8]
 800a3ca:	641a      	str	r2, [r3, #64]	; 0x40
      compptr->MCU_sample_width = compptr->MCU_width * compptr->DCT_h_scaled_size;
 800a3cc:	68bb      	ldr	r3, [r7, #8]
 800a3ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800a3d4:	fb02 f203 	mul.w	r2, r2, r3
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	645a      	str	r2, [r3, #68]	; 0x44
      tmp = (int) (compptr->width_in_blocks % compptr->MCU_width);
 800a3dc:	68bb      	ldr	r3, [r7, #8]
 800a3de:	69db      	ldr	r3, [r3, #28]
 800a3e0:	68ba      	ldr	r2, [r7, #8]
 800a3e2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800a3e4:	fbb3 f1f2 	udiv	r1, r3, r2
 800a3e8:	fb02 f201 	mul.w	r2, r2, r1
 800a3ec:	1a9b      	subs	r3, r3, r2
 800a3ee:	60fb      	str	r3, [r7, #12]
      if (tmp == 0) tmp = compptr->MCU_width;
 800a3f0:	68fb      	ldr	r3, [r7, #12]
 800a3f2:	2b00      	cmp	r3, #0
 800a3f4:	d102      	bne.n	800a3fc <per_scan_setup+0x178>
 800a3f6:	68bb      	ldr	r3, [r7, #8]
 800a3f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3fa:	60fb      	str	r3, [r7, #12]
      compptr->last_col_width = tmp;
 800a3fc:	68bb      	ldr	r3, [r7, #8]
 800a3fe:	68fa      	ldr	r2, [r7, #12]
 800a400:	649a      	str	r2, [r3, #72]	; 0x48
      tmp = (int) (compptr->height_in_blocks % compptr->MCU_height);
 800a402:	68bb      	ldr	r3, [r7, #8]
 800a404:	6a1b      	ldr	r3, [r3, #32]
 800a406:	68ba      	ldr	r2, [r7, #8]
 800a408:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800a40a:	fbb3 f1f2 	udiv	r1, r3, r2
 800a40e:	fb02 f201 	mul.w	r2, r2, r1
 800a412:	1a9b      	subs	r3, r3, r2
 800a414:	60fb      	str	r3, [r7, #12]
      if (tmp == 0) tmp = compptr->MCU_height;
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2b00      	cmp	r3, #0
 800a41a:	d102      	bne.n	800a422 <per_scan_setup+0x19e>
 800a41c:	68bb      	ldr	r3, [r7, #8]
 800a41e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a420:	60fb      	str	r3, [r7, #12]
      compptr->last_row_height = tmp;
 800a422:	68bb      	ldr	r3, [r7, #8]
 800a424:	68fa      	ldr	r2, [r7, #12]
 800a426:	64da      	str	r2, [r3, #76]	; 0x4c
      mcublks = compptr->MCU_blocks;
 800a428:	68bb      	ldr	r3, [r7, #8]
 800a42a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a42c:	613b      	str	r3, [r7, #16]
      if (cinfo->blocks_in_MCU + mcublks > D_MAX_BLOCKS_IN_MCU)
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	f8d3 216c 	ldr.w	r2, [r3, #364]	; 0x16c
 800a434:	693b      	ldr	r3, [r7, #16]
 800a436:	4413      	add	r3, r2
 800a438:	2b0a      	cmp	r3, #10
 800a43a:	dd15      	ble.n	800a468 <per_scan_setup+0x1e4>
	ERREXIT(cinfo, JERR_BAD_MCU_SIZE);
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	220e      	movs	r2, #14
 800a442:	615a      	str	r2, [r3, #20]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	6878      	ldr	r0, [r7, #4]
 800a44c:	4798      	blx	r3
      while (mcublks-- > 0) {
 800a44e:	e00b      	b.n	800a468 <per_scan_setup+0x1e4>
	cinfo->MCU_membership[cinfo->blocks_in_MCU++] = ci;
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
 800a456:	1c59      	adds	r1, r3, #1
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	f8c2 116c 	str.w	r1, [r2, #364]	; 0x16c
 800a45e:	687a      	ldr	r2, [r7, #4]
 800a460:	335c      	adds	r3, #92	; 0x5c
 800a462:	6979      	ldr	r1, [r7, #20]
 800a464:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      while (mcublks-- > 0) {
 800a468:	693b      	ldr	r3, [r7, #16]
 800a46a:	1e5a      	subs	r2, r3, #1
 800a46c:	613a      	str	r2, [r7, #16]
 800a46e:	2b00      	cmp	r3, #0
 800a470:	dcee      	bgt.n	800a450 <per_scan_setup+0x1cc>
    for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	3301      	adds	r3, #1
 800a476:	617b      	str	r3, [r7, #20]
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a47e:	697a      	ldr	r2, [r7, #20]
 800a480:	429a      	cmp	r2, r3
 800a482:	db8c      	blt.n	800a39e <per_scan_setup+0x11a>
}
 800a484:	bf00      	nop
 800a486:	3718      	adds	r7, #24
 800a488:	46bd      	mov	sp, r7
 800a48a:	bd80      	pop	{r7, pc}

0800a48c <latch_quant_tables>:
 * not at the current Q-table slots.
 */

LOCAL(void)
latch_quant_tables (j_decompress_ptr cinfo)
{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b086      	sub	sp, #24
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  int ci, qtblno;
  jpeg_component_info *compptr;
  JQUANT_TBL * qtbl;

  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a494:	2300      	movs	r3, #0
 800a496:	617b      	str	r3, [r7, #20]
 800a498:	e043      	b.n	800a522 <latch_quant_tables+0x96>
    compptr = cinfo->cur_comp_info[ci];
 800a49a:	687a      	ldr	r2, [r7, #4]
 800a49c:	697b      	ldr	r3, [r7, #20]
 800a49e:	3354      	adds	r3, #84	; 0x54
 800a4a0:	009b      	lsls	r3, r3, #2
 800a4a2:	4413      	add	r3, r2
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	613b      	str	r3, [r7, #16]
    /* No work if we already saved Q-table for this component */
    if (compptr->quant_table != NULL)
 800a4a8:	693b      	ldr	r3, [r7, #16]
 800a4aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d134      	bne.n	800a51a <latch_quant_tables+0x8e>
      continue;
    /* Make sure specified quantization table is present */
    qtblno = compptr->quant_tbl_no;
 800a4b0:	693b      	ldr	r3, [r7, #16]
 800a4b2:	691b      	ldr	r3, [r3, #16]
 800a4b4:	60fb      	str	r3, [r7, #12]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	db0a      	blt.n	800a4d2 <latch_quant_tables+0x46>
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	2b03      	cmp	r3, #3
 800a4c0:	dc07      	bgt.n	800a4d2 <latch_quant_tables+0x46>
	cinfo->quant_tbl_ptrs[qtblno] == NULL)
 800a4c2:	687a      	ldr	r2, [r7, #4]
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	3328      	adds	r3, #40	; 0x28
 800a4c8:	009b      	lsls	r3, r3, #2
 800a4ca:	4413      	add	r3, r2
 800a4cc:	685b      	ldr	r3, [r3, #4]
    if (qtblno < 0 || qtblno >= NUM_QUANT_TBLS ||
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	d10c      	bne.n	800a4ec <latch_quant_tables+0x60>
      ERREXIT1(cinfo, JERR_NO_QUANT_TABLE, qtblno);
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	681b      	ldr	r3, [r3, #0]
 800a4d6:	2236      	movs	r2, #54	; 0x36
 800a4d8:	615a      	str	r2, [r3, #20]
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	681b      	ldr	r3, [r3, #0]
 800a4de:	68fa      	ldr	r2, [r7, #12]
 800a4e0:	619a      	str	r2, [r3, #24]
 800a4e2:	687b      	ldr	r3, [r7, #4]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	681b      	ldr	r3, [r3, #0]
 800a4e8:	6878      	ldr	r0, [r7, #4]
 800a4ea:	4798      	blx	r3
    /* OK, save away the quantization table */
    qtbl = (JQUANT_TBL *)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	685b      	ldr	r3, [r3, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	2284      	movs	r2, #132	; 0x84
 800a4f4:	2101      	movs	r1, #1
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	4798      	blx	r3
 800a4fa:	60b8      	str	r0, [r7, #8]
				  SIZEOF(JQUANT_TBL));
    MEMCOPY(qtbl, cinfo->quant_tbl_ptrs[qtblno], SIZEOF(JQUANT_TBL));
 800a4fc:	687a      	ldr	r2, [r7, #4]
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	3328      	adds	r3, #40	; 0x28
 800a502:	009b      	lsls	r3, r3, #2
 800a504:	4413      	add	r3, r2
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	2284      	movs	r2, #132	; 0x84
 800a50a:	4619      	mov	r1, r3
 800a50c:	68b8      	ldr	r0, [r7, #8]
 800a50e:	f014 ff55 	bl	801f3bc <memcpy>
    compptr->quant_table = qtbl;
 800a512:	693b      	ldr	r3, [r7, #16]
 800a514:	68ba      	ldr	r2, [r7, #8]
 800a516:	651a      	str	r2, [r3, #80]	; 0x50
 800a518:	e000      	b.n	800a51c <latch_quant_tables+0x90>
      continue;
 800a51a:	bf00      	nop
  for (ci = 0; ci < cinfo->comps_in_scan; ci++) {
 800a51c:	697b      	ldr	r3, [r7, #20]
 800a51e:	3301      	adds	r3, #1
 800a520:	617b      	str	r3, [r7, #20]
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a528:	697a      	ldr	r2, [r7, #20]
 800a52a:	429a      	cmp	r2, r3
 800a52c:	dbb5      	blt.n	800a49a <latch_quant_tables+0xe>
  }
}
 800a52e:	bf00      	nop
 800a530:	bf00      	nop
 800a532:	3718      	adds	r7, #24
 800a534:	46bd      	mov	sp, r7
 800a536:	bd80      	pop	{r7, pc}

0800a538 <start_input_pass>:
 * Subsequent calls come from consume_markers, below.
 */

METHODDEF(void)
start_input_pass (j_decompress_ptr cinfo)
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b082      	sub	sp, #8
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
  per_scan_setup(cinfo);
 800a540:	6878      	ldr	r0, [r7, #4]
 800a542:	f7ff fe9f 	bl	800a284 <per_scan_setup>
  latch_quant_tables(cinfo);
 800a546:	6878      	ldr	r0, [r7, #4]
 800a548:	f7ff ffa0 	bl	800a48c <latch_quant_tables>
  (*cinfo->entropy->start_pass) (cinfo);
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	f8d3 31d0 	ldr.w	r3, [r3, #464]	; 0x1d0
 800a552:	681b      	ldr	r3, [r3, #0]
 800a554:	6878      	ldr	r0, [r7, #4]
 800a556:	4798      	blx	r3
  (*cinfo->coef->start_input_pass) (cinfo);
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	6878      	ldr	r0, [r7, #4]
 800a562:	4798      	blx	r3
  cinfo->inputctl->consume_input = cinfo->coef->consume_data;
 800a564:	687b      	ldr	r3, [r7, #4]
 800a566:	f8d3 21c0 	ldr.w	r2, [r3, #448]	; 0x1c0
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800a570:	6852      	ldr	r2, [r2, #4]
 800a572:	601a      	str	r2, [r3, #0]
}
 800a574:	bf00      	nop
 800a576:	3708      	adds	r7, #8
 800a578:	46bd      	mov	sp, r7
 800a57a:	bd80      	pop	{r7, pc}

0800a57c <finish_input_pass>:
 * the expected data of the scan.
 */

METHODDEF(void)
finish_input_pass (j_decompress_ptr cinfo)
{
 800a57c:	b480      	push	{r7}
 800a57e:	b083      	sub	sp, #12
 800a580:	af00      	add	r7, sp, #0
 800a582:	6078      	str	r0, [r7, #4]
  cinfo->inputctl->consume_input = consume_markers;
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800a58a:	4a04      	ldr	r2, [pc, #16]	; (800a59c <finish_input_pass+0x20>)
 800a58c:	601a      	str	r2, [r3, #0]
}
 800a58e:	bf00      	nop
 800a590:	370c      	adds	r7, #12
 800a592:	46bd      	mov	sp, r7
 800a594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a598:	4770      	bx	lr
 800a59a:	bf00      	nop
 800a59c:	0800a5a1 	.word	0x0800a5a1

0800a5a0 <consume_markers>:
 * read_markers is processed and then skipped for other markers.
 */

METHODDEF(int)
consume_markers (j_decompress_ptr cinfo)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b084      	sub	sp, #16
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800a5ae:	60fb      	str	r3, [r7, #12]
  int val;

  if (inputctl->pub.eoi_reached) /* After hitting EOI, read no further */
 800a5b0:	68fb      	ldr	r3, [r7, #12]
 800a5b2:	695b      	ldr	r3, [r3, #20]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <consume_markers+0x1c>
    return JPEG_REACHED_EOI;
 800a5b8:	2302      	movs	r3, #2
 800a5ba:	e06e      	b.n	800a69a <consume_markers+0xfa>

  for (;;) {			/* Loop to pass pseudo SOS marker */
    val = (*cinfo->marker->read_markers) (cinfo);
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a5c2:	685b      	ldr	r3, [r3, #4]
 800a5c4:	6878      	ldr	r0, [r7, #4]
 800a5c6:	4798      	blx	r3
 800a5c8:	60b8      	str	r0, [r7, #8]

    switch (val) {
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	2b02      	cmp	r3, #2
 800a5ce:	d037      	beq.n	800a640 <consume_markers+0xa0>
 800a5d0:	68bb      	ldr	r3, [r7, #8]
 800a5d2:	2b02      	cmp	r3, #2
 800a5d4:	dc5d      	bgt.n	800a692 <consume_markers+0xf2>
 800a5d6:	68bb      	ldr	r3, [r7, #8]
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d058      	beq.n	800a68e <consume_markers+0xee>
 800a5dc:	68bb      	ldr	r3, [r7, #8]
 800a5de:	2b01      	cmp	r3, #1
 800a5e0:	d157      	bne.n	800a692 <consume_markers+0xf2>
    case JPEG_REACHED_SOS:	/* Found SOS */
      if (inputctl->inheaders) { /* 1st SOS */
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	699b      	ldr	r3, [r3, #24]
 800a5e6:	2b00      	cmp	r3, #0
 800a5e8:	d013      	beq.n	800a612 <consume_markers+0x72>
	if (inputctl->inheaders == 1)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	699b      	ldr	r3, [r3, #24]
 800a5ee:	2b01      	cmp	r3, #1
 800a5f0:	d102      	bne.n	800a5f8 <consume_markers+0x58>
	  initial_setup(cinfo);
 800a5f2:	6878      	ldr	r0, [r7, #4]
 800a5f4:	f7ff fb1e 	bl	8009c34 <initial_setup>
	if (cinfo->comps_in_scan == 0) { /* pseudo SOS marker */
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	d103      	bne.n	800a60a <consume_markers+0x6a>
	  inputctl->inheaders = 2;
 800a602:	68fb      	ldr	r3, [r7, #12]
 800a604:	2202      	movs	r2, #2
 800a606:	619a      	str	r2, [r3, #24]
	  break;
 800a608:	e046      	b.n	800a698 <consume_markers+0xf8>
	}
	inputctl->inheaders = 0;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	2200      	movs	r2, #0
 800a60e:	619a      	str	r2, [r3, #24]
 800a610:	e014      	b.n	800a63c <consume_markers+0x9c>
	/* Note: start_input_pass must be called by jdmaster.c
	 * before any more input can be consumed.  jdapimin.c is
	 * responsible for enforcing this sequencing.
	 */
      } else {			/* 2nd or later SOS marker */
	if (! inputctl->pub.has_multiple_scans)
 800a612:	68fb      	ldr	r3, [r7, #12]
 800a614:	691b      	ldr	r3, [r3, #16]
 800a616:	2b00      	cmp	r3, #0
 800a618:	d108      	bne.n	800a62c <consume_markers+0x8c>
	  ERREXIT(cinfo, JERR_EOI_EXPECTED); /* Oops, I wasn't expecting this! */
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	681b      	ldr	r3, [r3, #0]
 800a61e:	2224      	movs	r2, #36	; 0x24
 800a620:	615a      	str	r2, [r3, #20]
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	681b      	ldr	r3, [r3, #0]
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	4798      	blx	r3
	if (cinfo->comps_in_scan == 0) /* unexpected pseudo SOS marker */
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	f8d3 3150 	ldr.w	r3, [r3, #336]	; 0x150
 800a632:	2b00      	cmp	r3, #0
 800a634:	d02f      	beq.n	800a696 <consume_markers+0xf6>
	  break;
	start_input_pass(cinfo);
 800a636:	6878      	ldr	r0, [r7, #4]
 800a638:	f7ff ff7e 	bl	800a538 <start_input_pass>
      }
      return val;
 800a63c:	68bb      	ldr	r3, [r7, #8]
 800a63e:	e02c      	b.n	800a69a <consume_markers+0xfa>
    case JPEG_REACHED_EOI:	/* Found EOI */
      inputctl->pub.eoi_reached = TRUE;
 800a640:	68fb      	ldr	r3, [r7, #12]
 800a642:	2201      	movs	r2, #1
 800a644:	615a      	str	r2, [r3, #20]
      if (inputctl->inheaders) { /* Tables-only datastream, apparently */
 800a646:	68fb      	ldr	r3, [r7, #12]
 800a648:	699b      	ldr	r3, [r3, #24]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d00f      	beq.n	800a66e <consume_markers+0xce>
	if (cinfo->marker->saw_SOF)
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a654:	691b      	ldr	r3, [r3, #16]
 800a656:	2b00      	cmp	r3, #0
 800a658:	d017      	beq.n	800a68a <consume_markers+0xea>
	  ERREXIT(cinfo, JERR_SOF_NO_SOS);
 800a65a:	687b      	ldr	r3, [r7, #4]
 800a65c:	681b      	ldr	r3, [r3, #0]
 800a65e:	223d      	movs	r2, #61	; 0x3d
 800a660:	615a      	str	r2, [r3, #20]
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	681b      	ldr	r3, [r3, #0]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	6878      	ldr	r0, [r7, #4]
 800a66a:	4798      	blx	r3
 800a66c:	e00d      	b.n	800a68a <consume_markers+0xea>
      } else {
	/* Prevent infinite loop in coef ctlr's decompress_data routine
	 * if user set output_scan_number larger than number of scans.
	 */
	if (cinfo->output_scan_number > cinfo->input_scan_number)
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a67a:	429a      	cmp	r2, r3
 800a67c:	dd05      	ble.n	800a68a <consume_markers+0xea>
	  cinfo->output_scan_number = cinfo->input_scan_number;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
      }
      return val;
 800a68a:	68bb      	ldr	r3, [r7, #8]
 800a68c:	e005      	b.n	800a69a <consume_markers+0xfa>
    case JPEG_SUSPENDED:
      return val;
 800a68e:	68bb      	ldr	r3, [r7, #8]
 800a690:	e003      	b.n	800a69a <consume_markers+0xfa>
    default:
      return val;
 800a692:	68bb      	ldr	r3, [r7, #8]
 800a694:	e001      	b.n	800a69a <consume_markers+0xfa>
	  break;
 800a696:	bf00      	nop
    val = (*cinfo->marker->read_markers) (cinfo);
 800a698:	e790      	b.n	800a5bc <consume_markers+0x1c>
    }
  }
}
 800a69a:	4618      	mov	r0, r3
 800a69c:	3710      	adds	r7, #16
 800a69e:	46bd      	mov	sp, r7
 800a6a0:	bd80      	pop	{r7, pc}
	...

0800a6a4 <reset_input_controller>:
 * Reset state to begin a fresh datastream.
 */

METHODDEF(void)
reset_input_controller (j_decompress_ptr cinfo)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af00      	add	r7, sp, #0
 800a6aa:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl = (my_inputctl_ptr) cinfo->inputctl;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800a6b2:	60fb      	str	r3, [r7, #12]

  inputctl->pub.consume_input = consume_markers;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	4a0f      	ldr	r2, [pc, #60]	; (800a6f4 <reset_input_controller+0x50>)
 800a6b8:	601a      	str	r2, [r3, #0]
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	2200      	movs	r2, #0
 800a6be:	611a      	str	r2, [r3, #16]
  inputctl->pub.eoi_reached = FALSE;
 800a6c0:	68fb      	ldr	r3, [r7, #12]
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	615a      	str	r2, [r3, #20]
  inputctl->inheaders = 1;
 800a6c6:	68fb      	ldr	r3, [r7, #12]
 800a6c8:	2201      	movs	r2, #1
 800a6ca:	619a      	str	r2, [r3, #24]
  /* Reset other modules */
  (*cinfo->err->reset_error_mgr) ((j_common_ptr) cinfo);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	691b      	ldr	r3, [r3, #16]
 800a6d2:	6878      	ldr	r0, [r7, #4]
 800a6d4:	4798      	blx	r3
  (*cinfo->marker->reset_marker_reader) (cinfo);
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	6878      	ldr	r0, [r7, #4]
 800a6e0:	4798      	blx	r3
  /* Reset progression state -- would be cleaner if entropy decoder did this */
  cinfo->coef_bits = NULL;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	2200      	movs	r2, #0
 800a6e6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
}
 800a6ea:	bf00      	nop
 800a6ec:	3710      	adds	r7, #16
 800a6ee:	46bd      	mov	sp, r7
 800a6f0:	bd80      	pop	{r7, pc}
 800a6f2:	bf00      	nop
 800a6f4:	0800a5a1 	.word	0x0800a5a1

0800a6f8 <jinit_input_controller>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_input_controller (j_decompress_ptr cinfo)
{
 800a6f8:	b580      	push	{r7, lr}
 800a6fa:	b084      	sub	sp, #16
 800a6fc:	af00      	add	r7, sp, #0
 800a6fe:	6078      	str	r0, [r7, #4]
  my_inputctl_ptr inputctl;

  /* Create subobject in permanent pool */
  inputctl = (my_inputctl_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800a700:	687b      	ldr	r3, [r7, #4]
 800a702:	685b      	ldr	r3, [r3, #4]
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	221c      	movs	r2, #28
 800a708:	2100      	movs	r1, #0
 800a70a:	6878      	ldr	r0, [r7, #4]
 800a70c:	4798      	blx	r3
 800a70e:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_input_controller));
  cinfo->inputctl = (struct jpeg_input_controller *) inputctl;
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	68fa      	ldr	r2, [r7, #12]
 800a714:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  /* Initialize method pointers */
  inputctl->pub.consume_input = consume_markers;
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	4a0c      	ldr	r2, [pc, #48]	; (800a74c <jinit_input_controller+0x54>)
 800a71c:	601a      	str	r2, [r3, #0]
  inputctl->pub.reset_input_controller = reset_input_controller;
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	4a0b      	ldr	r2, [pc, #44]	; (800a750 <jinit_input_controller+0x58>)
 800a722:	605a      	str	r2, [r3, #4]
  inputctl->pub.start_input_pass = start_input_pass;
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	4a0b      	ldr	r2, [pc, #44]	; (800a754 <jinit_input_controller+0x5c>)
 800a728:	609a      	str	r2, [r3, #8]
  inputctl->pub.finish_input_pass = finish_input_pass;
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	4a0a      	ldr	r2, [pc, #40]	; (800a758 <jinit_input_controller+0x60>)
 800a72e:	60da      	str	r2, [r3, #12]
  /* Initialize state: can't use reset_input_controller since we don't
   * want to try to reset other modules yet.
   */
  inputctl->pub.has_multiple_scans = FALSE; /* "unknown" would be better */
 800a730:	68fb      	ldr	r3, [r7, #12]
 800a732:	2200      	movs	r2, #0
 800a734:	611a      	str	r2, [r3, #16]
  inputctl->pub.eoi_reached = FALSE;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	2200      	movs	r2, #0
 800a73a:	615a      	str	r2, [r3, #20]
  inputctl->inheaders = 1;
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	2201      	movs	r2, #1
 800a740:	619a      	str	r2, [r3, #24]
}
 800a742:	bf00      	nop
 800a744:	3710      	adds	r7, #16
 800a746:	46bd      	mov	sp, r7
 800a748:	bd80      	pop	{r7, pc}
 800a74a:	bf00      	nop
 800a74c:	0800a5a1 	.word	0x0800a5a1
 800a750:	0800a6a5 	.word	0x0800a6a5
 800a754:	0800a539 	.word	0x0800a539
 800a758:	0800a57d 	.word	0x0800a57d

0800a75c <alloc_funny_pointers>:
LOCAL(void)
alloc_funny_pointers (j_decompress_ptr cinfo)
/* Allocate space for the funny pointer lists.
 * This is done only once, not once per pass.
 */
{
 800a75c:	b580      	push	{r7, lr}
 800a75e:	b088      	sub	sp, #32
 800a760:	af00      	add	r7, sp, #0
 800a762:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800a76a:	617b      	str	r3, [r7, #20]
  int ci, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a772:	613b      	str	r3, [r7, #16]

  /* Get top-level space for component array pointers.
   * We alloc both arrays with one call to save a few cycles.
   */
  main->xbuffer[0] = (JSAMPIMAGE)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	685b      	ldr	r3, [r3, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
				cinfo->num_components * 2 * SIZEOF(JSAMPARRAY));
 800a77a:	687a      	ldr	r2, [r7, #4]
 800a77c:	6a52      	ldr	r2, [r2, #36]	; 0x24
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a77e:	00d2      	lsls	r2, r2, #3
 800a780:	2101      	movs	r1, #1
 800a782:	6878      	ldr	r0, [r7, #4]
 800a784:	4798      	blx	r3
 800a786:	4602      	mov	r2, r0
  main->xbuffer[0] = (JSAMPIMAGE)
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	639a      	str	r2, [r3, #56]	; 0x38
  main->xbuffer[1] = main->xbuffer[0] + cinfo->num_components;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a794:	009b      	lsls	r3, r3, #2
 800a796:	441a      	add	r2, r3
 800a798:	697b      	ldr	r3, [r7, #20]
 800a79a:	63da      	str	r2, [r3, #60]	; 0x3c

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a79c:	2300      	movs	r3, #0
 800a79e:	61fb      	str	r3, [r7, #28]
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a7a6:	61bb      	str	r3, [r7, #24]
 800a7a8:	e03a      	b.n	800a820 <alloc_funny_pointers+0xc4>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800a7aa:	69bb      	ldr	r3, [r7, #24]
 800a7ac:	68db      	ldr	r3, [r3, #12]
 800a7ae:	69ba      	ldr	r2, [r7, #24]
 800a7b0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a7b2:	fb02 f203 	mul.w	r2, r2, r3
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800a7bc:	fb92 f3f3 	sdiv	r3, r2, r3
 800a7c0:	60fb      	str	r3, [r7, #12]
    /* Get space for pointer lists --- M+4 row groups in each list.
     * We alloc both pointer lists with one call to save a few cycles.
     */
    xbuf = (JSAMPARRAY)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a7c2:	687b      	ldr	r3, [r7, #4]
 800a7c4:	685b      	ldr	r3, [r3, #4]
 800a7c6:	681b      	ldr	r3, [r3, #0]
				  2 * (rgroup * (M + 4)) * SIZEOF(JSAMPROW));
 800a7c8:	693a      	ldr	r2, [r7, #16]
 800a7ca:	3204      	adds	r2, #4
 800a7cc:	68f9      	ldr	r1, [r7, #12]
 800a7ce:	fb01 f202 	mul.w	r2, r1, r2
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800a7d2:	00d2      	lsls	r2, r2, #3
 800a7d4:	2101      	movs	r1, #1
 800a7d6:	6878      	ldr	r0, [r7, #4]
 800a7d8:	4798      	blx	r3
 800a7da:	60b8      	str	r0, [r7, #8]
    xbuf += rgroup;		/* want one row group at negative offsets */
 800a7dc:	68fb      	ldr	r3, [r7, #12]
 800a7de:	009b      	lsls	r3, r3, #2
 800a7e0:	68ba      	ldr	r2, [r7, #8]
 800a7e2:	4413      	add	r3, r2
 800a7e4:	60bb      	str	r3, [r7, #8]
    main->xbuffer[0][ci] = xbuf;
 800a7e6:	697b      	ldr	r3, [r7, #20]
 800a7e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a7ea:	69fb      	ldr	r3, [r7, #28]
 800a7ec:	009b      	lsls	r3, r3, #2
 800a7ee:	4413      	add	r3, r2
 800a7f0:	68ba      	ldr	r2, [r7, #8]
 800a7f2:	601a      	str	r2, [r3, #0]
    xbuf += rgroup * (M + 4);
 800a7f4:	693b      	ldr	r3, [r7, #16]
 800a7f6:	3304      	adds	r3, #4
 800a7f8:	68fa      	ldr	r2, [r7, #12]
 800a7fa:	fb02 f303 	mul.w	r3, r2, r3
 800a7fe:	009b      	lsls	r3, r3, #2
 800a800:	68ba      	ldr	r2, [r7, #8]
 800a802:	4413      	add	r3, r2
 800a804:	60bb      	str	r3, [r7, #8]
    main->xbuffer[1][ci] = xbuf;
 800a806:	697b      	ldr	r3, [r7, #20]
 800a808:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a80a:	69fb      	ldr	r3, [r7, #28]
 800a80c:	009b      	lsls	r3, r3, #2
 800a80e:	4413      	add	r3, r2
 800a810:	68ba      	ldr	r2, [r7, #8]
 800a812:	601a      	str	r2, [r3, #0]
       ci++, compptr++) {
 800a814:	69fb      	ldr	r3, [r7, #28]
 800a816:	3301      	adds	r3, #1
 800a818:	61fb      	str	r3, [r7, #28]
 800a81a:	69bb      	ldr	r3, [r7, #24]
 800a81c:	3358      	adds	r3, #88	; 0x58
 800a81e:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a820:	687b      	ldr	r3, [r7, #4]
 800a822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a824:	69fa      	ldr	r2, [r7, #28]
 800a826:	429a      	cmp	r2, r3
 800a828:	dbbf      	blt.n	800a7aa <alloc_funny_pointers+0x4e>
  }
}
 800a82a:	bf00      	nop
 800a82c:	bf00      	nop
 800a82e:	3720      	adds	r7, #32
 800a830:	46bd      	mov	sp, r7
 800a832:	bd80      	pop	{r7, pc}

0800a834 <make_funny_pointers>:
 * The actual workspace is already allocated (in main->buffer),
 * and the space for the pointer lists is allocated too.
 * This routine just fills in the curiously ordered lists.
 * This will be repeated at the beginning of each pass.
 */
{
 800a834:	b480      	push	{r7}
 800a836:	b08d      	sub	sp, #52	; 0x34
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800a842:	623b      	str	r3, [r7, #32]
  int ci, i, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a84a:	61fb      	str	r3, [r7, #28]
  jpeg_component_info *compptr;
  JSAMPARRAY buf, xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a84c:	2300      	movs	r3, #0
 800a84e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a856:	627b      	str	r3, [r7, #36]	; 0x24
 800a858:	e08b      	b.n	800a972 <make_funny_pointers+0x13e>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800a85a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a85c:	68db      	ldr	r3, [r3, #12]
 800a85e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a860:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a862:	fb02 f203 	mul.w	r2, r2, r3
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800a86c:	fb92 f3f3 	sdiv	r3, r2, r3
 800a870:	61bb      	str	r3, [r7, #24]
    xbuf0 = main->xbuffer[0][ci];
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a878:	009b      	lsls	r3, r3, #2
 800a87a:	4413      	add	r3, r2
 800a87c:	681b      	ldr	r3, [r3, #0]
 800a87e:	617b      	str	r3, [r7, #20]
    xbuf1 = main->xbuffer[1][ci];
 800a880:	6a3b      	ldr	r3, [r7, #32]
 800a882:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a886:	009b      	lsls	r3, r3, #2
 800a888:	4413      	add	r3, r2
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	613b      	str	r3, [r7, #16]
    /* First copy the workspace pointers as-is */
    buf = main->buffer[ci];
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a892:	3202      	adds	r2, #2
 800a894:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a898:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800a89a:	2300      	movs	r3, #0
 800a89c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a89e:	e012      	b.n	800a8c6 <make_funny_pointers+0x92>
      xbuf0[i] = xbuf1[i] = buf[i];
 800a8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8a2:	009b      	lsls	r3, r3, #2
 800a8a4:	68fa      	ldr	r2, [r7, #12]
 800a8a6:	441a      	add	r2, r3
 800a8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8aa:	009b      	lsls	r3, r3, #2
 800a8ac:	6939      	ldr	r1, [r7, #16]
 800a8ae:	440b      	add	r3, r1
 800a8b0:	6812      	ldr	r2, [r2, #0]
 800a8b2:	601a      	str	r2, [r3, #0]
 800a8b4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8b6:	0092      	lsls	r2, r2, #2
 800a8b8:	6979      	ldr	r1, [r7, #20]
 800a8ba:	440a      	add	r2, r1
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	6013      	str	r3, [r2, #0]
    for (i = 0; i < rgroup * (M + 2); i++) {
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	3301      	adds	r3, #1
 800a8c4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8c6:	69fb      	ldr	r3, [r7, #28]
 800a8c8:	3302      	adds	r3, #2
 800a8ca:	69ba      	ldr	r2, [r7, #24]
 800a8cc:	fb02 f303 	mul.w	r3, r2, r3
 800a8d0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d2:	429a      	cmp	r2, r3
 800a8d4:	dbe4      	blt.n	800a8a0 <make_funny_pointers+0x6c>
    }
    /* In the second list, put the last four row groups in swapped order */
    for (i = 0; i < rgroup * 2; i++) {
 800a8d6:	2300      	movs	r3, #0
 800a8d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800a8da:	e02c      	b.n	800a936 <make_funny_pointers+0x102>
      xbuf1[rgroup*(M-2) + i] = buf[rgroup*M + i];
 800a8dc:	69bb      	ldr	r3, [r7, #24]
 800a8de:	69fa      	ldr	r2, [r7, #28]
 800a8e0:	fb02 f203 	mul.w	r2, r2, r3
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	4413      	add	r3, r2
 800a8e8:	009b      	lsls	r3, r3, #2
 800a8ea:	68fa      	ldr	r2, [r7, #12]
 800a8ec:	441a      	add	r2, r3
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	3b02      	subs	r3, #2
 800a8f2:	69b9      	ldr	r1, [r7, #24]
 800a8f4:	fb01 f103 	mul.w	r1, r1, r3
 800a8f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8fa:	440b      	add	r3, r1
 800a8fc:	009b      	lsls	r3, r3, #2
 800a8fe:	6939      	ldr	r1, [r7, #16]
 800a900:	440b      	add	r3, r1
 800a902:	6812      	ldr	r2, [r2, #0]
 800a904:	601a      	str	r2, [r3, #0]
      xbuf1[rgroup*M + i] = buf[rgroup*(M-2) + i];
 800a906:	69fb      	ldr	r3, [r7, #28]
 800a908:	3b02      	subs	r3, #2
 800a90a:	69ba      	ldr	r2, [r7, #24]
 800a90c:	fb02 f203 	mul.w	r2, r2, r3
 800a910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a912:	4413      	add	r3, r2
 800a914:	009b      	lsls	r3, r3, #2
 800a916:	68fa      	ldr	r2, [r7, #12]
 800a918:	441a      	add	r2, r3
 800a91a:	69bb      	ldr	r3, [r7, #24]
 800a91c:	69f9      	ldr	r1, [r7, #28]
 800a91e:	fb01 f103 	mul.w	r1, r1, r3
 800a922:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a924:	440b      	add	r3, r1
 800a926:	009b      	lsls	r3, r3, #2
 800a928:	6939      	ldr	r1, [r7, #16]
 800a92a:	440b      	add	r3, r1
 800a92c:	6812      	ldr	r2, [r2, #0]
 800a92e:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup * 2; i++) {
 800a930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a932:	3301      	adds	r3, #1
 800a934:	62bb      	str	r3, [r7, #40]	; 0x28
 800a936:	69bb      	ldr	r3, [r7, #24]
 800a938:	005b      	lsls	r3, r3, #1
 800a93a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a93c:	429a      	cmp	r2, r3
 800a93e:	dbcd      	blt.n	800a8dc <make_funny_pointers+0xa8>
    /* The wraparound pointers at top and bottom will be filled later
     * (see set_wraparound_pointers, below).  Initially we want the "above"
     * pointers to duplicate the first actual data line.  This only needs
     * to happen in xbuffer[0].
     */
    for (i = 0; i < rgroup; i++) {
 800a940:	2300      	movs	r3, #0
 800a942:	62bb      	str	r3, [r7, #40]	; 0x28
 800a944:	e00b      	b.n	800a95e <make_funny_pointers+0x12a>
      xbuf0[i - rgroup] = xbuf0[0];
 800a946:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a948:	69bb      	ldr	r3, [r7, #24]
 800a94a:	1ad3      	subs	r3, r2, r3
 800a94c:	009b      	lsls	r3, r3, #2
 800a94e:	697a      	ldr	r2, [r7, #20]
 800a950:	4413      	add	r3, r2
 800a952:	697a      	ldr	r2, [r7, #20]
 800a954:	6812      	ldr	r2, [r2, #0]
 800a956:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup; i++) {
 800a958:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a95a:	3301      	adds	r3, #1
 800a95c:	62bb      	str	r3, [r7, #40]	; 0x28
 800a95e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a960:	69bb      	ldr	r3, [r7, #24]
 800a962:	429a      	cmp	r2, r3
 800a964:	dbef      	blt.n	800a946 <make_funny_pointers+0x112>
       ci++, compptr++) {
 800a966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a968:	3301      	adds	r3, #1
 800a96a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a96c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a96e:	3358      	adds	r3, #88	; 0x58
 800a970:	627b      	str	r3, [r7, #36]	; 0x24
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a976:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a978:	429a      	cmp	r2, r3
 800a97a:	f6ff af6e 	blt.w	800a85a <make_funny_pointers+0x26>
    }
  }
}
 800a97e:	bf00      	nop
 800a980:	bf00      	nop
 800a982:	3734      	adds	r7, #52	; 0x34
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <set_wraparound_pointers>:
LOCAL(void)
set_wraparound_pointers (j_decompress_ptr cinfo)
/* Set up the "wraparound" pointers at top and bottom of the pointer lists.
 * This changes the pointer list state from top-of-image to the normal state.
 */
{
 800a98c:	b480      	push	{r7}
 800a98e:	b08b      	sub	sp, #44	; 0x2c
 800a990:	af00      	add	r7, sp, #0
 800a992:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800a99a:	61bb      	str	r3, [r7, #24]
  int ci, i, rgroup;
  int M = cinfo->min_DCT_v_scaled_size;
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800a9a2:	617b      	str	r3, [r7, #20]
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf0, xbuf1;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800a9a4:	2300      	movs	r3, #0
 800a9a6:	627b      	str	r3, [r7, #36]	; 0x24
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800a9ae:	61fb      	str	r3, [r7, #28]
 800a9b0:	e06d      	b.n	800aa8e <set_wraparound_pointers+0x102>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	68db      	ldr	r3, [r3, #12]
 800a9b6:	69fa      	ldr	r2, [r7, #28]
 800a9b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800a9ba:	fb02 f203 	mul.w	r2, r2, r3
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800a9c4:	fb92 f3f3 	sdiv	r3, r2, r3
 800a9c8:	613b      	str	r3, [r7, #16]
    xbuf0 = main->xbuffer[0][ci];
 800a9ca:	69bb      	ldr	r3, [r7, #24]
 800a9cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a9ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9d0:	009b      	lsls	r3, r3, #2
 800a9d2:	4413      	add	r3, r2
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	60fb      	str	r3, [r7, #12]
    xbuf1 = main->xbuffer[1][ci];
 800a9d8:	69bb      	ldr	r3, [r7, #24]
 800a9da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a9dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a9de:	009b      	lsls	r3, r3, #2
 800a9e0:	4413      	add	r3, r2
 800a9e2:	681b      	ldr	r3, [r3, #0]
 800a9e4:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < rgroup; i++) {
 800a9e6:	2300      	movs	r3, #0
 800a9e8:	623b      	str	r3, [r7, #32]
 800a9ea:	e046      	b.n	800aa7a <set_wraparound_pointers+0xee>
      xbuf0[i - rgroup] = xbuf0[rgroup*(M+1) + i];
 800a9ec:	697b      	ldr	r3, [r7, #20]
 800a9ee:	3301      	adds	r3, #1
 800a9f0:	693a      	ldr	r2, [r7, #16]
 800a9f2:	fb02 f203 	mul.w	r2, r2, r3
 800a9f6:	6a3b      	ldr	r3, [r7, #32]
 800a9f8:	4413      	add	r3, r2
 800a9fa:	009b      	lsls	r3, r3, #2
 800a9fc:	68fa      	ldr	r2, [r7, #12]
 800a9fe:	441a      	add	r2, r3
 800aa00:	6a39      	ldr	r1, [r7, #32]
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	1acb      	subs	r3, r1, r3
 800aa06:	009b      	lsls	r3, r3, #2
 800aa08:	68f9      	ldr	r1, [r7, #12]
 800aa0a:	440b      	add	r3, r1
 800aa0c:	6812      	ldr	r2, [r2, #0]
 800aa0e:	601a      	str	r2, [r3, #0]
      xbuf1[i - rgroup] = xbuf1[rgroup*(M+1) + i];
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	3301      	adds	r3, #1
 800aa14:	693a      	ldr	r2, [r7, #16]
 800aa16:	fb02 f203 	mul.w	r2, r2, r3
 800aa1a:	6a3b      	ldr	r3, [r7, #32]
 800aa1c:	4413      	add	r3, r2
 800aa1e:	009b      	lsls	r3, r3, #2
 800aa20:	68ba      	ldr	r2, [r7, #8]
 800aa22:	441a      	add	r2, r3
 800aa24:	6a39      	ldr	r1, [r7, #32]
 800aa26:	693b      	ldr	r3, [r7, #16]
 800aa28:	1acb      	subs	r3, r1, r3
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	68b9      	ldr	r1, [r7, #8]
 800aa2e:	440b      	add	r3, r1
 800aa30:	6812      	ldr	r2, [r2, #0]
 800aa32:	601a      	str	r2, [r3, #0]
      xbuf0[rgroup*(M+2) + i] = xbuf0[i];
 800aa34:	6a3b      	ldr	r3, [r7, #32]
 800aa36:	009b      	lsls	r3, r3, #2
 800aa38:	68fa      	ldr	r2, [r7, #12]
 800aa3a:	441a      	add	r2, r3
 800aa3c:	697b      	ldr	r3, [r7, #20]
 800aa3e:	3302      	adds	r3, #2
 800aa40:	6939      	ldr	r1, [r7, #16]
 800aa42:	fb01 f103 	mul.w	r1, r1, r3
 800aa46:	6a3b      	ldr	r3, [r7, #32]
 800aa48:	440b      	add	r3, r1
 800aa4a:	009b      	lsls	r3, r3, #2
 800aa4c:	68f9      	ldr	r1, [r7, #12]
 800aa4e:	440b      	add	r3, r1
 800aa50:	6812      	ldr	r2, [r2, #0]
 800aa52:	601a      	str	r2, [r3, #0]
      xbuf1[rgroup*(M+2) + i] = xbuf1[i];
 800aa54:	6a3b      	ldr	r3, [r7, #32]
 800aa56:	009b      	lsls	r3, r3, #2
 800aa58:	68ba      	ldr	r2, [r7, #8]
 800aa5a:	441a      	add	r2, r3
 800aa5c:	697b      	ldr	r3, [r7, #20]
 800aa5e:	3302      	adds	r3, #2
 800aa60:	6939      	ldr	r1, [r7, #16]
 800aa62:	fb01 f103 	mul.w	r1, r1, r3
 800aa66:	6a3b      	ldr	r3, [r7, #32]
 800aa68:	440b      	add	r3, r1
 800aa6a:	009b      	lsls	r3, r3, #2
 800aa6c:	68b9      	ldr	r1, [r7, #8]
 800aa6e:	440b      	add	r3, r1
 800aa70:	6812      	ldr	r2, [r2, #0]
 800aa72:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup; i++) {
 800aa74:	6a3b      	ldr	r3, [r7, #32]
 800aa76:	3301      	adds	r3, #1
 800aa78:	623b      	str	r3, [r7, #32]
 800aa7a:	6a3a      	ldr	r2, [r7, #32]
 800aa7c:	693b      	ldr	r3, [r7, #16]
 800aa7e:	429a      	cmp	r2, r3
 800aa80:	dbb4      	blt.n	800a9ec <set_wraparound_pointers+0x60>
       ci++, compptr++) {
 800aa82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa84:	3301      	adds	r3, #1
 800aa86:	627b      	str	r3, [r7, #36]	; 0x24
 800aa88:	69fb      	ldr	r3, [r7, #28]
 800aa8a:	3358      	adds	r3, #88	; 0x58
 800aa8c:	61fb      	str	r3, [r7, #28]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa94:	429a      	cmp	r2, r3
 800aa96:	db8c      	blt.n	800a9b2 <set_wraparound_pointers+0x26>
    }
  }
}
 800aa98:	bf00      	nop
 800aa9a:	bf00      	nop
 800aa9c:	372c      	adds	r7, #44	; 0x2c
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaa4:	4770      	bx	lr

0800aaa6 <set_bottom_pointers>:
set_bottom_pointers (j_decompress_ptr cinfo)
/* Change the pointer lists to duplicate the last sample row at the bottom
 * of the image.  whichptr indicates which xbuffer holds the final iMCU row.
 * Also sets rowgroups_avail to indicate number of nondummy row groups in row.
 */
{
 800aaa6:	b480      	push	{r7}
 800aaa8:	b08b      	sub	sp, #44	; 0x2c
 800aaaa:	af00      	add	r7, sp, #0
 800aaac:	6078      	str	r0, [r7, #4]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800aab4:	617b      	str	r3, [r7, #20]
  int ci, i, rgroup, iMCUheight, rows_left;
  jpeg_component_info *compptr;
  JSAMPARRAY xbuf;

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800aab6:	2300      	movs	r3, #0
 800aab8:	627b      	str	r3, [r7, #36]	; 0x24
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aac0:	61bb      	str	r3, [r7, #24]
 800aac2:	e052      	b.n	800ab6a <set_bottom_pointers+0xc4>
       ci++, compptr++) {
    /* Count sample rows in one iMCU row and in one row group */
    iMCUheight = compptr->v_samp_factor * compptr->DCT_v_scaled_size;
 800aac4:	69bb      	ldr	r3, [r7, #24]
 800aac6:	68db      	ldr	r3, [r3, #12]
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aacc:	fb02 f303 	mul.w	r3, r2, r3
 800aad0:	613b      	str	r3, [r7, #16]
    rgroup = iMCUheight / cinfo->min_DCT_v_scaled_size;
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800aad8:	693a      	ldr	r2, [r7, #16]
 800aada:	fb92 f3f3 	sdiv	r3, r2, r3
 800aade:	60fb      	str	r3, [r7, #12]
    /* Count nondummy sample rows remaining for this component */
    rows_left = (int) (compptr->downsampled_height % (JDIMENSION) iMCUheight);
 800aae0:	69bb      	ldr	r3, [r7, #24]
 800aae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800aae4:	693a      	ldr	r2, [r7, #16]
 800aae6:	fbb3 f1f2 	udiv	r1, r3, r2
 800aaea:	fb02 f201 	mul.w	r2, r2, r1
 800aaee:	1a9b      	subs	r3, r3, r2
 800aaf0:	61fb      	str	r3, [r7, #28]
    if (rows_left == 0) rows_left = iMCUheight;
 800aaf2:	69fb      	ldr	r3, [r7, #28]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d101      	bne.n	800aafc <set_bottom_pointers+0x56>
 800aaf8:	693b      	ldr	r3, [r7, #16]
 800aafa:	61fb      	str	r3, [r7, #28]
    /* Count nondummy row groups.  Should get same answer for each component,
     * so we need only do it once.
     */
    if (ci == 0) {
 800aafc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aafe:	2b00      	cmp	r3, #0
 800ab00:	d108      	bne.n	800ab14 <set_bottom_pointers+0x6e>
      main->rowgroups_avail = (JDIMENSION) ((rows_left-1) / rgroup + 1);
 800ab02:	69fb      	ldr	r3, [r7, #28]
 800ab04:	1e5a      	subs	r2, r3, #1
 800ab06:	68fb      	ldr	r3, [r7, #12]
 800ab08:	fb92 f3f3 	sdiv	r3, r2, r3
 800ab0c:	3301      	adds	r3, #1
 800ab0e:	461a      	mov	r2, r3
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	649a      	str	r2, [r3, #72]	; 0x48
    }
    /* Duplicate the last real sample row rgroup*2 times; this pads out the
     * last partial rowgroup and ensures at least one full rowgroup of context.
     */
    xbuf = main->xbuffer[main->whichptr][ci];
 800ab14:	697b      	ldr	r3, [r7, #20]
 800ab16:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ab18:	697b      	ldr	r3, [r7, #20]
 800ab1a:	320e      	adds	r2, #14
 800ab1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800ab20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab22:	009b      	lsls	r3, r3, #2
 800ab24:	4413      	add	r3, r2
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60bb      	str	r3, [r7, #8]
    for (i = 0; i < rgroup * 2; i++) {
 800ab2a:	2300      	movs	r3, #0
 800ab2c:	623b      	str	r3, [r7, #32]
 800ab2e:	e011      	b.n	800ab54 <set_bottom_pointers+0xae>
      xbuf[rows_left + i] = xbuf[rows_left-1];
 800ab30:	69fb      	ldr	r3, [r7, #28]
 800ab32:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab36:	3b01      	subs	r3, #1
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	68ba      	ldr	r2, [r7, #8]
 800ab3c:	441a      	add	r2, r3
 800ab3e:	69f9      	ldr	r1, [r7, #28]
 800ab40:	6a3b      	ldr	r3, [r7, #32]
 800ab42:	440b      	add	r3, r1
 800ab44:	009b      	lsls	r3, r3, #2
 800ab46:	68b9      	ldr	r1, [r7, #8]
 800ab48:	440b      	add	r3, r1
 800ab4a:	6812      	ldr	r2, [r2, #0]
 800ab4c:	601a      	str	r2, [r3, #0]
    for (i = 0; i < rgroup * 2; i++) {
 800ab4e:	6a3b      	ldr	r3, [r7, #32]
 800ab50:	3301      	adds	r3, #1
 800ab52:	623b      	str	r3, [r7, #32]
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	005b      	lsls	r3, r3, #1
 800ab58:	6a3a      	ldr	r2, [r7, #32]
 800ab5a:	429a      	cmp	r2, r3
 800ab5c:	dbe8      	blt.n	800ab30 <set_bottom_pointers+0x8a>
       ci++, compptr++) {
 800ab5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ab60:	3301      	adds	r3, #1
 800ab62:	627b      	str	r3, [r7, #36]	; 0x24
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	3358      	adds	r3, #88	; 0x58
 800ab68:	61bb      	str	r3, [r7, #24]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ab70:	429a      	cmp	r2, r3
 800ab72:	dba7      	blt.n	800aac4 <set_bottom_pointers+0x1e>
    }
  }
}
 800ab74:	bf00      	nop
 800ab76:	bf00      	nop
 800ab78:	372c      	adds	r7, #44	; 0x2c
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab80:	4770      	bx	lr
	...

0800ab84 <start_pass_main>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_main (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	460b      	mov	r3, r1
 800ab8e:	70fb      	strb	r3, [r7, #3]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800ab96:	60fb      	str	r3, [r7, #12]

  switch (pass_mode) {
 800ab98:	78fb      	ldrb	r3, [r7, #3]
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d002      	beq.n	800aba4 <start_pass_main+0x20>
 800ab9e:	2b02      	cmp	r3, #2
 800aba0:	d020      	beq.n	800abe4 <start_pass_main+0x60>
 800aba2:	e023      	b.n	800abec <start_pass_main+0x68>
  case JBUF_PASS_THRU:
    if (cinfo->upsample->need_context_rows) {
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800abaa:	689b      	ldr	r3, [r3, #8]
 800abac:	2b00      	cmp	r3, #0
 800abae:	d00f      	beq.n	800abd0 <start_pass_main+0x4c>
      main->pub.process_data = process_data_context_main;
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	4a15      	ldr	r2, [pc, #84]	; (800ac08 <start_pass_main+0x84>)
 800abb4:	605a      	str	r2, [r3, #4]
      make_funny_pointers(cinfo); /* Create the xbuffer[] lists */
 800abb6:	6878      	ldr	r0, [r7, #4]
 800abb8:	f7ff fe3c 	bl	800a834 <make_funny_pointers>
      main->whichptr = 0;	/* Read first iMCU row into xbuffer[0] */
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	2200      	movs	r2, #0
 800abc0:	641a      	str	r2, [r3, #64]	; 0x40
      main->context_state = CTX_PREPARE_FOR_IMCU;
 800abc2:	68fb      	ldr	r3, [r7, #12]
 800abc4:	2200      	movs	r2, #0
 800abc6:	645a      	str	r2, [r3, #68]	; 0x44
      main->iMCU_row_ctr = 0;
 800abc8:	68fb      	ldr	r3, [r7, #12]
 800abca:	2200      	movs	r2, #0
 800abcc:	64da      	str	r2, [r3, #76]	; 0x4c
 800abce:	e002      	b.n	800abd6 <start_pass_main+0x52>
    } else {
      /* Simple case with no context needed */
      main->pub.process_data = process_data_simple_main;
 800abd0:	68fb      	ldr	r3, [r7, #12]
 800abd2:	4a0e      	ldr	r2, [pc, #56]	; (800ac0c <start_pass_main+0x88>)
 800abd4:	605a      	str	r2, [r3, #4]
    }
    main->buffer_full = FALSE;	/* Mark buffer empty */
 800abd6:	68fb      	ldr	r3, [r7, #12]
 800abd8:	2200      	movs	r2, #0
 800abda:	631a      	str	r2, [r3, #48]	; 0x30
    main->rowgroup_ctr = 0;
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	2200      	movs	r2, #0
 800abe0:	635a      	str	r2, [r3, #52]	; 0x34
    break;
 800abe2:	e00d      	b.n	800ac00 <start_pass_main+0x7c>
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_CRANK_DEST:
    /* For last pass of 2-pass quantization, just crank the postprocessor */
    main->pub.process_data = process_data_crank_post;
 800abe4:	68fb      	ldr	r3, [r7, #12]
 800abe6:	4a0a      	ldr	r2, [pc, #40]	; (800ac10 <start_pass_main+0x8c>)
 800abe8:	605a      	str	r2, [r3, #4]
    break;
 800abea:	e009      	b.n	800ac00 <start_pass_main+0x7c>
#endif
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2203      	movs	r2, #3
 800abf2:	615a      	str	r2, [r3, #20]
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	681b      	ldr	r3, [r3, #0]
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	4798      	blx	r3
    break;
 800abfe:	bf00      	nop
  }
}
 800ac00:	bf00      	nop
 800ac02:	3710      	adds	r7, #16
 800ac04:	46bd      	mov	sp, r7
 800ac06:	bd80      	pop	{r7, pc}
 800ac08:	0800ac9f 	.word	0x0800ac9f
 800ac0c:	0800ac15 	.word	0x0800ac15
 800ac10:	0800ae15 	.word	0x0800ae15

0800ac14 <process_data_simple_main>:

METHODDEF(void)
process_data_simple_main (j_decompress_ptr cinfo,
			  JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			  JDIMENSION out_rows_avail)
{
 800ac14:	b590      	push	{r4, r7, lr}
 800ac16:	b08b      	sub	sp, #44	; 0x2c
 800ac18:	af04      	add	r7, sp, #16
 800ac1a:	60f8      	str	r0, [r7, #12]
 800ac1c:	60b9      	str	r1, [r7, #8]
 800ac1e:	607a      	str	r2, [r7, #4]
 800ac20:	603b      	str	r3, [r7, #0]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800ac28:	617b      	str	r3, [r7, #20]
  JDIMENSION rowgroups_avail;

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ac2e:	2b00      	cmp	r3, #0
 800ac30:	d10e      	bne.n	800ac50 <process_data_simple_main+0x3c>
    if (! (*cinfo->coef->decompress_data) (cinfo, main->buffer))
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800ac38:	68db      	ldr	r3, [r3, #12]
 800ac3a:	697a      	ldr	r2, [r7, #20]
 800ac3c:	3208      	adds	r2, #8
 800ac3e:	4611      	mov	r1, r2
 800ac40:	68f8      	ldr	r0, [r7, #12]
 800ac42:	4798      	blx	r3
 800ac44:	4603      	mov	r3, r0
 800ac46:	2b00      	cmp	r3, #0
 800ac48:	d025      	beq.n	800ac96 <process_data_simple_main+0x82>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800ac4a:	697b      	ldr	r3, [r7, #20]
 800ac4c:	2201      	movs	r2, #1
 800ac4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* There are always min_DCT_scaled_size row groups in an iMCU row. */
  rowgroups_avail = (JDIMENSION) cinfo->min_DCT_v_scaled_size;
 800ac50:	68fb      	ldr	r3, [r7, #12]
 800ac52:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ac56:	613b      	str	r3, [r7, #16]
   * to the postprocessor.  The postprocessor has to check for bottom
   * of image anyway (at row resolution), so no point in us doing it too.
   */

  /* Feed the postprocessor */
  (*cinfo->post->post_process_data) (cinfo, main->buffer,
 800ac58:	68fb      	ldr	r3, [r7, #12]
 800ac5a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ac5e:	685c      	ldr	r4, [r3, #4]
 800ac60:	697b      	ldr	r3, [r7, #20]
 800ac62:	f103 0108 	add.w	r1, r3, #8
 800ac66:	697b      	ldr	r3, [r7, #20]
 800ac68:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ac6c:	683b      	ldr	r3, [r7, #0]
 800ac6e:	9302      	str	r3, [sp, #8]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	9301      	str	r3, [sp, #4]
 800ac74:	68bb      	ldr	r3, [r7, #8]
 800ac76:	9300      	str	r3, [sp, #0]
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	68f8      	ldr	r0, [r7, #12]
 800ac7c:	47a0      	blx	r4
				     &main->rowgroup_ctr, rowgroups_avail,
				     output_buf, out_row_ctr, out_rows_avail);

  /* Has postprocessor consumed all the data yet? If so, mark buffer empty */
  if (main->rowgroup_ctr >= rowgroups_avail) {
 800ac7e:	697b      	ldr	r3, [r7, #20]
 800ac80:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	429a      	cmp	r2, r3
 800ac86:	d807      	bhi.n	800ac98 <process_data_simple_main+0x84>
    main->buffer_full = FALSE;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	2200      	movs	r2, #0
 800ac8c:	631a      	str	r2, [r3, #48]	; 0x30
    main->rowgroup_ctr = 0;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	2200      	movs	r2, #0
 800ac92:	635a      	str	r2, [r3, #52]	; 0x34
 800ac94:	e000      	b.n	800ac98 <process_data_simple_main+0x84>
      return;			/* suspension forced, can do nothing more */
 800ac96:	bf00      	nop
  }
}
 800ac98:	371c      	adds	r7, #28
 800ac9a:	46bd      	mov	sp, r7
 800ac9c:	bd90      	pop	{r4, r7, pc}

0800ac9e <process_data_context_main>:

METHODDEF(void)
process_data_context_main (j_decompress_ptr cinfo,
			   JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			   JDIMENSION out_rows_avail)
{
 800ac9e:	b590      	push	{r4, r7, lr}
 800aca0:	b08b      	sub	sp, #44	; 0x2c
 800aca2:	af04      	add	r7, sp, #16
 800aca4:	60f8      	str	r0, [r7, #12]
 800aca6:	60b9      	str	r1, [r7, #8]
 800aca8:	607a      	str	r2, [r7, #4]
 800acaa:	603b      	str	r3, [r7, #0]
  my_main_ptr main = (my_main_ptr) cinfo->main;
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800acb2:	617b      	str	r3, [r7, #20]

  /* Read input data if we haven't filled the main buffer yet */
  if (! main->buffer_full) {
 800acb4:	697b      	ldr	r3, [r7, #20]
 800acb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800acb8:	2b00      	cmp	r3, #0
 800acba:	d118      	bne.n	800acee <process_data_context_main+0x50>
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800acbc:	68fb      	ldr	r3, [r7, #12]
 800acbe:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800acc2:	68db      	ldr	r3, [r3, #12]
					   main->xbuffer[main->whichptr]))
 800acc4:	697a      	ldr	r2, [r7, #20]
 800acc6:	6c11      	ldr	r1, [r2, #64]	; 0x40
    if (! (*cinfo->coef->decompress_data) (cinfo,
 800acc8:	697a      	ldr	r2, [r7, #20]
 800acca:	310e      	adds	r1, #14
 800accc:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800acd0:	4611      	mov	r1, r2
 800acd2:	68f8      	ldr	r0, [r7, #12]
 800acd4:	4798      	blx	r3
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f000 8091 	beq.w	800ae00 <process_data_context_main+0x162>
      return;			/* suspension forced, can do nothing more */
    main->buffer_full = TRUE;	/* OK, we have an iMCU row to work with */
 800acde:	697b      	ldr	r3, [r7, #20]
 800ace0:	2201      	movs	r2, #1
 800ace2:	631a      	str	r2, [r3, #48]	; 0x30
    main->iMCU_row_ctr++;	/* count rows received */
 800ace4:	697b      	ldr	r3, [r7, #20]
 800ace6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ace8:	1c5a      	adds	r2, r3, #1
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Postprocessor typically will not swallow all the input data it is handed
   * in one call (due to filling the output buffer first).  Must be prepared
   * to exit and restart.  This switch lets us keep track of how far we got.
   * Note that each case falls through to the next on successful completion.
   */
  switch (main->context_state) {
 800acee:	697b      	ldr	r3, [r7, #20]
 800acf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800acf2:	2b02      	cmp	r3, #2
 800acf4:	d007      	beq.n	800ad06 <process_data_context_main+0x68>
 800acf6:	2b02      	cmp	r3, #2
 800acf8:	f300 8089 	bgt.w	800ae0e <process_data_context_main+0x170>
 800acfc:	2b00      	cmp	r3, #0
 800acfe:	d028      	beq.n	800ad52 <process_data_context_main+0xb4>
 800ad00:	2b01      	cmp	r3, #1
 800ad02:	d03d      	beq.n	800ad80 <process_data_context_main+0xe2>
 800ad04:	e083      	b.n	800ae0e <process_data_context_main+0x170>
  case CTX_POSTPONED_ROW:
    /* Call postprocessor using previously set pointers for postponed row */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800ad06:	68fb      	ldr	r3, [r7, #12]
 800ad08:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ad0c:	685c      	ldr	r4, [r3, #4]
 800ad0e:	697b      	ldr	r3, [r7, #20]
 800ad10:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad12:	697b      	ldr	r3, [r7, #20]
 800ad14:	320e      	adds	r2, #14
 800ad16:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad1a:	697b      	ldr	r3, [r7, #20]
 800ad1c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad20:	697b      	ldr	r3, [r7, #20]
 800ad22:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ad24:	683b      	ldr	r3, [r7, #0]
 800ad26:	9302      	str	r3, [sp, #8]
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	9301      	str	r3, [sp, #4]
 800ad2c:	68bb      	ldr	r3, [r7, #8]
 800ad2e:	9300      	str	r3, [sp, #0]
 800ad30:	4603      	mov	r3, r0
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	47a0      	blx	r4
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800ad36:	697b      	ldr	r3, [r7, #20]
 800ad38:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800ad3a:	697b      	ldr	r3, [r7, #20]
 800ad3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800ad3e:	429a      	cmp	r2, r3
 800ad40:	d360      	bcc.n	800ae04 <process_data_context_main+0x166>
      return;			/* Need to suspend */
    main->context_state = CTX_PREPARE_FOR_IMCU;
 800ad42:	697b      	ldr	r3, [r7, #20]
 800ad44:	2200      	movs	r2, #0
 800ad46:	645a      	str	r2, [r3, #68]	; 0x44
    if (*out_row_ctr >= out_rows_avail)
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	683a      	ldr	r2, [r7, #0]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	d95a      	bls.n	800ae08 <process_data_context_main+0x16a>
      return;			/* Postprocessor exactly filled output buf */
    /*FALLTHROUGH*/
  case CTX_PREPARE_FOR_IMCU:
    /* Prepare to process first M-1 row groups of this iMCU row */
    main->rowgroup_ctr = 0;
 800ad52:	697b      	ldr	r3, [r7, #20]
 800ad54:	2200      	movs	r2, #0
 800ad56:	635a      	str	r2, [r3, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size - 1);
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ad5e:	3b01      	subs	r3, #1
 800ad60:	461a      	mov	r2, r3
 800ad62:	697b      	ldr	r3, [r7, #20]
 800ad64:	649a      	str	r2, [r3, #72]	; 0x48
    /* Check for bottom of image: if so, tweak pointers to "duplicate"
     * the last sample row, and adjust rowgroups_avail to ignore padding rows.
     */
    if (main->iMCU_row_ctr == cinfo->total_iMCU_rows)
 800ad66:	697b      	ldr	r3, [r7, #20]
 800ad68:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800ad70:	429a      	cmp	r2, r3
 800ad72:	d102      	bne.n	800ad7a <process_data_context_main+0xdc>
      set_bottom_pointers(cinfo);
 800ad74:	68f8      	ldr	r0, [r7, #12]
 800ad76:	f7ff fe96 	bl	800aaa6 <set_bottom_pointers>
    main->context_state = CTX_PROCESS_IMCU;
 800ad7a:	697b      	ldr	r3, [r7, #20]
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	645a      	str	r2, [r3, #68]	; 0x44
    /*FALLTHROUGH*/
  case CTX_PROCESS_IMCU:
    /* Call postprocessor using previously set pointers */
    (*cinfo->post->post_process_data) (cinfo, main->xbuffer[main->whichptr],
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ad86:	685c      	ldr	r4, [r3, #4]
 800ad88:	697b      	ldr	r3, [r7, #20]
 800ad8a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800ad8c:	697b      	ldr	r3, [r7, #20]
 800ad8e:	320e      	adds	r2, #14
 800ad90:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ad94:	697b      	ldr	r3, [r7, #20]
 800ad96:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	6c98      	ldr	r0, [r3, #72]	; 0x48
 800ad9e:	683b      	ldr	r3, [r7, #0]
 800ada0:	9302      	str	r3, [sp, #8]
 800ada2:	687b      	ldr	r3, [r7, #4]
 800ada4:	9301      	str	r3, [sp, #4]
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	9300      	str	r3, [sp, #0]
 800adaa:	4603      	mov	r3, r0
 800adac:	68f8      	ldr	r0, [r7, #12]
 800adae:	47a0      	blx	r4
			&main->rowgroup_ctr, main->rowgroups_avail,
			output_buf, out_row_ctr, out_rows_avail);
    if (main->rowgroup_ctr < main->rowgroups_avail)
 800adb0:	697b      	ldr	r3, [r7, #20]
 800adb2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800adb4:	697b      	ldr	r3, [r7, #20]
 800adb6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800adb8:	429a      	cmp	r2, r3
 800adba:	d327      	bcc.n	800ae0c <process_data_context_main+0x16e>
      return;			/* Need to suspend */
    /* After the first iMCU, change wraparound pointers to normal state */
    if (main->iMCU_row_ctr == 1)
 800adbc:	697b      	ldr	r3, [r7, #20]
 800adbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800adc0:	2b01      	cmp	r3, #1
 800adc2:	d102      	bne.n	800adca <process_data_context_main+0x12c>
      set_wraparound_pointers(cinfo);
 800adc4:	68f8      	ldr	r0, [r7, #12]
 800adc6:	f7ff fde1 	bl	800a98c <set_wraparound_pointers>
    /* Prepare to load new iMCU row using other xbuffer list */
    main->whichptr ^= 1;	/* 0=>1 or 1=>0 */
 800adca:	697b      	ldr	r3, [r7, #20]
 800adcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adce:	f083 0201 	eor.w	r2, r3, #1
 800add2:	697b      	ldr	r3, [r7, #20]
 800add4:	641a      	str	r2, [r3, #64]	; 0x40
    main->buffer_full = FALSE;
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2200      	movs	r2, #0
 800adda:	631a      	str	r2, [r3, #48]	; 0x30
    /* Still need to process last row group of this iMCU row, */
    /* which is saved at index M+1 of the other xbuffer */
    main->rowgroup_ctr = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 1);
 800addc:	68fb      	ldr	r3, [r7, #12]
 800adde:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ade2:	3301      	adds	r3, #1
 800ade4:	461a      	mov	r2, r3
 800ade6:	697b      	ldr	r3, [r7, #20]
 800ade8:	635a      	str	r2, [r3, #52]	; 0x34
    main->rowgroups_avail = (JDIMENSION) (cinfo->min_DCT_v_scaled_size + 2);
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800adf0:	3302      	adds	r3, #2
 800adf2:	461a      	mov	r2, r3
 800adf4:	697b      	ldr	r3, [r7, #20]
 800adf6:	649a      	str	r2, [r3, #72]	; 0x48
    main->context_state = CTX_POSTPONED_ROW;
 800adf8:	697b      	ldr	r3, [r7, #20]
 800adfa:	2202      	movs	r2, #2
 800adfc:	645a      	str	r2, [r3, #68]	; 0x44
 800adfe:	e006      	b.n	800ae0e <process_data_context_main+0x170>
      return;			/* suspension forced, can do nothing more */
 800ae00:	bf00      	nop
 800ae02:	e004      	b.n	800ae0e <process_data_context_main+0x170>
      return;			/* Need to suspend */
 800ae04:	bf00      	nop
 800ae06:	e002      	b.n	800ae0e <process_data_context_main+0x170>
      return;			/* Postprocessor exactly filled output buf */
 800ae08:	bf00      	nop
 800ae0a:	e000      	b.n	800ae0e <process_data_context_main+0x170>
      return;			/* Need to suspend */
 800ae0c:	bf00      	nop
  }
}
 800ae0e:	371c      	adds	r7, #28
 800ae10:	46bd      	mov	sp, r7
 800ae12:	bd90      	pop	{r4, r7, pc}

0800ae14 <process_data_crank_post>:

METHODDEF(void)
process_data_crank_post (j_decompress_ptr cinfo,
			 JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
			 JDIMENSION out_rows_avail)
{
 800ae14:	b590      	push	{r4, r7, lr}
 800ae16:	b089      	sub	sp, #36	; 0x24
 800ae18:	af04      	add	r7, sp, #16
 800ae1a:	60f8      	str	r0, [r7, #12]
 800ae1c:	60b9      	str	r1, [r7, #8]
 800ae1e:	607a      	str	r2, [r7, #4]
 800ae20:	603b      	str	r3, [r7, #0]
  (*cinfo->post->post_process_data) (cinfo, (JSAMPIMAGE) NULL,
 800ae22:	68fb      	ldr	r3, [r7, #12]
 800ae24:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800ae28:	685c      	ldr	r4, [r3, #4]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	9302      	str	r3, [sp, #8]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	9301      	str	r3, [sp, #4]
 800ae32:	68bb      	ldr	r3, [r7, #8]
 800ae34:	9300      	str	r3, [sp, #0]
 800ae36:	2300      	movs	r3, #0
 800ae38:	2200      	movs	r2, #0
 800ae3a:	2100      	movs	r1, #0
 800ae3c:	68f8      	ldr	r0, [r7, #12]
 800ae3e:	47a0      	blx	r4
				     (JDIMENSION *) NULL, (JDIMENSION) 0,
				     output_buf, out_row_ctr, out_rows_avail);
}
 800ae40:	bf00      	nop
 800ae42:	3714      	adds	r7, #20
 800ae44:	46bd      	mov	sp, r7
 800ae46:	bd90      	pop	{r4, r7, pc}

0800ae48 <jinit_d_main_controller>:
 * Initialize main buffer controller.
 */

GLOBAL(void)
jinit_d_main_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800ae48:	b590      	push	{r4, r7, lr}
 800ae4a:	b089      	sub	sp, #36	; 0x24
 800ae4c:	af00      	add	r7, sp, #0
 800ae4e:	6078      	str	r0, [r7, #4]
 800ae50:	6039      	str	r1, [r7, #0]
  my_main_ptr main;
  int ci, rgroup, ngroups;
  jpeg_component_info *compptr;

  main = (my_main_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	685b      	ldr	r3, [r3, #4]
 800ae56:	681b      	ldr	r3, [r3, #0]
 800ae58:	2250      	movs	r2, #80	; 0x50
 800ae5a:	2101      	movs	r1, #1
 800ae5c:	6878      	ldr	r0, [r7, #4]
 800ae5e:	4798      	blx	r3
 800ae60:	6138      	str	r0, [r7, #16]
				SIZEOF(my_main_controller));
  cinfo->main = (struct jpeg_d_main_controller *) main;
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	693a      	ldr	r2, [r7, #16]
 800ae66:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
  main->pub.start_pass = start_pass_main;
 800ae6a:	693b      	ldr	r3, [r7, #16]
 800ae6c:	4a34      	ldr	r2, [pc, #208]	; (800af40 <jinit_d_main_controller+0xf8>)
 800ae6e:	601a      	str	r2, [r3, #0]

  if (need_full_buffer)		/* shouldn't happen */
 800ae70:	683b      	ldr	r3, [r7, #0]
 800ae72:	2b00      	cmp	r3, #0
 800ae74:	d008      	beq.n	800ae88 <jinit_d_main_controller+0x40>
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2203      	movs	r2, #3
 800ae7c:	615a      	str	r2, [r3, #20]
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	6878      	ldr	r0, [r7, #4]
 800ae86:	4798      	blx	r3

  /* Allocate the workspace.
   * ngroups is the number of row groups we need.
   */
  if (cinfo->upsample->need_context_rows) {
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800ae8e:	689b      	ldr	r3, [r3, #8]
 800ae90:	2b00      	cmp	r3, #0
 800ae92:	d016      	beq.n	800aec2 <jinit_d_main_controller+0x7a>
    if (cinfo->min_DCT_v_scaled_size < 2) /* unsupported, see comments above */
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800ae9a:	2b01      	cmp	r3, #1
 800ae9c:	dc08      	bgt.n	800aeb0 <jinit_d_main_controller+0x68>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	681b      	ldr	r3, [r3, #0]
 800aea2:	2230      	movs	r2, #48	; 0x30
 800aea4:	615a      	str	r2, [r3, #20]
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	4798      	blx	r3
    alloc_funny_pointers(cinfo); /* Alloc space for xbuffer[] lists */
 800aeb0:	6878      	ldr	r0, [r7, #4]
 800aeb2:	f7ff fc53 	bl	800a75c <alloc_funny_pointers>
    ngroups = cinfo->min_DCT_v_scaled_size + 2;
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800aebc:	3302      	adds	r3, #2
 800aebe:	61bb      	str	r3, [r7, #24]
 800aec0:	e003      	b.n	800aeca <jinit_d_main_controller+0x82>
  } else {
    ngroups = cinfo->min_DCT_v_scaled_size;
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800aec8:	61bb      	str	r3, [r7, #24]
  }

  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800aeca:	2300      	movs	r3, #0
 800aecc:	61fb      	str	r3, [r7, #28]
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800aed4:	617b      	str	r3, [r7, #20]
 800aed6:	e028      	b.n	800af2a <jinit_d_main_controller+0xe2>
       ci++, compptr++) {
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800aed8:	697b      	ldr	r3, [r7, #20]
 800aeda:	68db      	ldr	r3, [r3, #12]
 800aedc:	697a      	ldr	r2, [r7, #20]
 800aede:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800aee0:	fb02 f203 	mul.w	r2, r2, r3
      cinfo->min_DCT_v_scaled_size; /* height of a row group of component */
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    rgroup = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800aeea:	fb92 f3f3 	sdiv	r3, r2, r3
 800aeee:	60fb      	str	r3, [r7, #12]
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	685b      	ldr	r3, [r3, #4]
 800aef4:	689c      	ldr	r4, [r3, #8]
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 compptr->width_in_blocks * compptr->DCT_h_scaled_size,
 800aef6:	697b      	ldr	r3, [r7, #20]
 800aef8:	69db      	ldr	r3, [r3, #28]
 800aefa:	697a      	ldr	r2, [r7, #20]
 800aefc:	6a52      	ldr	r2, [r2, #36]	; 0x24
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800aefe:	fb02 f103 	mul.w	r1, r2, r3
			 (JDIMENSION) (rgroup * ngroups));
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	69ba      	ldr	r2, [r7, #24]
 800af06:	fb02 f303 	mul.w	r3, r2, r3
    main->buffer[ci] = (*cinfo->mem->alloc_sarray)
 800af0a:	460a      	mov	r2, r1
 800af0c:	2101      	movs	r1, #1
 800af0e:	6878      	ldr	r0, [r7, #4]
 800af10:	47a0      	blx	r4
 800af12:	4601      	mov	r1, r0
 800af14:	693b      	ldr	r3, [r7, #16]
 800af16:	69fa      	ldr	r2, [r7, #28]
 800af18:	3202      	adds	r2, #2
 800af1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
       ci++, compptr++) {
 800af1e:	69fb      	ldr	r3, [r7, #28]
 800af20:	3301      	adds	r3, #1
 800af22:	61fb      	str	r3, [r7, #28]
 800af24:	697b      	ldr	r3, [r7, #20]
 800af26:	3358      	adds	r3, #88	; 0x58
 800af28:	617b      	str	r3, [r7, #20]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800af2a:	687b      	ldr	r3, [r7, #4]
 800af2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af2e:	69fa      	ldr	r2, [r7, #28]
 800af30:	429a      	cmp	r2, r3
 800af32:	dbd1      	blt.n	800aed8 <jinit_d_main_controller+0x90>
  }
}
 800af34:	bf00      	nop
 800af36:	bf00      	nop
 800af38:	3724      	adds	r7, #36	; 0x24
 800af3a:	46bd      	mov	sp, r7
 800af3c:	bd90      	pop	{r4, r7, pc}
 800af3e:	bf00      	nop
 800af40:	0800ab85 	.word	0x0800ab85

0800af44 <get_soi>:


LOCAL(boolean)
get_soi (j_decompress_ptr cinfo)
/* Process an SOI marker */
{
 800af44:	b580      	push	{r7, lr}
 800af46:	b084      	sub	sp, #16
 800af48:	af00      	add	r7, sp, #0
 800af4a:	6078      	str	r0, [r7, #4]
  int i;
  
  TRACEMS(cinfo, 1, JTRC_SOI);
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	681b      	ldr	r3, [r3, #0]
 800af50:	2268      	movs	r2, #104	; 0x68
 800af52:	615a      	str	r2, [r3, #20]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	685b      	ldr	r3, [r3, #4]
 800af5a:	2101      	movs	r1, #1
 800af5c:	6878      	ldr	r0, [r7, #4]
 800af5e:	4798      	blx	r3

  if (cinfo->marker->saw_SOI)
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800af66:	68db      	ldr	r3, [r3, #12]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d008      	beq.n	800af7e <get_soi+0x3a>
    ERREXIT(cinfo, JERR_SOI_DUPLICATE);
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	223f      	movs	r2, #63	; 0x3f
 800af72:	615a      	str	r2, [r3, #20]
 800af74:	687b      	ldr	r3, [r7, #4]
 800af76:	681b      	ldr	r3, [r3, #0]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	6878      	ldr	r0, [r7, #4]
 800af7c:	4798      	blx	r3

  /* Reset all parameters that are defined to be reset by SOI */

  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800af7e:	2300      	movs	r3, #0
 800af80:	60fb      	str	r3, [r7, #12]
 800af82:	e015      	b.n	800afb0 <get_soi+0x6c>
    cinfo->arith_dc_L[i] = 0;
 800af84:	687a      	ldr	r2, [r7, #4]
 800af86:	68fb      	ldr	r3, [r7, #12]
 800af88:	4413      	add	r3, r2
 800af8a:	33e8      	adds	r3, #232	; 0xe8
 800af8c:	2200      	movs	r2, #0
 800af8e:	701a      	strb	r2, [r3, #0]
    cinfo->arith_dc_U[i] = 1;
 800af90:	687a      	ldr	r2, [r7, #4]
 800af92:	68fb      	ldr	r3, [r7, #12]
 800af94:	4413      	add	r3, r2
 800af96:	33f8      	adds	r3, #248	; 0xf8
 800af98:	2201      	movs	r2, #1
 800af9a:	701a      	strb	r2, [r3, #0]
    cinfo->arith_ac_K[i] = 5;
 800af9c:	687a      	ldr	r2, [r7, #4]
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	4413      	add	r3, r2
 800afa2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800afa6:	2205      	movs	r2, #5
 800afa8:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < NUM_ARITH_TBLS; i++) {
 800afaa:	68fb      	ldr	r3, [r7, #12]
 800afac:	3301      	adds	r3, #1
 800afae:	60fb      	str	r3, [r7, #12]
 800afb0:	68fb      	ldr	r3, [r7, #12]
 800afb2:	2b0f      	cmp	r3, #15
 800afb4:	dde6      	ble.n	800af84 <get_soi+0x40>
  }
  cinfo->restart_interval = 0;
 800afb6:	687b      	ldr	r3, [r7, #4]
 800afb8:	2200      	movs	r2, #0
 800afba:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

  /* Set initial assumptions for colorspace etc */

  cinfo->jpeg_color_space = JCS_UNKNOWN;
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	2200      	movs	r2, #0
 800afc2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  cinfo->CCIR601_sampling = FALSE; /* Assume non-CCIR sampling??? */
 800afc6:	687b      	ldr	r3, [r7, #4]
 800afc8:	2200      	movs	r2, #0
 800afca:	f8c3 2130 	str.w	r2, [r3, #304]	; 0x130

  cinfo->saw_JFIF_marker = FALSE;
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	2200      	movs	r2, #0
 800afd2:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
  cinfo->JFIF_major_version = 1; /* set default JFIF APP0 values */
 800afd6:	687b      	ldr	r3, [r7, #4]
 800afd8:	2201      	movs	r2, #1
 800afda:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
  cinfo->JFIF_minor_version = 1;
 800afde:	687b      	ldr	r3, [r7, #4]
 800afe0:	2201      	movs	r2, #1
 800afe2:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
  cinfo->density_unit = 0;
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	2200      	movs	r2, #0
 800afea:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
  cinfo->X_density = 1;
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2201      	movs	r2, #1
 800aff2:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
  cinfo->Y_density = 1;
 800aff6:	687b      	ldr	r3, [r7, #4]
 800aff8:	2201      	movs	r2, #1
 800affa:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
  cinfo->saw_Adobe_marker = FALSE;
 800affe:	687b      	ldr	r3, [r7, #4]
 800b000:	2200      	movs	r2, #0
 800b002:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
  cinfo->Adobe_transform = 0;
 800b006:	687b      	ldr	r3, [r7, #4]
 800b008:	2200      	movs	r2, #0
 800b00a:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c

  cinfo->marker->saw_SOI = TRUE;
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b014:	2201      	movs	r2, #1
 800b016:	60da      	str	r2, [r3, #12]

  return TRUE;
 800b018:	2301      	movs	r3, #1
}
 800b01a:	4618      	mov	r0, r3
 800b01c:	3710      	adds	r7, #16
 800b01e:	46bd      	mov	sp, r7
 800b020:	bd80      	pop	{r7, pc}

0800b022 <get_sof>:

LOCAL(boolean)
get_sof (j_decompress_ptr cinfo, boolean is_baseline, boolean is_prog,
	 boolean is_arith)
/* Process a SOFn marker */
{
 800b022:	b580      	push	{r7, lr}
 800b024:	b08e      	sub	sp, #56	; 0x38
 800b026:	af00      	add	r7, sp, #0
 800b028:	60f8      	str	r0, [r7, #12]
 800b02a:	60b9      	str	r1, [r7, #8]
 800b02c:	607a      	str	r2, [r7, #4]
 800b02e:	603b      	str	r3, [r7, #0]
  INT32 length;
  int c, ci;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	699b      	ldr	r3, [r3, #24]
 800b034:	627b      	str	r3, [r7, #36]	; 0x24
 800b036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b038:	681b      	ldr	r3, [r3, #0]
 800b03a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b03c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b03e:	685b      	ldr	r3, [r3, #4]
 800b040:	62bb      	str	r3, [r7, #40]	; 0x28

  cinfo->is_baseline = is_baseline;
 800b042:	68fb      	ldr	r3, [r7, #12]
 800b044:	68ba      	ldr	r2, [r7, #8]
 800b046:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
  cinfo->progressive_mode = is_prog;
 800b04a:	68fb      	ldr	r3, [r7, #12]
 800b04c:	687a      	ldr	r2, [r7, #4]
 800b04e:	f8c3 20e0 	str.w	r2, [r3, #224]	; 0xe0
  cinfo->arith_code = is_arith;
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	683a      	ldr	r2, [r7, #0]
 800b056:	f8c3 20e4 	str.w	r2, [r3, #228]	; 0xe4

  INPUT_2BYTES(cinfo, length, return FALSE);
 800b05a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10e      	bne.n	800b07e <get_sof+0x5c>
 800b060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b062:	68db      	ldr	r3, [r3, #12]
 800b064:	68f8      	ldr	r0, [r7, #12]
 800b066:	4798      	blx	r3
 800b068:	4603      	mov	r3, r0
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d101      	bne.n	800b072 <get_sof+0x50>
 800b06e:	2300      	movs	r3, #0
 800b070:	e1e7      	b.n	800b442 <get_sof+0x420>
 800b072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b07a:	685b      	ldr	r3, [r3, #4]
 800b07c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b07e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b080:	3b01      	subs	r3, #1
 800b082:	62bb      	str	r3, [r7, #40]	; 0x28
 800b084:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b086:	1c5a      	adds	r2, r3, #1
 800b088:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b08a:	781b      	ldrb	r3, [r3, #0]
 800b08c:	021b      	lsls	r3, r3, #8
 800b08e:	623b      	str	r3, [r7, #32]
 800b090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b092:	2b00      	cmp	r3, #0
 800b094:	d10e      	bne.n	800b0b4 <get_sof+0x92>
 800b096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b098:	68db      	ldr	r3, [r3, #12]
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	4798      	blx	r3
 800b09e:	4603      	mov	r3, r0
 800b0a0:	2b00      	cmp	r3, #0
 800b0a2:	d101      	bne.n	800b0a8 <get_sof+0x86>
 800b0a4:	2300      	movs	r3, #0
 800b0a6:	e1cc      	b.n	800b442 <get_sof+0x420>
 800b0a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0b0:	685b      	ldr	r3, [r3, #4]
 800b0b2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0b6:	3b01      	subs	r3, #1
 800b0b8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0bc:	1c5a      	adds	r2, r3, #1
 800b0be:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0c0:	781b      	ldrb	r3, [r3, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	6a3b      	ldr	r3, [r7, #32]
 800b0c6:	4413      	add	r3, r2
 800b0c8:	623b      	str	r3, [r7, #32]

  INPUT_BYTE(cinfo, cinfo->data_precision, return FALSE);
 800b0ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d10e      	bne.n	800b0ee <get_sof+0xcc>
 800b0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	68f8      	ldr	r0, [r7, #12]
 800b0d6:	4798      	blx	r3
 800b0d8:	4603      	mov	r3, r0
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d101      	bne.n	800b0e2 <get_sof+0xc0>
 800b0de:	2300      	movs	r3, #0
 800b0e0:	e1af      	b.n	800b442 <get_sof+0x420>
 800b0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0ea:	685b      	ldr	r3, [r3, #4]
 800b0ec:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b0f0:	3b01      	subs	r3, #1
 800b0f2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b0f6:	1c5a      	adds	r2, r3, #1
 800b0f8:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b0fa:	781b      	ldrb	r3, [r3, #0]
 800b0fc:	461a      	mov	r2, r3
 800b0fe:	68fb      	ldr	r3, [r7, #12]
 800b100:	f8c3 20d4 	str.w	r2, [r3, #212]	; 0xd4
  INPUT_2BYTES(cinfo, cinfo->image_height, return FALSE);
 800b104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b106:	2b00      	cmp	r3, #0
 800b108:	d10e      	bne.n	800b128 <get_sof+0x106>
 800b10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b10c:	68db      	ldr	r3, [r3, #12]
 800b10e:	68f8      	ldr	r0, [r7, #12]
 800b110:	4798      	blx	r3
 800b112:	4603      	mov	r3, r0
 800b114:	2b00      	cmp	r3, #0
 800b116:	d101      	bne.n	800b11c <get_sof+0xfa>
 800b118:	2300      	movs	r3, #0
 800b11a:	e192      	b.n	800b442 <get_sof+0x420>
 800b11c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b122:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b124:	685b      	ldr	r3, [r3, #4]
 800b126:	62bb      	str	r3, [r7, #40]	; 0x28
 800b128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b12a:	3b01      	subs	r3, #1
 800b12c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b12e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b130:	1c5a      	adds	r2, r3, #1
 800b132:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b134:	781b      	ldrb	r3, [r3, #0]
 800b136:	021a      	lsls	r2, r3, #8
 800b138:	68fb      	ldr	r3, [r7, #12]
 800b13a:	621a      	str	r2, [r3, #32]
 800b13c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d10e      	bne.n	800b160 <get_sof+0x13e>
 800b142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b144:	68db      	ldr	r3, [r3, #12]
 800b146:	68f8      	ldr	r0, [r7, #12]
 800b148:	4798      	blx	r3
 800b14a:	4603      	mov	r3, r0
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <get_sof+0x132>
 800b150:	2300      	movs	r3, #0
 800b152:	e176      	b.n	800b442 <get_sof+0x420>
 800b154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b15c:	685b      	ldr	r3, [r3, #4]
 800b15e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b160:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b162:	3b01      	subs	r3, #1
 800b164:	62bb      	str	r3, [r7, #40]	; 0x28
 800b166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b168:	1c5a      	adds	r2, r3, #1
 800b16a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b16c:	781a      	ldrb	r2, [r3, #0]
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	6a1b      	ldr	r3, [r3, #32]
 800b172:	441a      	add	r2, r3
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	621a      	str	r2, [r3, #32]
  INPUT_2BYTES(cinfo, cinfo->image_width, return FALSE);
 800b178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b17a:	2b00      	cmp	r3, #0
 800b17c:	d10e      	bne.n	800b19c <get_sof+0x17a>
 800b17e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b180:	68db      	ldr	r3, [r3, #12]
 800b182:	68f8      	ldr	r0, [r7, #12]
 800b184:	4798      	blx	r3
 800b186:	4603      	mov	r3, r0
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d101      	bne.n	800b190 <get_sof+0x16e>
 800b18c:	2300      	movs	r3, #0
 800b18e:	e158      	b.n	800b442 <get_sof+0x420>
 800b190:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b198:	685b      	ldr	r3, [r3, #4]
 800b19a:	62bb      	str	r3, [r7, #40]	; 0x28
 800b19c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b19e:	3b01      	subs	r3, #1
 800b1a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1a4:	1c5a      	adds	r2, r3, #1
 800b1a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1a8:	781b      	ldrb	r3, [r3, #0]
 800b1aa:	021a      	lsls	r2, r3, #8
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	61da      	str	r2, [r3, #28]
 800b1b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1b2:	2b00      	cmp	r3, #0
 800b1b4:	d10e      	bne.n	800b1d4 <get_sof+0x1b2>
 800b1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1b8:	68db      	ldr	r3, [r3, #12]
 800b1ba:	68f8      	ldr	r0, [r7, #12]
 800b1bc:	4798      	blx	r3
 800b1be:	4603      	mov	r3, r0
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d101      	bne.n	800b1c8 <get_sof+0x1a6>
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	e13c      	b.n	800b442 <get_sof+0x420>
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d0:	685b      	ldr	r3, [r3, #4]
 800b1d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1d6:	3b01      	subs	r3, #1
 800b1d8:	62bb      	str	r3, [r7, #40]	; 0x28
 800b1da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b1dc:	1c5a      	adds	r2, r3, #1
 800b1de:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b1e0:	781a      	ldrb	r2, [r3, #0]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	69db      	ldr	r3, [r3, #28]
 800b1e6:	441a      	add	r2, r3
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	61da      	str	r2, [r3, #28]
  INPUT_BYTE(cinfo, cinfo->num_components, return FALSE);
 800b1ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1ee:	2b00      	cmp	r3, #0
 800b1f0:	d10e      	bne.n	800b210 <get_sof+0x1ee>
 800b1f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f4:	68db      	ldr	r3, [r3, #12]
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	4798      	blx	r3
 800b1fa:	4603      	mov	r3, r0
 800b1fc:	2b00      	cmp	r3, #0
 800b1fe:	d101      	bne.n	800b204 <get_sof+0x1e2>
 800b200:	2300      	movs	r3, #0
 800b202:	e11e      	b.n	800b442 <get_sof+0x420>
 800b204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b206:	681b      	ldr	r3, [r3, #0]
 800b208:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b20c:	685b      	ldr	r3, [r3, #4]
 800b20e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b212:	3b01      	subs	r3, #1
 800b214:	62bb      	str	r3, [r7, #40]	; 0x28
 800b216:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b218:	1c5a      	adds	r2, r3, #1
 800b21a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b21c:	781b      	ldrb	r3, [r3, #0]
 800b21e:	461a      	mov	r2, r3
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	625a      	str	r2, [r3, #36]	; 0x24

  length -= 8;
 800b224:	6a3b      	ldr	r3, [r7, #32]
 800b226:	3b08      	subs	r3, #8
 800b228:	623b      	str	r3, [r7, #32]

  TRACEMS4(cinfo, 1, JTRC_SOF, cinfo->unread_marker,
 800b22a:	68fb      	ldr	r3, [r7, #12]
 800b22c:	681b      	ldr	r3, [r3, #0]
 800b22e:	3318      	adds	r3, #24
 800b230:	61fb      	str	r3, [r7, #28]
 800b232:	68fb      	ldr	r3, [r7, #12]
 800b234:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
 800b238:	69fb      	ldr	r3, [r7, #28]
 800b23a:	601a      	str	r2, [r3, #0]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	69da      	ldr	r2, [r3, #28]
 800b240:	69fb      	ldr	r3, [r7, #28]
 800b242:	3304      	adds	r3, #4
 800b244:	601a      	str	r2, [r3, #0]
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	6a1a      	ldr	r2, [r3, #32]
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	3308      	adds	r3, #8
 800b24e:	601a      	str	r2, [r3, #0]
 800b250:	69fb      	ldr	r3, [r7, #28]
 800b252:	330c      	adds	r3, #12
 800b254:	68fa      	ldr	r2, [r7, #12]
 800b256:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b258:	601a      	str	r2, [r3, #0]
 800b25a:	68fb      	ldr	r3, [r7, #12]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	2266      	movs	r2, #102	; 0x66
 800b260:	615a      	str	r2, [r3, #20]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	685b      	ldr	r3, [r3, #4]
 800b268:	2101      	movs	r1, #1
 800b26a:	68f8      	ldr	r0, [r7, #12]
 800b26c:	4798      	blx	r3
	   (int) cinfo->image_width, (int) cinfo->image_height,
	   cinfo->num_components);

  if (cinfo->marker->saw_SOF)
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b274:	691b      	ldr	r3, [r3, #16]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d008      	beq.n	800b28c <get_sof+0x26a>
    ERREXIT(cinfo, JERR_SOF_DUPLICATE);
 800b27a:	68fb      	ldr	r3, [r7, #12]
 800b27c:	681b      	ldr	r3, [r3, #0]
 800b27e:	223c      	movs	r2, #60	; 0x3c
 800b280:	615a      	str	r2, [r3, #20]
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	681b      	ldr	r3, [r3, #0]
 800b286:	681b      	ldr	r3, [r3, #0]
 800b288:	68f8      	ldr	r0, [r7, #12]
 800b28a:	4798      	blx	r3

  /* We don't support files in which the image height is initially specified */
  /* as 0 and is later redefined by DNL.  As long as we have to check that,  */
  /* might as well have a general sanity check. */
  if (cinfo->image_height <= 0 || cinfo->image_width <= 0
 800b28c:	68fb      	ldr	r3, [r7, #12]
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d007      	beq.n	800b2a4 <get_sof+0x282>
 800b294:	68fb      	ldr	r3, [r7, #12]
 800b296:	69db      	ldr	r3, [r3, #28]
 800b298:	2b00      	cmp	r3, #0
 800b29a:	d003      	beq.n	800b2a4 <get_sof+0x282>
      || cinfo->num_components <= 0)
 800b29c:	68fb      	ldr	r3, [r7, #12]
 800b29e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	dc08      	bgt.n	800b2b6 <get_sof+0x294>
    ERREXIT(cinfo, JERR_EMPTY_IMAGE);
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	681b      	ldr	r3, [r3, #0]
 800b2a8:	2221      	movs	r2, #33	; 0x21
 800b2aa:	615a      	str	r2, [r3, #20]
 800b2ac:	68fb      	ldr	r3, [r7, #12]
 800b2ae:	681b      	ldr	r3, [r3, #0]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	68f8      	ldr	r0, [r7, #12]
 800b2b4:	4798      	blx	r3

  if (length != (cinfo->num_components * 3))
 800b2b6:	68fb      	ldr	r3, [r7, #12]
 800b2b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800b2ba:	4613      	mov	r3, r2
 800b2bc:	005b      	lsls	r3, r3, #1
 800b2be:	4413      	add	r3, r2
 800b2c0:	6a3a      	ldr	r2, [r7, #32]
 800b2c2:	429a      	cmp	r2, r3
 800b2c4:	d008      	beq.n	800b2d8 <get_sof+0x2b6>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800b2c6:	68fb      	ldr	r3, [r7, #12]
 800b2c8:	681b      	ldr	r3, [r3, #0]
 800b2ca:	220c      	movs	r2, #12
 800b2cc:	615a      	str	r2, [r3, #20]
 800b2ce:	68fb      	ldr	r3, [r7, #12]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	68f8      	ldr	r0, [r7, #12]
 800b2d6:	4798      	blx	r3

  if (cinfo->comp_info == NULL)	/* do only once, even if suspend */
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d10f      	bne.n	800b302 <get_sof+0x2e0>
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	685b      	ldr	r3, [r3, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
			((j_common_ptr) cinfo, JPOOL_IMAGE,
			 cinfo->num_components * SIZEOF(jpeg_component_info));
 800b2e8:	68fa      	ldr	r2, [r7, #12]
 800b2ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800b2ec:	4611      	mov	r1, r2
    cinfo->comp_info = (jpeg_component_info *) (*cinfo->mem->alloc_small)
 800b2ee:	2258      	movs	r2, #88	; 0x58
 800b2f0:	fb02 f201 	mul.w	r2, r2, r1
 800b2f4:	2101      	movs	r1, #1
 800b2f6:	68f8      	ldr	r0, [r7, #12]
 800b2f8:	4798      	blx	r3
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	68fb      	ldr	r3, [r7, #12]
 800b2fe:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b302:	2300      	movs	r3, #0
 800b304:	637b      	str	r3, [r7, #52]	; 0x34
 800b306:	68fb      	ldr	r3, [r7, #12]
 800b308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b30c:	633b      	str	r3, [r7, #48]	; 0x30
 800b30e:	e086      	b.n	800b41e <get_sof+0x3fc>
       ci++, compptr++) {
    compptr->component_index = ci;
 800b310:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b312:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b314:	605a      	str	r2, [r3, #4]
    INPUT_BYTE(cinfo, compptr->component_id, return FALSE);
 800b316:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d10e      	bne.n	800b33a <get_sof+0x318>
 800b31c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b31e:	68db      	ldr	r3, [r3, #12]
 800b320:	68f8      	ldr	r0, [r7, #12]
 800b322:	4798      	blx	r3
 800b324:	4603      	mov	r3, r0
 800b326:	2b00      	cmp	r3, #0
 800b328:	d101      	bne.n	800b32e <get_sof+0x30c>
 800b32a:	2300      	movs	r3, #0
 800b32c:	e089      	b.n	800b442 <get_sof+0x420>
 800b32e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b330:	681b      	ldr	r3, [r3, #0]
 800b332:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b336:	685b      	ldr	r3, [r3, #4]
 800b338:	62bb      	str	r3, [r7, #40]	; 0x28
 800b33a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b33c:	3b01      	subs	r3, #1
 800b33e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b340:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b342:	1c5a      	adds	r2, r3, #1
 800b344:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b346:	781b      	ldrb	r3, [r3, #0]
 800b348:	461a      	mov	r2, r3
 800b34a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b34c:	601a      	str	r2, [r3, #0]
    INPUT_BYTE(cinfo, c, return FALSE);
 800b34e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b350:	2b00      	cmp	r3, #0
 800b352:	d10e      	bne.n	800b372 <get_sof+0x350>
 800b354:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b356:	68db      	ldr	r3, [r3, #12]
 800b358:	68f8      	ldr	r0, [r7, #12]
 800b35a:	4798      	blx	r3
 800b35c:	4603      	mov	r3, r0
 800b35e:	2b00      	cmp	r3, #0
 800b360:	d101      	bne.n	800b366 <get_sof+0x344>
 800b362:	2300      	movs	r3, #0
 800b364:	e06d      	b.n	800b442 <get_sof+0x420>
 800b366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b368:	681b      	ldr	r3, [r3, #0]
 800b36a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b36c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b36e:	685b      	ldr	r3, [r3, #4]
 800b370:	62bb      	str	r3, [r7, #40]	; 0x28
 800b372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b374:	3b01      	subs	r3, #1
 800b376:	62bb      	str	r3, [r7, #40]	; 0x28
 800b378:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37a:	1c5a      	adds	r2, r3, #1
 800b37c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b37e:	781b      	ldrb	r3, [r3, #0]
 800b380:	61bb      	str	r3, [r7, #24]
    compptr->h_samp_factor = (c >> 4) & 15;
 800b382:	69bb      	ldr	r3, [r7, #24]
 800b384:	111b      	asrs	r3, r3, #4
 800b386:	f003 020f 	and.w	r2, r3, #15
 800b38a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b38c:	609a      	str	r2, [r3, #8]
    compptr->v_samp_factor = (c     ) & 15;
 800b38e:	69bb      	ldr	r3, [r7, #24]
 800b390:	f003 020f 	and.w	r2, r3, #15
 800b394:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b396:	60da      	str	r2, [r3, #12]
    INPUT_BYTE(cinfo, compptr->quant_tbl_no, return FALSE);
 800b398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	d10e      	bne.n	800b3bc <get_sof+0x39a>
 800b39e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3a0:	68db      	ldr	r3, [r3, #12]
 800b3a2:	68f8      	ldr	r0, [r7, #12]
 800b3a4:	4798      	blx	r3
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d101      	bne.n	800b3b0 <get_sof+0x38e>
 800b3ac:	2300      	movs	r3, #0
 800b3ae:	e048      	b.n	800b442 <get_sof+0x420>
 800b3b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b2:	681b      	ldr	r3, [r3, #0]
 800b3b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b3b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b3b8:	685b      	ldr	r3, [r3, #4]
 800b3ba:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b3be:	3b01      	subs	r3, #1
 800b3c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b3c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b3c4:	1c5a      	adds	r2, r3, #1
 800b3c6:	62fa      	str	r2, [r7, #44]	; 0x2c
 800b3c8:	781b      	ldrb	r3, [r3, #0]
 800b3ca:	461a      	mov	r2, r3
 800b3cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3ce:	611a      	str	r2, [r3, #16]

    TRACEMS4(cinfo, 1, JTRC_SOF_COMPONENT,
 800b3d0:	68fb      	ldr	r3, [r7, #12]
 800b3d2:	681b      	ldr	r3, [r3, #0]
 800b3d4:	3318      	adds	r3, #24
 800b3d6:	617b      	str	r3, [r7, #20]
 800b3d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3da:	681a      	ldr	r2, [r3, #0]
 800b3dc:	697b      	ldr	r3, [r7, #20]
 800b3de:	601a      	str	r2, [r3, #0]
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	3304      	adds	r3, #4
 800b3e4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3e6:	6892      	ldr	r2, [r2, #8]
 800b3e8:	601a      	str	r2, [r3, #0]
 800b3ea:	697b      	ldr	r3, [r7, #20]
 800b3ec:	3308      	adds	r3, #8
 800b3ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3f0:	68d2      	ldr	r2, [r2, #12]
 800b3f2:	601a      	str	r2, [r3, #0]
 800b3f4:	697b      	ldr	r3, [r7, #20]
 800b3f6:	330c      	adds	r3, #12
 800b3f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b3fa:	6912      	ldr	r2, [r2, #16]
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	68fb      	ldr	r3, [r7, #12]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2267      	movs	r2, #103	; 0x67
 800b404:	615a      	str	r2, [r3, #20]
 800b406:	68fb      	ldr	r3, [r7, #12]
 800b408:	681b      	ldr	r3, [r3, #0]
 800b40a:	685b      	ldr	r3, [r3, #4]
 800b40c:	2101      	movs	r1, #1
 800b40e:	68f8      	ldr	r0, [r7, #12]
 800b410:	4798      	blx	r3
       ci++, compptr++) {
 800b412:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b414:	3301      	adds	r3, #1
 800b416:	637b      	str	r3, [r7, #52]	; 0x34
 800b418:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b41a:	3358      	adds	r3, #88	; 0x58
 800b41c:	633b      	str	r3, [r7, #48]	; 0x30
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b422:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b424:	429a      	cmp	r2, r3
 800b426:	f6ff af73 	blt.w	800b310 <get_sof+0x2ee>
	     compptr->component_id, compptr->h_samp_factor,
	     compptr->v_samp_factor, compptr->quant_tbl_no);
  }

  cinfo->marker->saw_SOF = TRUE;
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b430:	2201      	movs	r2, #1
 800b432:	611a      	str	r2, [r3, #16]

  INPUT_SYNC(cinfo);
 800b434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b436:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b438:	601a      	str	r2, [r3, #0]
 800b43a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b43c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b43e:	605a      	str	r2, [r3, #4]
  return TRUE;
 800b440:	2301      	movs	r3, #1
}
 800b442:	4618      	mov	r0, r3
 800b444:	3738      	adds	r7, #56	; 0x38
 800b446:	46bd      	mov	sp, r7
 800b448:	bd80      	pop	{r7, pc}

0800b44a <get_sos>:


LOCAL(boolean)
get_sos (j_decompress_ptr cinfo)
/* Process a SOS marker */
{
 800b44a:	b580      	push	{r7, lr}
 800b44c:	b08e      	sub	sp, #56	; 0x38
 800b44e:	af00      	add	r7, sp, #0
 800b450:	6078      	str	r0, [r7, #4]
  INT32 length;
  int i, ci, n, c, cc;
  jpeg_component_info * compptr;
  INPUT_VARS(cinfo);
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	699b      	ldr	r3, [r3, #24]
 800b456:	623b      	str	r3, [r7, #32]
 800b458:	6a3b      	ldr	r3, [r7, #32]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	62bb      	str	r3, [r7, #40]	; 0x28
 800b45e:	6a3b      	ldr	r3, [r7, #32]
 800b460:	685b      	ldr	r3, [r3, #4]
 800b462:	627b      	str	r3, [r7, #36]	; 0x24

  if (! cinfo->marker->saw_SOF)
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b46a:	691b      	ldr	r3, [r3, #16]
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	d108      	bne.n	800b482 <get_sos+0x38>
    ERREXIT(cinfo, JERR_SOS_NO_SOF);
 800b470:	687b      	ldr	r3, [r7, #4]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	2240      	movs	r2, #64	; 0x40
 800b476:	615a      	str	r2, [r3, #20]
 800b478:	687b      	ldr	r3, [r7, #4]
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	6878      	ldr	r0, [r7, #4]
 800b480:	4798      	blx	r3

  INPUT_2BYTES(cinfo, length, return FALSE);
 800b482:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b484:	2b00      	cmp	r3, #0
 800b486:	d10e      	bne.n	800b4a6 <get_sos+0x5c>
 800b488:	6a3b      	ldr	r3, [r7, #32]
 800b48a:	68db      	ldr	r3, [r3, #12]
 800b48c:	6878      	ldr	r0, [r7, #4]
 800b48e:	4798      	blx	r3
 800b490:	4603      	mov	r3, r0
 800b492:	2b00      	cmp	r3, #0
 800b494:	d101      	bne.n	800b49a <get_sos+0x50>
 800b496:	2300      	movs	r3, #0
 800b498:	e1a1      	b.n	800b7de <get_sos+0x394>
 800b49a:	6a3b      	ldr	r3, [r7, #32]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4a0:	6a3b      	ldr	r3, [r7, #32]
 800b4a2:	685b      	ldr	r3, [r3, #4]
 800b4a4:	627b      	str	r3, [r7, #36]	; 0x24
 800b4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4a8:	3b01      	subs	r3, #1
 800b4aa:	627b      	str	r3, [r7, #36]	; 0x24
 800b4ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4ae:	1c5a      	adds	r2, r3, #1
 800b4b0:	62ba      	str	r2, [r7, #40]	; 0x28
 800b4b2:	781b      	ldrb	r3, [r3, #0]
 800b4b4:	021b      	lsls	r3, r3, #8
 800b4b6:	61fb      	str	r3, [r7, #28]
 800b4b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d10e      	bne.n	800b4dc <get_sos+0x92>
 800b4be:	6a3b      	ldr	r3, [r7, #32]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	6878      	ldr	r0, [r7, #4]
 800b4c4:	4798      	blx	r3
 800b4c6:	4603      	mov	r3, r0
 800b4c8:	2b00      	cmp	r3, #0
 800b4ca:	d101      	bne.n	800b4d0 <get_sos+0x86>
 800b4cc:	2300      	movs	r3, #0
 800b4ce:	e186      	b.n	800b7de <get_sos+0x394>
 800b4d0:	6a3b      	ldr	r3, [r7, #32]
 800b4d2:	681b      	ldr	r3, [r3, #0]
 800b4d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b4d6:	6a3b      	ldr	r3, [r7, #32]
 800b4d8:	685b      	ldr	r3, [r3, #4]
 800b4da:	627b      	str	r3, [r7, #36]	; 0x24
 800b4dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4de:	3b01      	subs	r3, #1
 800b4e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b4e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b4e4:	1c5a      	adds	r2, r3, #1
 800b4e6:	62ba      	str	r2, [r7, #40]	; 0x28
 800b4e8:	781b      	ldrb	r3, [r3, #0]
 800b4ea:	461a      	mov	r2, r3
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	61fb      	str	r3, [r7, #28]

  INPUT_BYTE(cinfo, n, return FALSE); /* Number of components */
 800b4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d10e      	bne.n	800b516 <get_sos+0xcc>
 800b4f8:	6a3b      	ldr	r3, [r7, #32]
 800b4fa:	68db      	ldr	r3, [r3, #12]
 800b4fc:	6878      	ldr	r0, [r7, #4]
 800b4fe:	4798      	blx	r3
 800b500:	4603      	mov	r3, r0
 800b502:	2b00      	cmp	r3, #0
 800b504:	d101      	bne.n	800b50a <get_sos+0xc0>
 800b506:	2300      	movs	r3, #0
 800b508:	e169      	b.n	800b7de <get_sos+0x394>
 800b50a:	6a3b      	ldr	r3, [r7, #32]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	62bb      	str	r3, [r7, #40]	; 0x28
 800b510:	6a3b      	ldr	r3, [r7, #32]
 800b512:	685b      	ldr	r3, [r3, #4]
 800b514:	627b      	str	r3, [r7, #36]	; 0x24
 800b516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b518:	3b01      	subs	r3, #1
 800b51a:	627b      	str	r3, [r7, #36]	; 0x24
 800b51c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	62ba      	str	r2, [r7, #40]	; 0x28
 800b522:	781b      	ldrb	r3, [r3, #0]
 800b524:	61bb      	str	r3, [r7, #24]

  TRACEMS1(cinfo, 1, JTRC_SOS, n);
 800b526:	687b      	ldr	r3, [r7, #4]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2269      	movs	r2, #105	; 0x69
 800b52c:	615a      	str	r2, [r3, #20]
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	69ba      	ldr	r2, [r7, #24]
 800b534:	619a      	str	r2, [r3, #24]
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	685b      	ldr	r3, [r3, #4]
 800b53c:	2101      	movs	r1, #1
 800b53e:	6878      	ldr	r0, [r7, #4]
 800b540:	4798      	blx	r3

  if (length != (n * 2 + 6) || n > MAX_COMPS_IN_SCAN ||
 800b542:	69bb      	ldr	r3, [r7, #24]
 800b544:	3303      	adds	r3, #3
 800b546:	005b      	lsls	r3, r3, #1
 800b548:	69fa      	ldr	r2, [r7, #28]
 800b54a:	429a      	cmp	r2, r3
 800b54c:	d10a      	bne.n	800b564 <get_sos+0x11a>
 800b54e:	69bb      	ldr	r3, [r7, #24]
 800b550:	2b04      	cmp	r3, #4
 800b552:	dc07      	bgt.n	800b564 <get_sos+0x11a>
 800b554:	69bb      	ldr	r3, [r7, #24]
 800b556:	2b00      	cmp	r3, #0
 800b558:	d10d      	bne.n	800b576 <get_sos+0x12c>
      (n == 0 && !cinfo->progressive_mode))
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800b560:	2b00      	cmp	r3, #0
 800b562:	d108      	bne.n	800b576 <get_sos+0x12c>
      /* pseudo SOS marker only allowed in progressive mode */
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	220c      	movs	r2, #12
 800b56a:	615a      	str	r2, [r3, #20]
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	6878      	ldr	r0, [r7, #4]
 800b574:	4798      	blx	r3

  cinfo->comps_in_scan = n;
 800b576:	687b      	ldr	r3, [r7, #4]
 800b578:	69ba      	ldr	r2, [r7, #24]
 800b57a:	f8c3 2150 	str.w	r2, [r3, #336]	; 0x150

  /* Collect the component-spec parameters */

  for (i = 0; i < n; i++) {
 800b57e:	2300      	movs	r3, #0
 800b580:	637b      	str	r3, [r7, #52]	; 0x34
 800b582:	e089      	b.n	800b698 <get_sos+0x24e>
    INPUT_BYTE(cinfo, cc, return FALSE);
 800b584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b586:	2b00      	cmp	r3, #0
 800b588:	d10e      	bne.n	800b5a8 <get_sos+0x15e>
 800b58a:	6a3b      	ldr	r3, [r7, #32]
 800b58c:	68db      	ldr	r3, [r3, #12]
 800b58e:	6878      	ldr	r0, [r7, #4]
 800b590:	4798      	blx	r3
 800b592:	4603      	mov	r3, r0
 800b594:	2b00      	cmp	r3, #0
 800b596:	d101      	bne.n	800b59c <get_sos+0x152>
 800b598:	2300      	movs	r3, #0
 800b59a:	e120      	b.n	800b7de <get_sos+0x394>
 800b59c:	6a3b      	ldr	r3, [r7, #32]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5a2:	6a3b      	ldr	r3, [r7, #32]
 800b5a4:	685b      	ldr	r3, [r3, #4]
 800b5a6:	627b      	str	r3, [r7, #36]	; 0x24
 800b5a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5aa:	3b01      	subs	r3, #1
 800b5ac:	627b      	str	r3, [r7, #36]	; 0x24
 800b5ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5b0:	1c5a      	adds	r2, r3, #1
 800b5b2:	62ba      	str	r2, [r7, #40]	; 0x28
 800b5b4:	781b      	ldrb	r3, [r3, #0]
 800b5b6:	60fb      	str	r3, [r7, #12]
    INPUT_BYTE(cinfo, c, return FALSE);
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	d10e      	bne.n	800b5dc <get_sos+0x192>
 800b5be:	6a3b      	ldr	r3, [r7, #32]
 800b5c0:	68db      	ldr	r3, [r3, #12]
 800b5c2:	6878      	ldr	r0, [r7, #4]
 800b5c4:	4798      	blx	r3
 800b5c6:	4603      	mov	r3, r0
 800b5c8:	2b00      	cmp	r3, #0
 800b5ca:	d101      	bne.n	800b5d0 <get_sos+0x186>
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	e106      	b.n	800b7de <get_sos+0x394>
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	62bb      	str	r3, [r7, #40]	; 0x28
 800b5d6:	6a3b      	ldr	r3, [r7, #32]
 800b5d8:	685b      	ldr	r3, [r3, #4]
 800b5da:	627b      	str	r3, [r7, #36]	; 0x24
 800b5dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b5de:	3b01      	subs	r3, #1
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24
 800b5e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b5e4:	1c5a      	adds	r2, r3, #1
 800b5e6:	62ba      	str	r2, [r7, #40]	; 0x28
 800b5e8:	781b      	ldrb	r3, [r3, #0]
 800b5ea:	617b      	str	r3, [r7, #20]
    
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b5ec:	2300      	movs	r3, #0
 800b5ee:	633b      	str	r3, [r7, #48]	; 0x30
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800b5f6:	62fb      	str	r3, [r7, #44]	; 0x2c
 800b5f8:	e00a      	b.n	800b610 <get_sos+0x1c6>
	 ci++, compptr++) {
      if (cc == compptr->component_id)
 800b5fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68fa      	ldr	r2, [r7, #12]
 800b600:	429a      	cmp	r2, r3
 800b602:	d018      	beq.n	800b636 <get_sos+0x1ec>
	 ci++, compptr++) {
 800b604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b606:	3301      	adds	r3, #1
 800b608:	633b      	str	r3, [r7, #48]	; 0x30
 800b60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b60c:	3358      	adds	r3, #88	; 0x58
 800b60e:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800b610:	687b      	ldr	r3, [r7, #4]
 800b612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b614:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b616:	429a      	cmp	r2, r3
 800b618:	dbef      	blt.n	800b5fa <get_sos+0x1b0>
	goto id_found;
    }

    ERREXIT1(cinfo, JERR_BAD_COMPONENT_ID, cc);
 800b61a:	687b      	ldr	r3, [r7, #4]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2204      	movs	r2, #4
 800b620:	615a      	str	r2, [r3, #20]
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	68fa      	ldr	r2, [r7, #12]
 800b628:	619a      	str	r2, [r3, #24]
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	6878      	ldr	r0, [r7, #4]
 800b632:	4798      	blx	r3
 800b634:	e000      	b.n	800b638 <get_sos+0x1ee>
	goto id_found;
 800b636:	bf00      	nop

  id_found:

    cinfo->cur_comp_info[i] = compptr;
 800b638:	687a      	ldr	r2, [r7, #4]
 800b63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b63c:	3354      	adds	r3, #84	; 0x54
 800b63e:	009b      	lsls	r3, r3, #2
 800b640:	4413      	add	r3, r2
 800b642:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b644:	605a      	str	r2, [r3, #4]
    compptr->dc_tbl_no = (c >> 4) & 15;
 800b646:	697b      	ldr	r3, [r7, #20]
 800b648:	111b      	asrs	r3, r3, #4
 800b64a:	f003 020f 	and.w	r2, r3, #15
 800b64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b650:	615a      	str	r2, [r3, #20]
    compptr->ac_tbl_no = (c     ) & 15;
 800b652:	697b      	ldr	r3, [r7, #20]
 800b654:	f003 020f 	and.w	r2, r3, #15
 800b658:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b65a:	619a      	str	r2, [r3, #24]
    
    TRACEMS3(cinfo, 1, JTRC_SOS_COMPONENT, cc,
 800b65c:	687b      	ldr	r3, [r7, #4]
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3318      	adds	r3, #24
 800b662:	60bb      	str	r3, [r7, #8]
 800b664:	68bb      	ldr	r3, [r7, #8]
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	601a      	str	r2, [r3, #0]
 800b66a:	68bb      	ldr	r3, [r7, #8]
 800b66c:	3304      	adds	r3, #4
 800b66e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b670:	6952      	ldr	r2, [r2, #20]
 800b672:	601a      	str	r2, [r3, #0]
 800b674:	68bb      	ldr	r3, [r7, #8]
 800b676:	3308      	adds	r3, #8
 800b678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b67a:	6992      	ldr	r2, [r2, #24]
 800b67c:	601a      	str	r2, [r3, #0]
 800b67e:	687b      	ldr	r3, [r7, #4]
 800b680:	681b      	ldr	r3, [r3, #0]
 800b682:	226a      	movs	r2, #106	; 0x6a
 800b684:	615a      	str	r2, [r3, #20]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	681b      	ldr	r3, [r3, #0]
 800b68a:	685b      	ldr	r3, [r3, #4]
 800b68c:	2101      	movs	r1, #1
 800b68e:	6878      	ldr	r0, [r7, #4]
 800b690:	4798      	blx	r3
  for (i = 0; i < n; i++) {
 800b692:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b694:	3301      	adds	r3, #1
 800b696:	637b      	str	r3, [r7, #52]	; 0x34
 800b698:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b69a:	69bb      	ldr	r3, [r7, #24]
 800b69c:	429a      	cmp	r2, r3
 800b69e:	f6ff af71 	blt.w	800b584 <get_sos+0x13a>
	     compptr->dc_tbl_no, compptr->ac_tbl_no);
  }

  /* Collect the additional scan parameters Ss, Se, Ah/Al. */
  INPUT_BYTE(cinfo, c, return FALSE);
 800b6a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	d10e      	bne.n	800b6c6 <get_sos+0x27c>
 800b6a8:	6a3b      	ldr	r3, [r7, #32]
 800b6aa:	68db      	ldr	r3, [r3, #12]
 800b6ac:	6878      	ldr	r0, [r7, #4]
 800b6ae:	4798      	blx	r3
 800b6b0:	4603      	mov	r3, r0
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d101      	bne.n	800b6ba <get_sos+0x270>
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	e091      	b.n	800b7de <get_sos+0x394>
 800b6ba:	6a3b      	ldr	r3, [r7, #32]
 800b6bc:	681b      	ldr	r3, [r3, #0]
 800b6be:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6c0:	6a3b      	ldr	r3, [r7, #32]
 800b6c2:	685b      	ldr	r3, [r3, #4]
 800b6c4:	627b      	str	r3, [r7, #36]	; 0x24
 800b6c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6c8:	3b01      	subs	r3, #1
 800b6ca:	627b      	str	r3, [r7, #36]	; 0x24
 800b6cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6ce:	1c5a      	adds	r2, r3, #1
 800b6d0:	62ba      	str	r2, [r7, #40]	; 0x28
 800b6d2:	781b      	ldrb	r3, [r3, #0]
 800b6d4:	617b      	str	r3, [r7, #20]
  cinfo->Ss = c;
 800b6d6:	687b      	ldr	r3, [r7, #4]
 800b6d8:	697a      	ldr	r2, [r7, #20]
 800b6da:	f8c3 2198 	str.w	r2, [r3, #408]	; 0x198
  INPUT_BYTE(cinfo, c, return FALSE);
 800b6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b6e0:	2b00      	cmp	r3, #0
 800b6e2:	d10e      	bne.n	800b702 <get_sos+0x2b8>
 800b6e4:	6a3b      	ldr	r3, [r7, #32]
 800b6e6:	68db      	ldr	r3, [r3, #12]
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	4798      	blx	r3
 800b6ec:	4603      	mov	r3, r0
 800b6ee:	2b00      	cmp	r3, #0
 800b6f0:	d101      	bne.n	800b6f6 <get_sos+0x2ac>
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	e073      	b.n	800b7de <get_sos+0x394>
 800b6f6:	6a3b      	ldr	r3, [r7, #32]
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	62bb      	str	r3, [r7, #40]	; 0x28
 800b6fc:	6a3b      	ldr	r3, [r7, #32]
 800b6fe:	685b      	ldr	r3, [r3, #4]
 800b700:	627b      	str	r3, [r7, #36]	; 0x24
 800b702:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b704:	3b01      	subs	r3, #1
 800b706:	627b      	str	r3, [r7, #36]	; 0x24
 800b708:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b70a:	1c5a      	adds	r2, r3, #1
 800b70c:	62ba      	str	r2, [r7, #40]	; 0x28
 800b70e:	781b      	ldrb	r3, [r3, #0]
 800b710:	617b      	str	r3, [r7, #20]
  cinfo->Se = c;
 800b712:	687b      	ldr	r3, [r7, #4]
 800b714:	697a      	ldr	r2, [r7, #20]
 800b716:	f8c3 219c 	str.w	r2, [r3, #412]	; 0x19c
  INPUT_BYTE(cinfo, c, return FALSE);
 800b71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	d10e      	bne.n	800b73e <get_sos+0x2f4>
 800b720:	6a3b      	ldr	r3, [r7, #32]
 800b722:	68db      	ldr	r3, [r3, #12]
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	4798      	blx	r3
 800b728:	4603      	mov	r3, r0
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d101      	bne.n	800b732 <get_sos+0x2e8>
 800b72e:	2300      	movs	r3, #0
 800b730:	e055      	b.n	800b7de <get_sos+0x394>
 800b732:	6a3b      	ldr	r3, [r7, #32]
 800b734:	681b      	ldr	r3, [r3, #0]
 800b736:	62bb      	str	r3, [r7, #40]	; 0x28
 800b738:	6a3b      	ldr	r3, [r7, #32]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	627b      	str	r3, [r7, #36]	; 0x24
 800b73e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b740:	3b01      	subs	r3, #1
 800b742:	627b      	str	r3, [r7, #36]	; 0x24
 800b744:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b746:	1c5a      	adds	r2, r3, #1
 800b748:	62ba      	str	r2, [r7, #40]	; 0x28
 800b74a:	781b      	ldrb	r3, [r3, #0]
 800b74c:	617b      	str	r3, [r7, #20]
  cinfo->Ah = (c >> 4) & 15;
 800b74e:	697b      	ldr	r3, [r7, #20]
 800b750:	111b      	asrs	r3, r3, #4
 800b752:	f003 020f 	and.w	r2, r3, #15
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	f8c3 21a0 	str.w	r2, [r3, #416]	; 0x1a0
  cinfo->Al = (c     ) & 15;
 800b75c:	697b      	ldr	r3, [r7, #20]
 800b75e:	f003 020f 	and.w	r2, r3, #15
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	f8c3 21a4 	str.w	r2, [r3, #420]	; 0x1a4

  TRACEMS4(cinfo, 1, JTRC_SOS_PARAMS, cinfo->Ss, cinfo->Se,
 800b768:	687b      	ldr	r3, [r7, #4]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	3318      	adds	r3, #24
 800b76e:	613b      	str	r3, [r7, #16]
 800b770:	687b      	ldr	r3, [r7, #4]
 800b772:	f8d3 2198 	ldr.w	r2, [r3, #408]	; 0x198
 800b776:	693b      	ldr	r3, [r7, #16]
 800b778:	601a      	str	r2, [r3, #0]
 800b77a:	693b      	ldr	r3, [r7, #16]
 800b77c:	3304      	adds	r3, #4
 800b77e:	687a      	ldr	r2, [r7, #4]
 800b780:	f8d2 219c 	ldr.w	r2, [r2, #412]	; 0x19c
 800b784:	601a      	str	r2, [r3, #0]
 800b786:	693b      	ldr	r3, [r7, #16]
 800b788:	3308      	adds	r3, #8
 800b78a:	687a      	ldr	r2, [r7, #4]
 800b78c:	f8d2 21a0 	ldr.w	r2, [r2, #416]	; 0x1a0
 800b790:	601a      	str	r2, [r3, #0]
 800b792:	693b      	ldr	r3, [r7, #16]
 800b794:	330c      	adds	r3, #12
 800b796:	687a      	ldr	r2, [r7, #4]
 800b798:	f8d2 21a4 	ldr.w	r2, [r2, #420]	; 0x1a4
 800b79c:	601a      	str	r2, [r3, #0]
 800b79e:	687b      	ldr	r3, [r7, #4]
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	226b      	movs	r2, #107	; 0x6b
 800b7a4:	615a      	str	r2, [r3, #20]
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	685b      	ldr	r3, [r3, #4]
 800b7ac:	2101      	movs	r1, #1
 800b7ae:	6878      	ldr	r0, [r7, #4]
 800b7b0:	4798      	blx	r3
	   cinfo->Ah, cinfo->Al);

  /* Prepare to scan data & restart markers */
  cinfo->marker->next_restart_num = 0;
 800b7b2:	687b      	ldr	r3, [r7, #4]
 800b7b4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	615a      	str	r2, [r3, #20]

  /* Count another (non-pseudo) SOS marker */
  if (n) cinfo->input_scan_number++;
 800b7bc:	69bb      	ldr	r3, [r7, #24]
 800b7be:	2b00      	cmp	r3, #0
 800b7c0:	d006      	beq.n	800b7d0 <get_sos+0x386>
 800b7c2:	687b      	ldr	r3, [r7, #4]
 800b7c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800b7c8:	1c5a      	adds	r2, r3, #1
 800b7ca:	687b      	ldr	r3, [r7, #4]
 800b7cc:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  INPUT_SYNC(cinfo);
 800b7d0:	6a3b      	ldr	r3, [r7, #32]
 800b7d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b7d4:	601a      	str	r2, [r3, #0]
 800b7d6:	6a3b      	ldr	r3, [r7, #32]
 800b7d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7da:	605a      	str	r2, [r3, #4]
  return TRUE;
 800b7dc:	2301      	movs	r3, #1
}
 800b7de:	4618      	mov	r0, r3
 800b7e0:	3738      	adds	r7, #56	; 0x38
 800b7e2:	46bd      	mov	sp, r7
 800b7e4:	bd80      	pop	{r7, pc}

0800b7e6 <get_dac>:
#ifdef D_ARITH_CODING_SUPPORTED

LOCAL(boolean)
get_dac (j_decompress_ptr cinfo)
/* Process a DAC marker */
{
 800b7e6:	b580      	push	{r7, lr}
 800b7e8:	b088      	sub	sp, #32
 800b7ea:	af00      	add	r7, sp, #0
 800b7ec:	6078      	str	r0, [r7, #4]
  INT32 length;
  int index, val;
  INPUT_VARS(cinfo);
 800b7ee:	687b      	ldr	r3, [r7, #4]
 800b7f0:	699b      	ldr	r3, [r3, #24]
 800b7f2:	613b      	str	r3, [r7, #16]
 800b7f4:	693b      	ldr	r3, [r7, #16]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	61bb      	str	r3, [r7, #24]
 800b7fa:	693b      	ldr	r3, [r7, #16]
 800b7fc:	685b      	ldr	r3, [r3, #4]
 800b7fe:	617b      	str	r3, [r7, #20]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800b800:	697b      	ldr	r3, [r7, #20]
 800b802:	2b00      	cmp	r3, #0
 800b804:	d10e      	bne.n	800b824 <get_dac+0x3e>
 800b806:	693b      	ldr	r3, [r7, #16]
 800b808:	68db      	ldr	r3, [r3, #12]
 800b80a:	6878      	ldr	r0, [r7, #4]
 800b80c:	4798      	blx	r3
 800b80e:	4603      	mov	r3, r0
 800b810:	2b00      	cmp	r3, #0
 800b812:	d101      	bne.n	800b818 <get_dac+0x32>
 800b814:	2300      	movs	r3, #0
 800b816:	e0dc      	b.n	800b9d2 <get_dac+0x1ec>
 800b818:	693b      	ldr	r3, [r7, #16]
 800b81a:	681b      	ldr	r3, [r3, #0]
 800b81c:	61bb      	str	r3, [r7, #24]
 800b81e:	693b      	ldr	r3, [r7, #16]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	617b      	str	r3, [r7, #20]
 800b824:	697b      	ldr	r3, [r7, #20]
 800b826:	3b01      	subs	r3, #1
 800b828:	617b      	str	r3, [r7, #20]
 800b82a:	69bb      	ldr	r3, [r7, #24]
 800b82c:	1c5a      	adds	r2, r3, #1
 800b82e:	61ba      	str	r2, [r7, #24]
 800b830:	781b      	ldrb	r3, [r3, #0]
 800b832:	021b      	lsls	r3, r3, #8
 800b834:	61fb      	str	r3, [r7, #28]
 800b836:	697b      	ldr	r3, [r7, #20]
 800b838:	2b00      	cmp	r3, #0
 800b83a:	d10e      	bne.n	800b85a <get_dac+0x74>
 800b83c:	693b      	ldr	r3, [r7, #16]
 800b83e:	68db      	ldr	r3, [r3, #12]
 800b840:	6878      	ldr	r0, [r7, #4]
 800b842:	4798      	blx	r3
 800b844:	4603      	mov	r3, r0
 800b846:	2b00      	cmp	r3, #0
 800b848:	d101      	bne.n	800b84e <get_dac+0x68>
 800b84a:	2300      	movs	r3, #0
 800b84c:	e0c1      	b.n	800b9d2 <get_dac+0x1ec>
 800b84e:	693b      	ldr	r3, [r7, #16]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	61bb      	str	r3, [r7, #24]
 800b854:	693b      	ldr	r3, [r7, #16]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	617b      	str	r3, [r7, #20]
 800b85a:	697b      	ldr	r3, [r7, #20]
 800b85c:	3b01      	subs	r3, #1
 800b85e:	617b      	str	r3, [r7, #20]
 800b860:	69bb      	ldr	r3, [r7, #24]
 800b862:	1c5a      	adds	r2, r3, #1
 800b864:	61ba      	str	r2, [r7, #24]
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	461a      	mov	r2, r3
 800b86a:	69fb      	ldr	r3, [r7, #28]
 800b86c:	4413      	add	r3, r2
 800b86e:	61fb      	str	r3, [r7, #28]
  length -= 2;
 800b870:	69fb      	ldr	r3, [r7, #28]
 800b872:	3b02      	subs	r3, #2
 800b874:	61fb      	str	r3, [r7, #28]
  
  while (length > 0) {
 800b876:	e095      	b.n	800b9a4 <get_dac+0x1be>
    INPUT_BYTE(cinfo, index, return FALSE);
 800b878:	697b      	ldr	r3, [r7, #20]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d10e      	bne.n	800b89c <get_dac+0xb6>
 800b87e:	693b      	ldr	r3, [r7, #16]
 800b880:	68db      	ldr	r3, [r3, #12]
 800b882:	6878      	ldr	r0, [r7, #4]
 800b884:	4798      	blx	r3
 800b886:	4603      	mov	r3, r0
 800b888:	2b00      	cmp	r3, #0
 800b88a:	d101      	bne.n	800b890 <get_dac+0xaa>
 800b88c:	2300      	movs	r3, #0
 800b88e:	e0a0      	b.n	800b9d2 <get_dac+0x1ec>
 800b890:	693b      	ldr	r3, [r7, #16]
 800b892:	681b      	ldr	r3, [r3, #0]
 800b894:	61bb      	str	r3, [r7, #24]
 800b896:	693b      	ldr	r3, [r7, #16]
 800b898:	685b      	ldr	r3, [r3, #4]
 800b89a:	617b      	str	r3, [r7, #20]
 800b89c:	697b      	ldr	r3, [r7, #20]
 800b89e:	3b01      	subs	r3, #1
 800b8a0:	617b      	str	r3, [r7, #20]
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	1c5a      	adds	r2, r3, #1
 800b8a6:	61ba      	str	r2, [r7, #24]
 800b8a8:	781b      	ldrb	r3, [r3, #0]
 800b8aa:	60fb      	str	r3, [r7, #12]
    INPUT_BYTE(cinfo, val, return FALSE);
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d10e      	bne.n	800b8d0 <get_dac+0xea>
 800b8b2:	693b      	ldr	r3, [r7, #16]
 800b8b4:	68db      	ldr	r3, [r3, #12]
 800b8b6:	6878      	ldr	r0, [r7, #4]
 800b8b8:	4798      	blx	r3
 800b8ba:	4603      	mov	r3, r0
 800b8bc:	2b00      	cmp	r3, #0
 800b8be:	d101      	bne.n	800b8c4 <get_dac+0xde>
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	e086      	b.n	800b9d2 <get_dac+0x1ec>
 800b8c4:	693b      	ldr	r3, [r7, #16]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	61bb      	str	r3, [r7, #24]
 800b8ca:	693b      	ldr	r3, [r7, #16]
 800b8cc:	685b      	ldr	r3, [r3, #4]
 800b8ce:	617b      	str	r3, [r7, #20]
 800b8d0:	697b      	ldr	r3, [r7, #20]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	617b      	str	r3, [r7, #20]
 800b8d6:	69bb      	ldr	r3, [r7, #24]
 800b8d8:	1c5a      	adds	r2, r3, #1
 800b8da:	61ba      	str	r2, [r7, #24]
 800b8dc:	781b      	ldrb	r3, [r3, #0]
 800b8de:	60bb      	str	r3, [r7, #8]

    length -= 2;
 800b8e0:	69fb      	ldr	r3, [r7, #28]
 800b8e2:	3b02      	subs	r3, #2
 800b8e4:	61fb      	str	r3, [r7, #28]

    TRACEMS2(cinfo, 1, JTRC_DAC, index, val);
 800b8e6:	687b      	ldr	r3, [r7, #4]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	2251      	movs	r2, #81	; 0x51
 800b8ec:	615a      	str	r2, [r3, #20]
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	68fa      	ldr	r2, [r7, #12]
 800b8f4:	619a      	str	r2, [r3, #24]
 800b8f6:	687b      	ldr	r3, [r7, #4]
 800b8f8:	681b      	ldr	r3, [r3, #0]
 800b8fa:	68ba      	ldr	r2, [r7, #8]
 800b8fc:	61da      	str	r2, [r3, #28]
 800b8fe:	687b      	ldr	r3, [r7, #4]
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	685b      	ldr	r3, [r3, #4]
 800b904:	2101      	movs	r1, #1
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	4798      	blx	r3

    if (index < 0 || index >= (2*NUM_ARITH_TBLS))
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	2b00      	cmp	r3, #0
 800b90e:	db02      	blt.n	800b916 <get_dac+0x130>
 800b910:	68fb      	ldr	r3, [r7, #12]
 800b912:	2b1f      	cmp	r3, #31
 800b914:	dd0c      	ble.n	800b930 <get_dac+0x14a>
      ERREXIT1(cinfo, JERR_DAC_INDEX, index);
 800b916:	687b      	ldr	r3, [r7, #4]
 800b918:	681b      	ldr	r3, [r3, #0]
 800b91a:	221d      	movs	r2, #29
 800b91c:	615a      	str	r2, [r3, #20]
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	68fa      	ldr	r2, [r7, #12]
 800b924:	619a      	str	r2, [r3, #24]
 800b926:	687b      	ldr	r3, [r7, #4]
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	6878      	ldr	r0, [r7, #4]
 800b92e:	4798      	blx	r3

    if (index >= NUM_ARITH_TBLS) { /* define AC table */
 800b930:	68fb      	ldr	r3, [r7, #12]
 800b932:	2b0f      	cmp	r3, #15
 800b934:	dd09      	ble.n	800b94a <get_dac+0x164>
      cinfo->arith_ac_K[index-NUM_ARITH_TBLS] = (UINT8) val;
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3b10      	subs	r3, #16
 800b93a:	68ba      	ldr	r2, [r7, #8]
 800b93c:	b2d1      	uxtb	r1, r2
 800b93e:	687a      	ldr	r2, [r7, #4]
 800b940:	4413      	add	r3, r2
 800b942:	460a      	mov	r2, r1
 800b944:	f883 2108 	strb.w	r2, [r3, #264]	; 0x108
 800b948:	e02c      	b.n	800b9a4 <get_dac+0x1be>
    } else {			/* define DC table */
      cinfo->arith_dc_L[index] = (UINT8) (val & 0x0F);
 800b94a:	68bb      	ldr	r3, [r7, #8]
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	f003 030f 	and.w	r3, r3, #15
 800b952:	b2d9      	uxtb	r1, r3
 800b954:	687a      	ldr	r2, [r7, #4]
 800b956:	68fb      	ldr	r3, [r7, #12]
 800b958:	4413      	add	r3, r2
 800b95a:	33e8      	adds	r3, #232	; 0xe8
 800b95c:	460a      	mov	r2, r1
 800b95e:	701a      	strb	r2, [r3, #0]
      cinfo->arith_dc_U[index] = (UINT8) (val >> 4);
 800b960:	68bb      	ldr	r3, [r7, #8]
 800b962:	111b      	asrs	r3, r3, #4
 800b964:	b2d9      	uxtb	r1, r3
 800b966:	687a      	ldr	r2, [r7, #4]
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	4413      	add	r3, r2
 800b96c:	33f8      	adds	r3, #248	; 0xf8
 800b96e:	460a      	mov	r2, r1
 800b970:	701a      	strb	r2, [r3, #0]
      if (cinfo->arith_dc_L[index] > cinfo->arith_dc_U[index])
 800b972:	687a      	ldr	r2, [r7, #4]
 800b974:	68fb      	ldr	r3, [r7, #12]
 800b976:	4413      	add	r3, r2
 800b978:	33e8      	adds	r3, #232	; 0xe8
 800b97a:	781a      	ldrb	r2, [r3, #0]
 800b97c:	6879      	ldr	r1, [r7, #4]
 800b97e:	68fb      	ldr	r3, [r7, #12]
 800b980:	440b      	add	r3, r1
 800b982:	33f8      	adds	r3, #248	; 0xf8
 800b984:	781b      	ldrb	r3, [r3, #0]
 800b986:	429a      	cmp	r2, r3
 800b988:	d90c      	bls.n	800b9a4 <get_dac+0x1be>
	ERREXIT1(cinfo, JERR_DAC_VALUE, val);
 800b98a:	687b      	ldr	r3, [r7, #4]
 800b98c:	681b      	ldr	r3, [r3, #0]
 800b98e:	221e      	movs	r2, #30
 800b990:	615a      	str	r2, [r3, #20]
 800b992:	687b      	ldr	r3, [r7, #4]
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	68ba      	ldr	r2, [r7, #8]
 800b998:	619a      	str	r2, [r3, #24]
 800b99a:	687b      	ldr	r3, [r7, #4]
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6878      	ldr	r0, [r7, #4]
 800b9a2:	4798      	blx	r3
  while (length > 0) {
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	f73f af66 	bgt.w	800b878 <get_dac+0x92>
    }
  }

  if (length != 0)
 800b9ac:	69fb      	ldr	r3, [r7, #28]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d008      	beq.n	800b9c4 <get_dac+0x1de>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800b9b2:	687b      	ldr	r3, [r7, #4]
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	220c      	movs	r2, #12
 800b9b8:	615a      	str	r2, [r3, #20]
 800b9ba:	687b      	ldr	r3, [r7, #4]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	6878      	ldr	r0, [r7, #4]
 800b9c2:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 800b9c4:	693b      	ldr	r3, [r7, #16]
 800b9c6:	69ba      	ldr	r2, [r7, #24]
 800b9c8:	601a      	str	r2, [r3, #0]
 800b9ca:	693b      	ldr	r3, [r7, #16]
 800b9cc:	697a      	ldr	r2, [r7, #20]
 800b9ce:	605a      	str	r2, [r3, #4]
  return TRUE;
 800b9d0:	2301      	movs	r3, #1
}
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	3720      	adds	r7, #32
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	bd80      	pop	{r7, pc}

0800b9da <get_dht>:


LOCAL(boolean)
get_dht (j_decompress_ptr cinfo)
/* Process a DHT marker */
{
 800b9da:	b5b0      	push	{r4, r5, r7, lr}
 800b9dc:	b0d2      	sub	sp, #328	; 0x148
 800b9de:	af00      	add	r7, sp, #0
 800b9e0:	1d3b      	adds	r3, r7, #4
 800b9e2:	6018      	str	r0, [r3, #0]
  INT32 length;
  UINT8 bits[17];
  UINT8 huffval[256];
  int i, index, count;
  JHUFF_TBL **htblptr;
  INPUT_VARS(cinfo);
 800b9e4:	1d3b      	adds	r3, r7, #4
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	699b      	ldr	r3, [r3, #24]
 800b9ea:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800b9ee:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800b9f8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800b9fc:	685b      	ldr	r3, [r3, #4]
 800b9fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

  INPUT_2BYTES(cinfo, length, return FALSE);
 800ba02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba06:	2b00      	cmp	r3, #0
 800ba08:	d114      	bne.n	800ba34 <get_dht+0x5a>
 800ba0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba0e:	68db      	ldr	r3, [r3, #12]
 800ba10:	1d3a      	adds	r2, r7, #4
 800ba12:	6810      	ldr	r0, [r2, #0]
 800ba14:	4798      	blx	r3
 800ba16:	4603      	mov	r3, r0
 800ba18:	2b00      	cmp	r3, #0
 800ba1a:	d101      	bne.n	800ba20 <get_dht+0x46>
 800ba1c:	2300      	movs	r3, #0
 800ba1e:	e22f      	b.n	800be80 <get_dht+0x4a6>
 800ba20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba24:	681b      	ldr	r3, [r3, #0]
 800ba26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ba2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba2e:	685b      	ldr	r3, [r3, #4]
 800ba30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ba34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba38:	3b01      	subs	r3, #1
 800ba3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ba3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ba42:	1c5a      	adds	r2, r3, #1
 800ba44:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800ba48:	781b      	ldrb	r3, [r3, #0]
 800ba4a:	021b      	lsls	r3, r3, #8
 800ba4c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 800ba50:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d114      	bne.n	800ba82 <get_dht+0xa8>
 800ba58:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba5c:	68db      	ldr	r3, [r3, #12]
 800ba5e:	1d3a      	adds	r2, r7, #4
 800ba60:	6810      	ldr	r0, [r2, #0]
 800ba62:	4798      	blx	r3
 800ba64:	4603      	mov	r3, r0
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d101      	bne.n	800ba6e <get_dht+0x94>
 800ba6a:	2300      	movs	r3, #0
 800ba6c:	e208      	b.n	800be80 <get_dht+0x4a6>
 800ba6e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba72:	681b      	ldr	r3, [r3, #0]
 800ba74:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800ba78:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800ba7c:	685b      	ldr	r3, [r3, #4]
 800ba7e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ba82:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800ba86:	3b01      	subs	r3, #1
 800ba88:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800ba8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800ba90:	1c5a      	adds	r2, r3, #1
 800ba92:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800ba96:	781b      	ldrb	r3, [r3, #0]
 800ba98:	461a      	mov	r2, r3
 800ba9a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800ba9e:	4413      	add	r3, r2
 800baa0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  length -= 2;
 800baa4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800baa8:	3b02      	subs	r3, #2
 800baaa:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  
  while (length > 16) {
 800baae:	e1c7      	b.n	800be40 <get_dht+0x466>
    INPUT_BYTE(cinfo, index, return FALSE);
 800bab0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d114      	bne.n	800bae2 <get_dht+0x108>
 800bab8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800babc:	68db      	ldr	r3, [r3, #12]
 800babe:	1d3a      	adds	r2, r7, #4
 800bac0:	6810      	ldr	r0, [r2, #0]
 800bac2:	4798      	blx	r3
 800bac4:	4603      	mov	r3, r0
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d101      	bne.n	800bace <get_dht+0xf4>
 800baca:	2300      	movs	r3, #0
 800bacc:	e1d8      	b.n	800be80 <get_dht+0x4a6>
 800bace:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800bad8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800badc:	685b      	ldr	r3, [r3, #4]
 800bade:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bae2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bae6:	3b01      	subs	r3, #1
 800bae8:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800baec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800baf0:	1c5a      	adds	r2, r3, #1
 800baf2:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800baf6:	781b      	ldrb	r3, [r3, #0]
 800baf8:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    TRACEMS1(cinfo, 1, JTRC_DHT, index);
 800bafc:	1d3b      	adds	r3, r7, #4
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2252      	movs	r2, #82	; 0x52
 800bb04:	615a      	str	r2, [r3, #20]
 800bb06:	1d3b      	adds	r3, r7, #4
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800bb10:	619a      	str	r2, [r3, #24]
 800bb12:	1d3b      	adds	r3, r7, #4
 800bb14:	681b      	ldr	r3, [r3, #0]
 800bb16:	681b      	ldr	r3, [r3, #0]
 800bb18:	685b      	ldr	r3, [r3, #4]
 800bb1a:	1d3a      	adds	r2, r7, #4
 800bb1c:	2101      	movs	r1, #1
 800bb1e:	6810      	ldr	r0, [r2, #0]
 800bb20:	4798      	blx	r3
      
    bits[0] = 0;
 800bb22:	2300      	movs	r3, #0
 800bb24:	f887 310c 	strb.w	r3, [r7, #268]	; 0x10c
    count = 0;
 800bb28:	2300      	movs	r3, #0
 800bb2a:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    for (i = 1; i <= 16; i++) {
 800bb2e:	2301      	movs	r3, #1
 800bb30:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800bb34:	e03b      	b.n	800bbae <get_dht+0x1d4>
      INPUT_BYTE(cinfo, bits[i], return FALSE);
 800bb36:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb3a:	2b00      	cmp	r3, #0
 800bb3c:	d114      	bne.n	800bb68 <get_dht+0x18e>
 800bb3e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb42:	68db      	ldr	r3, [r3, #12]
 800bb44:	1d3a      	adds	r2, r7, #4
 800bb46:	6810      	ldr	r0, [r2, #0]
 800bb48:	4798      	blx	r3
 800bb4a:	4603      	mov	r3, r0
 800bb4c:	2b00      	cmp	r3, #0
 800bb4e:	d101      	bne.n	800bb54 <get_dht+0x17a>
 800bb50:	2300      	movs	r3, #0
 800bb52:	e195      	b.n	800be80 <get_dht+0x4a6>
 800bb54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800bb5e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bb62:	685b      	ldr	r3, [r3, #4]
 800bb64:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bb68:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bb6c:	3b01      	subs	r3, #1
 800bb6e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bb72:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bb76:	1c5a      	adds	r2, r3, #1
 800bb78:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800bb7c:	7819      	ldrb	r1, [r3, #0]
 800bb7e:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800bb82:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bb86:	4413      	add	r3, r2
 800bb88:	460a      	mov	r2, r1
 800bb8a:	701a      	strb	r2, [r3, #0]
      count += bits[i];
 800bb8c:	f507 7286 	add.w	r2, r7, #268	; 0x10c
 800bb90:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bb94:	4413      	add	r3, r2
 800bb96:	781b      	ldrb	r3, [r3, #0]
 800bb98:	461a      	mov	r2, r3
 800bb9a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bb9e:	4413      	add	r3, r2
 800bba0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    for (i = 1; i <= 16; i++) {
 800bba4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bba8:	3301      	adds	r3, #1
 800bbaa:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800bbae:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bbb2:	2b10      	cmp	r3, #16
 800bbb4:	ddbf      	ble.n	800bb36 <get_dht+0x15c>
    }

    length -= 1 + 16;
 800bbb6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bbba:	3b11      	subs	r3, #17
 800bbbc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800bbc0:	1d3b      	adds	r3, r7, #4
 800bbc2:	681b      	ldr	r3, [r3, #0]
 800bbc4:	681b      	ldr	r3, [r3, #0]
 800bbc6:	3318      	adds	r3, #24
 800bbc8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800bbcc:	f897 310d 	ldrb.w	r3, [r7, #269]	; 0x10d
 800bbd0:	461a      	mov	r2, r3
 800bbd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bbd6:	601a      	str	r2, [r3, #0]
 800bbd8:	f897 210e 	ldrb.w	r2, [r7, #270]	; 0x10e
 800bbdc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bbe0:	3304      	adds	r3, #4
 800bbe2:	601a      	str	r2, [r3, #0]
 800bbe4:	f897 210f 	ldrb.w	r2, [r7, #271]	; 0x10f
 800bbe8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bbec:	3308      	adds	r3, #8
 800bbee:	601a      	str	r2, [r3, #0]
 800bbf0:	f897 2110 	ldrb.w	r2, [r7, #272]	; 0x110
 800bbf4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bbf8:	330c      	adds	r3, #12
 800bbfa:	601a      	str	r2, [r3, #0]
 800bbfc:	f897 2111 	ldrb.w	r2, [r7, #273]	; 0x111
 800bc00:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bc04:	3310      	adds	r3, #16
 800bc06:	601a      	str	r2, [r3, #0]
 800bc08:	f897 2112 	ldrb.w	r2, [r7, #274]	; 0x112
 800bc0c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bc10:	3314      	adds	r3, #20
 800bc12:	601a      	str	r2, [r3, #0]
 800bc14:	f897 2113 	ldrb.w	r2, [r7, #275]	; 0x113
 800bc18:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bc1c:	3318      	adds	r3, #24
 800bc1e:	601a      	str	r2, [r3, #0]
 800bc20:	f897 2114 	ldrb.w	r2, [r7, #276]	; 0x114
 800bc24:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800bc28:	331c      	adds	r3, #28
 800bc2a:	601a      	str	r2, [r3, #0]
 800bc2c:	1d3b      	adds	r3, r7, #4
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	2258      	movs	r2, #88	; 0x58
 800bc34:	615a      	str	r2, [r3, #20]
 800bc36:	1d3b      	adds	r3, r7, #4
 800bc38:	681b      	ldr	r3, [r3, #0]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	685b      	ldr	r3, [r3, #4]
 800bc3e:	1d3a      	adds	r2, r7, #4
 800bc40:	2102      	movs	r1, #2
 800bc42:	6810      	ldr	r0, [r2, #0]
 800bc44:	4798      	blx	r3
	     bits[1], bits[2], bits[3], bits[4],
	     bits[5], bits[6], bits[7], bits[8]);
    TRACEMS8(cinfo, 2, JTRC_HUFFBITS,
 800bc46:	1d3b      	adds	r3, r7, #4
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	3318      	adds	r3, #24
 800bc4e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800bc52:	f897 3115 	ldrb.w	r3, [r7, #277]	; 0x115
 800bc56:	461a      	mov	r2, r3
 800bc58:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc5c:	601a      	str	r2, [r3, #0]
 800bc5e:	f897 2116 	ldrb.w	r2, [r7, #278]	; 0x116
 800bc62:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc66:	3304      	adds	r3, #4
 800bc68:	601a      	str	r2, [r3, #0]
 800bc6a:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 800bc6e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc72:	3308      	adds	r3, #8
 800bc74:	601a      	str	r2, [r3, #0]
 800bc76:	f897 2118 	ldrb.w	r2, [r7, #280]	; 0x118
 800bc7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc7e:	330c      	adds	r3, #12
 800bc80:	601a      	str	r2, [r3, #0]
 800bc82:	f897 2119 	ldrb.w	r2, [r7, #281]	; 0x119
 800bc86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc8a:	3310      	adds	r3, #16
 800bc8c:	601a      	str	r2, [r3, #0]
 800bc8e:	f897 211a 	ldrb.w	r2, [r7, #282]	; 0x11a
 800bc92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bc96:	3314      	adds	r3, #20
 800bc98:	601a      	str	r2, [r3, #0]
 800bc9a:	f897 211b 	ldrb.w	r2, [r7, #283]	; 0x11b
 800bc9e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bca2:	3318      	adds	r3, #24
 800bca4:	601a      	str	r2, [r3, #0]
 800bca6:	f897 211c 	ldrb.w	r2, [r7, #284]	; 0x11c
 800bcaa:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800bcae:	331c      	adds	r3, #28
 800bcb0:	601a      	str	r2, [r3, #0]
 800bcb2:	1d3b      	adds	r3, r7, #4
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	2258      	movs	r2, #88	; 0x58
 800bcba:	615a      	str	r2, [r3, #20]
 800bcbc:	1d3b      	adds	r3, r7, #4
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	685b      	ldr	r3, [r3, #4]
 800bcc4:	1d3a      	adds	r2, r7, #4
 800bcc6:	2102      	movs	r1, #2
 800bcc8:	6810      	ldr	r0, [r2, #0]
 800bcca:	4798      	blx	r3
	     bits[13], bits[14], bits[15], bits[16]);

    /* Here we just do minimal validation of the counts to avoid walking
     * off the end of our table space.  jdhuff.c will check more carefully.
     */
    if (count > 256 || ((INT32) count) > length)
 800bccc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bcd0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800bcd4:	dc05      	bgt.n	800bce2 <get_dht+0x308>
 800bcd6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800bcda:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800bcde:	429a      	cmp	r2, r3
 800bce0:	dd0b      	ble.n	800bcfa <get_dht+0x320>
      ERREXIT(cinfo, JERR_BAD_HUFF_TABLE);
 800bce2:	1d3b      	adds	r3, r7, #4
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681b      	ldr	r3, [r3, #0]
 800bce8:	2209      	movs	r2, #9
 800bcea:	615a      	str	r2, [r3, #20]
 800bcec:	1d3b      	adds	r3, r7, #4
 800bcee:	681b      	ldr	r3, [r3, #0]
 800bcf0:	681b      	ldr	r3, [r3, #0]
 800bcf2:	681b      	ldr	r3, [r3, #0]
 800bcf4:	1d3a      	adds	r2, r7, #4
 800bcf6:	6810      	ldr	r0, [r2, #0]
 800bcf8:	4798      	blx	r3

    for (i = 0; i < count; i++)
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800bd00:	e02f      	b.n	800bd62 <get_dht+0x388>
      INPUT_BYTE(cinfo, huffval[i], return FALSE);
 800bd02:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d114      	bne.n	800bd34 <get_dht+0x35a>
 800bd0a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd0e:	68db      	ldr	r3, [r3, #12]
 800bd10:	1d3a      	adds	r2, r7, #4
 800bd12:	6810      	ldr	r0, [r2, #0]
 800bd14:	4798      	blx	r3
 800bd16:	4603      	mov	r3, r0
 800bd18:	2b00      	cmp	r3, #0
 800bd1a:	d101      	bne.n	800bd20 <get_dht+0x346>
 800bd1c:	2300      	movs	r3, #0
 800bd1e:	e0af      	b.n	800be80 <get_dht+0x4a6>
 800bd20:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd24:	681b      	ldr	r3, [r3, #0]
 800bd26:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
 800bd2a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bd34:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800bd38:	3b01      	subs	r3, #1
 800bd3a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 800bd3e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 800bd42:	1c5a      	adds	r2, r3, #1
 800bd44:	f8c7 2130 	str.w	r2, [r7, #304]	; 0x130
 800bd48:	7819      	ldrb	r1, [r3, #0]
 800bd4a:	f107 020c 	add.w	r2, r7, #12
 800bd4e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bd52:	4413      	add	r3, r2
 800bd54:	460a      	mov	r2, r1
 800bd56:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < count; i++)
 800bd58:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bd5c:	3301      	adds	r3, #1
 800bd5e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 800bd62:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800bd66:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bd6a:	429a      	cmp	r2, r3
 800bd6c:	dbc9      	blt.n	800bd02 <get_dht+0x328>

    length -= count;
 800bd6e:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800bd72:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800bd76:	1ad3      	subs	r3, r2, r3
 800bd78:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    if (index & 0x10) {		/* AC table definition */
 800bd7c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bd80:	f003 0310 	and.w	r3, r3, #16
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	d00f      	beq.n	800bda8 <get_dht+0x3ce>
      index -= 0x10;
 800bd88:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bd8c:	3b10      	subs	r3, #16
 800bd8e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
      htblptr = &cinfo->ac_huff_tbl_ptrs[index];
 800bd92:	1d3a      	adds	r2, r7, #4
 800bd94:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bd98:	3330      	adds	r3, #48	; 0x30
 800bd9a:	009b      	lsls	r3, r3, #2
 800bd9c:	6812      	ldr	r2, [r2, #0]
 800bd9e:	4413      	add	r3, r2
 800bda0:	3304      	adds	r3, #4
 800bda2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
 800bda6:	e009      	b.n	800bdbc <get_dht+0x3e2>
    } else {			/* DC table definition */
      htblptr = &cinfo->dc_huff_tbl_ptrs[index];
 800bda8:	1d3a      	adds	r2, r7, #4
 800bdaa:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bdae:	332c      	adds	r3, #44	; 0x2c
 800bdb0:	009b      	lsls	r3, r3, #2
 800bdb2:	6812      	ldr	r2, [r2, #0]
 800bdb4:	4413      	add	r3, r2
 800bdb6:	3304      	adds	r3, #4
 800bdb8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    }

    if (index < 0 || index >= NUM_HUFF_TBLS)
 800bdbc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bdc0:	2b00      	cmp	r3, #0
 800bdc2:	db03      	blt.n	800bdcc <get_dht+0x3f2>
 800bdc4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800bdc8:	2b03      	cmp	r3, #3
 800bdca:	dd11      	ble.n	800bdf0 <get_dht+0x416>
      ERREXIT1(cinfo, JERR_DHT_INDEX, index);
 800bdcc:	1d3b      	adds	r3, r7, #4
 800bdce:	681b      	ldr	r3, [r3, #0]
 800bdd0:	681b      	ldr	r3, [r3, #0]
 800bdd2:	221f      	movs	r2, #31
 800bdd4:	615a      	str	r2, [r3, #20]
 800bdd6:	1d3b      	adds	r3, r7, #4
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	681b      	ldr	r3, [r3, #0]
 800bddc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800bde0:	619a      	str	r2, [r3, #24]
 800bde2:	1d3b      	adds	r3, r7, #4
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	1d3a      	adds	r2, r7, #4
 800bdec:	6810      	ldr	r0, [r2, #0]
 800bdee:	4798      	blx	r3

    if (*htblptr == NULL)
 800bdf0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800bdf4:	681b      	ldr	r3, [r3, #0]
 800bdf6:	2b00      	cmp	r3, #0
 800bdf8:	d107      	bne.n	800be0a <get_dht+0x430>
      *htblptr = jpeg_alloc_huff_table((j_common_ptr) cinfo);
 800bdfa:	1d3b      	adds	r3, r7, #4
 800bdfc:	6818      	ldr	r0, [r3, #0]
 800bdfe:	f7f7 fcef 	bl	80037e0 <jpeg_alloc_huff_table>
 800be02:	4602      	mov	r2, r0
 800be04:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800be08:	601a      	str	r2, [r3, #0]
  
    MEMCOPY((*htblptr)->bits, bits, SIZEOF((*htblptr)->bits));
 800be0a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	461d      	mov	r5, r3
 800be12:	f507 7486 	add.w	r4, r7, #268	; 0x10c
 800be16:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800be18:	6028      	str	r0, [r5, #0]
 800be1a:	6069      	str	r1, [r5, #4]
 800be1c:	60aa      	str	r2, [r5, #8]
 800be1e:	60eb      	str	r3, [r5, #12]
 800be20:	7823      	ldrb	r3, [r4, #0]
 800be22:	742b      	strb	r3, [r5, #16]
    MEMCOPY((*htblptr)->huffval, huffval, SIZEOF((*htblptr)->huffval));
 800be24:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	f103 0211 	add.w	r2, r3, #17
 800be2e:	f107 030c 	add.w	r3, r7, #12
 800be32:	4610      	mov	r0, r2
 800be34:	4619      	mov	r1, r3
 800be36:	f44f 7380 	mov.w	r3, #256	; 0x100
 800be3a:	461a      	mov	r2, r3
 800be3c:	f013 fabe 	bl	801f3bc <memcpy>
  while (length > 16) {
 800be40:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800be44:	2b10      	cmp	r3, #16
 800be46:	f73f ae33 	bgt.w	800bab0 <get_dht+0xd6>
  }

  if (length != 0)
 800be4a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d00b      	beq.n	800be6a <get_dht+0x490>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800be52:	1d3b      	adds	r3, r7, #4
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	220c      	movs	r2, #12
 800be5a:	615a      	str	r2, [r3, #20]
 800be5c:	1d3b      	adds	r3, r7, #4
 800be5e:	681b      	ldr	r3, [r3, #0]
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	681b      	ldr	r3, [r3, #0]
 800be64:	1d3a      	adds	r2, r7, #4
 800be66:	6810      	ldr	r0, [r2, #0]
 800be68:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 800be6a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be6e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800be72:	601a      	str	r2, [r3, #0]
 800be74:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800be78:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 800be7c:	605a      	str	r2, [r3, #4]
  return TRUE;
 800be7e:	2301      	movs	r3, #1
}
 800be80:	4618      	mov	r0, r3
 800be82:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800be86:	46bd      	mov	sp, r7
 800be88:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800be8c <get_dqt>:


LOCAL(boolean)
get_dqt (j_decompress_ptr cinfo)
/* Process a DQT marker */
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b08e      	sub	sp, #56	; 0x38
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  INT32 length, count, i;
  int n, prec;
  unsigned int tmp;
  JQUANT_TBL *quant_ptr;
  const int *natural_order;
  INPUT_VARS(cinfo);
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	699b      	ldr	r3, [r3, #24]
 800be98:	61bb      	str	r3, [r7, #24]
 800be9a:	69bb      	ldr	r3, [r7, #24]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	623b      	str	r3, [r7, #32]
 800bea0:	69bb      	ldr	r3, [r7, #24]
 800bea2:	685b      	ldr	r3, [r3, #4]
 800bea4:	61fb      	str	r3, [r7, #28]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800bea6:	69fb      	ldr	r3, [r7, #28]
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d10e      	bne.n	800beca <get_dqt+0x3e>
 800beac:	69bb      	ldr	r3, [r7, #24]
 800beae:	68db      	ldr	r3, [r3, #12]
 800beb0:	6878      	ldr	r0, [r7, #4]
 800beb2:	4798      	blx	r3
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d101      	bne.n	800bebe <get_dqt+0x32>
 800beba:	2300      	movs	r3, #0
 800bebc:	e21e      	b.n	800c2fc <get_dqt+0x470>
 800bebe:	69bb      	ldr	r3, [r7, #24]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	623b      	str	r3, [r7, #32]
 800bec4:	69bb      	ldr	r3, [r7, #24]
 800bec6:	685b      	ldr	r3, [r3, #4]
 800bec8:	61fb      	str	r3, [r7, #28]
 800beca:	69fb      	ldr	r3, [r7, #28]
 800becc:	3b01      	subs	r3, #1
 800bece:	61fb      	str	r3, [r7, #28]
 800bed0:	6a3b      	ldr	r3, [r7, #32]
 800bed2:	1c5a      	adds	r2, r3, #1
 800bed4:	623a      	str	r2, [r7, #32]
 800bed6:	781b      	ldrb	r3, [r3, #0]
 800bed8:	021b      	lsls	r3, r3, #8
 800beda:	637b      	str	r3, [r7, #52]	; 0x34
 800bedc:	69fb      	ldr	r3, [r7, #28]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	d10e      	bne.n	800bf00 <get_dqt+0x74>
 800bee2:	69bb      	ldr	r3, [r7, #24]
 800bee4:	68db      	ldr	r3, [r3, #12]
 800bee6:	6878      	ldr	r0, [r7, #4]
 800bee8:	4798      	blx	r3
 800beea:	4603      	mov	r3, r0
 800beec:	2b00      	cmp	r3, #0
 800beee:	d101      	bne.n	800bef4 <get_dqt+0x68>
 800bef0:	2300      	movs	r3, #0
 800bef2:	e203      	b.n	800c2fc <get_dqt+0x470>
 800bef4:	69bb      	ldr	r3, [r7, #24]
 800bef6:	681b      	ldr	r3, [r3, #0]
 800bef8:	623b      	str	r3, [r7, #32]
 800befa:	69bb      	ldr	r3, [r7, #24]
 800befc:	685b      	ldr	r3, [r3, #4]
 800befe:	61fb      	str	r3, [r7, #28]
 800bf00:	69fb      	ldr	r3, [r7, #28]
 800bf02:	3b01      	subs	r3, #1
 800bf04:	61fb      	str	r3, [r7, #28]
 800bf06:	6a3b      	ldr	r3, [r7, #32]
 800bf08:	1c5a      	adds	r2, r3, #1
 800bf0a:	623a      	str	r2, [r7, #32]
 800bf0c:	781b      	ldrb	r3, [r3, #0]
 800bf0e:	461a      	mov	r2, r3
 800bf10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf12:	4413      	add	r3, r2
 800bf14:	637b      	str	r3, [r7, #52]	; 0x34
  length -= 2;
 800bf16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf18:	3b02      	subs	r3, #2
 800bf1a:	637b      	str	r3, [r7, #52]	; 0x34

  while (length > 0) {
 800bf1c:	e1d7      	b.n	800c2ce <get_dqt+0x442>
    length--;
 800bf1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bf20:	3b01      	subs	r3, #1
 800bf22:	637b      	str	r3, [r7, #52]	; 0x34
    INPUT_BYTE(cinfo, n, return FALSE);
 800bf24:	69fb      	ldr	r3, [r7, #28]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d10e      	bne.n	800bf48 <get_dqt+0xbc>
 800bf2a:	69bb      	ldr	r3, [r7, #24]
 800bf2c:	68db      	ldr	r3, [r3, #12]
 800bf2e:	6878      	ldr	r0, [r7, #4]
 800bf30:	4798      	blx	r3
 800bf32:	4603      	mov	r3, r0
 800bf34:	2b00      	cmp	r3, #0
 800bf36:	d101      	bne.n	800bf3c <get_dqt+0xb0>
 800bf38:	2300      	movs	r3, #0
 800bf3a:	e1df      	b.n	800c2fc <get_dqt+0x470>
 800bf3c:	69bb      	ldr	r3, [r7, #24]
 800bf3e:	681b      	ldr	r3, [r3, #0]
 800bf40:	623b      	str	r3, [r7, #32]
 800bf42:	69bb      	ldr	r3, [r7, #24]
 800bf44:	685b      	ldr	r3, [r3, #4]
 800bf46:	61fb      	str	r3, [r7, #28]
 800bf48:	69fb      	ldr	r3, [r7, #28]
 800bf4a:	3b01      	subs	r3, #1
 800bf4c:	61fb      	str	r3, [r7, #28]
 800bf4e:	6a3b      	ldr	r3, [r7, #32]
 800bf50:	1c5a      	adds	r2, r3, #1
 800bf52:	623a      	str	r2, [r7, #32]
 800bf54:	781b      	ldrb	r3, [r3, #0]
 800bf56:	617b      	str	r3, [r7, #20]
    prec = n >> 4;
 800bf58:	697b      	ldr	r3, [r7, #20]
 800bf5a:	111b      	asrs	r3, r3, #4
 800bf5c:	613b      	str	r3, [r7, #16]
    n &= 0x0F;
 800bf5e:	697b      	ldr	r3, [r7, #20]
 800bf60:	f003 030f 	and.w	r3, r3, #15
 800bf64:	617b      	str	r3, [r7, #20]

    TRACEMS2(cinfo, 1, JTRC_DQT, n, prec);
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2253      	movs	r2, #83	; 0x53
 800bf6c:	615a      	str	r2, [r3, #20]
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	681b      	ldr	r3, [r3, #0]
 800bf72:	697a      	ldr	r2, [r7, #20]
 800bf74:	619a      	str	r2, [r3, #24]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	693a      	ldr	r2, [r7, #16]
 800bf7c:	61da      	str	r2, [r3, #28]
 800bf7e:	687b      	ldr	r3, [r7, #4]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	685b      	ldr	r3, [r3, #4]
 800bf84:	2101      	movs	r1, #1
 800bf86:	6878      	ldr	r0, [r7, #4]
 800bf88:	4798      	blx	r3

    if (n >= NUM_QUANT_TBLS)
 800bf8a:	697b      	ldr	r3, [r7, #20]
 800bf8c:	2b03      	cmp	r3, #3
 800bf8e:	dd0c      	ble.n	800bfaa <get_dqt+0x11e>
      ERREXIT1(cinfo, JERR_DQT_INDEX, n);
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2220      	movs	r2, #32
 800bf96:	615a      	str	r2, [r3, #20]
 800bf98:	687b      	ldr	r3, [r7, #4]
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	697a      	ldr	r2, [r7, #20]
 800bf9e:	619a      	str	r2, [r3, #24]
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	681b      	ldr	r3, [r3, #0]
 800bfa4:	681b      	ldr	r3, [r3, #0]
 800bfa6:	6878      	ldr	r0, [r7, #4]
 800bfa8:	4798      	blx	r3
      
    if (cinfo->quant_tbl_ptrs[n] == NULL)
 800bfaa:	687a      	ldr	r2, [r7, #4]
 800bfac:	697b      	ldr	r3, [r7, #20]
 800bfae:	3328      	adds	r3, #40	; 0x28
 800bfb0:	009b      	lsls	r3, r3, #2
 800bfb2:	4413      	add	r3, r2
 800bfb4:	685b      	ldr	r3, [r3, #4]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	d109      	bne.n	800bfce <get_dqt+0x142>
      cinfo->quant_tbl_ptrs[n] = jpeg_alloc_quant_table((j_common_ptr) cinfo);
 800bfba:	6878      	ldr	r0, [r7, #4]
 800bfbc:	f7f7 fbfb 	bl	80037b6 <jpeg_alloc_quant_table>
 800bfc0:	4601      	mov	r1, r0
 800bfc2:	687a      	ldr	r2, [r7, #4]
 800bfc4:	697b      	ldr	r3, [r7, #20]
 800bfc6:	3328      	adds	r3, #40	; 0x28
 800bfc8:	009b      	lsls	r3, r3, #2
 800bfca:	4413      	add	r3, r2
 800bfcc:	6059      	str	r1, [r3, #4]
    quant_ptr = cinfo->quant_tbl_ptrs[n];
 800bfce:	687a      	ldr	r2, [r7, #4]
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	3328      	adds	r3, #40	; 0x28
 800bfd4:	009b      	lsls	r3, r3, #2
 800bfd6:	4413      	add	r3, r2
 800bfd8:	685b      	ldr	r3, [r3, #4]
 800bfda:	60fb      	str	r3, [r7, #12]

    if (prec) {
 800bfdc:	693b      	ldr	r3, [r7, #16]
 800bfde:	2b00      	cmp	r3, #0
 800bfe0:	d017      	beq.n	800c012 <get_dqt+0x186>
      if (length < DCTSIZE2 * 2) {
 800bfe2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bfe4:	2b7f      	cmp	r3, #127	; 0x7f
 800bfe6:	dc11      	bgt.n	800c00c <get_dqt+0x180>
	/* Initialize full table for safety. */
	for (i = 0; i < DCTSIZE2; i++) {
 800bfe8:	2300      	movs	r3, #0
 800bfea:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bfec:	e007      	b.n	800bffe <get_dqt+0x172>
	  quant_ptr->quantval[i] = 1;
 800bfee:	68fb      	ldr	r3, [r7, #12]
 800bff0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bff2:	2101      	movs	r1, #1
 800bff4:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < DCTSIZE2; i++) {
 800bff8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bffa:	3301      	adds	r3, #1
 800bffc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800bffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c000:	2b3f      	cmp	r3, #63	; 0x3f
 800c002:	ddf4      	ble.n	800bfee <get_dqt+0x162>
	}
	count = length >> 1;
 800c004:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c006:	105b      	asrs	r3, r3, #1
 800c008:	633b      	str	r3, [r7, #48]	; 0x30
 800c00a:	e018      	b.n	800c03e <get_dqt+0x1b2>
      } else
	count = DCTSIZE2;
 800c00c:	2340      	movs	r3, #64	; 0x40
 800c00e:	633b      	str	r3, [r7, #48]	; 0x30
 800c010:	e015      	b.n	800c03e <get_dqt+0x1b2>
    } else {
      if (length < DCTSIZE2) {
 800c012:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c014:	2b3f      	cmp	r3, #63	; 0x3f
 800c016:	dc10      	bgt.n	800c03a <get_dqt+0x1ae>
	/* Initialize full table for safety. */
	for (i = 0; i < DCTSIZE2; i++) {
 800c018:	2300      	movs	r3, #0
 800c01a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c01c:	e007      	b.n	800c02e <get_dqt+0x1a2>
	  quant_ptr->quantval[i] = 1;
 800c01e:	68fb      	ldr	r3, [r7, #12]
 800c020:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c022:	2101      	movs	r1, #1
 800c024:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (i = 0; i < DCTSIZE2; i++) {
 800c028:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c02a:	3301      	adds	r3, #1
 800c02c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c02e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c030:	2b3f      	cmp	r3, #63	; 0x3f
 800c032:	ddf4      	ble.n	800c01e <get_dqt+0x192>
	}
	count = length;
 800c034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c036:	633b      	str	r3, [r7, #48]	; 0x30
 800c038:	e001      	b.n	800c03e <get_dqt+0x1b2>
      } else
	count = DCTSIZE2;
 800c03a:	2340      	movs	r3, #64	; 0x40
 800c03c:	633b      	str	r3, [r7, #48]	; 0x30
 800c03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c040:	3b04      	subs	r3, #4
 800c042:	2b2d      	cmp	r3, #45	; 0x2d
 800c044:	d870      	bhi.n	800c128 <get_dqt+0x29c>
 800c046:	a201      	add	r2, pc, #4	; (adr r2, 800c04c <get_dqt+0x1c0>)
 800c048:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c04c:	0800c105 	.word	0x0800c105
 800c050:	0800c129 	.word	0x0800c129
 800c054:	0800c129 	.word	0x0800c129
 800c058:	0800c129 	.word	0x0800c129
 800c05c:	0800c129 	.word	0x0800c129
 800c060:	0800c10b 	.word	0x0800c10b
 800c064:	0800c129 	.word	0x0800c129
 800c068:	0800c129 	.word	0x0800c129
 800c06c:	0800c129 	.word	0x0800c129
 800c070:	0800c129 	.word	0x0800c129
 800c074:	0800c129 	.word	0x0800c129
 800c078:	0800c129 	.word	0x0800c129
 800c07c:	0800c111 	.word	0x0800c111
 800c080:	0800c129 	.word	0x0800c129
 800c084:	0800c129 	.word	0x0800c129
 800c088:	0800c129 	.word	0x0800c129
 800c08c:	0800c129 	.word	0x0800c129
 800c090:	0800c129 	.word	0x0800c129
 800c094:	0800c129 	.word	0x0800c129
 800c098:	0800c129 	.word	0x0800c129
 800c09c:	0800c129 	.word	0x0800c129
 800c0a0:	0800c117 	.word	0x0800c117
 800c0a4:	0800c129 	.word	0x0800c129
 800c0a8:	0800c129 	.word	0x0800c129
 800c0ac:	0800c129 	.word	0x0800c129
 800c0b0:	0800c129 	.word	0x0800c129
 800c0b4:	0800c129 	.word	0x0800c129
 800c0b8:	0800c129 	.word	0x0800c129
 800c0bc:	0800c129 	.word	0x0800c129
 800c0c0:	0800c129 	.word	0x0800c129
 800c0c4:	0800c129 	.word	0x0800c129
 800c0c8:	0800c129 	.word	0x0800c129
 800c0cc:	0800c11d 	.word	0x0800c11d
 800c0d0:	0800c129 	.word	0x0800c129
 800c0d4:	0800c129 	.word	0x0800c129
 800c0d8:	0800c129 	.word	0x0800c129
 800c0dc:	0800c129 	.word	0x0800c129
 800c0e0:	0800c129 	.word	0x0800c129
 800c0e4:	0800c129 	.word	0x0800c129
 800c0e8:	0800c129 	.word	0x0800c129
 800c0ec:	0800c129 	.word	0x0800c129
 800c0f0:	0800c129 	.word	0x0800c129
 800c0f4:	0800c129 	.word	0x0800c129
 800c0f8:	0800c129 	.word	0x0800c129
 800c0fc:	0800c129 	.word	0x0800c129
 800c100:	0800c123 	.word	0x0800c123
    }

    switch (count) {
    case (2*2): natural_order = jpeg_natural_order2; break;
 800c104:	4b7f      	ldr	r3, [pc, #508]	; (800c304 <get_dqt+0x478>)
 800c106:	627b      	str	r3, [r7, #36]	; 0x24
 800c108:	e011      	b.n	800c12e <get_dqt+0x2a2>
    case (3*3): natural_order = jpeg_natural_order3; break;
 800c10a:	4b7f      	ldr	r3, [pc, #508]	; (800c308 <get_dqt+0x47c>)
 800c10c:	627b      	str	r3, [r7, #36]	; 0x24
 800c10e:	e00e      	b.n	800c12e <get_dqt+0x2a2>
    case (4*4): natural_order = jpeg_natural_order4; break;
 800c110:	4b7e      	ldr	r3, [pc, #504]	; (800c30c <get_dqt+0x480>)
 800c112:	627b      	str	r3, [r7, #36]	; 0x24
 800c114:	e00b      	b.n	800c12e <get_dqt+0x2a2>
    case (5*5): natural_order = jpeg_natural_order5; break;
 800c116:	4b7e      	ldr	r3, [pc, #504]	; (800c310 <get_dqt+0x484>)
 800c118:	627b      	str	r3, [r7, #36]	; 0x24
 800c11a:	e008      	b.n	800c12e <get_dqt+0x2a2>
    case (6*6): natural_order = jpeg_natural_order6; break;
 800c11c:	4b7d      	ldr	r3, [pc, #500]	; (800c314 <get_dqt+0x488>)
 800c11e:	627b      	str	r3, [r7, #36]	; 0x24
 800c120:	e005      	b.n	800c12e <get_dqt+0x2a2>
    case (7*7): natural_order = jpeg_natural_order7; break;
 800c122:	4b7d      	ldr	r3, [pc, #500]	; (800c318 <get_dqt+0x48c>)
 800c124:	627b      	str	r3, [r7, #36]	; 0x24
 800c126:	e002      	b.n	800c12e <get_dqt+0x2a2>
    default:    natural_order = jpeg_natural_order;  break;
 800c128:	4b7c      	ldr	r3, [pc, #496]	; (800c31c <get_dqt+0x490>)
 800c12a:	627b      	str	r3, [r7, #36]	; 0x24
 800c12c:	bf00      	nop
    }

    for (i = 0; i < count; i++) {
 800c12e:	2300      	movs	r3, #0
 800c130:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c132:	e062      	b.n	800c1fa <get_dqt+0x36e>
      if (prec)
 800c134:	693b      	ldr	r3, [r7, #16]
 800c136:	2b00      	cmp	r3, #0
 800c138:	d038      	beq.n	800c1ac <get_dqt+0x320>
	INPUT_2BYTES(cinfo, tmp, return FALSE);
 800c13a:	69fb      	ldr	r3, [r7, #28]
 800c13c:	2b00      	cmp	r3, #0
 800c13e:	d10e      	bne.n	800c15e <get_dqt+0x2d2>
 800c140:	69bb      	ldr	r3, [r7, #24]
 800c142:	68db      	ldr	r3, [r3, #12]
 800c144:	6878      	ldr	r0, [r7, #4]
 800c146:	4798      	blx	r3
 800c148:	4603      	mov	r3, r0
 800c14a:	2b00      	cmp	r3, #0
 800c14c:	d101      	bne.n	800c152 <get_dqt+0x2c6>
 800c14e:	2300      	movs	r3, #0
 800c150:	e0d4      	b.n	800c2fc <get_dqt+0x470>
 800c152:	69bb      	ldr	r3, [r7, #24]
 800c154:	681b      	ldr	r3, [r3, #0]
 800c156:	623b      	str	r3, [r7, #32]
 800c158:	69bb      	ldr	r3, [r7, #24]
 800c15a:	685b      	ldr	r3, [r3, #4]
 800c15c:	61fb      	str	r3, [r7, #28]
 800c15e:	69fb      	ldr	r3, [r7, #28]
 800c160:	3b01      	subs	r3, #1
 800c162:	61fb      	str	r3, [r7, #28]
 800c164:	6a3b      	ldr	r3, [r7, #32]
 800c166:	1c5a      	adds	r2, r3, #1
 800c168:	623a      	str	r2, [r7, #32]
 800c16a:	781b      	ldrb	r3, [r3, #0]
 800c16c:	021b      	lsls	r3, r3, #8
 800c16e:	62bb      	str	r3, [r7, #40]	; 0x28
 800c170:	69fb      	ldr	r3, [r7, #28]
 800c172:	2b00      	cmp	r3, #0
 800c174:	d10e      	bne.n	800c194 <get_dqt+0x308>
 800c176:	69bb      	ldr	r3, [r7, #24]
 800c178:	68db      	ldr	r3, [r3, #12]
 800c17a:	6878      	ldr	r0, [r7, #4]
 800c17c:	4798      	blx	r3
 800c17e:	4603      	mov	r3, r0
 800c180:	2b00      	cmp	r3, #0
 800c182:	d101      	bne.n	800c188 <get_dqt+0x2fc>
 800c184:	2300      	movs	r3, #0
 800c186:	e0b9      	b.n	800c2fc <get_dqt+0x470>
 800c188:	69bb      	ldr	r3, [r7, #24]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	623b      	str	r3, [r7, #32]
 800c18e:	69bb      	ldr	r3, [r7, #24]
 800c190:	685b      	ldr	r3, [r3, #4]
 800c192:	61fb      	str	r3, [r7, #28]
 800c194:	69fb      	ldr	r3, [r7, #28]
 800c196:	3b01      	subs	r3, #1
 800c198:	61fb      	str	r3, [r7, #28]
 800c19a:	6a3b      	ldr	r3, [r7, #32]
 800c19c:	1c5a      	adds	r2, r3, #1
 800c19e:	623a      	str	r2, [r7, #32]
 800c1a0:	781b      	ldrb	r3, [r3, #0]
 800c1a2:	461a      	mov	r2, r3
 800c1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a6:	4413      	add	r3, r2
 800c1a8:	62bb      	str	r3, [r7, #40]	; 0x28
 800c1aa:	e019      	b.n	800c1e0 <get_dqt+0x354>
      else
	INPUT_BYTE(cinfo, tmp, return FALSE);
 800c1ac:	69fb      	ldr	r3, [r7, #28]
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d10e      	bne.n	800c1d0 <get_dqt+0x344>
 800c1b2:	69bb      	ldr	r3, [r7, #24]
 800c1b4:	68db      	ldr	r3, [r3, #12]
 800c1b6:	6878      	ldr	r0, [r7, #4]
 800c1b8:	4798      	blx	r3
 800c1ba:	4603      	mov	r3, r0
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d101      	bne.n	800c1c4 <get_dqt+0x338>
 800c1c0:	2300      	movs	r3, #0
 800c1c2:	e09b      	b.n	800c2fc <get_dqt+0x470>
 800c1c4:	69bb      	ldr	r3, [r7, #24]
 800c1c6:	681b      	ldr	r3, [r3, #0]
 800c1c8:	623b      	str	r3, [r7, #32]
 800c1ca:	69bb      	ldr	r3, [r7, #24]
 800c1cc:	685b      	ldr	r3, [r3, #4]
 800c1ce:	61fb      	str	r3, [r7, #28]
 800c1d0:	69fb      	ldr	r3, [r7, #28]
 800c1d2:	3b01      	subs	r3, #1
 800c1d4:	61fb      	str	r3, [r7, #28]
 800c1d6:	6a3b      	ldr	r3, [r7, #32]
 800c1d8:	1c5a      	adds	r2, r3, #1
 800c1da:	623a      	str	r2, [r7, #32]
 800c1dc:	781b      	ldrb	r3, [r3, #0]
 800c1de:	62bb      	str	r3, [r7, #40]	; 0x28
      /* We convert the zigzag-order table to natural array order. */
      quant_ptr->quantval[natural_order[i]] = (UINT16) tmp;
 800c1e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1e2:	009b      	lsls	r3, r3, #2
 800c1e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c1e6:	4413      	add	r3, r2
 800c1e8:	681a      	ldr	r2, [r3, #0]
 800c1ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1ec:	b299      	uxth	r1, r3
 800c1ee:	68fb      	ldr	r3, [r7, #12]
 800c1f0:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
    for (i = 0; i < count; i++) {
 800c1f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1f6:	3301      	adds	r3, #1
 800c1f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c1fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c1fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1fe:	429a      	cmp	r2, r3
 800c200:	db98      	blt.n	800c134 <get_dqt+0x2a8>
    }

    if (cinfo->err->trace_level >= 2) {
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	681b      	ldr	r3, [r3, #0]
 800c206:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c208:	2b01      	cmp	r3, #1
 800c20a:	dd55      	ble.n	800c2b8 <get_dqt+0x42c>
      for (i = 0; i < DCTSIZE2; i += 8) {
 800c20c:	2300      	movs	r3, #0
 800c20e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c210:	e04f      	b.n	800c2b2 <get_dqt+0x426>
	TRACEMS8(cinfo, 2, JTRC_QUANTVALS,
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	3318      	adds	r3, #24
 800c218:	60bb      	str	r3, [r7, #8]
 800c21a:	68fb      	ldr	r3, [r7, #12]
 800c21c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c21e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800c222:	461a      	mov	r2, r3
 800c224:	68bb      	ldr	r3, [r7, #8]
 800c226:	601a      	str	r2, [r3, #0]
 800c228:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c22a:	1c5a      	adds	r2, r3, #1
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	3304      	adds	r3, #4
 800c236:	601a      	str	r2, [r3, #0]
 800c238:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c23a:	1c9a      	adds	r2, r3, #2
 800c23c:	68fb      	ldr	r3, [r7, #12]
 800c23e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c242:	68bb      	ldr	r3, [r7, #8]
 800c244:	3308      	adds	r3, #8
 800c246:	601a      	str	r2, [r3, #0]
 800c248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c24a:	1cda      	adds	r2, r3, #3
 800c24c:	68fb      	ldr	r3, [r7, #12]
 800c24e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c252:	68bb      	ldr	r3, [r7, #8]
 800c254:	330c      	adds	r3, #12
 800c256:	601a      	str	r2, [r3, #0]
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	1d1a      	adds	r2, r3, #4
 800c25c:	68fb      	ldr	r3, [r7, #12]
 800c25e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c262:	68bb      	ldr	r3, [r7, #8]
 800c264:	3310      	adds	r3, #16
 800c266:	601a      	str	r2, [r3, #0]
 800c268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c26a:	1d5a      	adds	r2, r3, #5
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c272:	68bb      	ldr	r3, [r7, #8]
 800c274:	3314      	adds	r3, #20
 800c276:	601a      	str	r2, [r3, #0]
 800c278:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c27a:	1d9a      	adds	r2, r3, #6
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c282:	68bb      	ldr	r3, [r7, #8]
 800c284:	3318      	adds	r3, #24
 800c286:	601a      	str	r2, [r3, #0]
 800c288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c28a:	1dda      	adds	r2, r3, #7
 800c28c:	68fb      	ldr	r3, [r7, #12]
 800c28e:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c292:	68bb      	ldr	r3, [r7, #8]
 800c294:	331c      	adds	r3, #28
 800c296:	601a      	str	r2, [r3, #0]
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	225f      	movs	r2, #95	; 0x5f
 800c29e:	615a      	str	r2, [r3, #20]
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	681b      	ldr	r3, [r3, #0]
 800c2a4:	685b      	ldr	r3, [r3, #4]
 800c2a6:	2102      	movs	r1, #2
 800c2a8:	6878      	ldr	r0, [r7, #4]
 800c2aa:	4798      	blx	r3
      for (i = 0; i < DCTSIZE2; i += 8) {
 800c2ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2ae:	3308      	adds	r3, #8
 800c2b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c2b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2b4:	2b3f      	cmp	r3, #63	; 0x3f
 800c2b6:	ddac      	ble.n	800c212 <get_dqt+0x386>
		 quant_ptr->quantval[i+4], quant_ptr->quantval[i+5],
		 quant_ptr->quantval[i+6], quant_ptr->quantval[i+7]);
      }
    }

    length -= count;
 800c2b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2bc:	1ad3      	subs	r3, r2, r3
 800c2be:	637b      	str	r3, [r7, #52]	; 0x34
    if (prec) length -= count;
 800c2c0:	693b      	ldr	r3, [r7, #16]
 800c2c2:	2b00      	cmp	r3, #0
 800c2c4:	d003      	beq.n	800c2ce <get_dqt+0x442>
 800c2c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c2c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c2ca:	1ad3      	subs	r3, r2, r3
 800c2cc:	637b      	str	r3, [r7, #52]	; 0x34
  while (length > 0) {
 800c2ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d0:	2b00      	cmp	r3, #0
 800c2d2:	f73f ae24 	bgt.w	800bf1e <get_dqt+0x92>
  }

  if (length != 0)
 800c2d6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d008      	beq.n	800c2ee <get_dqt+0x462>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800c2dc:	687b      	ldr	r3, [r7, #4]
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	220c      	movs	r2, #12
 800c2e2:	615a      	str	r2, [r3, #20]
 800c2e4:	687b      	ldr	r3, [r7, #4]
 800c2e6:	681b      	ldr	r3, [r3, #0]
 800c2e8:	681b      	ldr	r3, [r3, #0]
 800c2ea:	6878      	ldr	r0, [r7, #4]
 800c2ec:	4798      	blx	r3

  INPUT_SYNC(cinfo);
 800c2ee:	69bb      	ldr	r3, [r7, #24]
 800c2f0:	6a3a      	ldr	r2, [r7, #32]
 800c2f2:	601a      	str	r2, [r3, #0]
 800c2f4:	69bb      	ldr	r3, [r7, #24]
 800c2f6:	69fa      	ldr	r2, [r7, #28]
 800c2f8:	605a      	str	r2, [r3, #4]
  return TRUE;
 800c2fa:	2301      	movs	r3, #1
}
 800c2fc:	4618      	mov	r0, r3
 800c2fe:	3738      	adds	r7, #56	; 0x38
 800c300:	46bd      	mov	sp, r7
 800c302:	bd80      	pop	{r7, pc}
 800c304:	08021d1c 	.word	0x08021d1c
 800c308:	08021cb8 	.word	0x08021cb8
 800c30c:	08021c38 	.word	0x08021c38
 800c310:	08021b94 	.word	0x08021b94
 800c314:	08021ac4 	.word	0x08021ac4
 800c318:	080219c0 	.word	0x080219c0
 800c31c:	08021880 	.word	0x08021880

0800c320 <get_dri>:


LOCAL(boolean)
get_dri (j_decompress_ptr cinfo)
/* Process a DRI marker */
{
 800c320:	b580      	push	{r7, lr}
 800c322:	b088      	sub	sp, #32
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
  INT32 length;
  unsigned int tmp;
  INPUT_VARS(cinfo);
 800c328:	687b      	ldr	r3, [r7, #4]
 800c32a:	699b      	ldr	r3, [r3, #24]
 800c32c:	617b      	str	r3, [r7, #20]
 800c32e:	697b      	ldr	r3, [r7, #20]
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	61fb      	str	r3, [r7, #28]
 800c334:	697b      	ldr	r3, [r7, #20]
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	61bb      	str	r3, [r7, #24]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800c33a:	69bb      	ldr	r3, [r7, #24]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d10e      	bne.n	800c35e <get_dri+0x3e>
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	68db      	ldr	r3, [r3, #12]
 800c344:	6878      	ldr	r0, [r7, #4]
 800c346:	4798      	blx	r3
 800c348:	4603      	mov	r3, r0
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d101      	bne.n	800c352 <get_dri+0x32>
 800c34e:	2300      	movs	r3, #0
 800c350:	e088      	b.n	800c464 <get_dri+0x144>
 800c352:	697b      	ldr	r3, [r7, #20]
 800c354:	681b      	ldr	r3, [r3, #0]
 800c356:	61fb      	str	r3, [r7, #28]
 800c358:	697b      	ldr	r3, [r7, #20]
 800c35a:	685b      	ldr	r3, [r3, #4]
 800c35c:	61bb      	str	r3, [r7, #24]
 800c35e:	69bb      	ldr	r3, [r7, #24]
 800c360:	3b01      	subs	r3, #1
 800c362:	61bb      	str	r3, [r7, #24]
 800c364:	69fb      	ldr	r3, [r7, #28]
 800c366:	1c5a      	adds	r2, r3, #1
 800c368:	61fa      	str	r2, [r7, #28]
 800c36a:	781b      	ldrb	r3, [r3, #0]
 800c36c:	021b      	lsls	r3, r3, #8
 800c36e:	613b      	str	r3, [r7, #16]
 800c370:	69bb      	ldr	r3, [r7, #24]
 800c372:	2b00      	cmp	r3, #0
 800c374:	d10e      	bne.n	800c394 <get_dri+0x74>
 800c376:	697b      	ldr	r3, [r7, #20]
 800c378:	68db      	ldr	r3, [r3, #12]
 800c37a:	6878      	ldr	r0, [r7, #4]
 800c37c:	4798      	blx	r3
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	d101      	bne.n	800c388 <get_dri+0x68>
 800c384:	2300      	movs	r3, #0
 800c386:	e06d      	b.n	800c464 <get_dri+0x144>
 800c388:	697b      	ldr	r3, [r7, #20]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	61fb      	str	r3, [r7, #28]
 800c38e:	697b      	ldr	r3, [r7, #20]
 800c390:	685b      	ldr	r3, [r3, #4]
 800c392:	61bb      	str	r3, [r7, #24]
 800c394:	69bb      	ldr	r3, [r7, #24]
 800c396:	3b01      	subs	r3, #1
 800c398:	61bb      	str	r3, [r7, #24]
 800c39a:	69fb      	ldr	r3, [r7, #28]
 800c39c:	1c5a      	adds	r2, r3, #1
 800c39e:	61fa      	str	r2, [r7, #28]
 800c3a0:	781b      	ldrb	r3, [r3, #0]
 800c3a2:	461a      	mov	r2, r3
 800c3a4:	693b      	ldr	r3, [r7, #16]
 800c3a6:	4413      	add	r3, r2
 800c3a8:	613b      	str	r3, [r7, #16]
  
  if (length != 4)
 800c3aa:	693b      	ldr	r3, [r7, #16]
 800c3ac:	2b04      	cmp	r3, #4
 800c3ae:	d008      	beq.n	800c3c2 <get_dri+0xa2>
    ERREXIT(cinfo, JERR_BAD_LENGTH);
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	681b      	ldr	r3, [r3, #0]
 800c3b4:	220c      	movs	r2, #12
 800c3b6:	615a      	str	r2, [r3, #20]
 800c3b8:	687b      	ldr	r3, [r7, #4]
 800c3ba:	681b      	ldr	r3, [r3, #0]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	6878      	ldr	r0, [r7, #4]
 800c3c0:	4798      	blx	r3

  INPUT_2BYTES(cinfo, tmp, return FALSE);
 800c3c2:	69bb      	ldr	r3, [r7, #24]
 800c3c4:	2b00      	cmp	r3, #0
 800c3c6:	d10e      	bne.n	800c3e6 <get_dri+0xc6>
 800c3c8:	697b      	ldr	r3, [r7, #20]
 800c3ca:	68db      	ldr	r3, [r3, #12]
 800c3cc:	6878      	ldr	r0, [r7, #4]
 800c3ce:	4798      	blx	r3
 800c3d0:	4603      	mov	r3, r0
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	d101      	bne.n	800c3da <get_dri+0xba>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e044      	b.n	800c464 <get_dri+0x144>
 800c3da:	697b      	ldr	r3, [r7, #20]
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	61fb      	str	r3, [r7, #28]
 800c3e0:	697b      	ldr	r3, [r7, #20]
 800c3e2:	685b      	ldr	r3, [r3, #4]
 800c3e4:	61bb      	str	r3, [r7, #24]
 800c3e6:	69bb      	ldr	r3, [r7, #24]
 800c3e8:	3b01      	subs	r3, #1
 800c3ea:	61bb      	str	r3, [r7, #24]
 800c3ec:	69fb      	ldr	r3, [r7, #28]
 800c3ee:	1c5a      	adds	r2, r3, #1
 800c3f0:	61fa      	str	r2, [r7, #28]
 800c3f2:	781b      	ldrb	r3, [r3, #0]
 800c3f4:	021b      	lsls	r3, r3, #8
 800c3f6:	60fb      	str	r3, [r7, #12]
 800c3f8:	69bb      	ldr	r3, [r7, #24]
 800c3fa:	2b00      	cmp	r3, #0
 800c3fc:	d10e      	bne.n	800c41c <get_dri+0xfc>
 800c3fe:	697b      	ldr	r3, [r7, #20]
 800c400:	68db      	ldr	r3, [r3, #12]
 800c402:	6878      	ldr	r0, [r7, #4]
 800c404:	4798      	blx	r3
 800c406:	4603      	mov	r3, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d101      	bne.n	800c410 <get_dri+0xf0>
 800c40c:	2300      	movs	r3, #0
 800c40e:	e029      	b.n	800c464 <get_dri+0x144>
 800c410:	697b      	ldr	r3, [r7, #20]
 800c412:	681b      	ldr	r3, [r3, #0]
 800c414:	61fb      	str	r3, [r7, #28]
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	685b      	ldr	r3, [r3, #4]
 800c41a:	61bb      	str	r3, [r7, #24]
 800c41c:	69bb      	ldr	r3, [r7, #24]
 800c41e:	3b01      	subs	r3, #1
 800c420:	61bb      	str	r3, [r7, #24]
 800c422:	69fb      	ldr	r3, [r7, #28]
 800c424:	1c5a      	adds	r2, r3, #1
 800c426:	61fa      	str	r2, [r7, #28]
 800c428:	781b      	ldrb	r3, [r3, #0]
 800c42a:	461a      	mov	r2, r3
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	4413      	add	r3, r2
 800c430:	60fb      	str	r3, [r7, #12]

  TRACEMS1(cinfo, 1, JTRC_DRI, tmp);
 800c432:	687b      	ldr	r3, [r7, #4]
 800c434:	681b      	ldr	r3, [r3, #0]
 800c436:	2254      	movs	r2, #84	; 0x54
 800c438:	615a      	str	r2, [r3, #20]
 800c43a:	687b      	ldr	r3, [r7, #4]
 800c43c:	681b      	ldr	r3, [r3, #0]
 800c43e:	68fa      	ldr	r2, [r7, #12]
 800c440:	619a      	str	r2, [r3, #24]
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	681b      	ldr	r3, [r3, #0]
 800c446:	685b      	ldr	r3, [r3, #4]
 800c448:	2101      	movs	r1, #1
 800c44a:	6878      	ldr	r0, [r7, #4]
 800c44c:	4798      	blx	r3

  cinfo->restart_interval = tmp;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	68fa      	ldr	r2, [r7, #12]
 800c452:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

  INPUT_SYNC(cinfo);
 800c456:	697b      	ldr	r3, [r7, #20]
 800c458:	69fa      	ldr	r2, [r7, #28]
 800c45a:	601a      	str	r2, [r3, #0]
 800c45c:	697b      	ldr	r3, [r7, #20]
 800c45e:	69ba      	ldr	r2, [r7, #24]
 800c460:	605a      	str	r2, [r3, #4]
  return TRUE;
 800c462:	2301      	movs	r3, #1
}
 800c464:	4618      	mov	r0, r3
 800c466:	3720      	adds	r7, #32
 800c468:	46bd      	mov	sp, r7
 800c46a:	bd80      	pop	{r7, pc}

0800c46c <examine_app0>:
	      unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP0.
 * Take appropriate action if it is a JFIF marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800c46c:	b580      	push	{r7, lr}
 800c46e:	b086      	sub	sp, #24
 800c470:	af00      	add	r7, sp, #0
 800c472:	60f8      	str	r0, [r7, #12]
 800c474:	60b9      	str	r1, [r7, #8]
 800c476:	607a      	str	r2, [r7, #4]
 800c478:	603b      	str	r3, [r7, #0]
  INT32 totallen = (INT32) datalen + remaining;
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	683a      	ldr	r2, [r7, #0]
 800c47e:	4413      	add	r3, r2
 800c480:	617b      	str	r3, [r7, #20]

  if (datalen >= APP0_DATA_LEN &&
 800c482:	687b      	ldr	r3, [r7, #4]
 800c484:	2b0d      	cmp	r3, #13
 800c486:	f240 80d8 	bls.w	800c63a <examine_app0+0x1ce>
      GETJOCTET(data[0]) == 0x4A &&
 800c48a:	68bb      	ldr	r3, [r7, #8]
 800c48c:	781b      	ldrb	r3, [r3, #0]
  if (datalen >= APP0_DATA_LEN &&
 800c48e:	2b4a      	cmp	r3, #74	; 0x4a
 800c490:	f040 80d3 	bne.w	800c63a <examine_app0+0x1ce>
      GETJOCTET(data[1]) == 0x46 &&
 800c494:	68bb      	ldr	r3, [r7, #8]
 800c496:	3301      	adds	r3, #1
 800c498:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x4A &&
 800c49a:	2b46      	cmp	r3, #70	; 0x46
 800c49c:	f040 80cd 	bne.w	800c63a <examine_app0+0x1ce>
      GETJOCTET(data[2]) == 0x49 &&
 800c4a0:	68bb      	ldr	r3, [r7, #8]
 800c4a2:	3302      	adds	r3, #2
 800c4a4:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x46 &&
 800c4a6:	2b49      	cmp	r3, #73	; 0x49
 800c4a8:	f040 80c7 	bne.w	800c63a <examine_app0+0x1ce>
      GETJOCTET(data[3]) == 0x46 &&
 800c4ac:	68bb      	ldr	r3, [r7, #8]
 800c4ae:	3303      	adds	r3, #3
 800c4b0:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x49 &&
 800c4b2:	2b46      	cmp	r3, #70	; 0x46
 800c4b4:	f040 80c1 	bne.w	800c63a <examine_app0+0x1ce>
      GETJOCTET(data[4]) == 0) {
 800c4b8:	68bb      	ldr	r3, [r7, #8]
 800c4ba:	3304      	adds	r3, #4
 800c4bc:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x46 &&
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	f040 80bb 	bne.w	800c63a <examine_app0+0x1ce>
    /* Found JFIF APP0 marker: save info */
    cinfo->saw_JFIF_marker = TRUE;
 800c4c4:	68fb      	ldr	r3, [r7, #12]
 800c4c6:	2201      	movs	r2, #1
 800c4c8:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    cinfo->JFIF_major_version = GETJOCTET(data[5]);
 800c4cc:	68bb      	ldr	r3, [r7, #8]
 800c4ce:	795a      	ldrb	r2, [r3, #5]
 800c4d0:	68fb      	ldr	r3, [r7, #12]
 800c4d2:	f883 2120 	strb.w	r2, [r3, #288]	; 0x120
    cinfo->JFIF_minor_version = GETJOCTET(data[6]);
 800c4d6:	68bb      	ldr	r3, [r7, #8]
 800c4d8:	799a      	ldrb	r2, [r3, #6]
 800c4da:	68fb      	ldr	r3, [r7, #12]
 800c4dc:	f883 2121 	strb.w	r2, [r3, #289]	; 0x121
    cinfo->density_unit = GETJOCTET(data[7]);
 800c4e0:	68bb      	ldr	r3, [r7, #8]
 800c4e2:	79da      	ldrb	r2, [r3, #7]
 800c4e4:	68fb      	ldr	r3, [r7, #12]
 800c4e6:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
    cinfo->X_density = (GETJOCTET(data[8]) << 8) + GETJOCTET(data[9]);
 800c4ea:	68bb      	ldr	r3, [r7, #8]
 800c4ec:	3308      	adds	r3, #8
 800c4ee:	781b      	ldrb	r3, [r3, #0]
 800c4f0:	b29b      	uxth	r3, r3
 800c4f2:	021b      	lsls	r3, r3, #8
 800c4f4:	b29a      	uxth	r2, r3
 800c4f6:	68bb      	ldr	r3, [r7, #8]
 800c4f8:	3309      	adds	r3, #9
 800c4fa:	781b      	ldrb	r3, [r3, #0]
 800c4fc:	b29b      	uxth	r3, r3
 800c4fe:	4413      	add	r3, r2
 800c500:	b29a      	uxth	r2, r3
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	f8a3 2124 	strh.w	r2, [r3, #292]	; 0x124
    cinfo->Y_density = (GETJOCTET(data[10]) << 8) + GETJOCTET(data[11]);
 800c508:	68bb      	ldr	r3, [r7, #8]
 800c50a:	330a      	adds	r3, #10
 800c50c:	781b      	ldrb	r3, [r3, #0]
 800c50e:	b29b      	uxth	r3, r3
 800c510:	021b      	lsls	r3, r3, #8
 800c512:	b29a      	uxth	r2, r3
 800c514:	68bb      	ldr	r3, [r7, #8]
 800c516:	330b      	adds	r3, #11
 800c518:	781b      	ldrb	r3, [r3, #0]
 800c51a:	b29b      	uxth	r3, r3
 800c51c:	4413      	add	r3, r2
 800c51e:	b29a      	uxth	r2, r3
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	f8a3 2126 	strh.w	r2, [r3, #294]	; 0x126
     * Major version must be 1, anything else signals an incompatible change.
     * (We used to treat this as an error, but now it's a nonfatal warning,
     * because some bozo at Hijaak couldn't read the spec.)
     * Minor version should be 0..2, but process anyway if newer.
     */
    if (cinfo->JFIF_major_version != 1)
 800c526:	68fb      	ldr	r3, [r7, #12]
 800c528:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800c52c:	2b01      	cmp	r3, #1
 800c52e:	d016      	beq.n	800c55e <examine_app0+0xf2>
      WARNMS2(cinfo, JWRN_JFIF_MAJOR,
 800c530:	68fb      	ldr	r3, [r7, #12]
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	227a      	movs	r2, #122	; 0x7a
 800c536:	615a      	str	r2, [r3, #20]
 800c538:	68fb      	ldr	r3, [r7, #12]
 800c53a:	f893 2120 	ldrb.w	r2, [r3, #288]	; 0x120
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	619a      	str	r2, [r3, #24]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	f893 2121 	ldrb.w	r2, [r3, #289]	; 0x121
 800c54a:	68fb      	ldr	r3, [r7, #12]
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	61da      	str	r2, [r3, #28]
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	681b      	ldr	r3, [r3, #0]
 800c554:	685b      	ldr	r3, [r3, #4]
 800c556:	f04f 31ff 	mov.w	r1, #4294967295
 800c55a:	68f8      	ldr	r0, [r7, #12]
 800c55c:	4798      	blx	r3
	      cinfo->JFIF_major_version, cinfo->JFIF_minor_version);
    /* Generate trace messages */
    TRACEMS5(cinfo, 1, JTRC_JFIF,
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	681b      	ldr	r3, [r3, #0]
 800c562:	3318      	adds	r3, #24
 800c564:	613b      	str	r3, [r7, #16]
 800c566:	68fb      	ldr	r3, [r7, #12]
 800c568:	f893 3120 	ldrb.w	r3, [r3, #288]	; 0x120
 800c56c:	461a      	mov	r2, r3
 800c56e:	693b      	ldr	r3, [r7, #16]
 800c570:	601a      	str	r2, [r3, #0]
 800c572:	68fb      	ldr	r3, [r7, #12]
 800c574:	f893 2121 	ldrb.w	r2, [r3, #289]	; 0x121
 800c578:	693b      	ldr	r3, [r7, #16]
 800c57a:	3304      	adds	r3, #4
 800c57c:	601a      	str	r2, [r3, #0]
 800c57e:	68fb      	ldr	r3, [r7, #12]
 800c580:	f8b3 2124 	ldrh.w	r2, [r3, #292]	; 0x124
 800c584:	693b      	ldr	r3, [r7, #16]
 800c586:	3308      	adds	r3, #8
 800c588:	601a      	str	r2, [r3, #0]
 800c58a:	68fb      	ldr	r3, [r7, #12]
 800c58c:	f8b3 2126 	ldrh.w	r2, [r3, #294]	; 0x126
 800c590:	693b      	ldr	r3, [r7, #16]
 800c592:	330c      	adds	r3, #12
 800c594:	601a      	str	r2, [r3, #0]
 800c596:	68fb      	ldr	r3, [r7, #12]
 800c598:	f893 2122 	ldrb.w	r2, [r3, #290]	; 0x122
 800c59c:	693b      	ldr	r3, [r7, #16]
 800c59e:	3310      	adds	r3, #16
 800c5a0:	601a      	str	r2, [r3, #0]
 800c5a2:	68fb      	ldr	r3, [r7, #12]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	2259      	movs	r2, #89	; 0x59
 800c5a8:	615a      	str	r2, [r3, #20]
 800c5aa:	68fb      	ldr	r3, [r7, #12]
 800c5ac:	681b      	ldr	r3, [r3, #0]
 800c5ae:	685b      	ldr	r3, [r3, #4]
 800c5b0:	2101      	movs	r1, #1
 800c5b2:	68f8      	ldr	r0, [r7, #12]
 800c5b4:	4798      	blx	r3
	     cinfo->JFIF_major_version, cinfo->JFIF_minor_version,
	     cinfo->X_density, cinfo->Y_density, cinfo->density_unit);
    /* Validate thumbnail dimensions and issue appropriate messages */
    if (GETJOCTET(data[12]) | GETJOCTET(data[13]))
 800c5b6:	68bb      	ldr	r3, [r7, #8]
 800c5b8:	330c      	adds	r3, #12
 800c5ba:	781a      	ldrb	r2, [r3, #0]
 800c5bc:	68bb      	ldr	r3, [r7, #8]
 800c5be:	330d      	adds	r3, #13
 800c5c0:	781b      	ldrb	r3, [r3, #0]
 800c5c2:	4313      	orrs	r3, r2
 800c5c4:	b2db      	uxtb	r3, r3
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d015      	beq.n	800c5f6 <examine_app0+0x18a>
      TRACEMS2(cinfo, 1, JTRC_JFIF_THUMBNAIL,
 800c5ca:	68fb      	ldr	r3, [r7, #12]
 800c5cc:	681b      	ldr	r3, [r3, #0]
 800c5ce:	225c      	movs	r2, #92	; 0x5c
 800c5d0:	615a      	str	r2, [r3, #20]
 800c5d2:	68bb      	ldr	r3, [r7, #8]
 800c5d4:	330c      	adds	r3, #12
 800c5d6:	781a      	ldrb	r2, [r3, #0]
 800c5d8:	68fb      	ldr	r3, [r7, #12]
 800c5da:	681b      	ldr	r3, [r3, #0]
 800c5dc:	619a      	str	r2, [r3, #24]
 800c5de:	68bb      	ldr	r3, [r7, #8]
 800c5e0:	330d      	adds	r3, #13
 800c5e2:	781a      	ldrb	r2, [r3, #0]
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	681b      	ldr	r3, [r3, #0]
 800c5e8:	61da      	str	r2, [r3, #28]
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	681b      	ldr	r3, [r3, #0]
 800c5ee:	685b      	ldr	r3, [r3, #4]
 800c5f0:	2101      	movs	r1, #1
 800c5f2:	68f8      	ldr	r0, [r7, #12]
 800c5f4:	4798      	blx	r3
	       GETJOCTET(data[12]), GETJOCTET(data[13]));
    totallen -= APP0_DATA_LEN;
 800c5f6:	697b      	ldr	r3, [r7, #20]
 800c5f8:	3b0e      	subs	r3, #14
 800c5fa:	617b      	str	r3, [r7, #20]
    if (totallen !=
	((INT32)GETJOCTET(data[12]) * (INT32)GETJOCTET(data[13]) * (INT32) 3))
 800c5fc:	68bb      	ldr	r3, [r7, #8]
 800c5fe:	330c      	adds	r3, #12
 800c600:	781b      	ldrb	r3, [r3, #0]
 800c602:	461a      	mov	r2, r3
 800c604:	68bb      	ldr	r3, [r7, #8]
 800c606:	330d      	adds	r3, #13
 800c608:	781b      	ldrb	r3, [r3, #0]
 800c60a:	fb03 f202 	mul.w	r2, r3, r2
 800c60e:	4613      	mov	r3, r2
 800c610:	005b      	lsls	r3, r3, #1
 800c612:	4413      	add	r3, r2
    if (totallen !=
 800c614:	697a      	ldr	r2, [r7, #20]
 800c616:	429a      	cmp	r2, r3
 800c618:	f000 8088 	beq.w	800c72c <examine_app0+0x2c0>
      TRACEMS1(cinfo, 1, JTRC_JFIF_BADTHUMBNAILSIZE, (int) totallen);
 800c61c:	68fb      	ldr	r3, [r7, #12]
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	225a      	movs	r2, #90	; 0x5a
 800c622:	615a      	str	r2, [r3, #20]
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	697a      	ldr	r2, [r7, #20]
 800c62a:	619a      	str	r2, [r3, #24]
 800c62c:	68fb      	ldr	r3, [r7, #12]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	685b      	ldr	r3, [r3, #4]
 800c632:	2101      	movs	r1, #1
 800c634:	68f8      	ldr	r0, [r7, #12]
 800c636:	4798      	blx	r3
    if (totallen !=
 800c638:	e078      	b.n	800c72c <examine_app0+0x2c0>
  } else if (datalen >= 6 &&
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	2b05      	cmp	r3, #5
 800c63e:	d966      	bls.n	800c70e <examine_app0+0x2a2>
      GETJOCTET(data[0]) == 0x4A &&
 800c640:	68bb      	ldr	r3, [r7, #8]
 800c642:	781b      	ldrb	r3, [r3, #0]
  } else if (datalen >= 6 &&
 800c644:	2b4a      	cmp	r3, #74	; 0x4a
 800c646:	d162      	bne.n	800c70e <examine_app0+0x2a2>
      GETJOCTET(data[1]) == 0x46 &&
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	3301      	adds	r3, #1
 800c64c:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x4A &&
 800c64e:	2b46      	cmp	r3, #70	; 0x46
 800c650:	d15d      	bne.n	800c70e <examine_app0+0x2a2>
      GETJOCTET(data[2]) == 0x58 &&
 800c652:	68bb      	ldr	r3, [r7, #8]
 800c654:	3302      	adds	r3, #2
 800c656:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x46 &&
 800c658:	2b58      	cmp	r3, #88	; 0x58
 800c65a:	d158      	bne.n	800c70e <examine_app0+0x2a2>
      GETJOCTET(data[3]) == 0x58 &&
 800c65c:	68bb      	ldr	r3, [r7, #8]
 800c65e:	3303      	adds	r3, #3
 800c660:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x58 &&
 800c662:	2b58      	cmp	r3, #88	; 0x58
 800c664:	d153      	bne.n	800c70e <examine_app0+0x2a2>
      GETJOCTET(data[4]) == 0) {
 800c666:	68bb      	ldr	r3, [r7, #8]
 800c668:	3304      	adds	r3, #4
 800c66a:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x58 &&
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d14e      	bne.n	800c70e <examine_app0+0x2a2>
    /* Found JFIF "JFXX" extension APP0 marker */
    /* The library doesn't actually do anything with these,
     * but we try to produce a helpful trace message.
     */
    switch (GETJOCTET(data[5])) {
 800c670:	68bb      	ldr	r3, [r7, #8]
 800c672:	3305      	adds	r3, #5
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	2b13      	cmp	r3, #19
 800c678:	d024      	beq.n	800c6c4 <examine_app0+0x258>
 800c67a:	2b13      	cmp	r3, #19
 800c67c:	dc31      	bgt.n	800c6e2 <examine_app0+0x276>
 800c67e:	2b10      	cmp	r3, #16
 800c680:	d002      	beq.n	800c688 <examine_app0+0x21c>
 800c682:	2b11      	cmp	r3, #17
 800c684:	d00f      	beq.n	800c6a6 <examine_app0+0x23a>
 800c686:	e02c      	b.n	800c6e2 <examine_app0+0x276>
    case 0x10:
      TRACEMS1(cinfo, 1, JTRC_THUMB_JPEG, (int) totallen);
 800c688:	68fb      	ldr	r3, [r7, #12]
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	226e      	movs	r2, #110	; 0x6e
 800c68e:	615a      	str	r2, [r3, #20]
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	697a      	ldr	r2, [r7, #20]
 800c696:	619a      	str	r2, [r3, #24]
 800c698:	68fb      	ldr	r3, [r7, #12]
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	685b      	ldr	r3, [r3, #4]
 800c69e:	2101      	movs	r1, #1
 800c6a0:	68f8      	ldr	r0, [r7, #12]
 800c6a2:	4798      	blx	r3
      break;
 800c6a4:	e032      	b.n	800c70c <examine_app0+0x2a0>
    case 0x11:
      TRACEMS1(cinfo, 1, JTRC_THUMB_PALETTE, (int) totallen);
 800c6a6:	68fb      	ldr	r3, [r7, #12]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	226f      	movs	r2, #111	; 0x6f
 800c6ac:	615a      	str	r2, [r3, #20]
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	697a      	ldr	r2, [r7, #20]
 800c6b4:	619a      	str	r2, [r3, #24]
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	685b      	ldr	r3, [r3, #4]
 800c6bc:	2101      	movs	r1, #1
 800c6be:	68f8      	ldr	r0, [r7, #12]
 800c6c0:	4798      	blx	r3
      break;
 800c6c2:	e023      	b.n	800c70c <examine_app0+0x2a0>
    case 0x13:
      TRACEMS1(cinfo, 1, JTRC_THUMB_RGB, (int) totallen);
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	681b      	ldr	r3, [r3, #0]
 800c6c8:	2270      	movs	r2, #112	; 0x70
 800c6ca:	615a      	str	r2, [r3, #20]
 800c6cc:	68fb      	ldr	r3, [r7, #12]
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	697a      	ldr	r2, [r7, #20]
 800c6d2:	619a      	str	r2, [r3, #24]
 800c6d4:	68fb      	ldr	r3, [r7, #12]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	685b      	ldr	r3, [r3, #4]
 800c6da:	2101      	movs	r1, #1
 800c6dc:	68f8      	ldr	r0, [r7, #12]
 800c6de:	4798      	blx	r3
      break;
 800c6e0:	e014      	b.n	800c70c <examine_app0+0x2a0>
    default:
      TRACEMS2(cinfo, 1, JTRC_JFIF_EXTENSION,
 800c6e2:	68fb      	ldr	r3, [r7, #12]
 800c6e4:	681b      	ldr	r3, [r3, #0]
 800c6e6:	225b      	movs	r2, #91	; 0x5b
 800c6e8:	615a      	str	r2, [r3, #20]
 800c6ea:	68bb      	ldr	r3, [r7, #8]
 800c6ec:	3305      	adds	r3, #5
 800c6ee:	781a      	ldrb	r2, [r3, #0]
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	619a      	str	r2, [r3, #24]
 800c6f6:	68fb      	ldr	r3, [r7, #12]
 800c6f8:	681b      	ldr	r3, [r3, #0]
 800c6fa:	697a      	ldr	r2, [r7, #20]
 800c6fc:	61da      	str	r2, [r3, #28]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	681b      	ldr	r3, [r3, #0]
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	2101      	movs	r1, #1
 800c706:	68f8      	ldr	r0, [r7, #12]
 800c708:	4798      	blx	r3
	       GETJOCTET(data[5]), (int) totallen);
      break;
 800c70a:	bf00      	nop
    switch (GETJOCTET(data[5])) {
 800c70c:	e00e      	b.n	800c72c <examine_app0+0x2c0>
    }
  } else {
    /* Start of APP0 does not match "JFIF" or "JFXX", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP0, (int) totallen);
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	681b      	ldr	r3, [r3, #0]
 800c712:	224f      	movs	r2, #79	; 0x4f
 800c714:	615a      	str	r2, [r3, #20]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	681b      	ldr	r3, [r3, #0]
 800c71a:	697a      	ldr	r2, [r7, #20]
 800c71c:	619a      	str	r2, [r3, #24]
 800c71e:	68fb      	ldr	r3, [r7, #12]
 800c720:	681b      	ldr	r3, [r3, #0]
 800c722:	685b      	ldr	r3, [r3, #4]
 800c724:	2101      	movs	r1, #1
 800c726:	68f8      	ldr	r0, [r7, #12]
 800c728:	4798      	blx	r3
  }
}
 800c72a:	bf00      	nop
 800c72c:	bf00      	nop
 800c72e:	3718      	adds	r7, #24
 800c730:	46bd      	mov	sp, r7
 800c732:	bd80      	pop	{r7, pc}

0800c734 <examine_app14>:
	       unsigned int datalen, INT32 remaining)
/* Examine first few bytes from an APP14.
 * Take appropriate action if it is an Adobe marker.
 * datalen is # of bytes at data[], remaining is length of rest of marker data.
 */
{
 800c734:	b580      	push	{r7, lr}
 800c736:	b08a      	sub	sp, #40	; 0x28
 800c738:	af00      	add	r7, sp, #0
 800c73a:	60f8      	str	r0, [r7, #12]
 800c73c:	60b9      	str	r1, [r7, #8]
 800c73e:	607a      	str	r2, [r7, #4]
 800c740:	603b      	str	r3, [r7, #0]
  unsigned int version, flags0, flags1, transform;

  if (datalen >= APP14_DATA_LEN &&
 800c742:	687b      	ldr	r3, [r7, #4]
 800c744:	2b0b      	cmp	r3, #11
 800c746:	d95d      	bls.n	800c804 <examine_app14+0xd0>
      GETJOCTET(data[0]) == 0x41 &&
 800c748:	68bb      	ldr	r3, [r7, #8]
 800c74a:	781b      	ldrb	r3, [r3, #0]
  if (datalen >= APP14_DATA_LEN &&
 800c74c:	2b41      	cmp	r3, #65	; 0x41
 800c74e:	d159      	bne.n	800c804 <examine_app14+0xd0>
      GETJOCTET(data[1]) == 0x64 &&
 800c750:	68bb      	ldr	r3, [r7, #8]
 800c752:	3301      	adds	r3, #1
 800c754:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[0]) == 0x41 &&
 800c756:	2b64      	cmp	r3, #100	; 0x64
 800c758:	d154      	bne.n	800c804 <examine_app14+0xd0>
      GETJOCTET(data[2]) == 0x6F &&
 800c75a:	68bb      	ldr	r3, [r7, #8]
 800c75c:	3302      	adds	r3, #2
 800c75e:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[1]) == 0x64 &&
 800c760:	2b6f      	cmp	r3, #111	; 0x6f
 800c762:	d14f      	bne.n	800c804 <examine_app14+0xd0>
      GETJOCTET(data[3]) == 0x62 &&
 800c764:	68bb      	ldr	r3, [r7, #8]
 800c766:	3303      	adds	r3, #3
 800c768:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[2]) == 0x6F &&
 800c76a:	2b62      	cmp	r3, #98	; 0x62
 800c76c:	d14a      	bne.n	800c804 <examine_app14+0xd0>
      GETJOCTET(data[4]) == 0x65) {
 800c76e:	68bb      	ldr	r3, [r7, #8]
 800c770:	3304      	adds	r3, #4
 800c772:	781b      	ldrb	r3, [r3, #0]
      GETJOCTET(data[3]) == 0x62 &&
 800c774:	2b65      	cmp	r3, #101	; 0x65
 800c776:	d145      	bne.n	800c804 <examine_app14+0xd0>
    /* Found Adobe APP14 marker */
    version = (GETJOCTET(data[5]) << 8) + GETJOCTET(data[6]);
 800c778:	68bb      	ldr	r3, [r7, #8]
 800c77a:	3305      	adds	r3, #5
 800c77c:	781b      	ldrb	r3, [r3, #0]
 800c77e:	021b      	lsls	r3, r3, #8
 800c780:	68ba      	ldr	r2, [r7, #8]
 800c782:	3206      	adds	r2, #6
 800c784:	7812      	ldrb	r2, [r2, #0]
 800c786:	4413      	add	r3, r2
 800c788:	627b      	str	r3, [r7, #36]	; 0x24
    flags0 = (GETJOCTET(data[7]) << 8) + GETJOCTET(data[8]);
 800c78a:	68bb      	ldr	r3, [r7, #8]
 800c78c:	3307      	adds	r3, #7
 800c78e:	781b      	ldrb	r3, [r3, #0]
 800c790:	021b      	lsls	r3, r3, #8
 800c792:	68ba      	ldr	r2, [r7, #8]
 800c794:	3208      	adds	r2, #8
 800c796:	7812      	ldrb	r2, [r2, #0]
 800c798:	4413      	add	r3, r2
 800c79a:	623b      	str	r3, [r7, #32]
    flags1 = (GETJOCTET(data[9]) << 8) + GETJOCTET(data[10]);
 800c79c:	68bb      	ldr	r3, [r7, #8]
 800c79e:	3309      	adds	r3, #9
 800c7a0:	781b      	ldrb	r3, [r3, #0]
 800c7a2:	021b      	lsls	r3, r3, #8
 800c7a4:	68ba      	ldr	r2, [r7, #8]
 800c7a6:	320a      	adds	r2, #10
 800c7a8:	7812      	ldrb	r2, [r2, #0]
 800c7aa:	4413      	add	r3, r2
 800c7ac:	61fb      	str	r3, [r7, #28]
    transform = GETJOCTET(data[11]);
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	330b      	adds	r3, #11
 800c7b2:	781b      	ldrb	r3, [r3, #0]
 800c7b4:	61bb      	str	r3, [r7, #24]
    TRACEMS4(cinfo, 1, JTRC_ADOBE, version, flags0, flags1, transform);
 800c7b6:	68fb      	ldr	r3, [r7, #12]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	3318      	adds	r3, #24
 800c7bc:	617b      	str	r3, [r7, #20]
 800c7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c7c0:	697b      	ldr	r3, [r7, #20]
 800c7c2:	601a      	str	r2, [r3, #0]
 800c7c4:	697b      	ldr	r3, [r7, #20]
 800c7c6:	3304      	adds	r3, #4
 800c7c8:	6a3a      	ldr	r2, [r7, #32]
 800c7ca:	601a      	str	r2, [r3, #0]
 800c7cc:	697b      	ldr	r3, [r7, #20]
 800c7ce:	3308      	adds	r3, #8
 800c7d0:	69fa      	ldr	r2, [r7, #28]
 800c7d2:	601a      	str	r2, [r3, #0]
 800c7d4:	697b      	ldr	r3, [r7, #20]
 800c7d6:	330c      	adds	r3, #12
 800c7d8:	69ba      	ldr	r2, [r7, #24]
 800c7da:	601a      	str	r2, [r3, #0]
 800c7dc:	68fb      	ldr	r3, [r7, #12]
 800c7de:	681b      	ldr	r3, [r3, #0]
 800c7e0:	224e      	movs	r2, #78	; 0x4e
 800c7e2:	615a      	str	r2, [r3, #20]
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	681b      	ldr	r3, [r3, #0]
 800c7e8:	685b      	ldr	r3, [r3, #4]
 800c7ea:	2101      	movs	r1, #1
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	4798      	blx	r3
    cinfo->saw_Adobe_marker = TRUE;
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	2201      	movs	r2, #1
 800c7f4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    cinfo->Adobe_transform = (UINT8) transform;
 800c7f8:	69bb      	ldr	r3, [r7, #24]
 800c7fa:	b2da      	uxtb	r2, r3
 800c7fc:	68fb      	ldr	r3, [r7, #12]
 800c7fe:	f883 212c 	strb.w	r2, [r3, #300]	; 0x12c
 800c802:	e010      	b.n	800c826 <examine_app14+0xf2>
  } else {
    /* Start of APP14 does not match "Adobe", or too short */
    TRACEMS1(cinfo, 1, JTRC_APP14, (int) (datalen + remaining));
 800c804:	68fb      	ldr	r3, [r7, #12]
 800c806:	681b      	ldr	r3, [r3, #0]
 800c808:	2250      	movs	r2, #80	; 0x50
 800c80a:	615a      	str	r2, [r3, #20]
 800c80c:	683a      	ldr	r2, [r7, #0]
 800c80e:	687b      	ldr	r3, [r7, #4]
 800c810:	441a      	add	r2, r3
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	619a      	str	r2, [r3, #24]
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	681b      	ldr	r3, [r3, #0]
 800c81c:	685b      	ldr	r3, [r3, #4]
 800c81e:	2101      	movs	r1, #1
 800c820:	68f8      	ldr	r0, [r7, #12]
 800c822:	4798      	blx	r3
  }
}
 800c824:	bf00      	nop
 800c826:	bf00      	nop
 800c828:	3728      	adds	r7, #40	; 0x28
 800c82a:	46bd      	mov	sp, r7
 800c82c:	bd80      	pop	{r7, pc}

0800c82e <get_interesting_appn>:


METHODDEF(boolean)
get_interesting_appn (j_decompress_ptr cinfo)
/* Process an APP0 or APP14 marker without saving it */
{
 800c82e:	b580      	push	{r7, lr}
 800c830:	b08c      	sub	sp, #48	; 0x30
 800c832:	af00      	add	r7, sp, #0
 800c834:	6078      	str	r0, [r7, #4]
  INT32 length;
  JOCTET b[APPN_DATA_LEN];
  unsigned int i, numtoread;
  INPUT_VARS(cinfo);
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	699b      	ldr	r3, [r3, #24]
 800c83a:	61fb      	str	r3, [r7, #28]
 800c83c:	69fb      	ldr	r3, [r7, #28]
 800c83e:	681b      	ldr	r3, [r3, #0]
 800c840:	627b      	str	r3, [r7, #36]	; 0x24
 800c842:	69fb      	ldr	r3, [r7, #28]
 800c844:	685b      	ldr	r3, [r3, #4]
 800c846:	623b      	str	r3, [r7, #32]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800c848:	6a3b      	ldr	r3, [r7, #32]
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d10e      	bne.n	800c86c <get_interesting_appn+0x3e>
 800c84e:	69fb      	ldr	r3, [r7, #28]
 800c850:	68db      	ldr	r3, [r3, #12]
 800c852:	6878      	ldr	r0, [r7, #4]
 800c854:	4798      	blx	r3
 800c856:	4603      	mov	r3, r0
 800c858:	2b00      	cmp	r3, #0
 800c85a:	d101      	bne.n	800c860 <get_interesting_appn+0x32>
 800c85c:	2300      	movs	r3, #0
 800c85e:	e0a1      	b.n	800c9a4 <get_interesting_appn+0x176>
 800c860:	69fb      	ldr	r3, [r7, #28]
 800c862:	681b      	ldr	r3, [r3, #0]
 800c864:	627b      	str	r3, [r7, #36]	; 0x24
 800c866:	69fb      	ldr	r3, [r7, #28]
 800c868:	685b      	ldr	r3, [r3, #4]
 800c86a:	623b      	str	r3, [r7, #32]
 800c86c:	6a3b      	ldr	r3, [r7, #32]
 800c86e:	3b01      	subs	r3, #1
 800c870:	623b      	str	r3, [r7, #32]
 800c872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c874:	1c5a      	adds	r2, r3, #1
 800c876:	627a      	str	r2, [r7, #36]	; 0x24
 800c878:	781b      	ldrb	r3, [r3, #0]
 800c87a:	021b      	lsls	r3, r3, #8
 800c87c:	61bb      	str	r3, [r7, #24]
 800c87e:	6a3b      	ldr	r3, [r7, #32]
 800c880:	2b00      	cmp	r3, #0
 800c882:	d10e      	bne.n	800c8a2 <get_interesting_appn+0x74>
 800c884:	69fb      	ldr	r3, [r7, #28]
 800c886:	68db      	ldr	r3, [r3, #12]
 800c888:	6878      	ldr	r0, [r7, #4]
 800c88a:	4798      	blx	r3
 800c88c:	4603      	mov	r3, r0
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d101      	bne.n	800c896 <get_interesting_appn+0x68>
 800c892:	2300      	movs	r3, #0
 800c894:	e086      	b.n	800c9a4 <get_interesting_appn+0x176>
 800c896:	69fb      	ldr	r3, [r7, #28]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	627b      	str	r3, [r7, #36]	; 0x24
 800c89c:	69fb      	ldr	r3, [r7, #28]
 800c89e:	685b      	ldr	r3, [r3, #4]
 800c8a0:	623b      	str	r3, [r7, #32]
 800c8a2:	6a3b      	ldr	r3, [r7, #32]
 800c8a4:	3b01      	subs	r3, #1
 800c8a6:	623b      	str	r3, [r7, #32]
 800c8a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8aa:	1c5a      	adds	r2, r3, #1
 800c8ac:	627a      	str	r2, [r7, #36]	; 0x24
 800c8ae:	781b      	ldrb	r3, [r3, #0]
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	69bb      	ldr	r3, [r7, #24]
 800c8b4:	4413      	add	r3, r2
 800c8b6:	61bb      	str	r3, [r7, #24]
  length -= 2;
 800c8b8:	69bb      	ldr	r3, [r7, #24]
 800c8ba:	3b02      	subs	r3, #2
 800c8bc:	61bb      	str	r3, [r7, #24]

  /* get the interesting part of the marker data */
  if (length >= APPN_DATA_LEN)
 800c8be:	69bb      	ldr	r3, [r7, #24]
 800c8c0:	2b0d      	cmp	r3, #13
 800c8c2:	dd02      	ble.n	800c8ca <get_interesting_appn+0x9c>
    numtoread = APPN_DATA_LEN;
 800c8c4:	230e      	movs	r3, #14
 800c8c6:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8c8:	e007      	b.n	800c8da <get_interesting_appn+0xac>
  else if (length > 0)
 800c8ca:	69bb      	ldr	r3, [r7, #24]
 800c8cc:	2b00      	cmp	r3, #0
 800c8ce:	dd02      	ble.n	800c8d6 <get_interesting_appn+0xa8>
    numtoread = (unsigned int) length;
 800c8d0:	69bb      	ldr	r3, [r7, #24]
 800c8d2:	62bb      	str	r3, [r7, #40]	; 0x28
 800c8d4:	e001      	b.n	800c8da <get_interesting_appn+0xac>
  else
    numtoread = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < numtoread; i++)
 800c8da:	2300      	movs	r3, #0
 800c8dc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c8de:	e021      	b.n	800c924 <get_interesting_appn+0xf6>
    INPUT_BYTE(cinfo, b[i], return FALSE);
 800c8e0:	6a3b      	ldr	r3, [r7, #32]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d10e      	bne.n	800c904 <get_interesting_appn+0xd6>
 800c8e6:	69fb      	ldr	r3, [r7, #28]
 800c8e8:	68db      	ldr	r3, [r3, #12]
 800c8ea:	6878      	ldr	r0, [r7, #4]
 800c8ec:	4798      	blx	r3
 800c8ee:	4603      	mov	r3, r0
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d101      	bne.n	800c8f8 <get_interesting_appn+0xca>
 800c8f4:	2300      	movs	r3, #0
 800c8f6:	e055      	b.n	800c9a4 <get_interesting_appn+0x176>
 800c8f8:	69fb      	ldr	r3, [r7, #28]
 800c8fa:	681b      	ldr	r3, [r3, #0]
 800c8fc:	627b      	str	r3, [r7, #36]	; 0x24
 800c8fe:	69fb      	ldr	r3, [r7, #28]
 800c900:	685b      	ldr	r3, [r3, #4]
 800c902:	623b      	str	r3, [r7, #32]
 800c904:	6a3b      	ldr	r3, [r7, #32]
 800c906:	3b01      	subs	r3, #1
 800c908:	623b      	str	r3, [r7, #32]
 800c90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c90c:	1c5a      	adds	r2, r3, #1
 800c90e:	627a      	str	r2, [r7, #36]	; 0x24
 800c910:	7819      	ldrb	r1, [r3, #0]
 800c912:	f107 0208 	add.w	r2, r7, #8
 800c916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c918:	4413      	add	r3, r2
 800c91a:	460a      	mov	r2, r1
 800c91c:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < numtoread; i++)
 800c91e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c920:	3301      	adds	r3, #1
 800c922:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c924:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c926:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c928:	429a      	cmp	r2, r3
 800c92a:	d3d9      	bcc.n	800c8e0 <get_interesting_appn+0xb2>
  length -= numtoread;
 800c92c:	69ba      	ldr	r2, [r7, #24]
 800c92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c930:	1ad3      	subs	r3, r2, r3
 800c932:	61bb      	str	r3, [r7, #24]

  /* process it */
  switch (cinfo->unread_marker) {
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800c93a:	2be0      	cmp	r3, #224	; 0xe0
 800c93c:	d002      	beq.n	800c944 <get_interesting_appn+0x116>
 800c93e:	2bee      	cmp	r3, #238	; 0xee
 800c940:	d008      	beq.n	800c954 <get_interesting_appn+0x126>
 800c942:	e00f      	b.n	800c964 <get_interesting_appn+0x136>
  case M_APP0:
    examine_app0(cinfo, (JOCTET FAR *) b, numtoread, length);
 800c944:	f107 0108 	add.w	r1, r7, #8
 800c948:	69bb      	ldr	r3, [r7, #24]
 800c94a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c94c:	6878      	ldr	r0, [r7, #4]
 800c94e:	f7ff fd8d 	bl	800c46c <examine_app0>
    break;
 800c952:	e017      	b.n	800c984 <get_interesting_appn+0x156>
  case M_APP14:
    examine_app14(cinfo, (JOCTET FAR *) b, numtoread, length);
 800c954:	f107 0108 	add.w	r1, r7, #8
 800c958:	69bb      	ldr	r3, [r7, #24]
 800c95a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c95c:	6878      	ldr	r0, [r7, #4]
 800c95e:	f7ff fee9 	bl	800c734 <examine_app14>
    break;
 800c962:	e00f      	b.n	800c984 <get_interesting_appn+0x156>
  default:
    /* can't get here unless jpeg_save_markers chooses wrong processor */
    ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	2246      	movs	r2, #70	; 0x46
 800c96a:	615a      	str	r2, [r3, #20]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	681b      	ldr	r3, [r3, #0]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 800c976:	619a      	str	r2, [r3, #24]
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	681b      	ldr	r3, [r3, #0]
 800c97c:	681b      	ldr	r3, [r3, #0]
 800c97e:	6878      	ldr	r0, [r7, #4]
 800c980:	4798      	blx	r3
    break;
 800c982:	bf00      	nop
  }

  /* skip any remaining data -- could be lots */
  INPUT_SYNC(cinfo);
 800c984:	69fb      	ldr	r3, [r7, #28]
 800c986:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c988:	601a      	str	r2, [r3, #0]
 800c98a:	69fb      	ldr	r3, [r7, #28]
 800c98c:	6a3a      	ldr	r2, [r7, #32]
 800c98e:	605a      	str	r2, [r3, #4]
  if (length > 0)
 800c990:	69bb      	ldr	r3, [r7, #24]
 800c992:	2b00      	cmp	r3, #0
 800c994:	dd05      	ble.n	800c9a2 <get_interesting_appn+0x174>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	699b      	ldr	r3, [r3, #24]
 800c99a:	691b      	ldr	r3, [r3, #16]
 800c99c:	69b9      	ldr	r1, [r7, #24]
 800c99e:	6878      	ldr	r0, [r7, #4]
 800c9a0:	4798      	blx	r3

  return TRUE;
 800c9a2:	2301      	movs	r3, #1
}
 800c9a4:	4618      	mov	r0, r3
 800c9a6:	3730      	adds	r7, #48	; 0x30
 800c9a8:	46bd      	mov	sp, r7
 800c9aa:	bd80      	pop	{r7, pc}

0800c9ac <skip_variable>:


METHODDEF(boolean)
skip_variable (j_decompress_ptr cinfo)
/* Skip over an unknown or uninteresting variable-length marker */
{
 800c9ac:	b580      	push	{r7, lr}
 800c9ae:	b086      	sub	sp, #24
 800c9b0:	af00      	add	r7, sp, #0
 800c9b2:	6078      	str	r0, [r7, #4]
  INT32 length;
  INPUT_VARS(cinfo);
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	699b      	ldr	r3, [r3, #24]
 800c9b8:	60fb      	str	r3, [r7, #12]
 800c9ba:	68fb      	ldr	r3, [r7, #12]
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	617b      	str	r3, [r7, #20]
 800c9c0:	68fb      	ldr	r3, [r7, #12]
 800c9c2:	685b      	ldr	r3, [r3, #4]
 800c9c4:	613b      	str	r3, [r7, #16]

  INPUT_2BYTES(cinfo, length, return FALSE);
 800c9c6:	693b      	ldr	r3, [r7, #16]
 800c9c8:	2b00      	cmp	r3, #0
 800c9ca:	d10e      	bne.n	800c9ea <skip_variable+0x3e>
 800c9cc:	68fb      	ldr	r3, [r7, #12]
 800c9ce:	68db      	ldr	r3, [r3, #12]
 800c9d0:	6878      	ldr	r0, [r7, #4]
 800c9d2:	4798      	blx	r3
 800c9d4:	4603      	mov	r3, r0
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d101      	bne.n	800c9de <skip_variable+0x32>
 800c9da:	2300      	movs	r3, #0
 800c9dc:	e052      	b.n	800ca84 <skip_variable+0xd8>
 800c9de:	68fb      	ldr	r3, [r7, #12]
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	617b      	str	r3, [r7, #20]
 800c9e4:	68fb      	ldr	r3, [r7, #12]
 800c9e6:	685b      	ldr	r3, [r3, #4]
 800c9e8:	613b      	str	r3, [r7, #16]
 800c9ea:	693b      	ldr	r3, [r7, #16]
 800c9ec:	3b01      	subs	r3, #1
 800c9ee:	613b      	str	r3, [r7, #16]
 800c9f0:	697b      	ldr	r3, [r7, #20]
 800c9f2:	1c5a      	adds	r2, r3, #1
 800c9f4:	617a      	str	r2, [r7, #20]
 800c9f6:	781b      	ldrb	r3, [r3, #0]
 800c9f8:	021b      	lsls	r3, r3, #8
 800c9fa:	60bb      	str	r3, [r7, #8]
 800c9fc:	693b      	ldr	r3, [r7, #16]
 800c9fe:	2b00      	cmp	r3, #0
 800ca00:	d10e      	bne.n	800ca20 <skip_variable+0x74>
 800ca02:	68fb      	ldr	r3, [r7, #12]
 800ca04:	68db      	ldr	r3, [r3, #12]
 800ca06:	6878      	ldr	r0, [r7, #4]
 800ca08:	4798      	blx	r3
 800ca0a:	4603      	mov	r3, r0
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d101      	bne.n	800ca14 <skip_variable+0x68>
 800ca10:	2300      	movs	r3, #0
 800ca12:	e037      	b.n	800ca84 <skip_variable+0xd8>
 800ca14:	68fb      	ldr	r3, [r7, #12]
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	617b      	str	r3, [r7, #20]
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	685b      	ldr	r3, [r3, #4]
 800ca1e:	613b      	str	r3, [r7, #16]
 800ca20:	693b      	ldr	r3, [r7, #16]
 800ca22:	3b01      	subs	r3, #1
 800ca24:	613b      	str	r3, [r7, #16]
 800ca26:	697b      	ldr	r3, [r7, #20]
 800ca28:	1c5a      	adds	r2, r3, #1
 800ca2a:	617a      	str	r2, [r7, #20]
 800ca2c:	781b      	ldrb	r3, [r3, #0]
 800ca2e:	461a      	mov	r2, r3
 800ca30:	68bb      	ldr	r3, [r7, #8]
 800ca32:	4413      	add	r3, r2
 800ca34:	60bb      	str	r3, [r7, #8]
  length -= 2;
 800ca36:	68bb      	ldr	r3, [r7, #8]
 800ca38:	3b02      	subs	r3, #2
 800ca3a:	60bb      	str	r3, [r7, #8]
  
  TRACEMS2(cinfo, 1, JTRC_MISC_MARKER, cinfo->unread_marker, (int) length);
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	681b      	ldr	r3, [r3, #0]
 800ca40:	225d      	movs	r2, #93	; 0x5d
 800ca42:	615a      	str	r2, [r3, #20]
 800ca44:	687b      	ldr	r3, [r7, #4]
 800ca46:	681b      	ldr	r3, [r3, #0]
 800ca48:	687a      	ldr	r2, [r7, #4]
 800ca4a:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 800ca4e:	619a      	str	r2, [r3, #24]
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	681b      	ldr	r3, [r3, #0]
 800ca54:	68ba      	ldr	r2, [r7, #8]
 800ca56:	61da      	str	r2, [r3, #28]
 800ca58:	687b      	ldr	r3, [r7, #4]
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	685b      	ldr	r3, [r3, #4]
 800ca5e:	2101      	movs	r1, #1
 800ca60:	6878      	ldr	r0, [r7, #4]
 800ca62:	4798      	blx	r3

  INPUT_SYNC(cinfo);		/* do before skip_input_data */
 800ca64:	68fb      	ldr	r3, [r7, #12]
 800ca66:	697a      	ldr	r2, [r7, #20]
 800ca68:	601a      	str	r2, [r3, #0]
 800ca6a:	68fb      	ldr	r3, [r7, #12]
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	605a      	str	r2, [r3, #4]
  if (length > 0)
 800ca70:	68bb      	ldr	r3, [r7, #8]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	dd05      	ble.n	800ca82 <skip_variable+0xd6>
    (*cinfo->src->skip_input_data) (cinfo, (long) length);
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	699b      	ldr	r3, [r3, #24]
 800ca7a:	691b      	ldr	r3, [r3, #16]
 800ca7c:	68b9      	ldr	r1, [r7, #8]
 800ca7e:	6878      	ldr	r0, [r7, #4]
 800ca80:	4798      	blx	r3

  return TRUE;
 800ca82:	2301      	movs	r3, #1
}
 800ca84:	4618      	mov	r0, r3
 800ca86:	3718      	adds	r7, #24
 800ca88:	46bd      	mov	sp, r7
 800ca8a:	bd80      	pop	{r7, pc}

0800ca8c <next_marker>:
 * but it will never be 0 or FF.
 */

LOCAL(boolean)
next_marker (j_decompress_ptr cinfo)
{
 800ca8c:	b580      	push	{r7, lr}
 800ca8e:	b086      	sub	sp, #24
 800ca90:	af00      	add	r7, sp, #0
 800ca92:	6078      	str	r0, [r7, #4]
  int c;
  INPUT_VARS(cinfo);
 800ca94:	687b      	ldr	r3, [r7, #4]
 800ca96:	699b      	ldr	r3, [r3, #24]
 800ca98:	60bb      	str	r3, [r7, #8]
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	681b      	ldr	r3, [r3, #0]
 800ca9e:	613b      	str	r3, [r7, #16]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	685b      	ldr	r3, [r3, #4]
 800caa4:	60fb      	str	r3, [r7, #12]

  for (;;) {
    INPUT_BYTE(cinfo, c, return FALSE);
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d10e      	bne.n	800caca <next_marker+0x3e>
 800caac:	68bb      	ldr	r3, [r7, #8]
 800caae:	68db      	ldr	r3, [r3, #12]
 800cab0:	6878      	ldr	r0, [r7, #4]
 800cab2:	4798      	blx	r3
 800cab4:	4603      	mov	r3, r0
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d101      	bne.n	800cabe <next_marker+0x32>
 800caba:	2300      	movs	r3, #0
 800cabc:	e094      	b.n	800cbe8 <next_marker+0x15c>
 800cabe:	68bb      	ldr	r3, [r7, #8]
 800cac0:	681b      	ldr	r3, [r3, #0]
 800cac2:	613b      	str	r3, [r7, #16]
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	685b      	ldr	r3, [r3, #4]
 800cac8:	60fb      	str	r3, [r7, #12]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	3b01      	subs	r3, #1
 800cace:	60fb      	str	r3, [r7, #12]
 800cad0:	693b      	ldr	r3, [r7, #16]
 800cad2:	1c5a      	adds	r2, r3, #1
 800cad4:	613a      	str	r2, [r7, #16]
 800cad6:	781b      	ldrb	r3, [r3, #0]
 800cad8:	617b      	str	r3, [r7, #20]
    /* Skip any non-FF bytes.
     * This may look a bit inefficient, but it will not occur in a valid file.
     * We sync after each discarded byte so that a suspending data source
     * can discard the byte from its buffer.
     */
    while (c != 0xFF) {
 800cada:	e025      	b.n	800cb28 <next_marker+0x9c>
      cinfo->marker->discarded_bytes++;
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800cae2:	699a      	ldr	r2, [r3, #24]
 800cae4:	3201      	adds	r2, #1
 800cae6:	619a      	str	r2, [r3, #24]
      INPUT_SYNC(cinfo);
 800cae8:	68bb      	ldr	r3, [r7, #8]
 800caea:	693a      	ldr	r2, [r7, #16]
 800caec:	601a      	str	r2, [r3, #0]
 800caee:	68bb      	ldr	r3, [r7, #8]
 800caf0:	68fa      	ldr	r2, [r7, #12]
 800caf2:	605a      	str	r2, [r3, #4]
      INPUT_BYTE(cinfo, c, return FALSE);
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d10e      	bne.n	800cb18 <next_marker+0x8c>
 800cafa:	68bb      	ldr	r3, [r7, #8]
 800cafc:	68db      	ldr	r3, [r3, #12]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	4798      	blx	r3
 800cb02:	4603      	mov	r3, r0
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d101      	bne.n	800cb0c <next_marker+0x80>
 800cb08:	2300      	movs	r3, #0
 800cb0a:	e06d      	b.n	800cbe8 <next_marker+0x15c>
 800cb0c:	68bb      	ldr	r3, [r7, #8]
 800cb0e:	681b      	ldr	r3, [r3, #0]
 800cb10:	613b      	str	r3, [r7, #16]
 800cb12:	68bb      	ldr	r3, [r7, #8]
 800cb14:	685b      	ldr	r3, [r3, #4]
 800cb16:	60fb      	str	r3, [r7, #12]
 800cb18:	68fb      	ldr	r3, [r7, #12]
 800cb1a:	3b01      	subs	r3, #1
 800cb1c:	60fb      	str	r3, [r7, #12]
 800cb1e:	693b      	ldr	r3, [r7, #16]
 800cb20:	1c5a      	adds	r2, r3, #1
 800cb22:	613a      	str	r2, [r7, #16]
 800cb24:	781b      	ldrb	r3, [r3, #0]
 800cb26:	617b      	str	r3, [r7, #20]
    while (c != 0xFF) {
 800cb28:	697b      	ldr	r3, [r7, #20]
 800cb2a:	2bff      	cmp	r3, #255	; 0xff
 800cb2c:	d1d6      	bne.n	800cadc <next_marker+0x50>
     * pad bytes, so don't count them in discarded_bytes.  We assume there
     * will not be so many consecutive FF bytes as to overflow a suspending
     * data source's input buffer.
     */
    do {
      INPUT_BYTE(cinfo, c, return FALSE);
 800cb2e:	68fb      	ldr	r3, [r7, #12]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d10e      	bne.n	800cb52 <next_marker+0xc6>
 800cb34:	68bb      	ldr	r3, [r7, #8]
 800cb36:	68db      	ldr	r3, [r3, #12]
 800cb38:	6878      	ldr	r0, [r7, #4]
 800cb3a:	4798      	blx	r3
 800cb3c:	4603      	mov	r3, r0
 800cb3e:	2b00      	cmp	r3, #0
 800cb40:	d101      	bne.n	800cb46 <next_marker+0xba>
 800cb42:	2300      	movs	r3, #0
 800cb44:	e050      	b.n	800cbe8 <next_marker+0x15c>
 800cb46:	68bb      	ldr	r3, [r7, #8]
 800cb48:	681b      	ldr	r3, [r3, #0]
 800cb4a:	613b      	str	r3, [r7, #16]
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	60fb      	str	r3, [r7, #12]
 800cb52:	68fb      	ldr	r3, [r7, #12]
 800cb54:	3b01      	subs	r3, #1
 800cb56:	60fb      	str	r3, [r7, #12]
 800cb58:	693b      	ldr	r3, [r7, #16]
 800cb5a:	1c5a      	adds	r2, r3, #1
 800cb5c:	613a      	str	r2, [r7, #16]
 800cb5e:	781b      	ldrb	r3, [r3, #0]
 800cb60:	617b      	str	r3, [r7, #20]
    } while (c == 0xFF);
 800cb62:	697b      	ldr	r3, [r7, #20]
 800cb64:	2bff      	cmp	r3, #255	; 0xff
 800cb66:	d0e2      	beq.n	800cb2e <next_marker+0xa2>
    if (c != 0)
 800cb68:	697b      	ldr	r3, [r7, #20]
 800cb6a:	2b00      	cmp	r3, #0
 800cb6c:	d10f      	bne.n	800cb8e <next_marker+0x102>
      break;			/* found a valid marker, exit loop */
    /* Reach here if we found a stuffed-zero data sequence (FF/00).
     * Discard it and loop back to try again.
     */
    cinfo->marker->discarded_bytes += 2;
 800cb6e:	687b      	ldr	r3, [r7, #4]
 800cb70:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800cb74:	699a      	ldr	r2, [r3, #24]
 800cb76:	687b      	ldr	r3, [r7, #4]
 800cb78:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800cb7c:	3202      	adds	r2, #2
 800cb7e:	619a      	str	r2, [r3, #24]
    INPUT_SYNC(cinfo);
 800cb80:	68bb      	ldr	r3, [r7, #8]
 800cb82:	693a      	ldr	r2, [r7, #16]
 800cb84:	601a      	str	r2, [r3, #0]
 800cb86:	68bb      	ldr	r3, [r7, #8]
 800cb88:	68fa      	ldr	r2, [r7, #12]
 800cb8a:	605a      	str	r2, [r3, #4]
    INPUT_BYTE(cinfo, c, return FALSE);
 800cb8c:	e78b      	b.n	800caa6 <next_marker+0x1a>
      break;			/* found a valid marker, exit loop */
 800cb8e:	bf00      	nop
  }

  if (cinfo->marker->discarded_bytes != 0) {
 800cb90:	687b      	ldr	r3, [r7, #4]
 800cb92:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800cb96:	699b      	ldr	r3, [r3, #24]
 800cb98:	2b00      	cmp	r3, #0
 800cb9a:	d01a      	beq.n	800cbd2 <next_marker+0x146>
    WARNMS2(cinfo, JWRN_EXTRANEOUS_DATA, cinfo->marker->discarded_bytes, c);
 800cb9c:	687b      	ldr	r3, [r7, #4]
 800cb9e:	681b      	ldr	r3, [r3, #0]
 800cba0:	2277      	movs	r2, #119	; 0x77
 800cba2:	615a      	str	r2, [r3, #20]
 800cba4:	687b      	ldr	r3, [r7, #4]
 800cba6:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800cbaa:	699a      	ldr	r2, [r3, #24]
 800cbac:	687b      	ldr	r3, [r7, #4]
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	619a      	str	r2, [r3, #24]
 800cbb2:	687b      	ldr	r3, [r7, #4]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	697a      	ldr	r2, [r7, #20]
 800cbb8:	61da      	str	r2, [r3, #28]
 800cbba:	687b      	ldr	r3, [r7, #4]
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	685b      	ldr	r3, [r3, #4]
 800cbc0:	f04f 31ff 	mov.w	r1, #4294967295
 800cbc4:	6878      	ldr	r0, [r7, #4]
 800cbc6:	4798      	blx	r3
    cinfo->marker->discarded_bytes = 0;
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800cbce:	2200      	movs	r2, #0
 800cbd0:	619a      	str	r2, [r3, #24]
  }

  cinfo->unread_marker = c;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	697a      	ldr	r2, [r7, #20]
 800cbd6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

  INPUT_SYNC(cinfo);
 800cbda:	68bb      	ldr	r3, [r7, #8]
 800cbdc:	693a      	ldr	r2, [r7, #16]
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	68bb      	ldr	r3, [r7, #8]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	605a      	str	r2, [r3, #4]
  return TRUE;
 800cbe6:	2301      	movs	r3, #1
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	3718      	adds	r7, #24
 800cbec:	46bd      	mov	sp, r7
 800cbee:	bd80      	pop	{r7, pc}

0800cbf0 <first_marker>:
/* For this marker, we do not allow preceding garbage or fill; otherwise,
 * we might well scan an entire input file before realizing it ain't JPEG.
 * If an application wants to process non-JFIF files, it must seek to the
 * SOI before calling the JPEG library.
 */
{
 800cbf0:	b580      	push	{r7, lr}
 800cbf2:	b088      	sub	sp, #32
 800cbf4:	af00      	add	r7, sp, #0
 800cbf6:	6078      	str	r0, [r7, #4]
  int c, c2;
  INPUT_VARS(cinfo);
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	699b      	ldr	r3, [r3, #24]
 800cbfc:	617b      	str	r3, [r7, #20]
 800cbfe:	697b      	ldr	r3, [r7, #20]
 800cc00:	681b      	ldr	r3, [r3, #0]
 800cc02:	61fb      	str	r3, [r7, #28]
 800cc04:	697b      	ldr	r3, [r7, #20]
 800cc06:	685b      	ldr	r3, [r3, #4]
 800cc08:	61bb      	str	r3, [r7, #24]

  INPUT_BYTE(cinfo, c, return FALSE);
 800cc0a:	69bb      	ldr	r3, [r7, #24]
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d10e      	bne.n	800cc2e <first_marker+0x3e>
 800cc10:	697b      	ldr	r3, [r7, #20]
 800cc12:	68db      	ldr	r3, [r3, #12]
 800cc14:	6878      	ldr	r0, [r7, #4]
 800cc16:	4798      	blx	r3
 800cc18:	4603      	mov	r3, r0
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d101      	bne.n	800cc22 <first_marker+0x32>
 800cc1e:	2300      	movs	r3, #0
 800cc20:	e049      	b.n	800ccb6 <first_marker+0xc6>
 800cc22:	697b      	ldr	r3, [r7, #20]
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	61fb      	str	r3, [r7, #28]
 800cc28:	697b      	ldr	r3, [r7, #20]
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	61bb      	str	r3, [r7, #24]
 800cc2e:	69bb      	ldr	r3, [r7, #24]
 800cc30:	3b01      	subs	r3, #1
 800cc32:	61bb      	str	r3, [r7, #24]
 800cc34:	69fb      	ldr	r3, [r7, #28]
 800cc36:	1c5a      	adds	r2, r3, #1
 800cc38:	61fa      	str	r2, [r7, #28]
 800cc3a:	781b      	ldrb	r3, [r3, #0]
 800cc3c:	613b      	str	r3, [r7, #16]
  INPUT_BYTE(cinfo, c2, return FALSE);
 800cc3e:	69bb      	ldr	r3, [r7, #24]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d10e      	bne.n	800cc62 <first_marker+0x72>
 800cc44:	697b      	ldr	r3, [r7, #20]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	6878      	ldr	r0, [r7, #4]
 800cc4a:	4798      	blx	r3
 800cc4c:	4603      	mov	r3, r0
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <first_marker+0x66>
 800cc52:	2300      	movs	r3, #0
 800cc54:	e02f      	b.n	800ccb6 <first_marker+0xc6>
 800cc56:	697b      	ldr	r3, [r7, #20]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	61fb      	str	r3, [r7, #28]
 800cc5c:	697b      	ldr	r3, [r7, #20]
 800cc5e:	685b      	ldr	r3, [r3, #4]
 800cc60:	61bb      	str	r3, [r7, #24]
 800cc62:	69bb      	ldr	r3, [r7, #24]
 800cc64:	3b01      	subs	r3, #1
 800cc66:	61bb      	str	r3, [r7, #24]
 800cc68:	69fb      	ldr	r3, [r7, #28]
 800cc6a:	1c5a      	adds	r2, r3, #1
 800cc6c:	61fa      	str	r2, [r7, #28]
 800cc6e:	781b      	ldrb	r3, [r3, #0]
 800cc70:	60fb      	str	r3, [r7, #12]
  if (c != 0xFF || c2 != (int) M_SOI)
 800cc72:	693b      	ldr	r3, [r7, #16]
 800cc74:	2bff      	cmp	r3, #255	; 0xff
 800cc76:	d102      	bne.n	800cc7e <first_marker+0x8e>
 800cc78:	68fb      	ldr	r3, [r7, #12]
 800cc7a:	2bd8      	cmp	r3, #216	; 0xd8
 800cc7c:	d010      	beq.n	800cca0 <first_marker+0xb0>
    ERREXIT2(cinfo, JERR_NO_SOI, c, c2);
 800cc7e:	687b      	ldr	r3, [r7, #4]
 800cc80:	681b      	ldr	r3, [r3, #0]
 800cc82:	2237      	movs	r2, #55	; 0x37
 800cc84:	615a      	str	r2, [r3, #20]
 800cc86:	687b      	ldr	r3, [r7, #4]
 800cc88:	681b      	ldr	r3, [r3, #0]
 800cc8a:	693a      	ldr	r2, [r7, #16]
 800cc8c:	619a      	str	r2, [r3, #24]
 800cc8e:	687b      	ldr	r3, [r7, #4]
 800cc90:	681b      	ldr	r3, [r3, #0]
 800cc92:	68fa      	ldr	r2, [r7, #12]
 800cc94:	61da      	str	r2, [r3, #28]
 800cc96:	687b      	ldr	r3, [r7, #4]
 800cc98:	681b      	ldr	r3, [r3, #0]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	6878      	ldr	r0, [r7, #4]
 800cc9e:	4798      	blx	r3

  cinfo->unread_marker = c2;
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	68fa      	ldr	r2, [r7, #12]
 800cca4:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4

  INPUT_SYNC(cinfo);
 800cca8:	697b      	ldr	r3, [r7, #20]
 800ccaa:	69fa      	ldr	r2, [r7, #28]
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	697b      	ldr	r3, [r7, #20]
 800ccb0:	69ba      	ldr	r2, [r7, #24]
 800ccb2:	605a      	str	r2, [r3, #4]
  return TRUE;
 800ccb4:	2301      	movs	r3, #1
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3720      	adds	r7, #32
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
	...

0800ccc0 <read_markers>:
 * after processing for the caller.
 */

METHODDEF(int)
read_markers (j_decompress_ptr cinfo)
{
 800ccc0:	b580      	push	{r7, lr}
 800ccc2:	b082      	sub	sp, #8
 800ccc4:	af00      	add	r7, sp, #0
 800ccc6:	6078      	str	r0, [r7, #4]
  /* Outer loop repeats once for each marker. */
  for (;;) {
    /* Collect the marker proper, unless we already did. */
    /* NB: first_marker() enforces the requirement that SOI appear first. */
    if (cinfo->unread_marker == 0) {
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d115      	bne.n	800ccfe <read_markers+0x3e>
      if (! cinfo->marker->saw_SOI) {
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d107      	bne.n	800ccee <read_markers+0x2e>
	if (! first_marker(cinfo))
 800ccde:	6878      	ldr	r0, [r7, #4]
 800cce0:	f7ff ff86 	bl	800cbf0 <first_marker>
 800cce4:	4603      	mov	r3, r0
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	d109      	bne.n	800ccfe <read_markers+0x3e>
	  return JPEG_SUSPENDED;
 800ccea:	2300      	movs	r3, #0
 800ccec:	e192      	b.n	800d014 <read_markers+0x354>
      } else {
	if (! next_marker(cinfo))
 800ccee:	6878      	ldr	r0, [r7, #4]
 800ccf0:	f7ff fecc 	bl	800ca8c <next_marker>
 800ccf4:	4603      	mov	r3, r0
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d101      	bne.n	800ccfe <read_markers+0x3e>
	  return JPEG_SUSPENDED;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	e18a      	b.n	800d014 <read_markers+0x354>
    }
    /* At this point cinfo->unread_marker contains the marker code and the
     * input point is just past the marker proper, but before any parameters.
     * A suspension will cause us to return with this state still true.
     */
    switch (cinfo->unread_marker) {
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800cd04:	2b01      	cmp	r3, #1
 800cd06:	f000 813e 	beq.w	800cf86 <read_markers+0x2c6>
 800cd0a:	2b00      	cmp	r3, #0
 800cd0c:	f340 8154 	ble.w	800cfb8 <read_markers+0x2f8>
 800cd10:	2bfe      	cmp	r3, #254	; 0xfe
 800cd12:	f300 8151 	bgt.w	800cfb8 <read_markers+0x2f8>
 800cd16:	2bc0      	cmp	r3, #192	; 0xc0
 800cd18:	f2c0 814e 	blt.w	800cfb8 <read_markers+0x2f8>
 800cd1c:	3bc0      	subs	r3, #192	; 0xc0
 800cd1e:	2b3e      	cmp	r3, #62	; 0x3e
 800cd20:	f200 814a 	bhi.w	800cfb8 <read_markers+0x2f8>
 800cd24:	a201      	add	r2, pc, #4	; (adr r2, 800cd2c <read_markers+0x6c>)
 800cd26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd2a:	bf00      	nop
 800cd2c:	0800ce3b 	.word	0x0800ce3b
 800cd30:	0800ce53 	.word	0x0800ce53
 800cd34:	0800ce6b 	.word	0x0800ce6b
 800cd38:	0800ceb3 	.word	0x0800ceb3
 800cd3c:	0800cf1f 	.word	0x0800cf1f
 800cd40:	0800ceb3 	.word	0x0800ceb3
 800cd44:	0800ceb3 	.word	0x0800ceb3
 800cd48:	0800ceb3 	.word	0x0800ceb3
 800cd4c:	0800ceb3 	.word	0x0800ceb3
 800cd50:	0800ce83 	.word	0x0800ce83
 800cd54:	0800ce9b 	.word	0x0800ce9b
 800cd58:	0800ceb3 	.word	0x0800ceb3
 800cd5c:	0800cf0f 	.word	0x0800cf0f
 800cd60:	0800ceb3 	.word	0x0800ceb3
 800cd64:	0800ceb3 	.word	0x0800ceb3
 800cd68:	0800ceb3 	.word	0x0800ceb3
 800cd6c:	0800cf87 	.word	0x0800cf87
 800cd70:	0800cf87 	.word	0x0800cf87
 800cd74:	0800cf87 	.word	0x0800cf87
 800cd78:	0800cf87 	.word	0x0800cf87
 800cd7c:	0800cf87 	.word	0x0800cf87
 800cd80:	0800cf87 	.word	0x0800cf87
 800cd84:	0800cf87 	.word	0x0800cf87
 800cd88:	0800cf87 	.word	0x0800cf87
 800cd8c:	0800ce29 	.word	0x0800ce29
 800cd90:	0800ceef 	.word	0x0800ceef
 800cd94:	0800ced3 	.word	0x0800ced3
 800cd98:	0800cf2f 	.word	0x0800cf2f
 800cd9c:	0800cfa9 	.word	0x0800cfa9
 800cda0:	0800cf3f 	.word	0x0800cf3f
 800cda4:	0800cfb9 	.word	0x0800cfb9
 800cda8:	0800cfb9 	.word	0x0800cfb9
 800cdac:	0800cf4f 	.word	0x0800cf4f
 800cdb0:	0800cf4f 	.word	0x0800cf4f
 800cdb4:	0800cf4f 	.word	0x0800cf4f
 800cdb8:	0800cf4f 	.word	0x0800cf4f
 800cdbc:	0800cf4f 	.word	0x0800cf4f
 800cdc0:	0800cf4f 	.word	0x0800cf4f
 800cdc4:	0800cf4f 	.word	0x0800cf4f
 800cdc8:	0800cf4f 	.word	0x0800cf4f
 800cdcc:	0800cf4f 	.word	0x0800cf4f
 800cdd0:	0800cf4f 	.word	0x0800cf4f
 800cdd4:	0800cf4f 	.word	0x0800cf4f
 800cdd8:	0800cf4f 	.word	0x0800cf4f
 800cddc:	0800cf4f 	.word	0x0800cf4f
 800cde0:	0800cf4f 	.word	0x0800cf4f
 800cde4:	0800cf4f 	.word	0x0800cf4f
 800cde8:	0800cf4f 	.word	0x0800cf4f
 800cdec:	0800cfb9 	.word	0x0800cfb9
 800cdf0:	0800cfb9 	.word	0x0800cfb9
 800cdf4:	0800cfb9 	.word	0x0800cfb9
 800cdf8:	0800cfb9 	.word	0x0800cfb9
 800cdfc:	0800cfb9 	.word	0x0800cfb9
 800ce00:	0800cfb9 	.word	0x0800cfb9
 800ce04:	0800cfb9 	.word	0x0800cfb9
 800ce08:	0800cfb9 	.word	0x0800cfb9
 800ce0c:	0800cfb9 	.word	0x0800cfb9
 800ce10:	0800cfb9 	.word	0x0800cfb9
 800ce14:	0800cfb9 	.word	0x0800cfb9
 800ce18:	0800cfb9 	.word	0x0800cfb9
 800ce1c:	0800cfb9 	.word	0x0800cfb9
 800ce20:	0800cfb9 	.word	0x0800cfb9
 800ce24:	0800cf71 	.word	0x0800cf71
    case M_SOI:
      if (! get_soi(cinfo))
 800ce28:	6878      	ldr	r0, [r7, #4]
 800ce2a:	f7fe f88b 	bl	800af44 <get_soi>
 800ce2e:	4603      	mov	r3, r0
 800ce30:	2b00      	cmp	r3, #0
 800ce32:	f040 80d1 	bne.w	800cfd8 <read_markers+0x318>
	return JPEG_SUSPENDED;
 800ce36:	2300      	movs	r3, #0
 800ce38:	e0ec      	b.n	800d014 <read_markers+0x354>
      break;

    case M_SOF0:		/* Baseline */
      if (! get_sof(cinfo, TRUE, FALSE, FALSE))
 800ce3a:	2300      	movs	r3, #0
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	2101      	movs	r1, #1
 800ce40:	6878      	ldr	r0, [r7, #4]
 800ce42:	f7fe f8ee 	bl	800b022 <get_sof>
 800ce46:	4603      	mov	r3, r0
 800ce48:	2b00      	cmp	r3, #0
 800ce4a:	f040 80c7 	bne.w	800cfdc <read_markers+0x31c>
	return JPEG_SUSPENDED;
 800ce4e:	2300      	movs	r3, #0
 800ce50:	e0e0      	b.n	800d014 <read_markers+0x354>
      break;

    case M_SOF1:		/* Extended sequential, Huffman */
      if (! get_sof(cinfo, FALSE, FALSE, FALSE))
 800ce52:	2300      	movs	r3, #0
 800ce54:	2200      	movs	r2, #0
 800ce56:	2100      	movs	r1, #0
 800ce58:	6878      	ldr	r0, [r7, #4]
 800ce5a:	f7fe f8e2 	bl	800b022 <get_sof>
 800ce5e:	4603      	mov	r3, r0
 800ce60:	2b00      	cmp	r3, #0
 800ce62:	f040 80bd 	bne.w	800cfe0 <read_markers+0x320>
	return JPEG_SUSPENDED;
 800ce66:	2300      	movs	r3, #0
 800ce68:	e0d4      	b.n	800d014 <read_markers+0x354>
      break;

    case M_SOF2:		/* Progressive, Huffman */
      if (! get_sof(cinfo, FALSE, TRUE, FALSE))
 800ce6a:	2300      	movs	r3, #0
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	2100      	movs	r1, #0
 800ce70:	6878      	ldr	r0, [r7, #4]
 800ce72:	f7fe f8d6 	bl	800b022 <get_sof>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	f040 80b3 	bne.w	800cfe4 <read_markers+0x324>
	return JPEG_SUSPENDED;
 800ce7e:	2300      	movs	r3, #0
 800ce80:	e0c8      	b.n	800d014 <read_markers+0x354>
      break;

    case M_SOF9:		/* Extended sequential, arithmetic */
      if (! get_sof(cinfo, FALSE, FALSE, TRUE))
 800ce82:	2301      	movs	r3, #1
 800ce84:	2200      	movs	r2, #0
 800ce86:	2100      	movs	r1, #0
 800ce88:	6878      	ldr	r0, [r7, #4]
 800ce8a:	f7fe f8ca 	bl	800b022 <get_sof>
 800ce8e:	4603      	mov	r3, r0
 800ce90:	2b00      	cmp	r3, #0
 800ce92:	f040 80a9 	bne.w	800cfe8 <read_markers+0x328>
	return JPEG_SUSPENDED;
 800ce96:	2300      	movs	r3, #0
 800ce98:	e0bc      	b.n	800d014 <read_markers+0x354>
      break;

    case M_SOF10:		/* Progressive, arithmetic */
      if (! get_sof(cinfo, FALSE, TRUE, TRUE))
 800ce9a:	2301      	movs	r3, #1
 800ce9c:	2201      	movs	r2, #1
 800ce9e:	2100      	movs	r1, #0
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7fe f8be 	bl	800b022 <get_sof>
 800cea6:	4603      	mov	r3, r0
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	f040 809f 	bne.w	800cfec <read_markers+0x32c>
	return JPEG_SUSPENDED;
 800ceae:	2300      	movs	r3, #0
 800ceb0:	e0b0      	b.n	800d014 <read_markers+0x354>
    case M_JPG:			/* Reserved for JPEG extensions */
    case M_SOF11:		/* Lossless, arithmetic */
    case M_SOF13:		/* Differential sequential, arithmetic */
    case M_SOF14:		/* Differential progressive, arithmetic */
    case M_SOF15:		/* Differential lossless, arithmetic */
      ERREXIT1(cinfo, JERR_SOF_UNSUPPORTED, cinfo->unread_marker);
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	681b      	ldr	r3, [r3, #0]
 800ceb6:	223e      	movs	r2, #62	; 0x3e
 800ceb8:	615a      	str	r2, [r3, #20]
 800ceba:	687b      	ldr	r3, [r7, #4]
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	687a      	ldr	r2, [r7, #4]
 800cec0:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 800cec4:	619a      	str	r2, [r3, #24]
 800cec6:	687b      	ldr	r3, [r7, #4]
 800cec8:	681b      	ldr	r3, [r3, #0]
 800ceca:	681b      	ldr	r3, [r3, #0]
 800cecc:	6878      	ldr	r0, [r7, #4]
 800cece:	4798      	blx	r3
      break;
 800ced0:	e09b      	b.n	800d00a <read_markers+0x34a>

    case M_SOS:
      if (! get_sos(cinfo))
 800ced2:	6878      	ldr	r0, [r7, #4]
 800ced4:	f7fe fab9 	bl	800b44a <get_sos>
 800ced8:	4603      	mov	r3, r0
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d101      	bne.n	800cee2 <read_markers+0x222>
	return JPEG_SUSPENDED;
 800cede:	2300      	movs	r3, #0
 800cee0:	e098      	b.n	800d014 <read_markers+0x354>
      cinfo->unread_marker = 0;	/* processed the marker */
 800cee2:	687b      	ldr	r3, [r7, #4]
 800cee4:	2200      	movs	r2, #0
 800cee6:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
      return JPEG_REACHED_SOS;
 800ceea:	2301      	movs	r3, #1
 800ceec:	e092      	b.n	800d014 <read_markers+0x354>
    
    case M_EOI:
      TRACEMS(cinfo, 1, JTRC_EOI);
 800ceee:	687b      	ldr	r3, [r7, #4]
 800cef0:	681b      	ldr	r3, [r3, #0]
 800cef2:	2257      	movs	r2, #87	; 0x57
 800cef4:	615a      	str	r2, [r3, #20]
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	685b      	ldr	r3, [r3, #4]
 800cefc:	2101      	movs	r1, #1
 800cefe:	6878      	ldr	r0, [r7, #4]
 800cf00:	4798      	blx	r3
      cinfo->unread_marker = 0;	/* processed the marker */
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
      return JPEG_REACHED_EOI;
 800cf0a:	2302      	movs	r3, #2
 800cf0c:	e082      	b.n	800d014 <read_markers+0x354>
      
    case M_DAC:
      if (! get_dac(cinfo))
 800cf0e:	6878      	ldr	r0, [r7, #4]
 800cf10:	f7fe fc69 	bl	800b7e6 <get_dac>
 800cf14:	4603      	mov	r3, r0
 800cf16:	2b00      	cmp	r3, #0
 800cf18:	d16a      	bne.n	800cff0 <read_markers+0x330>
	return JPEG_SUSPENDED;
 800cf1a:	2300      	movs	r3, #0
 800cf1c:	e07a      	b.n	800d014 <read_markers+0x354>
      break;
      
    case M_DHT:
      if (! get_dht(cinfo))
 800cf1e:	6878      	ldr	r0, [r7, #4]
 800cf20:	f7fe fd5b 	bl	800b9da <get_dht>
 800cf24:	4603      	mov	r3, r0
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	d164      	bne.n	800cff4 <read_markers+0x334>
	return JPEG_SUSPENDED;
 800cf2a:	2300      	movs	r3, #0
 800cf2c:	e072      	b.n	800d014 <read_markers+0x354>
      break;
      
    case M_DQT:
      if (! get_dqt(cinfo))
 800cf2e:	6878      	ldr	r0, [r7, #4]
 800cf30:	f7fe ffac 	bl	800be8c <get_dqt>
 800cf34:	4603      	mov	r3, r0
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d15e      	bne.n	800cff8 <read_markers+0x338>
	return JPEG_SUSPENDED;
 800cf3a:	2300      	movs	r3, #0
 800cf3c:	e06a      	b.n	800d014 <read_markers+0x354>
      break;
      
    case M_DRI:
      if (! get_dri(cinfo))
 800cf3e:	6878      	ldr	r0, [r7, #4]
 800cf40:	f7ff f9ee 	bl	800c320 <get_dri>
 800cf44:	4603      	mov	r3, r0
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d158      	bne.n	800cffc <read_markers+0x33c>
	return JPEG_SUSPENDED;
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	e062      	b.n	800d014 <read_markers+0x354>
    case M_APP11:
    case M_APP12:
    case M_APP13:
    case M_APP14:
    case M_APP15:
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
		cinfo->unread_marker - (int) M_APP0]) (cinfo))
 800cf54:	687a      	ldr	r2, [r7, #4]
 800cf56:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 800cf5a:	3ae0      	subs	r2, #224	; 0xe0
      if (! (*((my_marker_ptr) cinfo->marker)->process_APPn[
 800cf5c:	3208      	adds	r2, #8
 800cf5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800cf62:	6878      	ldr	r0, [r7, #4]
 800cf64:	4798      	blx	r3
 800cf66:	4603      	mov	r3, r0
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d149      	bne.n	800d000 <read_markers+0x340>
	return JPEG_SUSPENDED;
 800cf6c:	2300      	movs	r3, #0
 800cf6e:	e051      	b.n	800d014 <read_markers+0x354>
      break;
      
    case M_COM:
      if (! (*((my_marker_ptr) cinfo->marker)->process_COM) (cinfo))
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800cf76:	69db      	ldr	r3, [r3, #28]
 800cf78:	6878      	ldr	r0, [r7, #4]
 800cf7a:	4798      	blx	r3
 800cf7c:	4603      	mov	r3, r0
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d140      	bne.n	800d004 <read_markers+0x344>
	return JPEG_SUSPENDED;
 800cf82:	2300      	movs	r3, #0
 800cf84:	e046      	b.n	800d014 <read_markers+0x354>
    case M_RST4:
    case M_RST5:
    case M_RST6:
    case M_RST7:
    case M_TEM:
      TRACEMS1(cinfo, 1, JTRC_PARMLESS_MARKER, cinfo->unread_marker);
 800cf86:	687b      	ldr	r3, [r7, #4]
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	225e      	movs	r2, #94	; 0x5e
 800cf8c:	615a      	str	r2, [r3, #20]
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	681b      	ldr	r3, [r3, #0]
 800cf92:	687a      	ldr	r2, [r7, #4]
 800cf94:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 800cf98:	619a      	str	r2, [r3, #24]
 800cf9a:	687b      	ldr	r3, [r7, #4]
 800cf9c:	681b      	ldr	r3, [r3, #0]
 800cf9e:	685b      	ldr	r3, [r3, #4]
 800cfa0:	2101      	movs	r1, #1
 800cfa2:	6878      	ldr	r0, [r7, #4]
 800cfa4:	4798      	blx	r3
      break;
 800cfa6:	e030      	b.n	800d00a <read_markers+0x34a>

    case M_DNL:			/* Ignore DNL ... perhaps the wrong thing */
      if (! skip_variable(cinfo))
 800cfa8:	6878      	ldr	r0, [r7, #4]
 800cfaa:	f7ff fcff 	bl	800c9ac <skip_variable>
 800cfae:	4603      	mov	r3, r0
 800cfb0:	2b00      	cmp	r3, #0
 800cfb2:	d129      	bne.n	800d008 <read_markers+0x348>
	return JPEG_SUSPENDED;
 800cfb4:	2300      	movs	r3, #0
 800cfb6:	e02d      	b.n	800d014 <read_markers+0x354>
      /* For now, we treat the reserved markers as fatal errors since they are
       * likely to be used to signal incompatible JPEG Part 3 extensions.
       * Once the JPEG 3 version-number marker is well defined, this code
       * ought to change!
       */
      ERREXIT1(cinfo, JERR_UNKNOWN_MARKER, cinfo->unread_marker);
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	681b      	ldr	r3, [r3, #0]
 800cfbc:	2246      	movs	r2, #70	; 0x46
 800cfbe:	615a      	str	r2, [r3, #20]
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	681b      	ldr	r3, [r3, #0]
 800cfc4:	687a      	ldr	r2, [r7, #4]
 800cfc6:	f8d2 21b4 	ldr.w	r2, [r2, #436]	; 0x1b4
 800cfca:	619a      	str	r2, [r3, #24]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	681b      	ldr	r3, [r3, #0]
 800cfd2:	6878      	ldr	r0, [r7, #4]
 800cfd4:	4798      	blx	r3
      break;
 800cfd6:	e018      	b.n	800d00a <read_markers+0x34a>
      break;
 800cfd8:	bf00      	nop
 800cfda:	e016      	b.n	800d00a <read_markers+0x34a>
      break;
 800cfdc:	bf00      	nop
 800cfde:	e014      	b.n	800d00a <read_markers+0x34a>
      break;
 800cfe0:	bf00      	nop
 800cfe2:	e012      	b.n	800d00a <read_markers+0x34a>
      break;
 800cfe4:	bf00      	nop
 800cfe6:	e010      	b.n	800d00a <read_markers+0x34a>
      break;
 800cfe8:	bf00      	nop
 800cfea:	e00e      	b.n	800d00a <read_markers+0x34a>
      break;
 800cfec:	bf00      	nop
 800cfee:	e00c      	b.n	800d00a <read_markers+0x34a>
      break;
 800cff0:	bf00      	nop
 800cff2:	e00a      	b.n	800d00a <read_markers+0x34a>
      break;
 800cff4:	bf00      	nop
 800cff6:	e008      	b.n	800d00a <read_markers+0x34a>
      break;
 800cff8:	bf00      	nop
 800cffa:	e006      	b.n	800d00a <read_markers+0x34a>
      break;
 800cffc:	bf00      	nop
 800cffe:	e004      	b.n	800d00a <read_markers+0x34a>
      break;
 800d000:	bf00      	nop
 800d002:	e002      	b.n	800d00a <read_markers+0x34a>
      break;
 800d004:	bf00      	nop
 800d006:	e000      	b.n	800d00a <read_markers+0x34a>
      break;
 800d008:	bf00      	nop
    }
    /* Successfully processed marker, so reset state variable */
    cinfo->unread_marker = 0;
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2200      	movs	r2, #0
 800d00e:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
    if (cinfo->unread_marker == 0) {
 800d012:	e659      	b.n	800ccc8 <read_markers+0x8>
  } /* end loop */
}
 800d014:	4618      	mov	r0, r3
 800d016:	3708      	adds	r7, #8
 800d018:	46bd      	mov	sp, r7
 800d01a:	bd80      	pop	{r7, pc}

0800d01c <read_restart_marker>:
 * it holds a marker which the decoder will be unable to read past.
 */

METHODDEF(boolean)
read_restart_marker (j_decompress_ptr cinfo)
{
 800d01c:	b580      	push	{r7, lr}
 800d01e:	b082      	sub	sp, #8
 800d020:	af00      	add	r7, sp, #0
 800d022:	6078      	str	r0, [r7, #4]
  /* Obtain a marker unless we already did. */
  /* Note that next_marker will complain if it skips any data. */
  if (cinfo->unread_marker == 0) {
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800d02a:	2b00      	cmp	r3, #0
 800d02c:	d107      	bne.n	800d03e <read_restart_marker+0x22>
    if (! next_marker(cinfo))
 800d02e:	6878      	ldr	r0, [r7, #4]
 800d030:	f7ff fd2c 	bl	800ca8c <next_marker>
 800d034:	4603      	mov	r3, r0
 800d036:	2b00      	cmp	r3, #0
 800d038:	d101      	bne.n	800d03e <read_restart_marker+0x22>
      return FALSE;
 800d03a:	2300      	movs	r3, #0
 800d03c:	e03a      	b.n	800d0b4 <read_restart_marker+0x98>
  }

  if (cinfo->unread_marker ==
 800d03e:	687b      	ldr	r3, [r7, #4]
 800d040:	f8d3 21b4 	ldr.w	r2, [r3, #436]	; 0x1b4
      ((int) M_RST0 + cinfo->marker->next_restart_num)) {
 800d044:	687b      	ldr	r3, [r7, #4]
 800d046:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d04a:	695b      	ldr	r3, [r3, #20]
 800d04c:	33d0      	adds	r3, #208	; 0xd0
  if (cinfo->unread_marker ==
 800d04e:	429a      	cmp	r2, r3
 800d050:	d115      	bne.n	800d07e <read_restart_marker+0x62>
    /* Normal case --- swallow the marker and let entropy decoder continue */
    TRACEMS1(cinfo, 3, JTRC_RST, cinfo->marker->next_restart_num);
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	2264      	movs	r2, #100	; 0x64
 800d058:	615a      	str	r2, [r3, #20]
 800d05a:	687b      	ldr	r3, [r7, #4]
 800d05c:	f8d3 21cc 	ldr.w	r2, [r3, #460]	; 0x1cc
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	6952      	ldr	r2, [r2, #20]
 800d066:	619a      	str	r2, [r3, #24]
 800d068:	687b      	ldr	r3, [r7, #4]
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	2103      	movs	r1, #3
 800d070:	6878      	ldr	r0, [r7, #4]
 800d072:	4798      	blx	r3
    cinfo->unread_marker = 0;
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	2200      	movs	r2, #0
 800d078:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
 800d07c:	e00e      	b.n	800d09c <read_restart_marker+0x80>
  } else {
    /* Uh-oh, the restart markers have been messed up. */
    /* Let the data source manager determine how to resync. */
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	699b      	ldr	r3, [r3, #24]
 800d082:	695b      	ldr	r3, [r3, #20]
					    cinfo->marker->next_restart_num))
 800d084:	687a      	ldr	r2, [r7, #4]
 800d086:	f8d2 21cc 	ldr.w	r2, [r2, #460]	; 0x1cc
    if (! (*cinfo->src->resync_to_restart) (cinfo,
 800d08a:	6952      	ldr	r2, [r2, #20]
 800d08c:	4611      	mov	r1, r2
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	4798      	blx	r3
 800d092:	4603      	mov	r3, r0
 800d094:	2b00      	cmp	r3, #0
 800d096:	d101      	bne.n	800d09c <read_restart_marker+0x80>
      return FALSE;
 800d098:	2300      	movs	r3, #0
 800d09a:	e00b      	b.n	800d0b4 <read_restart_marker+0x98>
  }

  /* Update next-restart state */
  cinfo->marker->next_restart_num = (cinfo->marker->next_restart_num + 1) & 7;
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d0a2:	695b      	ldr	r3, [r3, #20]
 800d0a4:	1c5a      	adds	r2, r3, #1
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d0ac:	f002 0207 	and.w	r2, r2, #7
 800d0b0:	615a      	str	r2, [r3, #20]

  return TRUE;
 800d0b2:	2301      	movs	r3, #1
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3708      	adds	r7, #8
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}

0800d0bc <jpeg_resync_to_restart>:
 * any other marker would have to be bogus data in that case.
 */

GLOBAL(boolean)
jpeg_resync_to_restart (j_decompress_ptr cinfo, int desired)
{
 800d0bc:	b580      	push	{r7, lr}
 800d0be:	b084      	sub	sp, #16
 800d0c0:	af00      	add	r7, sp, #0
 800d0c2:	6078      	str	r0, [r7, #4]
 800d0c4:	6039      	str	r1, [r7, #0]
  int marker = cinfo->unread_marker;
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800d0cc:	60fb      	str	r3, [r7, #12]
  int action = 1;
 800d0ce:	2301      	movs	r3, #1
 800d0d0:	60bb      	str	r3, [r7, #8]
  
  /* Always put up a warning. */
  WARNMS2(cinfo, JWRN_MUST_RESYNC, marker, desired);
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	681b      	ldr	r3, [r3, #0]
 800d0d6:	227c      	movs	r2, #124	; 0x7c
 800d0d8:	615a      	str	r2, [r3, #20]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	68fa      	ldr	r2, [r7, #12]
 800d0e0:	619a      	str	r2, [r3, #24]
 800d0e2:	687b      	ldr	r3, [r7, #4]
 800d0e4:	681b      	ldr	r3, [r3, #0]
 800d0e6:	683a      	ldr	r2, [r7, #0]
 800d0e8:	61da      	str	r2, [r3, #28]
 800d0ea:	687b      	ldr	r3, [r7, #4]
 800d0ec:	681b      	ldr	r3, [r3, #0]
 800d0ee:	685b      	ldr	r3, [r3, #4]
 800d0f0:	f04f 31ff 	mov.w	r1, #4294967295
 800d0f4:	6878      	ldr	r0, [r7, #4]
 800d0f6:	4798      	blx	r3
  
  /* Outer loop handles repeated decision after scanning forward. */
  for (;;) {
    if (marker < (int) M_SOF0)
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2bbf      	cmp	r3, #191	; 0xbf
 800d0fc:	dc02      	bgt.n	800d104 <jpeg_resync_to_restart+0x48>
      action = 2;		/* invalid marker */
 800d0fe:	2302      	movs	r3, #2
 800d100:	60bb      	str	r3, [r7, #8]
 800d102:	e030      	b.n	800d166 <jpeg_resync_to_restart+0xaa>
    else if (marker < (int) M_RST0 || marker > (int) M_RST7)
 800d104:	68fb      	ldr	r3, [r7, #12]
 800d106:	2bcf      	cmp	r3, #207	; 0xcf
 800d108:	dd02      	ble.n	800d110 <jpeg_resync_to_restart+0x54>
 800d10a:	68fb      	ldr	r3, [r7, #12]
 800d10c:	2bd7      	cmp	r3, #215	; 0xd7
 800d10e:	dd02      	ble.n	800d116 <jpeg_resync_to_restart+0x5a>
      action = 3;		/* valid non-restart marker */
 800d110:	2303      	movs	r3, #3
 800d112:	60bb      	str	r3, [r7, #8]
 800d114:	e027      	b.n	800d166 <jpeg_resync_to_restart+0xaa>
    else {
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	3301      	adds	r3, #1
 800d11a:	f003 0307 	and.w	r3, r3, #7
 800d11e:	33d0      	adds	r3, #208	; 0xd0
 800d120:	68fa      	ldr	r2, [r7, #12]
 800d122:	429a      	cmp	r2, r3
 800d124:	d007      	beq.n	800d136 <jpeg_resync_to_restart+0x7a>
	  marker == ((int) M_RST0 + ((desired+2) & 7)))
 800d126:	683b      	ldr	r3, [r7, #0]
 800d128:	3302      	adds	r3, #2
 800d12a:	f003 0307 	and.w	r3, r3, #7
 800d12e:	33d0      	adds	r3, #208	; 0xd0
      if (marker == ((int) M_RST0 + ((desired+1) & 7)) ||
 800d130:	68fa      	ldr	r2, [r7, #12]
 800d132:	429a      	cmp	r2, r3
 800d134:	d102      	bne.n	800d13c <jpeg_resync_to_restart+0x80>
	action = 3;		/* one of the next two expected restarts */
 800d136:	2303      	movs	r3, #3
 800d138:	60bb      	str	r3, [r7, #8]
 800d13a:	e014      	b.n	800d166 <jpeg_resync_to_restart+0xaa>
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800d13c:	683b      	ldr	r3, [r7, #0]
 800d13e:	3b01      	subs	r3, #1
 800d140:	f003 0307 	and.w	r3, r3, #7
 800d144:	33d0      	adds	r3, #208	; 0xd0
 800d146:	68fa      	ldr	r2, [r7, #12]
 800d148:	429a      	cmp	r2, r3
 800d14a:	d007      	beq.n	800d15c <jpeg_resync_to_restart+0xa0>
	       marker == ((int) M_RST0 + ((desired-2) & 7)))
 800d14c:	683b      	ldr	r3, [r7, #0]
 800d14e:	3b02      	subs	r3, #2
 800d150:	f003 0307 	and.w	r3, r3, #7
 800d154:	33d0      	adds	r3, #208	; 0xd0
      else if (marker == ((int) M_RST0 + ((desired-1) & 7)) ||
 800d156:	68fa      	ldr	r2, [r7, #12]
 800d158:	429a      	cmp	r2, r3
 800d15a:	d102      	bne.n	800d162 <jpeg_resync_to_restart+0xa6>
	action = 2;		/* a prior restart, so advance */
 800d15c:	2302      	movs	r3, #2
 800d15e:	60bb      	str	r3, [r7, #8]
 800d160:	e001      	b.n	800d166 <jpeg_resync_to_restart+0xaa>
      else
	action = 1;		/* desired restart or too far away */
 800d162:	2301      	movs	r3, #1
 800d164:	60bb      	str	r3, [r7, #8]
    }
    TRACEMS2(cinfo, 4, JTRC_RECOVERY_ACTION, marker, action);
 800d166:	687b      	ldr	r3, [r7, #4]
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	2263      	movs	r2, #99	; 0x63
 800d16c:	615a      	str	r2, [r3, #20]
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	681b      	ldr	r3, [r3, #0]
 800d172:	68fa      	ldr	r2, [r7, #12]
 800d174:	619a      	str	r2, [r3, #24]
 800d176:	687b      	ldr	r3, [r7, #4]
 800d178:	681b      	ldr	r3, [r3, #0]
 800d17a:	68ba      	ldr	r2, [r7, #8]
 800d17c:	61da      	str	r2, [r3, #28]
 800d17e:	687b      	ldr	r3, [r7, #4]
 800d180:	681b      	ldr	r3, [r3, #0]
 800d182:	685b      	ldr	r3, [r3, #4]
 800d184:	2104      	movs	r1, #4
 800d186:	6878      	ldr	r0, [r7, #4]
 800d188:	4798      	blx	r3
    switch (action) {
 800d18a:	68bb      	ldr	r3, [r7, #8]
 800d18c:	2b03      	cmp	r3, #3
 800d18e:	d01c      	beq.n	800d1ca <jpeg_resync_to_restart+0x10e>
 800d190:	68bb      	ldr	r3, [r7, #8]
 800d192:	2b03      	cmp	r3, #3
 800d194:	dcb0      	bgt.n	800d0f8 <jpeg_resync_to_restart+0x3c>
 800d196:	68bb      	ldr	r3, [r7, #8]
 800d198:	2b01      	cmp	r3, #1
 800d19a:	d003      	beq.n	800d1a4 <jpeg_resync_to_restart+0xe8>
 800d19c:	68bb      	ldr	r3, [r7, #8]
 800d19e:	2b02      	cmp	r3, #2
 800d1a0:	d006      	beq.n	800d1b0 <jpeg_resync_to_restart+0xf4>
 800d1a2:	e014      	b.n	800d1ce <jpeg_resync_to_restart+0x112>
    case 1:
      /* Discard marker and let entropy decoder resume processing. */
      cinfo->unread_marker = 0;
 800d1a4:	687b      	ldr	r3, [r7, #4]
 800d1a6:	2200      	movs	r2, #0
 800d1a8:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
      return TRUE;
 800d1ac:	2301      	movs	r3, #1
 800d1ae:	e00f      	b.n	800d1d0 <jpeg_resync_to_restart+0x114>
    case 2:
      /* Scan to the next marker, and repeat the decision loop. */
      if (! next_marker(cinfo))
 800d1b0:	6878      	ldr	r0, [r7, #4]
 800d1b2:	f7ff fc6b 	bl	800ca8c <next_marker>
 800d1b6:	4603      	mov	r3, r0
 800d1b8:	2b00      	cmp	r3, #0
 800d1ba:	d101      	bne.n	800d1c0 <jpeg_resync_to_restart+0x104>
	return FALSE;
 800d1bc:	2300      	movs	r3, #0
 800d1be:	e007      	b.n	800d1d0 <jpeg_resync_to_restart+0x114>
      marker = cinfo->unread_marker;
 800d1c0:	687b      	ldr	r3, [r7, #4]
 800d1c2:	f8d3 31b4 	ldr.w	r3, [r3, #436]	; 0x1b4
 800d1c6:	60fb      	str	r3, [r7, #12]
      break;
 800d1c8:	e001      	b.n	800d1ce <jpeg_resync_to_restart+0x112>
    case 3:
      /* Return without advancing past this marker. */
      /* Entropy decoder will be forced to process an empty segment. */
      return TRUE;
 800d1ca:	2301      	movs	r3, #1
 800d1cc:	e000      	b.n	800d1d0 <jpeg_resync_to_restart+0x114>
    if (marker < (int) M_SOF0)
 800d1ce:	e793      	b.n	800d0f8 <jpeg_resync_to_restart+0x3c>
    }
  } /* end loop */
}
 800d1d0:	4618      	mov	r0, r3
 800d1d2:	3710      	adds	r7, #16
 800d1d4:	46bd      	mov	sp, r7
 800d1d6:	bd80      	pop	{r7, pc}

0800d1d8 <reset_marker_reader>:
 * Reset marker processing state to begin a fresh datastream.
 */

METHODDEF(void)
reset_marker_reader (j_decompress_ptr cinfo)
{
 800d1d8:	b480      	push	{r7}
 800d1da:	b085      	sub	sp, #20
 800d1dc:	af00      	add	r7, sp, #0
 800d1de:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker = (my_marker_ptr) cinfo->marker;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	f8d3 31cc 	ldr.w	r3, [r3, #460]	; 0x1cc
 800d1e6:	60fb      	str	r3, [r7, #12]

  cinfo->comp_info = NULL;		/* until allocated by get_sof */
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	2200      	movs	r2, #0
 800d1ec:	f8c3 20d8 	str.w	r2, [r3, #216]	; 0xd8
  cinfo->input_scan_number = 0;		/* no SOS seen yet */
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	2200      	movs	r2, #0
 800d1f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  cinfo->unread_marker = 0;		/* no pending marker */
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	2200      	movs	r2, #0
 800d1fc:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
  marker->pub.saw_SOI = FALSE;		/* set internal state too */
 800d200:	68fb      	ldr	r3, [r7, #12]
 800d202:	2200      	movs	r2, #0
 800d204:	60da      	str	r2, [r3, #12]
  marker->pub.saw_SOF = FALSE;
 800d206:	68fb      	ldr	r3, [r7, #12]
 800d208:	2200      	movs	r2, #0
 800d20a:	611a      	str	r2, [r3, #16]
  marker->pub.discarded_bytes = 0;
 800d20c:	68fb      	ldr	r3, [r7, #12]
 800d20e:	2200      	movs	r2, #0
 800d210:	619a      	str	r2, [r3, #24]
  marker->cur_marker = NULL;
 800d212:	68fb      	ldr	r3, [r7, #12]
 800d214:	2200      	movs	r2, #0
 800d216:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
}
 800d21a:	bf00      	nop
 800d21c:	3714      	adds	r7, #20
 800d21e:	46bd      	mov	sp, r7
 800d220:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d224:	4770      	bx	lr
	...

0800d228 <jinit_marker_reader>:
 * This is called only once, when the decompression object is created.
 */

GLOBAL(void)
jinit_marker_reader (j_decompress_ptr cinfo)
{
 800d228:	b580      	push	{r7, lr}
 800d22a:	b084      	sub	sp, #16
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
  my_marker_ptr marker;
  int i;

  /* Create subobject in permanent pool */
  marker = (my_marker_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_PERMANENT,
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	685b      	ldr	r3, [r3, #4]
 800d234:	681b      	ldr	r3, [r3, #0]
 800d236:	22ac      	movs	r2, #172	; 0xac
 800d238:	2100      	movs	r1, #0
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	4798      	blx	r3
 800d23e:	60b8      	str	r0, [r7, #8]
				SIZEOF(my_marker_reader));
  cinfo->marker = (struct jpeg_marker_reader *) marker;
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	68ba      	ldr	r2, [r7, #8]
 800d244:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  /* Initialize public method pointers */
  marker->pub.reset_marker_reader = reset_marker_reader;
 800d248:	68bb      	ldr	r3, [r7, #8]
 800d24a:	4a18      	ldr	r2, [pc, #96]	; (800d2ac <jinit_marker_reader+0x84>)
 800d24c:	601a      	str	r2, [r3, #0]
  marker->pub.read_markers = read_markers;
 800d24e:	68bb      	ldr	r3, [r7, #8]
 800d250:	4a17      	ldr	r2, [pc, #92]	; (800d2b0 <jinit_marker_reader+0x88>)
 800d252:	605a      	str	r2, [r3, #4]
  marker->pub.read_restart_marker = read_restart_marker;
 800d254:	68bb      	ldr	r3, [r7, #8]
 800d256:	4a17      	ldr	r2, [pc, #92]	; (800d2b4 <jinit_marker_reader+0x8c>)
 800d258:	609a      	str	r2, [r3, #8]
  /* Initialize COM/APPn processing.
   * By default, we examine and then discard APP0 and APP14,
   * but simply discard COM and all other APPn.
   */
  marker->process_COM = skip_variable;
 800d25a:	68bb      	ldr	r3, [r7, #8]
 800d25c:	4a16      	ldr	r2, [pc, #88]	; (800d2b8 <jinit_marker_reader+0x90>)
 800d25e:	61da      	str	r2, [r3, #28]
  marker->length_limit_COM = 0;
 800d260:	68bb      	ldr	r3, [r7, #8]
 800d262:	2200      	movs	r2, #0
 800d264:	661a      	str	r2, [r3, #96]	; 0x60
  for (i = 0; i < 16; i++) {
 800d266:	2300      	movs	r3, #0
 800d268:	60fb      	str	r3, [r7, #12]
 800d26a:	e00f      	b.n	800d28c <jinit_marker_reader+0x64>
    marker->process_APPn[i] = skip_variable;
 800d26c:	68bb      	ldr	r3, [r7, #8]
 800d26e:	68fa      	ldr	r2, [r7, #12]
 800d270:	3208      	adds	r2, #8
 800d272:	4911      	ldr	r1, [pc, #68]	; (800d2b8 <jinit_marker_reader+0x90>)
 800d274:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    marker->length_limit_APPn[i] = 0;
 800d278:	68ba      	ldr	r2, [r7, #8]
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	3318      	adds	r3, #24
 800d27e:	009b      	lsls	r3, r3, #2
 800d280:	4413      	add	r3, r2
 800d282:	2200      	movs	r2, #0
 800d284:	605a      	str	r2, [r3, #4]
  for (i = 0; i < 16; i++) {
 800d286:	68fb      	ldr	r3, [r7, #12]
 800d288:	3301      	adds	r3, #1
 800d28a:	60fb      	str	r3, [r7, #12]
 800d28c:	68fb      	ldr	r3, [r7, #12]
 800d28e:	2b0f      	cmp	r3, #15
 800d290:	ddec      	ble.n	800d26c <jinit_marker_reader+0x44>
  }
  marker->process_APPn[0] = get_interesting_appn;
 800d292:	68bb      	ldr	r3, [r7, #8]
 800d294:	4a09      	ldr	r2, [pc, #36]	; (800d2bc <jinit_marker_reader+0x94>)
 800d296:	621a      	str	r2, [r3, #32]
  marker->process_APPn[14] = get_interesting_appn;
 800d298:	68bb      	ldr	r3, [r7, #8]
 800d29a:	4a08      	ldr	r2, [pc, #32]	; (800d2bc <jinit_marker_reader+0x94>)
 800d29c:	659a      	str	r2, [r3, #88]	; 0x58
  /* Reset marker processing state */
  reset_marker_reader(cinfo);
 800d29e:	6878      	ldr	r0, [r7, #4]
 800d2a0:	f7ff ff9a 	bl	800d1d8 <reset_marker_reader>
}
 800d2a4:	bf00      	nop
 800d2a6:	3710      	adds	r7, #16
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	bd80      	pop	{r7, pc}
 800d2ac:	0800d1d9 	.word	0x0800d1d9
 800d2b0:	0800ccc1 	.word	0x0800ccc1
 800d2b4:	0800d01d 	.word	0x0800d01d
 800d2b8:	0800c9ad 	.word	0x0800c9ad
 800d2bc:	0800c82f 	.word	0x0800c82f

0800d2c0 <use_merged_upsample>:
 * CRUCIAL: this must match the actual capabilities of jdmerge.c!
 */

LOCAL(boolean)
use_merged_upsample (j_decompress_ptr cinfo)
{
 800d2c0:	b480      	push	{r7}
 800d2c2:	b083      	sub	sp, #12
 800d2c4:	af00      	add	r7, sp, #0
 800d2c6:	6078      	str	r0, [r7, #4]
#ifdef UPSAMPLE_MERGING_SUPPORTED
  /* Merging is the equivalent of plain box-filter upsampling */
  if (cinfo->do_fancy_upsampling || cinfo->CCIR601_sampling)
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d2cc:	2b00      	cmp	r3, #0
 800d2ce:	d104      	bne.n	800d2da <use_merged_upsample+0x1a>
 800d2d0:	687b      	ldr	r3, [r7, #4]
 800d2d2:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800d2d6:	2b00      	cmp	r3, #0
 800d2d8:	d001      	beq.n	800d2de <use_merged_upsample+0x1e>
    return FALSE;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	e07a      	b.n	800d3d4 <use_merged_upsample+0x114>
  /* jdmerge.c only supports YCC=>RGB color conversion */
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d2e4:	2b03      	cmp	r3, #3
 800d2e6:	d10c      	bne.n	800d302 <use_merged_upsample+0x42>
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d2ec:	2b03      	cmp	r3, #3
 800d2ee:	d108      	bne.n	800d302 <use_merged_upsample+0x42>
      cinfo->out_color_space != JCS_RGB ||
 800d2f0:	687b      	ldr	r3, [r7, #4]
 800d2f2:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
  if (cinfo->jpeg_color_space != JCS_YCbCr || cinfo->num_components != 3 ||
 800d2f6:	2b02      	cmp	r3, #2
 800d2f8:	d103      	bne.n	800d302 <use_merged_upsample+0x42>
      cinfo->out_color_components != RGB_PIXELSIZE)
 800d2fa:	687b      	ldr	r3, [r7, #4]
 800d2fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      cinfo->out_color_space != JCS_RGB ||
 800d2fe:	2b03      	cmp	r3, #3
 800d300:	d001      	beq.n	800d306 <use_merged_upsample+0x46>
    return FALSE;
 800d302:	2300      	movs	r3, #0
 800d304:	e066      	b.n	800d3d4 <use_merged_upsample+0x114>
  /* and it only handles 2h1v or 2h2v sampling ratios */
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800d306:	687b      	ldr	r3, [r7, #4]
 800d308:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d30c:	689b      	ldr	r3, [r3, #8]
 800d30e:	2b02      	cmp	r3, #2
 800d310:	d121      	bne.n	800d356 <use_merged_upsample+0x96>
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800d312:	687b      	ldr	r3, [r7, #4]
 800d314:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d318:	3358      	adds	r3, #88	; 0x58
 800d31a:	689b      	ldr	r3, [r3, #8]
  if (cinfo->comp_info[0].h_samp_factor != 2 ||
 800d31c:	2b01      	cmp	r3, #1
 800d31e:	d11a      	bne.n	800d356 <use_merged_upsample+0x96>
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d326:	33b0      	adds	r3, #176	; 0xb0
 800d328:	689b      	ldr	r3, [r3, #8]
      cinfo->comp_info[1].h_samp_factor != 1 ||
 800d32a:	2b01      	cmp	r3, #1
 800d32c:	d113      	bne.n	800d356 <use_merged_upsample+0x96>
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800d32e:	687b      	ldr	r3, [r7, #4]
 800d330:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d334:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[2].h_samp_factor != 1 ||
 800d336:	2b02      	cmp	r3, #2
 800d338:	dc0d      	bgt.n	800d356 <use_merged_upsample+0x96>
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800d33a:	687b      	ldr	r3, [r7, #4]
 800d33c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d340:	3358      	adds	r3, #88	; 0x58
 800d342:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[0].v_samp_factor >  2 ||
 800d344:	2b01      	cmp	r3, #1
 800d346:	d106      	bne.n	800d356 <use_merged_upsample+0x96>
      cinfo->comp_info[2].v_samp_factor != 1)
 800d348:	687b      	ldr	r3, [r7, #4]
 800d34a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d34e:	33b0      	adds	r3, #176	; 0xb0
 800d350:	68db      	ldr	r3, [r3, #12]
      cinfo->comp_info[1].v_samp_factor != 1 ||
 800d352:	2b01      	cmp	r3, #1
 800d354:	d001      	beq.n	800d35a <use_merged_upsample+0x9a>
    return FALSE;
 800d356:	2300      	movs	r3, #0
 800d358:	e03c      	b.n	800d3d4 <use_merged_upsample+0x114>
  /* furthermore, it doesn't work if we've scaled the IDCTs differently */
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d360:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d368:	429a      	cmp	r2, r3
 800d36a:	d130      	bne.n	800d3ce <use_merged_upsample+0x10e>
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d36c:	687b      	ldr	r3, [r7, #4]
 800d36e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d372:	3358      	adds	r3, #88	; 0x58
 800d374:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
  if (cinfo->comp_info[0].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d37c:	429a      	cmp	r2, r3
 800d37e:	d126      	bne.n	800d3ce <use_merged_upsample+0x10e>
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d386:	33b0      	adds	r3, #176	; 0xb0
 800d388:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
      cinfo->comp_info[1].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d390:	429a      	cmp	r2, r3
 800d392:	d11c      	bne.n	800d3ce <use_merged_upsample+0x10e>
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d39a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d39c:	687b      	ldr	r3, [r7, #4]
 800d39e:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
      cinfo->comp_info[2].DCT_h_scaled_size != cinfo->min_DCT_h_scaled_size ||
 800d3a2:	429a      	cmp	r2, r3
 800d3a4:	d113      	bne.n	800d3ce <use_merged_upsample+0x10e>
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d3ac:	3358      	adds	r3, #88	; 0x58
 800d3ae:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
      cinfo->comp_info[0].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d3b6:	429a      	cmp	r2, r3
 800d3b8:	d109      	bne.n	800d3ce <use_merged_upsample+0x10e>
      cinfo->comp_info[2].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size)
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d3c0:	33b0      	adds	r3, #176	; 0xb0
 800d3c2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
      cinfo->comp_info[1].DCT_v_scaled_size != cinfo->min_DCT_v_scaled_size ||
 800d3ca:	429a      	cmp	r2, r3
 800d3cc:	d001      	beq.n	800d3d2 <use_merged_upsample+0x112>
    return FALSE;
 800d3ce:	2300      	movs	r3, #0
 800d3d0:	e000      	b.n	800d3d4 <use_merged_upsample+0x114>
  /* ??? also need to test for upsample-time rescaling, when & if supported */
  return TRUE;			/* by golly, it'll work... */
 800d3d2:	2301      	movs	r3, #1
#else
  return FALSE;
#endif
}
 800d3d4:	4618      	mov	r0, r3
 800d3d6:	370c      	adds	r7, #12
 800d3d8:	46bd      	mov	sp, r7
 800d3da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3de:	4770      	bx	lr

0800d3e0 <jpeg_calc_output_dimensions>:
GLOBAL(void)
jpeg_calc_output_dimensions (j_decompress_ptr cinfo)
/* Do computations that are needed before master selection phase.
 * This function is used for full decompression.
 */
{
 800d3e0:	b580      	push	{r7, lr}
 800d3e2:	b086      	sub	sp, #24
 800d3e4:	af00      	add	r7, sp, #0
 800d3e6:	6078      	str	r0, [r7, #4]
  int ci;
  jpeg_component_info *compptr;
#endif

  /* Prevent application from calling me at wrong times */
  if (cinfo->global_state != DSTATE_READY)
 800d3e8:	687b      	ldr	r3, [r7, #4]
 800d3ea:	695b      	ldr	r3, [r3, #20]
 800d3ec:	2bca      	cmp	r3, #202	; 0xca
 800d3ee:	d00d      	beq.n	800d40c <jpeg_calc_output_dimensions+0x2c>
    ERREXIT1(cinfo, JERR_BAD_STATE, cinfo->global_state);
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	2215      	movs	r2, #21
 800d3f6:	615a      	str	r2, [r3, #20]
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	681b      	ldr	r3, [r3, #0]
 800d3fc:	687a      	ldr	r2, [r7, #4]
 800d3fe:	6952      	ldr	r2, [r2, #20]
 800d400:	619a      	str	r2, [r3, #24]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	6878      	ldr	r0, [r7, #4]
 800d40a:	4798      	blx	r3

  /* Compute core output image dimensions and DCT scaling choices. */
  jpeg_core_output_dimensions(cinfo);
 800d40c:	6878      	ldr	r0, [r7, #4]
 800d40e:	f7fc f871 	bl	80094f4 <jpeg_core_output_dimensions>
  /* In selecting the actual DCT scaling for each component, we try to
   * scale up the chroma components via IDCT scaling rather than upsampling.
   * This saves time if the upsampler gets to use 1:1 scaling.
   * Note this code adapts subsampling ratios which are powers of 2.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d412:	2300      	movs	r3, #0
 800d414:	617b      	str	r3, [r7, #20]
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d41c:	613b      	str	r3, [r7, #16]
 800d41e:	e078      	b.n	800d512 <jpeg_calc_output_dimensions+0x132>
       ci++, compptr++) {
    int ssize = 1;
 800d420:	2301      	movs	r3, #1
 800d422:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800d424:	e002      	b.n	800d42c <jpeg_calc_output_dimensions+0x4c>
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
      ssize = ssize * 2;
 800d426:	68fb      	ldr	r3, [r7, #12]
 800d428:	005b      	lsls	r3, r3, #1
 800d42a:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d432:	68fa      	ldr	r2, [r7, #12]
 800d434:	fb02 f303 	mul.w	r3, r2, r3
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d438:	687a      	ldr	r2, [r7, #4]
 800d43a:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d43c:	2a00      	cmp	r2, #0
 800d43e:	d001      	beq.n	800d444 <jpeg_calc_output_dimensions+0x64>
 800d440:	2208      	movs	r2, #8
 800d442:	e000      	b.n	800d446 <jpeg_calc_output_dimensions+0x66>
 800d444:	2204      	movs	r2, #4
    while (cinfo->min_DCT_h_scaled_size * ssize <=
 800d446:	429a      	cmp	r2, r3
 800d448:	db0f      	blt.n	800d46a <jpeg_calc_output_dimensions+0x8a>
	   (cinfo->max_h_samp_factor % (compptr->h_samp_factor * ssize * 2)) == 0) {
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800d450:	693a      	ldr	r2, [r7, #16]
 800d452:	6892      	ldr	r2, [r2, #8]
 800d454:	68f9      	ldr	r1, [r7, #12]
 800d456:	fb01 f202 	mul.w	r2, r1, r2
 800d45a:	0052      	lsls	r2, r2, #1
 800d45c:	fb93 f1f2 	sdiv	r1, r3, r2
 800d460:	fb02 f201 	mul.w	r2, r2, r1
 800d464:	1a9b      	subs	r3, r3, r2
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d466:	2b00      	cmp	r3, #0
 800d468:	d0dd      	beq.n	800d426 <jpeg_calc_output_dimensions+0x46>
    }
    compptr->DCT_h_scaled_size = cinfo->min_DCT_h_scaled_size * ssize;
 800d46a:	687b      	ldr	r3, [r7, #4]
 800d46c:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
 800d470:	68fa      	ldr	r2, [r7, #12]
 800d472:	fb02 f203 	mul.w	r2, r2, r3
 800d476:	693b      	ldr	r3, [r7, #16]
 800d478:	625a      	str	r2, [r3, #36]	; 0x24
    ssize = 1;
 800d47a:	2301      	movs	r3, #1
 800d47c:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800d47e:	e002      	b.n	800d486 <jpeg_calc_output_dimensions+0xa6>
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
      ssize = ssize * 2;
 800d480:	68fb      	ldr	r3, [r7, #12]
 800d482:	005b      	lsls	r3, r3, #1
 800d484:	60fb      	str	r3, [r7, #12]
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800d486:	687b      	ldr	r3, [r7, #4]
 800d488:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d48c:	68fa      	ldr	r2, [r7, #12]
 800d48e:	fb02 f303 	mul.w	r3, r2, r3
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d492:	687a      	ldr	r2, [r7, #4]
 800d494:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800d496:	2a00      	cmp	r2, #0
 800d498:	d001      	beq.n	800d49e <jpeg_calc_output_dimensions+0xbe>
 800d49a:	2208      	movs	r2, #8
 800d49c:	e000      	b.n	800d4a0 <jpeg_calc_output_dimensions+0xc0>
 800d49e:	2204      	movs	r2, #4
    while (cinfo->min_DCT_v_scaled_size * ssize <=
 800d4a0:	429a      	cmp	r2, r3
 800d4a2:	db0f      	blt.n	800d4c4 <jpeg_calc_output_dimensions+0xe4>
	   (cinfo->max_v_samp_factor % (compptr->v_samp_factor * ssize * 2)) == 0) {
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d4aa:	693a      	ldr	r2, [r7, #16]
 800d4ac:	68d2      	ldr	r2, [r2, #12]
 800d4ae:	68f9      	ldr	r1, [r7, #12]
 800d4b0:	fb01 f202 	mul.w	r2, r1, r2
 800d4b4:	0052      	lsls	r2, r2, #1
 800d4b6:	fb93 f1f2 	sdiv	r1, r3, r2
 800d4ba:	fb02 f201 	mul.w	r2, r2, r1
 800d4be:	1a9b      	subs	r3, r3, r2
	   (cinfo->do_fancy_upsampling ? DCTSIZE : DCTSIZE / 2) &&
 800d4c0:	2b00      	cmp	r3, #0
 800d4c2:	d0dd      	beq.n	800d480 <jpeg_calc_output_dimensions+0xa0>
    }
    compptr->DCT_v_scaled_size = cinfo->min_DCT_v_scaled_size * ssize;
 800d4c4:	687b      	ldr	r3, [r7, #4]
 800d4c6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
 800d4ca:	68fa      	ldr	r2, [r7, #12]
 800d4cc:	fb02 f203 	mul.w	r2, r2, r3
 800d4d0:	693b      	ldr	r3, [r7, #16]
 800d4d2:	629a      	str	r2, [r3, #40]	; 0x28

    /* We don't support IDCT ratios larger than 2. */
    if (compptr->DCT_h_scaled_size > compptr->DCT_v_scaled_size * 2)
 800d4d4:	693b      	ldr	r3, [r7, #16]
 800d4d6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d4d8:	693b      	ldr	r3, [r7, #16]
 800d4da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4dc:	005b      	lsls	r3, r3, #1
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	dd05      	ble.n	800d4ee <jpeg_calc_output_dimensions+0x10e>
	compptr->DCT_h_scaled_size = compptr->DCT_v_scaled_size * 2;
 800d4e2:	693b      	ldr	r3, [r7, #16]
 800d4e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d4e6:	005a      	lsls	r2, r3, #1
 800d4e8:	693b      	ldr	r3, [r7, #16]
 800d4ea:	625a      	str	r2, [r3, #36]	; 0x24
 800d4ec:	e00b      	b.n	800d506 <jpeg_calc_output_dimensions+0x126>
    else if (compptr->DCT_v_scaled_size > compptr->DCT_h_scaled_size * 2)
 800d4ee:	693b      	ldr	r3, [r7, #16]
 800d4f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4f2:	693b      	ldr	r3, [r7, #16]
 800d4f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f6:	005b      	lsls	r3, r3, #1
 800d4f8:	429a      	cmp	r2, r3
 800d4fa:	dd04      	ble.n	800d506 <jpeg_calc_output_dimensions+0x126>
	compptr->DCT_v_scaled_size = compptr->DCT_h_scaled_size * 2;
 800d4fc:	693b      	ldr	r3, [r7, #16]
 800d4fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d500:	005a      	lsls	r2, r3, #1
 800d502:	693b      	ldr	r3, [r7, #16]
 800d504:	629a      	str	r2, [r3, #40]	; 0x28
       ci++, compptr++) {
 800d506:	697b      	ldr	r3, [r7, #20]
 800d508:	3301      	adds	r3, #1
 800d50a:	617b      	str	r3, [r7, #20]
 800d50c:	693b      	ldr	r3, [r7, #16]
 800d50e:	3358      	adds	r3, #88	; 0x58
 800d510:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d516:	697a      	ldr	r2, [r7, #20]
 800d518:	429a      	cmp	r2, r3
 800d51a:	db81      	blt.n	800d420 <jpeg_calc_output_dimensions+0x40>
  }

  /* Recompute downsampled dimensions of components;
   * application needs to know these if using raw downsampled data.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d51c:	2300      	movs	r3, #0
 800d51e:	617b      	str	r3, [r7, #20]
 800d520:	687b      	ldr	r3, [r7, #4]
 800d522:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800d526:	613b      	str	r3, [r7, #16]
 800d528:	e039      	b.n	800d59e <jpeg_calc_output_dimensions+0x1be>
       ci++, compptr++) {
    /* Size in samples, after IDCT scaling */
    compptr->downsampled_width = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_width *
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	69db      	ldr	r3, [r3, #28]
 800d52e:	4619      	mov	r1, r3
		    (long) (compptr->h_samp_factor * compptr->DCT_h_scaled_size),
 800d530:	693b      	ldr	r3, [r7, #16]
 800d532:	689b      	ldr	r3, [r3, #8]
 800d534:	693a      	ldr	r2, [r7, #16]
 800d536:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800d538:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width *
 800d53c:	fb03 f001 	mul.w	r0, r3, r1
		    (long) (cinfo->max_h_samp_factor * cinfo->block_size));
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800d546:	687a      	ldr	r2, [r7, #4]
 800d548:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800d54c:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_width *
 800d550:	4619      	mov	r1, r3
 800d552:	f011 fe91 	bl	801f278 <jdiv_round_up>
 800d556:	4603      	mov	r3, r0
    compptr->downsampled_width = (JDIMENSION)
 800d558:	461a      	mov	r2, r3
 800d55a:	693b      	ldr	r3, [r7, #16]
 800d55c:	62da      	str	r2, [r3, #44]	; 0x2c
    compptr->downsampled_height = (JDIMENSION)
      jdiv_round_up((long) cinfo->image_height *
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	6a1b      	ldr	r3, [r3, #32]
 800d562:	4619      	mov	r1, r3
		    (long) (compptr->v_samp_factor * compptr->DCT_v_scaled_size),
 800d564:	693b      	ldr	r3, [r7, #16]
 800d566:	68db      	ldr	r3, [r3, #12]
 800d568:	693a      	ldr	r2, [r7, #16]
 800d56a:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800d56c:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height *
 800d570:	fb03 f001 	mul.w	r0, r3, r1
		    (long) (cinfo->max_v_samp_factor * cinfo->block_size));
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800d57a:	687a      	ldr	r2, [r7, #4]
 800d57c:	f8d2 21a8 	ldr.w	r2, [r2, #424]	; 0x1a8
 800d580:	fb02 f303 	mul.w	r3, r2, r3
      jdiv_round_up((long) cinfo->image_height *
 800d584:	4619      	mov	r1, r3
 800d586:	f011 fe77 	bl	801f278 <jdiv_round_up>
 800d58a:	4603      	mov	r3, r0
    compptr->downsampled_height = (JDIMENSION)
 800d58c:	461a      	mov	r2, r3
 800d58e:	693b      	ldr	r3, [r7, #16]
 800d590:	631a      	str	r2, [r3, #48]	; 0x30
       ci++, compptr++) {
 800d592:	697b      	ldr	r3, [r7, #20]
 800d594:	3301      	adds	r3, #1
 800d596:	617b      	str	r3, [r7, #20]
 800d598:	693b      	ldr	r3, [r7, #16]
 800d59a:	3358      	adds	r3, #88	; 0x58
 800d59c:	613b      	str	r3, [r7, #16]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800d59e:	687b      	ldr	r3, [r7, #4]
 800d5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5a2:	697a      	ldr	r2, [r7, #20]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	dbc0      	blt.n	800d52a <jpeg_calc_output_dimensions+0x14a>

#endif /* IDCT_SCALING_SUPPORTED */

  /* Report number of components in selected colorspace. */
  /* Probably this should be in the color conversion module... */
  switch (cinfo->out_color_space) {
 800d5a8:	687b      	ldr	r3, [r7, #4]
 800d5aa:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 800d5ae:	3b01      	subs	r3, #1
 800d5b0:	2b04      	cmp	r3, #4
 800d5b2:	d81d      	bhi.n	800d5f0 <jpeg_calc_output_dimensions+0x210>
 800d5b4:	a201      	add	r2, pc, #4	; (adr r2, 800d5bc <jpeg_calc_output_dimensions+0x1dc>)
 800d5b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5ba:	bf00      	nop
 800d5bc:	0800d5d1 	.word	0x0800d5d1
 800d5c0:	0800d5d9 	.word	0x0800d5d9
 800d5c4:	0800d5e1 	.word	0x0800d5e1
 800d5c8:	0800d5e9 	.word	0x0800d5e9
 800d5cc:	0800d5e9 	.word	0x0800d5e9
  case JCS_GRAYSCALE:
    cinfo->out_color_components = 1;
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	2201      	movs	r2, #1
 800d5d4:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 800d5d6:	e010      	b.n	800d5fa <jpeg_calc_output_dimensions+0x21a>
  case JCS_RGB:
    cinfo->out_color_components = RGB_PIXELSIZE;
 800d5d8:	687b      	ldr	r3, [r7, #4]
 800d5da:	2203      	movs	r2, #3
 800d5dc:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 800d5de:	e00c      	b.n	800d5fa <jpeg_calc_output_dimensions+0x21a>
  case JCS_YCbCr:
    cinfo->out_color_components = 3;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	2203      	movs	r2, #3
 800d5e4:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 800d5e6:	e008      	b.n	800d5fa <jpeg_calc_output_dimensions+0x21a>
  case JCS_CMYK:
  case JCS_YCCK:
    cinfo->out_color_components = 4;
 800d5e8:	687b      	ldr	r3, [r7, #4]
 800d5ea:	2204      	movs	r2, #4
 800d5ec:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 800d5ee:	e004      	b.n	800d5fa <jpeg_calc_output_dimensions+0x21a>
  default:			/* else must be same colorspace as in file */
    cinfo->out_color_components = cinfo->num_components;
 800d5f0:	687b      	ldr	r3, [r7, #4]
 800d5f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d5f4:	687b      	ldr	r3, [r7, #4]
 800d5f6:	679a      	str	r2, [r3, #120]	; 0x78
    break;
 800d5f8:	bf00      	nop
  }
  cinfo->output_components = (cinfo->quantize_colors ? 1 :
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d102      	bne.n	800d608 <jpeg_calc_output_dimensions+0x228>
 800d602:	687b      	ldr	r3, [r7, #4]
 800d604:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d606:	e000      	b.n	800d60a <jpeg_calc_output_dimensions+0x22a>
 800d608:	2301      	movs	r3, #1
 800d60a:	687a      	ldr	r2, [r7, #4]
 800d60c:	67d3      	str	r3, [r2, #124]	; 0x7c
			      cinfo->out_color_components);

  /* See if upsampler will want to emit more than one row at a time */
  if (use_merged_upsample(cinfo))
 800d60e:	6878      	ldr	r0, [r7, #4]
 800d610:	f7ff fe56 	bl	800d2c0 <use_merged_upsample>
 800d614:	4603      	mov	r3, r0
 800d616:	2b00      	cmp	r3, #0
 800d618:	d006      	beq.n	800d628 <jpeg_calc_output_dimensions+0x248>
    cinfo->rec_outbuf_height = cinfo->max_v_samp_factor;
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800d620:	687b      	ldr	r3, [r7, #4]
 800d622:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  else
    cinfo->rec_outbuf_height = 1;
}
 800d626:	e003      	b.n	800d630 <jpeg_calc_output_dimensions+0x250>
    cinfo->rec_outbuf_height = 1;
 800d628:	687b      	ldr	r3, [r7, #4]
 800d62a:	2201      	movs	r2, #1
 800d62c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
}
 800d630:	bf00      	nop
 800d632:	3718      	adds	r7, #24
 800d634:	46bd      	mov	sp, r7
 800d636:	bd80      	pop	{r7, pc}

0800d638 <prepare_range_limit_table>:
 */

LOCAL(void)
prepare_range_limit_table (j_decompress_ptr cinfo)
/* Allocate and fill in the sample_range_limit table */
{
 800d638:	b580      	push	{r7, lr}
 800d63a:	b084      	sub	sp, #16
 800d63c:	af00      	add	r7, sp, #0
 800d63e:	6078      	str	r0, [r7, #4]
  JSAMPLE * table;
  int i;

  table = (JSAMPLE *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800d640:	687b      	ldr	r3, [r7, #4]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	681b      	ldr	r3, [r3, #0]
 800d646:	f44f 62b0 	mov.w	r2, #1408	; 0x580
 800d64a:	2101      	movs	r1, #1
 800d64c:	6878      	ldr	r0, [r7, #4]
 800d64e:	4798      	blx	r3
 800d650:	60b8      	str	r0, [r7, #8]
		(5 * (MAXJSAMPLE+1) + CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  table += (MAXJSAMPLE+1);	/* allow negative subscripts of simple table */
 800d652:	68bb      	ldr	r3, [r7, #8]
 800d654:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800d658:	60bb      	str	r3, [r7, #8]
  cinfo->sample_range_limit = table;
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	68ba      	ldr	r2, [r7, #8]
 800d65e:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
  /* First segment of "simple" table: limit[x] = 0 for x < 0 */
  MEMZERO(table - (MAXJSAMPLE+1), (MAXJSAMPLE+1) * SIZEOF(JSAMPLE));
 800d662:	68bb      	ldr	r3, [r7, #8]
 800d664:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800d668:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d66c:	2100      	movs	r1, #0
 800d66e:	4618      	mov	r0, r3
 800d670:	f011 feb2 	bl	801f3d8 <memset>
  /* Main part of "simple" table: limit[x] = x */
  for (i = 0; i <= MAXJSAMPLE; i++)
 800d674:	2300      	movs	r3, #0
 800d676:	60fb      	str	r3, [r7, #12]
 800d678:	e008      	b.n	800d68c <prepare_range_limit_table+0x54>
    table[i] = (JSAMPLE) i;
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	68ba      	ldr	r2, [r7, #8]
 800d67e:	4413      	add	r3, r2
 800d680:	68fa      	ldr	r2, [r7, #12]
 800d682:	b2d2      	uxtb	r2, r2
 800d684:	701a      	strb	r2, [r3, #0]
  for (i = 0; i <= MAXJSAMPLE; i++)
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	3301      	adds	r3, #1
 800d68a:	60fb      	str	r3, [r7, #12]
 800d68c:	68fb      	ldr	r3, [r7, #12]
 800d68e:	2bff      	cmp	r3, #255	; 0xff
 800d690:	ddf3      	ble.n	800d67a <prepare_range_limit_table+0x42>
  table += CENTERJSAMPLE;	/* Point to where post-IDCT table starts */
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	3380      	adds	r3, #128	; 0x80
 800d696:	60bb      	str	r3, [r7, #8]
  /* End of simple table, rest of first half of post-IDCT table */
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 800d698:	2380      	movs	r3, #128	; 0x80
 800d69a:	60fb      	str	r3, [r7, #12]
 800d69c:	e007      	b.n	800d6ae <prepare_range_limit_table+0x76>
    table[i] = MAXJSAMPLE;
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	68ba      	ldr	r2, [r7, #8]
 800d6a2:	4413      	add	r3, r2
 800d6a4:	22ff      	movs	r2, #255	; 0xff
 800d6a6:	701a      	strb	r2, [r3, #0]
  for (i = CENTERJSAMPLE; i < 2*(MAXJSAMPLE+1); i++)
 800d6a8:	68fb      	ldr	r3, [r7, #12]
 800d6aa:	3301      	adds	r3, #1
 800d6ac:	60fb      	str	r3, [r7, #12]
 800d6ae:	68fb      	ldr	r3, [r7, #12]
 800d6b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d6b4:	dbf3      	blt.n	800d69e <prepare_range_limit_table+0x66>
  /* Second half of post-IDCT table */
  MEMZERO(table + (2 * (MAXJSAMPLE+1)),
 800d6b6:	68bb      	ldr	r3, [r7, #8]
 800d6b8:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800d6bc:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800d6c0:	2100      	movs	r1, #0
 800d6c2:	4618      	mov	r0, r3
 800d6c4:	f011 fe88 	bl	801f3d8 <memset>
	  (2 * (MAXJSAMPLE+1) - CENTERJSAMPLE) * SIZEOF(JSAMPLE));
  MEMCOPY(table + (4 * (MAXJSAMPLE+1) - CENTERJSAMPLE),
 800d6c8:	68bb      	ldr	r3, [r7, #8]
 800d6ca:	f503 7060 	add.w	r0, r3, #896	; 0x380
 800d6ce:	687b      	ldr	r3, [r7, #4]
 800d6d0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800d6d4:	2280      	movs	r2, #128	; 0x80
 800d6d6:	4619      	mov	r1, r3
 800d6d8:	f011 fe70 	bl	801f3bc <memcpy>
	  cinfo->sample_range_limit, CENTERJSAMPLE * SIZEOF(JSAMPLE));
}
 800d6dc:	bf00      	nop
 800d6de:	3710      	adds	r7, #16
 800d6e0:	46bd      	mov	sp, r7
 800d6e2:	bd80      	pop	{r7, pc}

0800d6e4 <master_selection>:
 * settings.
 */

LOCAL(void)
master_selection (j_decompress_ptr cinfo)
{
 800d6e4:	b580      	push	{r7, lr}
 800d6e6:	b088      	sub	sp, #32
 800d6e8:	af00      	add	r7, sp, #0
 800d6ea:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800d6f2:	61bb      	str	r3, [r7, #24]
  boolean use_c_buffer;
  long samplesperrow;
  JDIMENSION jd_samplesperrow;

  /* Initialize dimensions and other stuff */
  jpeg_calc_output_dimensions(cinfo);
 800d6f4:	6878      	ldr	r0, [r7, #4]
 800d6f6:	f7ff fe73 	bl	800d3e0 <jpeg_calc_output_dimensions>
  prepare_range_limit_table(cinfo);
 800d6fa:	6878      	ldr	r0, [r7, #4]
 800d6fc:	f7ff ff9c 	bl	800d638 <prepare_range_limit_table>

  /* Width of an output scanline must be representable as JDIMENSION. */
  samplesperrow = (long) cinfo->output_width * (long) cinfo->out_color_components;
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d704:	461a      	mov	r2, r3
 800d706:	687b      	ldr	r3, [r7, #4]
 800d708:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d70a:	fb03 f302 	mul.w	r3, r3, r2
 800d70e:	617b      	str	r3, [r7, #20]
  jd_samplesperrow = (JDIMENSION) samplesperrow;
 800d710:	697b      	ldr	r3, [r7, #20]
 800d712:	613b      	str	r3, [r7, #16]
  if ((long) jd_samplesperrow != samplesperrow)
 800d714:	693b      	ldr	r3, [r7, #16]
 800d716:	697a      	ldr	r2, [r7, #20]
 800d718:	429a      	cmp	r2, r3
 800d71a:	d008      	beq.n	800d72e <master_selection+0x4a>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	2248      	movs	r2, #72	; 0x48
 800d722:	615a      	str	r2, [r3, #20]
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	681b      	ldr	r3, [r3, #0]
 800d728:	681b      	ldr	r3, [r3, #0]
 800d72a:	6878      	ldr	r0, [r7, #4]
 800d72c:	4798      	blx	r3

  /* Initialize my private state */
  master->pass_number = 0;
 800d72e:	69bb      	ldr	r3, [r7, #24]
 800d730:	2200      	movs	r2, #0
 800d732:	60da      	str	r2, [r3, #12]
  master->using_merged_upsample = use_merged_upsample(cinfo);
 800d734:	6878      	ldr	r0, [r7, #4]
 800d736:	f7ff fdc3 	bl	800d2c0 <use_merged_upsample>
 800d73a:	4602      	mov	r2, r0
 800d73c:	69bb      	ldr	r3, [r7, #24]
 800d73e:	611a      	str	r2, [r3, #16]

  /* Color quantizer selection */
  master->quantizer_1pass = NULL;
 800d740:	69bb      	ldr	r3, [r7, #24]
 800d742:	2200      	movs	r2, #0
 800d744:	615a      	str	r2, [r3, #20]
  master->quantizer_2pass = NULL;
 800d746:	69bb      	ldr	r3, [r7, #24]
 800d748:	2200      	movs	r2, #0
 800d74a:	619a      	str	r2, [r3, #24]
  /* No mode changes if not using buffered-image mode. */
  if (! cinfo->quantize_colors || ! cinfo->buffered_image) {
 800d74c:	687b      	ldr	r3, [r7, #4]
 800d74e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d750:	2b00      	cmp	r3, #0
 800d752:	d003      	beq.n	800d75c <master_selection+0x78>
 800d754:	687b      	ldr	r3, [r7, #4]
 800d756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d758:	2b00      	cmp	r3, #0
 800d75a:	d108      	bne.n	800d76e <master_selection+0x8a>
    cinfo->enable_1pass_quant = FALSE;
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	2200      	movs	r2, #0
 800d760:	665a      	str	r2, [r3, #100]	; 0x64
    cinfo->enable_external_quant = FALSE;
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	2200      	movs	r2, #0
 800d766:	669a      	str	r2, [r3, #104]	; 0x68
    cinfo->enable_2pass_quant = FALSE;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	2200      	movs	r2, #0
 800d76c:	66da      	str	r2, [r3, #108]	; 0x6c
  }
  if (cinfo->quantize_colors) {
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d772:	2b00      	cmp	r3, #0
 800d774:	d04e      	beq.n	800d814 <master_selection+0x130>
    if (cinfo->raw_data_out)
 800d776:	687b      	ldr	r3, [r7, #4]
 800d778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d008      	beq.n	800d790 <master_selection+0xac>
      ERREXIT(cinfo, JERR_NOTIMPL);
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	2230      	movs	r2, #48	; 0x30
 800d784:	615a      	str	r2, [r3, #20]
 800d786:	687b      	ldr	r3, [r7, #4]
 800d788:	681b      	ldr	r3, [r3, #0]
 800d78a:	681b      	ldr	r3, [r3, #0]
 800d78c:	6878      	ldr	r0, [r7, #4]
 800d78e:	4798      	blx	r3
    /* 2-pass quantizer only works in 3-component color space. */
    if (cinfo->out_color_components != 3) {
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d794:	2b03      	cmp	r3, #3
 800d796:	d00d      	beq.n	800d7b4 <master_selection+0xd0>
      cinfo->enable_1pass_quant = TRUE;
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	2201      	movs	r2, #1
 800d79c:	665a      	str	r2, [r3, #100]	; 0x64
      cinfo->enable_external_quant = FALSE;
 800d79e:	687b      	ldr	r3, [r7, #4]
 800d7a0:	2200      	movs	r2, #0
 800d7a2:	669a      	str	r2, [r3, #104]	; 0x68
      cinfo->enable_2pass_quant = FALSE;
 800d7a4:	687b      	ldr	r3, [r7, #4]
 800d7a6:	2200      	movs	r2, #0
 800d7a8:	66da      	str	r2, [r3, #108]	; 0x6c
      cinfo->colormap = NULL;
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	2200      	movs	r2, #0
 800d7ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
 800d7b2:	e013      	b.n	800d7dc <master_selection+0xf8>
    } else if (cinfo->colormap != NULL) {
 800d7b4:	687b      	ldr	r3, [r7, #4]
 800d7b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d7ba:	2b00      	cmp	r3, #0
 800d7bc:	d003      	beq.n	800d7c6 <master_selection+0xe2>
      cinfo->enable_external_quant = TRUE;
 800d7be:	687b      	ldr	r3, [r7, #4]
 800d7c0:	2201      	movs	r2, #1
 800d7c2:	669a      	str	r2, [r3, #104]	; 0x68
 800d7c4:	e00a      	b.n	800d7dc <master_selection+0xf8>
    } else if (cinfo->two_pass_quantize) {
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d003      	beq.n	800d7d6 <master_selection+0xf2>
      cinfo->enable_2pass_quant = TRUE;
 800d7ce:	687b      	ldr	r3, [r7, #4]
 800d7d0:	2201      	movs	r2, #1
 800d7d2:	66da      	str	r2, [r3, #108]	; 0x6c
 800d7d4:	e002      	b.n	800d7dc <master_selection+0xf8>
    } else {
      cinfo->enable_1pass_quant = TRUE;
 800d7d6:	687b      	ldr	r3, [r7, #4]
 800d7d8:	2201      	movs	r2, #1
 800d7da:	665a      	str	r2, [r3, #100]	; 0x64
    }

    if (cinfo->enable_1pass_quant) {
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d007      	beq.n	800d7f4 <master_selection+0x110>
#ifdef QUANT_1PASS_SUPPORTED
      jinit_1pass_quantizer(cinfo);
 800d7e4:	6878      	ldr	r0, [r7, #4]
 800d7e6:	f010 f933 	bl	801da50 <jinit_1pass_quantizer>
      master->quantizer_1pass = cinfo->cquantize;
 800d7ea:	687b      	ldr	r3, [r7, #4]
 800d7ec:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800d7f0:	69bb      	ldr	r3, [r7, #24]
 800d7f2:	615a      	str	r2, [r3, #20]
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    }

    /* We use the 2-pass code to map to external colormaps. */
    if (cinfo->enable_2pass_quant || cinfo->enable_external_quant) {
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d7f8:	2b00      	cmp	r3, #0
 800d7fa:	d103      	bne.n	800d804 <master_selection+0x120>
 800d7fc:	687b      	ldr	r3, [r7, #4]
 800d7fe:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d800:	2b00      	cmp	r3, #0
 800d802:	d007      	beq.n	800d814 <master_selection+0x130>
#ifdef QUANT_2PASS_SUPPORTED
      jinit_2pass_quantizer(cinfo);
 800d804:	6878      	ldr	r0, [r7, #4]
 800d806:	f011 fc83 	bl	801f110 <jinit_2pass_quantizer>
      master->quantizer_2pass = cinfo->cquantize;
 800d80a:	687b      	ldr	r3, [r7, #4]
 800d80c:	f8d3 21e0 	ldr.w	r2, [r3, #480]	; 0x1e0
 800d810:	69bb      	ldr	r3, [r7, #24]
 800d812:	619a      	str	r2, [r3, #24]
     * this is necessary for starting with quantization to an external map.
     */
  }

  /* Post-processing: in particular, color conversion first */
  if (! cinfo->raw_data_out) {
 800d814:	687b      	ldr	r3, [r7, #4]
 800d816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d818:	2b00      	cmp	r3, #0
 800d81a:	d113      	bne.n	800d844 <master_selection+0x160>
    if (master->using_merged_upsample) {
 800d81c:	69bb      	ldr	r3, [r7, #24]
 800d81e:	691b      	ldr	r3, [r3, #16]
 800d820:	2b00      	cmp	r3, #0
 800d822:	d003      	beq.n	800d82c <master_selection+0x148>
#ifdef UPSAMPLE_MERGING_SUPPORTED
      jinit_merged_upsampler(cinfo); /* does color conversion too */
 800d824:	6878      	ldr	r0, [r7, #4]
 800d826:	f000 fca1 	bl	800e16c <jinit_merged_upsampler>
 800d82a:	e005      	b.n	800d838 <master_selection+0x154>
#else
      ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif
    } else {
      jinit_color_deconverter(cinfo);
 800d82c:	6878      	ldr	r0, [r7, #4]
 800d82e:	f7f9 f991 	bl	8006b54 <jinit_color_deconverter>
      jinit_upsampler(cinfo);
 800d832:	6878      	ldr	r0, [r7, #4]
 800d834:	f001 f88e 	bl	800e954 <jinit_upsampler>
    }
    jinit_d_post_controller(cinfo, cinfo->enable_2pass_quant);
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d83c:	4619      	mov	r1, r3
 800d83e:	6878      	ldr	r0, [r7, #4]
 800d840:	f000 fe6e 	bl	800e520 <jinit_d_post_controller>
  }
  /* Inverse DCT */
  jinit_inverse_dct(cinfo);
 800d844:	6878      	ldr	r0, [r7, #4]
 800d846:	f7f9 fde7 	bl	8007418 <jinit_inverse_dct>
  /* Entropy decoding: either Huffman or arithmetic coding. */
  if (cinfo->arith_code)
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
 800d850:	2b00      	cmp	r3, #0
 800d852:	d003      	beq.n	800d85c <master_selection+0x178>
    jinit_arith_decoder(cinfo);
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7f7 fc4f 	bl	80050f8 <jinit_arith_decoder>
 800d85a:	e002      	b.n	800d862 <master_selection+0x17e>
  else {
    jinit_huff_decoder(cinfo);
 800d85c:	6878      	ldr	r0, [r7, #4]
 800d85e:	f7fb fdd5 	bl	800940c <jinit_huff_decoder>
  }

  /* Initialize principal buffer controllers. */
  use_c_buffer = cinfo->inputctl->has_multiple_scans || cinfo->buffered_image;
 800d862:	687b      	ldr	r3, [r7, #4]
 800d864:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800d868:	691b      	ldr	r3, [r3, #16]
 800d86a:	2b00      	cmp	r3, #0
 800d86c:	d103      	bne.n	800d876 <master_selection+0x192>
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d872:	2b00      	cmp	r3, #0
 800d874:	d001      	beq.n	800d87a <master_selection+0x196>
 800d876:	2301      	movs	r3, #1
 800d878:	e000      	b.n	800d87c <master_selection+0x198>
 800d87a:	2300      	movs	r3, #0
 800d87c:	60fb      	str	r3, [r7, #12]
  jinit_d_coef_controller(cinfo, use_c_buffer);
 800d87e:	68f9      	ldr	r1, [r7, #12]
 800d880:	6878      	ldr	r0, [r7, #4]
 800d882:	f7f8 fd9b 	bl	80063bc <jinit_d_coef_controller>

  if (! cinfo->raw_data_out)
 800d886:	687b      	ldr	r3, [r7, #4]
 800d888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d103      	bne.n	800d896 <master_selection+0x1b2>
    jinit_d_main_controller(cinfo, FALSE /* never need full buffer here */);
 800d88e:	2100      	movs	r1, #0
 800d890:	6878      	ldr	r0, [r7, #4]
 800d892:	f7fd fad9 	bl	800ae48 <jinit_d_main_controller>

  /* We can now tell the memory manager to allocate virtual arrays. */
  (*cinfo->mem->realize_virt_arrays) ((j_common_ptr) cinfo);
 800d896:	687b      	ldr	r3, [r7, #4]
 800d898:	685b      	ldr	r3, [r3, #4]
 800d89a:	699b      	ldr	r3, [r3, #24]
 800d89c:	6878      	ldr	r0, [r7, #4]
 800d89e:	4798      	blx	r3

  /* Initialize input side of decompressor to consume first scan. */
  (*cinfo->inputctl->start_input_pass) (cinfo);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	6878      	ldr	r0, [r7, #4]
 800d8aa:	4798      	blx	r3
#ifdef D_MULTISCAN_FILES_SUPPORTED
  /* If jpeg_start_decompress will read the whole file, initialize
   * progress monitoring appropriately.  The input step is counted
   * as one pass.
   */
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	689b      	ldr	r3, [r3, #8]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	d03a      	beq.n	800d92a <master_selection+0x246>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	d136      	bne.n	800d92a <master_selection+0x246>
      cinfo->inputctl->has_multiple_scans) {
 800d8bc:	687b      	ldr	r3, [r7, #4]
 800d8be:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800d8c2:	691b      	ldr	r3, [r3, #16]
  if (cinfo->progress != NULL && ! cinfo->buffered_image &&
 800d8c4:	2b00      	cmp	r3, #0
 800d8c6:	d030      	beq.n	800d92a <master_selection+0x246>
    int nscans;
    /* Estimate number of scans to set pass_limit. */
    if (cinfo->progressive_mode) {
 800d8c8:	687b      	ldr	r3, [r7, #4]
 800d8ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	d007      	beq.n	800d8e2 <master_selection+0x1fe>
      /* Arbitrarily estimate 2 interleaved DC scans + 3 AC scans/component. */
      nscans = 2 + 3 * cinfo->num_components;
 800d8d2:	687b      	ldr	r3, [r7, #4]
 800d8d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800d8d6:	4613      	mov	r3, r2
 800d8d8:	005b      	lsls	r3, r3, #1
 800d8da:	4413      	add	r3, r2
 800d8dc:	3302      	adds	r3, #2
 800d8de:	61fb      	str	r3, [r7, #28]
 800d8e0:	e002      	b.n	800d8e8 <master_selection+0x204>
    } else {
      /* For a nonprogressive multiscan file, estimate 1 scan per component. */
      nscans = cinfo->num_components;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8e6:	61fb      	str	r3, [r7, #28]
    }
    cinfo->progress->pass_counter = 0L;
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	689b      	ldr	r3, [r3, #8]
 800d8ec:	2200      	movs	r2, #0
 800d8ee:	605a      	str	r2, [r3, #4]
    cinfo->progress->pass_limit = (long) cinfo->total_iMCU_rows * nscans;
 800d8f0:	687b      	ldr	r3, [r7, #4]
 800d8f2:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
 800d8f6:	4619      	mov	r1, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	689b      	ldr	r3, [r3, #8]
 800d8fc:	69fa      	ldr	r2, [r7, #28]
 800d8fe:	fb02 f201 	mul.w	r2, r2, r1
 800d902:	609a      	str	r2, [r3, #8]
    cinfo->progress->completed_passes = 0;
 800d904:	687b      	ldr	r3, [r7, #4]
 800d906:	689b      	ldr	r3, [r3, #8]
 800d908:	2200      	movs	r2, #0
 800d90a:	60da      	str	r2, [r3, #12]
    cinfo->progress->total_passes = (cinfo->enable_2pass_quant ? 3 : 2);
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d910:	2b00      	cmp	r3, #0
 800d912:	d001      	beq.n	800d918 <master_selection+0x234>
 800d914:	2203      	movs	r2, #3
 800d916:	e000      	b.n	800d91a <master_selection+0x236>
 800d918:	2202      	movs	r2, #2
 800d91a:	687b      	ldr	r3, [r7, #4]
 800d91c:	689b      	ldr	r3, [r3, #8]
 800d91e:	611a      	str	r2, [r3, #16]
    /* Count the input pass as done */
    master->pass_number++;
 800d920:	69bb      	ldr	r3, [r7, #24]
 800d922:	68db      	ldr	r3, [r3, #12]
 800d924:	1c5a      	adds	r2, r3, #1
 800d926:	69bb      	ldr	r3, [r7, #24]
 800d928:	60da      	str	r2, [r3, #12]
  }
#endif /* D_MULTISCAN_FILES_SUPPORTED */
}
 800d92a:	bf00      	nop
 800d92c:	3720      	adds	r7, #32
 800d92e:	46bd      	mov	sp, r7
 800d930:	bd80      	pop	{r7, pc}

0800d932 <prepare_for_output_pass>:
 * (In the latter case, jdapistd.c will crank the pass to completion.)
 */

METHODDEF(void)
prepare_for_output_pass (j_decompress_ptr cinfo)
{
 800d932:	b580      	push	{r7, lr}
 800d934:	b084      	sub	sp, #16
 800d936:	af00      	add	r7, sp, #0
 800d938:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800d93a:	687b      	ldr	r3, [r7, #4]
 800d93c:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800d940:	60fb      	str	r3, [r7, #12]

  if (master->pub.is_dummy_pass) {
 800d942:	68fb      	ldr	r3, [r7, #12]
 800d944:	689b      	ldr	r3, [r3, #8]
 800d946:	2b00      	cmp	r3, #0
 800d948:	d018      	beq.n	800d97c <prepare_for_output_pass+0x4a>
#ifdef QUANT_2PASS_SUPPORTED
    /* Final pass of 2-pass quantization */
    master->pub.is_dummy_pass = FALSE;
 800d94a:	68fb      	ldr	r3, [r7, #12]
 800d94c:	2200      	movs	r2, #0
 800d94e:	609a      	str	r2, [r3, #8]
    (*cinfo->cquantize->start_pass) (cinfo, FALSE);
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800d956:	681b      	ldr	r3, [r3, #0]
 800d958:	2100      	movs	r1, #0
 800d95a:	6878      	ldr	r0, [r7, #4]
 800d95c:	4798      	blx	r3
    (*cinfo->post->start_pass) (cinfo, JBUF_CRANK_DEST);
 800d95e:	687b      	ldr	r3, [r7, #4]
 800d960:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2102      	movs	r1, #2
 800d968:	6878      	ldr	r0, [r7, #4]
 800d96a:	4798      	blx	r3
    (*cinfo->main->start_pass) (cinfo, JBUF_CRANK_DEST);
 800d96c:	687b      	ldr	r3, [r7, #4]
 800d96e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800d972:	681b      	ldr	r3, [r3, #0]
 800d974:	2102      	movs	r1, #2
 800d976:	6878      	ldr	r0, [r7, #4]
 800d978:	4798      	blx	r3
 800d97a:	e06e      	b.n	800da5a <prepare_for_output_pass+0x128>
#else
    ERREXIT(cinfo, JERR_NOT_COMPILED);
#endif /* QUANT_2PASS_SUPPORTED */
  } else {
    if (cinfo->quantize_colors && cinfo->colormap == NULL) {
 800d97c:	687b      	ldr	r3, [r7, #4]
 800d97e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d980:	2b00      	cmp	r3, #0
 800d982:	d028      	beq.n	800d9d6 <prepare_for_output_pass+0xa4>
 800d984:	687b      	ldr	r3, [r7, #4]
 800d986:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800d98a:	2b00      	cmp	r3, #0
 800d98c:	d123      	bne.n	800d9d6 <prepare_for_output_pass+0xa4>
      /* Select new quantization method */
      if (cinfo->two_pass_quantize && cinfo->enable_2pass_quant) {
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800d992:	2b00      	cmp	r3, #0
 800d994:	d00c      	beq.n	800d9b0 <prepare_for_output_pass+0x7e>
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d008      	beq.n	800d9b0 <prepare_for_output_pass+0x7e>
	cinfo->cquantize = master->quantizer_2pass;
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	699a      	ldr	r2, [r3, #24]
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
	master->pub.is_dummy_pass = TRUE;
 800d9a8:	68fb      	ldr	r3, [r7, #12]
 800d9aa:	2201      	movs	r2, #1
 800d9ac:	609a      	str	r2, [r3, #8]
 800d9ae:	e012      	b.n	800d9d6 <prepare_for_output_pass+0xa4>
      } else if (cinfo->enable_1pass_quant) {
 800d9b0:	687b      	ldr	r3, [r7, #4]
 800d9b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d005      	beq.n	800d9c4 <prepare_for_output_pass+0x92>
	cinfo->cquantize = master->quantizer_1pass;
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	695a      	ldr	r2, [r3, #20]
 800d9bc:	687b      	ldr	r3, [r7, #4]
 800d9be:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
 800d9c2:	e008      	b.n	800d9d6 <prepare_for_output_pass+0xa4>
      } else {
	ERREXIT(cinfo, JERR_MODE_CHANGE);
 800d9c4:	687b      	ldr	r3, [r7, #4]
 800d9c6:	681b      	ldr	r3, [r3, #0]
 800d9c8:	222f      	movs	r2, #47	; 0x2f
 800d9ca:	615a      	str	r2, [r3, #20]
 800d9cc:	687b      	ldr	r3, [r7, #4]
 800d9ce:	681b      	ldr	r3, [r3, #0]
 800d9d0:	681b      	ldr	r3, [r3, #0]
 800d9d2:	6878      	ldr	r0, [r7, #4]
 800d9d4:	4798      	blx	r3
      }
    }
    (*cinfo->idct->start_pass) (cinfo);
 800d9d6:	687b      	ldr	r3, [r7, #4]
 800d9d8:	f8d3 31d4 	ldr.w	r3, [r3, #468]	; 0x1d4
 800d9dc:	681b      	ldr	r3, [r3, #0]
 800d9de:	6878      	ldr	r0, [r7, #4]
 800d9e0:	4798      	blx	r3
    (*cinfo->coef->start_output_pass) (cinfo);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	f8d3 31c0 	ldr.w	r3, [r3, #448]	; 0x1c0
 800d9e8:	689b      	ldr	r3, [r3, #8]
 800d9ea:	6878      	ldr	r0, [r7, #4]
 800d9ec:	4798      	blx	r3
    if (! cinfo->raw_data_out) {
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d9f2:	2b00      	cmp	r3, #0
 800d9f4:	d131      	bne.n	800da5a <prepare_for_output_pass+0x128>
      if (! master->using_merged_upsample)
 800d9f6:	68fb      	ldr	r3, [r7, #12]
 800d9f8:	691b      	ldr	r3, [r3, #16]
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d105      	bne.n	800da0a <prepare_for_output_pass+0xd8>
	(*cinfo->cconvert->start_pass) (cinfo);
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800da04:	681b      	ldr	r3, [r3, #0]
 800da06:	6878      	ldr	r0, [r7, #4]
 800da08:	4798      	blx	r3
      (*cinfo->upsample->start_pass) (cinfo);
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800da10:	681b      	ldr	r3, [r3, #0]
 800da12:	6878      	ldr	r0, [r7, #4]
 800da14:	4798      	blx	r3
      if (cinfo->quantize_colors)
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d008      	beq.n	800da30 <prepare_for_output_pass+0xfe>
	(*cinfo->cquantize->start_pass) (cinfo, master->pub.is_dummy_pass);
 800da1e:	687b      	ldr	r3, [r7, #4]
 800da20:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800da24:	681b      	ldr	r3, [r3, #0]
 800da26:	68fa      	ldr	r2, [r7, #12]
 800da28:	6892      	ldr	r2, [r2, #8]
 800da2a:	4611      	mov	r1, r2
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	4798      	blx	r3
      (*cinfo->post->start_pass) (cinfo,
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800da36:	681b      	ldr	r3, [r3, #0]
	    (master->pub.is_dummy_pass ? JBUF_SAVE_AND_PASS : JBUF_PASS_THRU));
 800da38:	68fa      	ldr	r2, [r7, #12]
 800da3a:	6892      	ldr	r2, [r2, #8]
      (*cinfo->post->start_pass) (cinfo,
 800da3c:	2a00      	cmp	r2, #0
 800da3e:	d001      	beq.n	800da44 <prepare_for_output_pass+0x112>
 800da40:	2203      	movs	r2, #3
 800da42:	e000      	b.n	800da46 <prepare_for_output_pass+0x114>
 800da44:	2200      	movs	r2, #0
 800da46:	4611      	mov	r1, r2
 800da48:	6878      	ldr	r0, [r7, #4]
 800da4a:	4798      	blx	r3
      (*cinfo->main->start_pass) (cinfo, JBUF_PASS_THRU);
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	f8d3 31bc 	ldr.w	r3, [r3, #444]	; 0x1bc
 800da52:	681b      	ldr	r3, [r3, #0]
 800da54:	2100      	movs	r1, #0
 800da56:	6878      	ldr	r0, [r7, #4]
 800da58:	4798      	blx	r3
    }
  }

  /* Set up progress monitor's pass info if present */
  if (cinfo->progress != NULL) {
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	689b      	ldr	r3, [r3, #8]
 800da5e:	2b00      	cmp	r3, #0
 800da60:	d029      	beq.n	800dab6 <prepare_for_output_pass+0x184>
    cinfo->progress->completed_passes = master->pass_number;
 800da62:	687b      	ldr	r3, [r7, #4]
 800da64:	689b      	ldr	r3, [r3, #8]
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	68d2      	ldr	r2, [r2, #12]
 800da6a:	60da      	str	r2, [r3, #12]
    cinfo->progress->total_passes = master->pass_number +
 800da6c:	68fb      	ldr	r3, [r7, #12]
 800da6e:	68da      	ldr	r2, [r3, #12]
				    (master->pub.is_dummy_pass ? 2 : 1);
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	2b00      	cmp	r3, #0
 800da76:	d001      	beq.n	800da7c <prepare_for_output_pass+0x14a>
 800da78:	2102      	movs	r1, #2
 800da7a:	e000      	b.n	800da7e <prepare_for_output_pass+0x14c>
 800da7c:	2101      	movs	r1, #1
    cinfo->progress->total_passes = master->pass_number +
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	689b      	ldr	r3, [r3, #8]
 800da82:	440a      	add	r2, r1
 800da84:	611a      	str	r2, [r3, #16]
    /* In buffered-image mode, we assume one more output pass if EOI not
     * yet reached, but no more passes if EOI has been reached.
     */
    if (cinfo->buffered_image && ! cinfo->inputctl->eoi_reached) {
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d013      	beq.n	800dab6 <prepare_for_output_pass+0x184>
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	f8d3 31c8 	ldr.w	r3, [r3, #456]	; 0x1c8
 800da94:	695b      	ldr	r3, [r3, #20]
 800da96:	2b00      	cmp	r3, #0
 800da98:	d10d      	bne.n	800dab6 <prepare_for_output_pass+0x184>
      cinfo->progress->total_passes += (cinfo->enable_2pass_quant ? 2 : 1);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	689b      	ldr	r3, [r3, #8]
 800da9e:	691a      	ldr	r2, [r3, #16]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800daa4:	2b00      	cmp	r3, #0
 800daa6:	d001      	beq.n	800daac <prepare_for_output_pass+0x17a>
 800daa8:	2102      	movs	r1, #2
 800daaa:	e000      	b.n	800daae <prepare_for_output_pass+0x17c>
 800daac:	2101      	movs	r1, #1
 800daae:	687b      	ldr	r3, [r7, #4]
 800dab0:	689b      	ldr	r3, [r3, #8]
 800dab2:	440a      	add	r2, r1
 800dab4:	611a      	str	r2, [r3, #16]
    }
  }
}
 800dab6:	bf00      	nop
 800dab8:	3710      	adds	r7, #16
 800daba:	46bd      	mov	sp, r7
 800dabc:	bd80      	pop	{r7, pc}

0800dabe <finish_output_pass>:
 * Finish up at end of an output pass.
 */

METHODDEF(void)
finish_output_pass (j_decompress_ptr cinfo)
{
 800dabe:	b580      	push	{r7, lr}
 800dac0:	b084      	sub	sp, #16
 800dac2:	af00      	add	r7, sp, #0
 800dac4:	6078      	str	r0, [r7, #4]
  my_master_ptr master = (my_master_ptr) cinfo->master;
 800dac6:	687b      	ldr	r3, [r7, #4]
 800dac8:	f8d3 31b8 	ldr.w	r3, [r3, #440]	; 0x1b8
 800dacc:	60fb      	str	r3, [r7, #12]

  if (cinfo->quantize_colors)
 800dace:	687b      	ldr	r3, [r7, #4]
 800dad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d005      	beq.n	800dae2 <finish_output_pass+0x24>
    (*cinfo->cquantize->finish_pass) (cinfo);
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800dadc:	689b      	ldr	r3, [r3, #8]
 800dade:	6878      	ldr	r0, [r7, #4]
 800dae0:	4798      	blx	r3
  master->pass_number++;
 800dae2:	68fb      	ldr	r3, [r7, #12]
 800dae4:	68db      	ldr	r3, [r3, #12]
 800dae6:	1c5a      	adds	r2, r3, #1
 800dae8:	68fb      	ldr	r3, [r7, #12]
 800daea:	60da      	str	r2, [r3, #12]
}
 800daec:	bf00      	nop
 800daee:	3710      	adds	r7, #16
 800daf0:	46bd      	mov	sp, r7
 800daf2:	bd80      	pop	{r7, pc}

0800daf4 <jinit_master_decompress>:
 * This is performed at the start of jpeg_start_decompress.
 */

GLOBAL(void)
jinit_master_decompress (j_decompress_ptr cinfo)
{
 800daf4:	b580      	push	{r7, lr}
 800daf6:	b084      	sub	sp, #16
 800daf8:	af00      	add	r7, sp, #0
 800dafa:	6078      	str	r0, [r7, #4]
  my_master_ptr master;

  master = (my_master_ptr)
      (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800dafc:	687b      	ldr	r3, [r7, #4]
 800dafe:	685b      	ldr	r3, [r3, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	221c      	movs	r2, #28
 800db04:	2101      	movs	r1, #1
 800db06:	6878      	ldr	r0, [r7, #4]
 800db08:	4798      	blx	r3
 800db0a:	60f8      	str	r0, [r7, #12]
				  SIZEOF(my_decomp_master));
  cinfo->master = (struct jpeg_decomp_master *) master;
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	68fa      	ldr	r2, [r7, #12]
 800db10:	f8c3 21b8 	str.w	r2, [r3, #440]	; 0x1b8
  master->pub.prepare_for_output_pass = prepare_for_output_pass;
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	4a07      	ldr	r2, [pc, #28]	; (800db34 <jinit_master_decompress+0x40>)
 800db18:	601a      	str	r2, [r3, #0]
  master->pub.finish_output_pass = finish_output_pass;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	4a06      	ldr	r2, [pc, #24]	; (800db38 <jinit_master_decompress+0x44>)
 800db1e:	605a      	str	r2, [r3, #4]

  master->pub.is_dummy_pass = FALSE;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	2200      	movs	r2, #0
 800db24:	609a      	str	r2, [r3, #8]

  master_selection(cinfo);
 800db26:	6878      	ldr	r0, [r7, #4]
 800db28:	f7ff fddc 	bl	800d6e4 <master_selection>
}
 800db2c:	bf00      	nop
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}
 800db34:	0800d933 	.word	0x0800d933
 800db38:	0800dabf 	.word	0x0800dabf

0800db3c <build_ycc_rgb_table>:
 * This is taken directly from jdcolor.c; see that file for more info.
 */

LOCAL(void)
build_ycc_rgb_table (j_decompress_ptr cinfo)
{
 800db3c:	b580      	push	{r7, lr}
 800db3e:	b086      	sub	sp, #24
 800db40:	af00      	add	r7, sp, #0
 800db42:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800db4a:	60fb      	str	r3, [r7, #12]
  int i;
  INT32 x;
  SHIFT_TEMPS

  upsample->Cr_r_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	685b      	ldr	r3, [r3, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db56:	2101      	movs	r1, #1
 800db58:	6878      	ldr	r0, [r7, #4]
 800db5a:	4798      	blx	r3
 800db5c:	4602      	mov	r2, r0
  upsample->Cr_r_tab = (int *)
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	611a      	str	r2, [r3, #16]
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cb_b_tab = (int *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	685b      	ldr	r3, [r3, #4]
 800db66:	681b      	ldr	r3, [r3, #0]
 800db68:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db6c:	2101      	movs	r1, #1
 800db6e:	6878      	ldr	r0, [r7, #4]
 800db70:	4798      	blx	r3
 800db72:	4602      	mov	r2, r0
  upsample->Cb_b_tab = (int *)
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	615a      	str	r2, [r3, #20]
				(MAXJSAMPLE+1) * SIZEOF(int));
  upsample->Cr_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db78:	687b      	ldr	r3, [r7, #4]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db82:	2101      	movs	r1, #1
 800db84:	6878      	ldr	r0, [r7, #4]
 800db86:	4798      	blx	r3
 800db88:	4602      	mov	r2, r0
  upsample->Cr_g_tab = (INT32 *)
 800db8a:	68fb      	ldr	r3, [r7, #12]
 800db8c:	619a      	str	r2, [r3, #24]
				(MAXJSAMPLE+1) * SIZEOF(INT32));
  upsample->Cb_g_tab = (INT32 *)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800db8e:	687b      	ldr	r3, [r7, #4]
 800db90:	685b      	ldr	r3, [r3, #4]
 800db92:	681b      	ldr	r3, [r3, #0]
 800db94:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800db98:	2101      	movs	r1, #1
 800db9a:	6878      	ldr	r0, [r7, #4]
 800db9c:	4798      	blx	r3
 800db9e:	4602      	mov	r2, r0
  upsample->Cb_g_tab = (INT32 *)
 800dba0:	68fb      	ldr	r3, [r7, #12]
 800dba2:	61da      	str	r2, [r3, #28]
				(MAXJSAMPLE+1) * SIZEOF(INT32));

  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800dba4:	2300      	movs	r3, #0
 800dba6:	617b      	str	r3, [r7, #20]
 800dba8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800dbac:	613b      	str	r3, [r7, #16]
 800dbae:	e035      	b.n	800dc1c <build_ycc_rgb_table+0xe0>
    /* i is the actual input pixel value, in the range 0..MAXJSAMPLE */
    /* The Cb or Cr value we are thinking of is x = i - CENTERJSAMPLE */
    /* Cr=>R value is nearest int to 1.40200 * x */
    upsample->Cr_r_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800dbb0:	693b      	ldr	r3, [r7, #16]
 800dbb2:	4a1e      	ldr	r2, [pc, #120]	; (800dc2c <build_ycc_rgb_table+0xf0>)
 800dbb4:	fb02 f303 	mul.w	r3, r2, r3
 800dbb8:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    upsample->Cr_r_tab[i] = (int)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	6919      	ldr	r1, [r3, #16]
 800dbc0:	697b      	ldr	r3, [r7, #20]
 800dbc2:	009b      	lsls	r3, r3, #2
 800dbc4:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.40200) * x + ONE_HALF, SCALEBITS);
 800dbc6:	1412      	asrs	r2, r2, #16
    upsample->Cr_r_tab[i] = (int)
 800dbc8:	601a      	str	r2, [r3, #0]
    /* Cb=>B value is nearest int to 1.77200 * x */
    upsample->Cb_b_tab[i] = (int)
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800dbca:	693b      	ldr	r3, [r7, #16]
 800dbcc:	4a18      	ldr	r2, [pc, #96]	; (800dc30 <build_ycc_rgb_table+0xf4>)
 800dbce:	fb02 f303 	mul.w	r3, r2, r3
 800dbd2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
    upsample->Cb_b_tab[i] = (int)
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	6959      	ldr	r1, [r3, #20]
 800dbda:	697b      	ldr	r3, [r7, #20]
 800dbdc:	009b      	lsls	r3, r3, #2
 800dbde:	440b      	add	r3, r1
		    RIGHT_SHIFT(FIX(1.77200) * x + ONE_HALF, SCALEBITS);
 800dbe0:	1412      	asrs	r2, r2, #16
    upsample->Cb_b_tab[i] = (int)
 800dbe2:	601a      	str	r2, [r3, #0]
    /* Cr=>G value is scaled-up -0.71414 * x */
    upsample->Cr_g_tab[i] = (- FIX(0.71414)) * x;
 800dbe4:	68fb      	ldr	r3, [r7, #12]
 800dbe6:	699a      	ldr	r2, [r3, #24]
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	009b      	lsls	r3, r3, #2
 800dbec:	4413      	add	r3, r2
 800dbee:	693a      	ldr	r2, [r7, #16]
 800dbf0:	4910      	ldr	r1, [pc, #64]	; (800dc34 <build_ycc_rgb_table+0xf8>)
 800dbf2:	fb01 f202 	mul.w	r2, r1, r2
 800dbf6:	601a      	str	r2, [r3, #0]
    /* Cb=>G value is scaled-up -0.34414 * x */
    /* We also add in ONE_HALF so that need not do it in inner loop */
    upsample->Cb_g_tab[i] = (- FIX(0.34414)) * x + ONE_HALF;
 800dbf8:	693b      	ldr	r3, [r7, #16]
 800dbfa:	4a0f      	ldr	r2, [pc, #60]	; (800dc38 <build_ycc_rgb_table+0xfc>)
 800dbfc:	fb02 f203 	mul.w	r2, r2, r3
 800dc00:	68fb      	ldr	r3, [r7, #12]
 800dc02:	69d9      	ldr	r1, [r3, #28]
 800dc04:	697b      	ldr	r3, [r7, #20]
 800dc06:	009b      	lsls	r3, r3, #2
 800dc08:	440b      	add	r3, r1
 800dc0a:	f502 4200 	add.w	r2, r2, #32768	; 0x8000
 800dc0e:	601a      	str	r2, [r3, #0]
  for (i = 0, x = -CENTERJSAMPLE; i <= MAXJSAMPLE; i++, x++) {
 800dc10:	697b      	ldr	r3, [r7, #20]
 800dc12:	3301      	adds	r3, #1
 800dc14:	617b      	str	r3, [r7, #20]
 800dc16:	693b      	ldr	r3, [r7, #16]
 800dc18:	3301      	adds	r3, #1
 800dc1a:	613b      	str	r3, [r7, #16]
 800dc1c:	697b      	ldr	r3, [r7, #20]
 800dc1e:	2bff      	cmp	r3, #255	; 0xff
 800dc20:	ddc6      	ble.n	800dbb0 <build_ycc_rgb_table+0x74>
  }
}
 800dc22:	bf00      	nop
 800dc24:	bf00      	nop
 800dc26:	3718      	adds	r7, #24
 800dc28:	46bd      	mov	sp, r7
 800dc2a:	bd80      	pop	{r7, pc}
 800dc2c:	000166e9 	.word	0x000166e9
 800dc30:	0001c5a2 	.word	0x0001c5a2
 800dc34:	ffff492e 	.word	0xffff492e
 800dc38:	ffffa7e6 	.word	0xffffa7e6

0800dc3c <start_pass_merged_upsample>:
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_merged_upsample (j_decompress_ptr cinfo)
{
 800dc3c:	b480      	push	{r7}
 800dc3e:	b085      	sub	sp, #20
 800dc40:	af00      	add	r7, sp, #0
 800dc42:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dc44:	687b      	ldr	r3, [r7, #4]
 800dc46:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800dc4a:	60fb      	str	r3, [r7, #12]

  /* Mark the spare buffer empty */
  upsample->spare_full = FALSE;
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	2200      	movs	r2, #0
 800dc50:	625a      	str	r2, [r3, #36]	; 0x24
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800dc52:	687b      	ldr	r3, [r7, #4]
 800dc54:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800dc5a:	bf00      	nop
 800dc5c:	3714      	adds	r7, #20
 800dc5e:	46bd      	mov	sp, r7
 800dc60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc64:	4770      	bx	lr

0800dc66 <merged_2v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 2:1 vertical sampling case: may need a spare row. */
{
 800dc66:	b590      	push	{r4, r7, lr}
 800dc68:	b08b      	sub	sp, #44	; 0x2c
 800dc6a:	af02      	add	r7, sp, #8
 800dc6c:	60f8      	str	r0, [r7, #12]
 800dc6e:	60b9      	str	r1, [r7, #8]
 800dc70:	607a      	str	r2, [r7, #4]
 800dc72:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dc74:	68fb      	ldr	r3, [r7, #12]
 800dc76:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800dc7a:	61bb      	str	r3, [r7, #24]
  JSAMPROW work_ptrs[2];
  JDIMENSION num_rows;		/* number of rows returned to caller */

  if (upsample->spare_full) {
 800dc7c:	69bb      	ldr	r3, [r7, #24]
 800dc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d016      	beq.n	800dcb2 <merged_2v_upsample+0x4c>
    /* If we have a spare row saved from a previous cycle, just return it. */
    jcopy_sample_rows(& upsample->spare_row, 0, output_buf + *out_row_ctr, 0,
 800dc84:	69bb      	ldr	r3, [r7, #24]
 800dc86:	f103 0020 	add.w	r0, r3, #32
 800dc8a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	009b      	lsls	r3, r3, #2
 800dc90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc92:	441a      	add	r2, r3
 800dc94:	69bb      	ldr	r3, [r7, #24]
 800dc96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800dc98:	9301      	str	r3, [sp, #4]
 800dc9a:	2301      	movs	r3, #1
 800dc9c:	9300      	str	r3, [sp, #0]
 800dc9e:	2300      	movs	r3, #0
 800dca0:	2100      	movs	r1, #0
 800dca2:	f011 fb15 	bl	801f2d0 <jcopy_sample_rows>
		      1, upsample->out_row_width);
    num_rows = 1;
 800dca6:	2301      	movs	r3, #1
 800dca8:	61fb      	str	r3, [r7, #28]
    upsample->spare_full = FALSE;
 800dcaa:	69bb      	ldr	r3, [r7, #24]
 800dcac:	2200      	movs	r2, #0
 800dcae:	625a      	str	r2, [r3, #36]	; 0x24
 800dcb0:	e036      	b.n	800dd20 <merged_2v_upsample+0xba>
  } else {
    /* Figure number of rows to return to caller. */
    num_rows = 2;
 800dcb2:	2302      	movs	r3, #2
 800dcb4:	61fb      	str	r3, [r7, #28]
    /* Not more than the distance to the end of the image. */
    if (num_rows > upsample->rows_to_go)
 800dcb6:	69bb      	ldr	r3, [r7, #24]
 800dcb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcba:	69fa      	ldr	r2, [r7, #28]
 800dcbc:	429a      	cmp	r2, r3
 800dcbe:	d902      	bls.n	800dcc6 <merged_2v_upsample+0x60>
      num_rows = upsample->rows_to_go;
 800dcc0:	69bb      	ldr	r3, [r7, #24]
 800dcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dcc4:	61fb      	str	r3, [r7, #28]
    /* And not more than what the client can accept: */
    out_rows_avail -= *out_row_ctr;
 800dcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800dccc:	1ad3      	subs	r3, r2, r3
 800dcce:	63bb      	str	r3, [r7, #56]	; 0x38
    if (num_rows > out_rows_avail)
 800dcd0:	69fa      	ldr	r2, [r7, #28]
 800dcd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcd4:	429a      	cmp	r2, r3
 800dcd6:	d901      	bls.n	800dcdc <merged_2v_upsample+0x76>
      num_rows = out_rows_avail;
 800dcd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dcda:	61fb      	str	r3, [r7, #28]
    /* Create output pointer array for upsampler. */
    work_ptrs[0] = output_buf[*out_row_ctr];
 800dcdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcde:	681b      	ldr	r3, [r3, #0]
 800dce0:	009b      	lsls	r3, r3, #2
 800dce2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dce4:	4413      	add	r3, r2
 800dce6:	681b      	ldr	r3, [r3, #0]
 800dce8:	613b      	str	r3, [r7, #16]
    if (num_rows > 1) {
 800dcea:	69fb      	ldr	r3, [r7, #28]
 800dcec:	2b01      	cmp	r3, #1
 800dcee:	d908      	bls.n	800dd02 <merged_2v_upsample+0x9c>
      work_ptrs[1] = output_buf[*out_row_ctr + 1];
 800dcf0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dcf2:	681b      	ldr	r3, [r3, #0]
 800dcf4:	3301      	adds	r3, #1
 800dcf6:	009b      	lsls	r3, r3, #2
 800dcf8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcfa:	4413      	add	r3, r2
 800dcfc:	681b      	ldr	r3, [r3, #0]
 800dcfe:	617b      	str	r3, [r7, #20]
 800dd00:	e005      	b.n	800dd0e <merged_2v_upsample+0xa8>
    } else {
      work_ptrs[1] = upsample->spare_row;
 800dd02:	69bb      	ldr	r3, [r7, #24]
 800dd04:	6a1b      	ldr	r3, [r3, #32]
 800dd06:	617b      	str	r3, [r7, #20]
      upsample->spare_full = TRUE;
 800dd08:	69bb      	ldr	r3, [r7, #24]
 800dd0a:	2201      	movs	r2, #1
 800dd0c:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* Now do the upsampling. */
    (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr, work_ptrs);
 800dd0e:	69bb      	ldr	r3, [r7, #24]
 800dd10:	68dc      	ldr	r4, [r3, #12]
 800dd12:	687b      	ldr	r3, [r7, #4]
 800dd14:	681a      	ldr	r2, [r3, #0]
 800dd16:	f107 0310 	add.w	r3, r7, #16
 800dd1a:	68b9      	ldr	r1, [r7, #8]
 800dd1c:	68f8      	ldr	r0, [r7, #12]
 800dd1e:	47a0      	blx	r4
  }

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800dd20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd22:	681a      	ldr	r2, [r3, #0]
 800dd24:	69fb      	ldr	r3, [r7, #28]
 800dd26:	441a      	add	r2, r3
 800dd28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dd2a:	601a      	str	r2, [r3, #0]
  upsample->rows_to_go -= num_rows;
 800dd2c:	69bb      	ldr	r3, [r7, #24]
 800dd2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dd30:	69fb      	ldr	r3, [r7, #28]
 800dd32:	1ad2      	subs	r2, r2, r3
 800dd34:	69bb      	ldr	r3, [r7, #24]
 800dd36:	62da      	str	r2, [r3, #44]	; 0x2c
  /* When the buffer is emptied, declare this input row group consumed */
  if (! upsample->spare_full)
 800dd38:	69bb      	ldr	r3, [r7, #24]
 800dd3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d104      	bne.n	800dd4a <merged_2v_upsample+0xe4>
    (*in_row_group_ctr)++;
 800dd40:	687b      	ldr	r3, [r7, #4]
 800dd42:	681b      	ldr	r3, [r3, #0]
 800dd44:	1c5a      	adds	r2, r3, #1
 800dd46:	687b      	ldr	r3, [r7, #4]
 800dd48:	601a      	str	r2, [r3, #0]
}
 800dd4a:	bf00      	nop
 800dd4c:	3724      	adds	r7, #36	; 0x24
 800dd4e:	46bd      	mov	sp, r7
 800dd50:	bd90      	pop	{r4, r7, pc}

0800dd52 <merged_1v_upsample>:
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
/* 1:1 vertical sampling case: much easier, never need a spare row. */
{
 800dd52:	b590      	push	{r4, r7, lr}
 800dd54:	b087      	sub	sp, #28
 800dd56:	af00      	add	r7, sp, #0
 800dd58:	60f8      	str	r0, [r7, #12]
 800dd5a:	60b9      	str	r1, [r7, #8]
 800dd5c:	607a      	str	r2, [r7, #4]
 800dd5e:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800dd66:	617b      	str	r3, [r7, #20]

  /* Just do the upsampling. */
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	68dc      	ldr	r4, [r3, #12]
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6819      	ldr	r1, [r3, #0]
			 output_buf + *out_row_ctr);
 800dd70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd72:	681b      	ldr	r3, [r3, #0]
 800dd74:	009b      	lsls	r3, r3, #2
  (*upsample->upmethod) (cinfo, input_buf, *in_row_group_ctr,
 800dd76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dd78:	4413      	add	r3, r2
 800dd7a:	460a      	mov	r2, r1
 800dd7c:	68b9      	ldr	r1, [r7, #8]
 800dd7e:	68f8      	ldr	r0, [r7, #12]
 800dd80:	47a0      	blx	r4
  /* Adjust counts */
  (*out_row_ctr)++;
 800dd82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd84:	681b      	ldr	r3, [r3, #0]
 800dd86:	1c5a      	adds	r2, r3, #1
 800dd88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd8a:	601a      	str	r2, [r3, #0]
  (*in_row_group_ctr)++;
 800dd8c:	687b      	ldr	r3, [r7, #4]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	1c5a      	adds	r2, r3, #1
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	601a      	str	r2, [r3, #0]
}
 800dd96:	bf00      	nop
 800dd98:	371c      	adds	r7, #28
 800dd9a:	46bd      	mov	sp, r7
 800dd9c:	bd90      	pop	{r4, r7, pc}

0800dd9e <h2v1_merged_upsample>:

METHODDEF(void)
h2v1_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800dd9e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800dda2:	b093      	sub	sp, #76	; 0x4c
 800dda4:	af00      	add	r7, sp, #0
 800dda6:	6178      	str	r0, [r7, #20]
 800dda8:	6139      	str	r1, [r7, #16]
 800ddaa:	60fa      	str	r2, [r7, #12]
 800ddac:	60bb      	str	r3, [r7, #8]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800ddb4:	637b      	str	r3, [r7, #52]	; 0x34
  int cb, cr;
  register JSAMPROW outptr;
  JSAMPROW inptr0, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	f8d3 514c 	ldr.w	r5, [r3, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800ddbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddbe:	691b      	ldr	r3, [r3, #16]
 800ddc0:	633b      	str	r3, [r7, #48]	; 0x30
  int * Cbbtab = upsample->Cb_b_tab;
 800ddc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddc4:	695b      	ldr	r3, [r3, #20]
 800ddc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  INT32 * Crgtab = upsample->Cr_g_tab;
 800ddc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddca:	699b      	ldr	r3, [r3, #24]
 800ddcc:	62bb      	str	r3, [r7, #40]	; 0x28
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800ddce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddd0:	69db      	ldr	r3, [r3, #28]
 800ddd2:	627b      	str	r3, [r7, #36]	; 0x24
  SHIFT_TEMPS

  inptr0 = input_buf[0][in_row_group_ctr];
 800ddd4:	693b      	ldr	r3, [r7, #16]
 800ddd6:	681a      	ldr	r2, [r3, #0]
 800ddd8:	68fb      	ldr	r3, [r7, #12]
 800ddda:	009b      	lsls	r3, r3, #2
 800dddc:	4413      	add	r3, r2
 800ddde:	681b      	ldr	r3, [r3, #0]
 800dde0:	647b      	str	r3, [r7, #68]	; 0x44
  inptr1 = input_buf[1][in_row_group_ctr];
 800dde2:	693b      	ldr	r3, [r7, #16]
 800dde4:	3304      	adds	r3, #4
 800dde6:	681a      	ldr	r2, [r3, #0]
 800dde8:	68fb      	ldr	r3, [r7, #12]
 800ddea:	009b      	lsls	r3, r3, #2
 800ddec:	4413      	add	r3, r2
 800ddee:	681b      	ldr	r3, [r3, #0]
 800ddf0:	643b      	str	r3, [r7, #64]	; 0x40
  inptr2 = input_buf[2][in_row_group_ctr];
 800ddf2:	693b      	ldr	r3, [r7, #16]
 800ddf4:	3308      	adds	r3, #8
 800ddf6:	681a      	ldr	r2, [r3, #0]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	009b      	lsls	r3, r3, #2
 800ddfc:	4413      	add	r3, r2
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	63fb      	str	r3, [r7, #60]	; 0x3c
  outptr = output_buf[0];
 800de02:	68bb      	ldr	r3, [r7, #8]
 800de04:	681c      	ldr	r4, [r3, #0]
  /* Loop for each pair of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800de06:	697b      	ldr	r3, [r7, #20]
 800de08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de0a:	085b      	lsrs	r3, r3, #1
 800de0c:	63bb      	str	r3, [r7, #56]	; 0x38
 800de0e:	e050      	b.n	800deb2 <h2v1_merged_upsample+0x114>
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
 800de10:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800de12:	1c5a      	adds	r2, r3, #1
 800de14:	643a      	str	r2, [r7, #64]	; 0x40
 800de16:	781b      	ldrb	r3, [r3, #0]
 800de18:	623b      	str	r3, [r7, #32]
    cr = GETJSAMPLE(*inptr2++);
 800de1a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800de1c:	1c5a      	adds	r2, r3, #1
 800de1e:	63fa      	str	r2, [r7, #60]	; 0x3c
 800de20:	781b      	ldrb	r3, [r3, #0]
 800de22:	61fb      	str	r3, [r7, #28]
    cred = Crrtab[cr];
 800de24:	69fb      	ldr	r3, [r7, #28]
 800de26:	009b      	lsls	r3, r3, #2
 800de28:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de2a:	4413      	add	r3, r2
 800de2c:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800de2e:	6a3b      	ldr	r3, [r7, #32]
 800de30:	009b      	lsls	r3, r3, #2
 800de32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800de34:	4413      	add	r3, r2
 800de36:	681a      	ldr	r2, [r3, #0]
 800de38:	69fb      	ldr	r3, [r7, #28]
 800de3a:	009b      	lsls	r3, r3, #2
 800de3c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800de3e:	440b      	add	r3, r1
 800de40:	681b      	ldr	r3, [r3, #0]
 800de42:	4413      	add	r3, r2
 800de44:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 800de48:	6a3b      	ldr	r3, [r7, #32]
 800de4a:	009b      	lsls	r3, r3, #2
 800de4c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800de4e:	4413      	add	r3, r2
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	607b      	str	r3, [r7, #4]
    /* Fetch 2 Y values and emit 2 pixels */
    y  = GETJSAMPLE(*inptr0++);
 800de54:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de56:	1c5a      	adds	r2, r3, #1
 800de58:	647a      	str	r2, [r7, #68]	; 0x44
 800de5a:	781b      	ldrb	r3, [r3, #0]
 800de5c:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 800de5e:	4601      	mov	r1, r0
 800de60:	1873      	adds	r3, r6, r1
 800de62:	442b      	add	r3, r5
 800de64:	781b      	ldrb	r3, [r3, #0]
 800de66:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800de68:	eb06 0308 	add.w	r3, r6, r8
 800de6c:	18ea      	adds	r2, r5, r3
 800de6e:	1c63      	adds	r3, r4, #1
 800de70:	7812      	ldrb	r2, [r2, #0]
 800de72:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800de74:	6878      	ldr	r0, [r7, #4]
 800de76:	1833      	adds	r3, r6, r0
 800de78:	18ea      	adds	r2, r5, r3
 800de7a:	1ca3      	adds	r3, r4, #2
 800de7c:	7812      	ldrb	r2, [r2, #0]
 800de7e:	701a      	strb	r2, [r3, #0]
    outptr += RGB_PIXELSIZE;
 800de80:	3403      	adds	r4, #3
    y  = GETJSAMPLE(*inptr0++);
 800de82:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800de84:	1c5a      	adds	r2, r3, #1
 800de86:	647a      	str	r2, [r7, #68]	; 0x44
 800de88:	781b      	ldrb	r3, [r3, #0]
 800de8a:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 800de8c:	1873      	adds	r3, r6, r1
 800de8e:	442b      	add	r3, r5
 800de90:	781b      	ldrb	r3, [r3, #0]
 800de92:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800de94:	eb06 0308 	add.w	r3, r6, r8
 800de98:	18ea      	adds	r2, r5, r3
 800de9a:	1c63      	adds	r3, r4, #1
 800de9c:	7812      	ldrb	r2, [r2, #0]
 800de9e:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800dea0:	1833      	adds	r3, r6, r0
 800dea2:	18ea      	adds	r2, r5, r3
 800dea4:	1ca3      	adds	r3, r4, #2
 800dea6:	7812      	ldrb	r2, [r2, #0]
 800dea8:	701a      	strb	r2, [r3, #0]
    outptr += RGB_PIXELSIZE;
 800deaa:	3403      	adds	r4, #3
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800deac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deae:	3b01      	subs	r3, #1
 800deb0:	63bb      	str	r3, [r7, #56]	; 0x38
 800deb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800deb4:	2b00      	cmp	r3, #0
 800deb6:	d1ab      	bne.n	800de10 <h2v1_merged_upsample+0x72>
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800deb8:	697b      	ldr	r3, [r7, #20]
 800deba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800debc:	f003 0301 	and.w	r3, r3, #1
 800dec0:	2b00      	cmp	r3, #0
 800dec2:	d02e      	beq.n	800df22 <h2v1_merged_upsample+0x184>
    cb = GETJSAMPLE(*inptr1);
 800dec4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dec6:	781b      	ldrb	r3, [r3, #0]
 800dec8:	623b      	str	r3, [r7, #32]
    cr = GETJSAMPLE(*inptr2);
 800deca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800decc:	781b      	ldrb	r3, [r3, #0]
 800dece:	61fb      	str	r3, [r7, #28]
    cred = Crrtab[cr];
 800ded0:	69fb      	ldr	r3, [r7, #28]
 800ded2:	009b      	lsls	r3, r3, #2
 800ded4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ded6:	4413      	add	r3, r2
 800ded8:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800deda:	6a3b      	ldr	r3, [r7, #32]
 800dedc:	009b      	lsls	r3, r3, #2
 800dede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dee0:	4413      	add	r3, r2
 800dee2:	681a      	ldr	r2, [r3, #0]
 800dee4:	69fb      	ldr	r3, [r7, #28]
 800dee6:	009b      	lsls	r3, r3, #2
 800dee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800deea:	440b      	add	r3, r1
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	4413      	add	r3, r2
 800def0:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 800def4:	6a3b      	ldr	r3, [r7, #32]
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800defa:	4413      	add	r3, r2
 800defc:	6819      	ldr	r1, [r3, #0]
    y  = GETJSAMPLE(*inptr0);
 800defe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800df00:	781b      	ldrb	r3, [r3, #0]
 800df02:	461e      	mov	r6, r3
    outptr[RGB_RED] =   range_limit[y + cred];
 800df04:	1833      	adds	r3, r6, r0
 800df06:	442b      	add	r3, r5
 800df08:	781b      	ldrb	r3, [r3, #0]
 800df0a:	7023      	strb	r3, [r4, #0]
    outptr[RGB_GREEN] = range_limit[y + cgreen];
 800df0c:	eb06 0308 	add.w	r3, r6, r8
 800df10:	18ea      	adds	r2, r5, r3
 800df12:	1c63      	adds	r3, r4, #1
 800df14:	7812      	ldrb	r2, [r2, #0]
 800df16:	701a      	strb	r2, [r3, #0]
    outptr[RGB_BLUE] =  range_limit[y + cblue];
 800df18:	1873      	adds	r3, r6, r1
 800df1a:	18ea      	adds	r2, r5, r3
 800df1c:	1ca3      	adds	r3, r4, #2
 800df1e:	7812      	ldrb	r2, [r2, #0]
 800df20:	701a      	strb	r2, [r3, #0]
  }
}
 800df22:	bf00      	nop
 800df24:	374c      	adds	r7, #76	; 0x4c
 800df26:	46bd      	mov	sp, r7
 800df28:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800df2c:	4770      	bx	lr

0800df2e <h2v2_merged_upsample>:

METHODDEF(void)
h2v2_merged_upsample (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION in_row_group_ctr,
		      JSAMPARRAY output_buf)
{
 800df2e:	e92d 01f0 	stmdb	sp!, {r4, r5, r6, r7, r8}
 800df32:	b093      	sub	sp, #76	; 0x4c
 800df34:	af00      	add	r7, sp, #0
 800df36:	6178      	str	r0, [r7, #20]
 800df38:	6139      	str	r1, [r7, #16]
 800df3a:	60fa      	str	r2, [r7, #12]
 800df3c:	60bb      	str	r3, [r7, #8]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800df3e:	697b      	ldr	r3, [r7, #20]
 800df40:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800df44:	633b      	str	r3, [r7, #48]	; 0x30
  int cb, cr;
  register JSAMPROW outptr0, outptr1;
  JSAMPROW inptr00, inptr01, inptr1, inptr2;
  JDIMENSION col;
  /* copy these pointers into registers if possible */
  register JSAMPLE * range_limit = cinfo->sample_range_limit;
 800df46:	697b      	ldr	r3, [r7, #20]
 800df48:	f8d3 414c 	ldr.w	r4, [r3, #332]	; 0x14c
  int * Crrtab = upsample->Cr_r_tab;
 800df4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df4e:	691b      	ldr	r3, [r3, #16]
 800df50:	62fb      	str	r3, [r7, #44]	; 0x2c
  int * Cbbtab = upsample->Cb_b_tab;
 800df52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df54:	695b      	ldr	r3, [r3, #20]
 800df56:	62bb      	str	r3, [r7, #40]	; 0x28
  INT32 * Crgtab = upsample->Cr_g_tab;
 800df58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df5a:	699b      	ldr	r3, [r3, #24]
 800df5c:	627b      	str	r3, [r7, #36]	; 0x24
  INT32 * Cbgtab = upsample->Cb_g_tab;
 800df5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df60:	69db      	ldr	r3, [r3, #28]
 800df62:	623b      	str	r3, [r7, #32]
  SHIFT_TEMPS

  inptr00 = input_buf[0][in_row_group_ctr*2];
 800df64:	693b      	ldr	r3, [r7, #16]
 800df66:	681a      	ldr	r2, [r3, #0]
 800df68:	68fb      	ldr	r3, [r7, #12]
 800df6a:	00db      	lsls	r3, r3, #3
 800df6c:	4413      	add	r3, r2
 800df6e:	681b      	ldr	r3, [r3, #0]
 800df70:	647b      	str	r3, [r7, #68]	; 0x44
  inptr01 = input_buf[0][in_row_group_ctr*2 + 1];
 800df72:	693b      	ldr	r3, [r7, #16]
 800df74:	681a      	ldr	r2, [r3, #0]
 800df76:	68fb      	ldr	r3, [r7, #12]
 800df78:	00db      	lsls	r3, r3, #3
 800df7a:	3304      	adds	r3, #4
 800df7c:	4413      	add	r3, r2
 800df7e:	681b      	ldr	r3, [r3, #0]
 800df80:	643b      	str	r3, [r7, #64]	; 0x40
  inptr1 = input_buf[1][in_row_group_ctr];
 800df82:	693b      	ldr	r3, [r7, #16]
 800df84:	3304      	adds	r3, #4
 800df86:	681a      	ldr	r2, [r3, #0]
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	009b      	lsls	r3, r3, #2
 800df8c:	4413      	add	r3, r2
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	63fb      	str	r3, [r7, #60]	; 0x3c
  inptr2 = input_buf[2][in_row_group_ctr];
 800df92:	693b      	ldr	r3, [r7, #16]
 800df94:	3308      	adds	r3, #8
 800df96:	681a      	ldr	r2, [r3, #0]
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	009b      	lsls	r3, r3, #2
 800df9c:	4413      	add	r3, r2
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	63bb      	str	r3, [r7, #56]	; 0x38
  outptr0 = output_buf[0];
 800dfa2:	68bb      	ldr	r3, [r7, #8]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	607b      	str	r3, [r7, #4]
  outptr1 = output_buf[1];
 800dfa8:	68bb      	ldr	r3, [r7, #8]
 800dfaa:	685e      	ldr	r6, [r3, #4]
  /* Loop for each group of output pixels */
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800dfac:	697b      	ldr	r3, [r7, #20]
 800dfae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800dfb0:	085b      	lsrs	r3, r3, #1
 800dfb2:	637b      	str	r3, [r7, #52]	; 0x34
 800dfb4:	e083      	b.n	800e0be <h2v2_merged_upsample+0x190>
    /* Do the chroma part of the calculation */
    cb = GETJSAMPLE(*inptr1++);
 800dfb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dfb8:	1c5a      	adds	r2, r3, #1
 800dfba:	63fa      	str	r2, [r7, #60]	; 0x3c
 800dfbc:	781b      	ldrb	r3, [r3, #0]
 800dfbe:	61fb      	str	r3, [r7, #28]
    cr = GETJSAMPLE(*inptr2++);
 800dfc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfc2:	1c5a      	adds	r2, r3, #1
 800dfc4:	63ba      	str	r2, [r7, #56]	; 0x38
 800dfc6:	781b      	ldrb	r3, [r3, #0]
 800dfc8:	61bb      	str	r3, [r7, #24]
    cred = Crrtab[cr];
 800dfca:	69bb      	ldr	r3, [r7, #24]
 800dfcc:	009b      	lsls	r3, r3, #2
 800dfce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dfd0:	4413      	add	r3, r2
 800dfd2:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800dfd4:	69fb      	ldr	r3, [r7, #28]
 800dfd6:	009b      	lsls	r3, r3, #2
 800dfd8:	6a3a      	ldr	r2, [r7, #32]
 800dfda:	4413      	add	r3, r2
 800dfdc:	681a      	ldr	r2, [r3, #0]
 800dfde:	69bb      	ldr	r3, [r7, #24]
 800dfe0:	009b      	lsls	r3, r3, #2
 800dfe2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800dfe4:	440b      	add	r3, r1
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	4413      	add	r3, r2
 800dfea:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 800dfee:	69fb      	ldr	r3, [r7, #28]
 800dff0:	009b      	lsls	r3, r3, #2
 800dff2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dff4:	4413      	add	r3, r2
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	603b      	str	r3, [r7, #0]
    /* Fetch 4 Y values and emit 4 pixels */
    y  = GETJSAMPLE(*inptr00++);
 800dffa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dffc:	1c5a      	adds	r2, r3, #1
 800dffe:	647a      	str	r2, [r7, #68]	; 0x44
 800e000:	781b      	ldrb	r3, [r3, #0]
 800e002:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e004:	4601      	mov	r1, r0
 800e006:	186b      	adds	r3, r5, r1
 800e008:	4423      	add	r3, r4
 800e00a:	781b      	ldrb	r3, [r3, #0]
 800e00c:	6878      	ldr	r0, [r7, #4]
 800e00e:	4602      	mov	r2, r0
 800e010:	7013      	strb	r3, [r2, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e012:	eb05 0308 	add.w	r3, r5, r8
 800e016:	18e2      	adds	r2, r4, r3
 800e018:	6078      	str	r0, [r7, #4]
 800e01a:	1c43      	adds	r3, r0, #1
 800e01c:	7812      	ldrb	r2, [r2, #0]
 800e01e:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e020:	6838      	ldr	r0, [r7, #0]
 800e022:	182b      	adds	r3, r5, r0
 800e024:	18e2      	adds	r2, r4, r3
 800e026:	687d      	ldr	r5, [r7, #4]
 800e028:	1cab      	adds	r3, r5, #2
 800e02a:	7812      	ldrb	r2, [r2, #0]
 800e02c:	701a      	strb	r2, [r3, #0]
    outptr0 += RGB_PIXELSIZE;
 800e02e:	3503      	adds	r5, #3
 800e030:	607d      	str	r5, [r7, #4]
    y  = GETJSAMPLE(*inptr00++);
 800e032:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e034:	1c5a      	adds	r2, r3, #1
 800e036:	647a      	str	r2, [r7, #68]	; 0x44
 800e038:	781b      	ldrb	r3, [r3, #0]
 800e03a:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e03c:	186b      	adds	r3, r5, r1
 800e03e:	4423      	add	r3, r4
 800e040:	781b      	ldrb	r3, [r3, #0]
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	7013      	strb	r3, [r2, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e046:	eb05 0308 	add.w	r3, r5, r8
 800e04a:	18e2      	adds	r2, r4, r3
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	3301      	adds	r3, #1
 800e050:	7812      	ldrb	r2, [r2, #0]
 800e052:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e054:	182b      	adds	r3, r5, r0
 800e056:	18e2      	adds	r2, r4, r3
 800e058:	687d      	ldr	r5, [r7, #4]
 800e05a:	1cab      	adds	r3, r5, #2
 800e05c:	7812      	ldrb	r2, [r2, #0]
 800e05e:	701a      	strb	r2, [r3, #0]
    outptr0 += RGB_PIXELSIZE;
 800e060:	1ceb      	adds	r3, r5, #3
 800e062:	607b      	str	r3, [r7, #4]
    y  = GETJSAMPLE(*inptr01++);
 800e064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e066:	1c5a      	adds	r2, r3, #1
 800e068:	643a      	str	r2, [r7, #64]	; 0x40
 800e06a:	781b      	ldrb	r3, [r3, #0]
 800e06c:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 800e06e:	186b      	adds	r3, r5, r1
 800e070:	4423      	add	r3, r4
 800e072:	781b      	ldrb	r3, [r3, #0]
 800e074:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800e076:	eb05 0308 	add.w	r3, r5, r8
 800e07a:	18e2      	adds	r2, r4, r3
 800e07c:	1c73      	adds	r3, r6, #1
 800e07e:	7812      	ldrb	r2, [r2, #0]
 800e080:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800e082:	182b      	adds	r3, r5, r0
 800e084:	18e2      	adds	r2, r4, r3
 800e086:	1cb3      	adds	r3, r6, #2
 800e088:	7812      	ldrb	r2, [r2, #0]
 800e08a:	701a      	strb	r2, [r3, #0]
    outptr1 += RGB_PIXELSIZE;
 800e08c:	3603      	adds	r6, #3
    y  = GETJSAMPLE(*inptr01++);
 800e08e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e090:	1c5a      	adds	r2, r3, #1
 800e092:	643a      	str	r2, [r7, #64]	; 0x40
 800e094:	781b      	ldrb	r3, [r3, #0]
 800e096:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 800e098:	186b      	adds	r3, r5, r1
 800e09a:	4423      	add	r3, r4
 800e09c:	781b      	ldrb	r3, [r3, #0]
 800e09e:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800e0a0:	eb05 0308 	add.w	r3, r5, r8
 800e0a4:	18e2      	adds	r2, r4, r3
 800e0a6:	1c73      	adds	r3, r6, #1
 800e0a8:	7812      	ldrb	r2, [r2, #0]
 800e0aa:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800e0ac:	182b      	adds	r3, r5, r0
 800e0ae:	18e2      	adds	r2, r4, r3
 800e0b0:	1cb3      	adds	r3, r6, #2
 800e0b2:	7812      	ldrb	r2, [r2, #0]
 800e0b4:	701a      	strb	r2, [r3, #0]
    outptr1 += RGB_PIXELSIZE;
 800e0b6:	3603      	adds	r6, #3
  for (col = cinfo->output_width >> 1; col > 0; col--) {
 800e0b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0ba:	3b01      	subs	r3, #1
 800e0bc:	637b      	str	r3, [r7, #52]	; 0x34
 800e0be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	f47f af78 	bne.w	800dfb6 <h2v2_merged_upsample+0x88>
  }
  /* If image width is odd, do the last output column separately */
  if (cinfo->output_width & 1) {
 800e0c6:	697b      	ldr	r3, [r7, #20]
 800e0c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e0ca:	f003 0301 	and.w	r3, r3, #1
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d045      	beq.n	800e15e <h2v2_merged_upsample+0x230>
    cb = GETJSAMPLE(*inptr1);
 800e0d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e0d4:	781b      	ldrb	r3, [r3, #0]
 800e0d6:	61fb      	str	r3, [r7, #28]
    cr = GETJSAMPLE(*inptr2);
 800e0d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e0da:	781b      	ldrb	r3, [r3, #0]
 800e0dc:	61bb      	str	r3, [r7, #24]
    cred = Crrtab[cr];
 800e0de:	69bb      	ldr	r3, [r7, #24]
 800e0e0:	009b      	lsls	r3, r3, #2
 800e0e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e0e4:	4413      	add	r3, r2
 800e0e6:	6818      	ldr	r0, [r3, #0]
    cgreen = (int) RIGHT_SHIFT(Cbgtab[cb] + Crgtab[cr], SCALEBITS);
 800e0e8:	69fb      	ldr	r3, [r7, #28]
 800e0ea:	009b      	lsls	r3, r3, #2
 800e0ec:	6a3a      	ldr	r2, [r7, #32]
 800e0ee:	4413      	add	r3, r2
 800e0f0:	681a      	ldr	r2, [r3, #0]
 800e0f2:	69bb      	ldr	r3, [r7, #24]
 800e0f4:	009b      	lsls	r3, r3, #2
 800e0f6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e0f8:	440b      	add	r3, r1
 800e0fa:	681b      	ldr	r3, [r3, #0]
 800e0fc:	4413      	add	r3, r2
 800e0fe:	ea4f 4823 	mov.w	r8, r3, asr #16
    cblue = Cbbtab[cb];
 800e102:	69fb      	ldr	r3, [r7, #28]
 800e104:	009b      	lsls	r3, r3, #2
 800e106:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e108:	4413      	add	r3, r2
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	603b      	str	r3, [r7, #0]
    y  = GETJSAMPLE(*inptr00);
 800e10e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e110:	781b      	ldrb	r3, [r3, #0]
 800e112:	461d      	mov	r5, r3
    outptr0[RGB_RED] =   range_limit[y + cred];
 800e114:	182b      	adds	r3, r5, r0
 800e116:	4423      	add	r3, r4
 800e118:	781b      	ldrb	r3, [r3, #0]
 800e11a:	6879      	ldr	r1, [r7, #4]
 800e11c:	460a      	mov	r2, r1
 800e11e:	7013      	strb	r3, [r2, #0]
    outptr0[RGB_GREEN] = range_limit[y + cgreen];
 800e120:	eb05 0308 	add.w	r3, r5, r8
 800e124:	18e2      	adds	r2, r4, r3
 800e126:	1c4b      	adds	r3, r1, #1
 800e128:	7812      	ldrb	r2, [r2, #0]
 800e12a:	701a      	strb	r2, [r3, #0]
    outptr0[RGB_BLUE] =  range_limit[y + cblue];
 800e12c:	683b      	ldr	r3, [r7, #0]
 800e12e:	18eb      	adds	r3, r5, r3
 800e130:	18e2      	adds	r2, r4, r3
 800e132:	1c8b      	adds	r3, r1, #2
 800e134:	7812      	ldrb	r2, [r2, #0]
 800e136:	701a      	strb	r2, [r3, #0]
    y  = GETJSAMPLE(*inptr01);
 800e138:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e13a:	781b      	ldrb	r3, [r3, #0]
 800e13c:	461d      	mov	r5, r3
    outptr1[RGB_RED] =   range_limit[y + cred];
 800e13e:	182b      	adds	r3, r5, r0
 800e140:	4423      	add	r3, r4
 800e142:	781b      	ldrb	r3, [r3, #0]
 800e144:	7033      	strb	r3, [r6, #0]
    outptr1[RGB_GREEN] = range_limit[y + cgreen];
 800e146:	eb05 0308 	add.w	r3, r5, r8
 800e14a:	18e2      	adds	r2, r4, r3
 800e14c:	1c73      	adds	r3, r6, #1
 800e14e:	7812      	ldrb	r2, [r2, #0]
 800e150:	701a      	strb	r2, [r3, #0]
    outptr1[RGB_BLUE] =  range_limit[y + cblue];
 800e152:	683b      	ldr	r3, [r7, #0]
 800e154:	18eb      	adds	r3, r5, r3
 800e156:	18e2      	adds	r2, r4, r3
 800e158:	1cb3      	adds	r3, r6, #2
 800e15a:	7812      	ldrb	r2, [r2, #0]
 800e15c:	701a      	strb	r2, [r3, #0]
  }
}
 800e15e:	bf00      	nop
 800e160:	374c      	adds	r7, #76	; 0x4c
 800e162:	46bd      	mov	sp, r7
 800e164:	e8bd 01f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8}
 800e168:	4770      	bx	lr
	...

0800e16c <jinit_merged_upsampler>:
 * of this module; no safety checks are made here.
 */

GLOBAL(void)
jinit_merged_upsampler (j_decompress_ptr cinfo)
{
 800e16c:	b580      	push	{r7, lr}
 800e16e:	b084      	sub	sp, #16
 800e170:	af00      	add	r7, sp, #0
 800e172:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e174:	687b      	ldr	r3, [r7, #4]
 800e176:	685b      	ldr	r3, [r3, #4]
 800e178:	681b      	ldr	r3, [r3, #0]
 800e17a:	2230      	movs	r2, #48	; 0x30
 800e17c:	2101      	movs	r1, #1
 800e17e:	6878      	ldr	r0, [r7, #4]
 800e180:	4798      	blx	r3
 800e182:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800e184:	687b      	ldr	r3, [r7, #4]
 800e186:	68fa      	ldr	r2, [r7, #12]
 800e188:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  upsample->pub.start_pass = start_pass_merged_upsample;
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	4a1a      	ldr	r2, [pc, #104]	; (800e1f8 <jinit_merged_upsampler+0x8c>)
 800e190:	601a      	str	r2, [r3, #0]
  upsample->pub.need_context_rows = FALSE;
 800e192:	68fb      	ldr	r3, [r7, #12]
 800e194:	2200      	movs	r2, #0
 800e196:	609a      	str	r2, [r3, #8]

  upsample->out_row_width = cinfo->output_width * cinfo->out_color_components;
 800e198:	687b      	ldr	r3, [r7, #4]
 800e19a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e19c:	687a      	ldr	r2, [r7, #4]
 800e19e:	6f92      	ldr	r2, [r2, #120]	; 0x78
 800e1a0:	fb02 f203 	mul.w	r2, r2, r3
 800e1a4:	68fb      	ldr	r3, [r7, #12]
 800e1a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (cinfo->max_v_samp_factor == 2) {
 800e1a8:	687b      	ldr	r3, [r7, #4]
 800e1aa:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e1ae:	2b02      	cmp	r3, #2
 800e1b0:	d111      	bne.n	800e1d6 <jinit_merged_upsampler+0x6a>
    upsample->pub.upsample = merged_2v_upsample;
 800e1b2:	68fb      	ldr	r3, [r7, #12]
 800e1b4:	4a11      	ldr	r2, [pc, #68]	; (800e1fc <jinit_merged_upsampler+0x90>)
 800e1b6:	605a      	str	r2, [r3, #4]
    upsample->upmethod = h2v2_merged_upsample;
 800e1b8:	68fb      	ldr	r3, [r7, #12]
 800e1ba:	4a11      	ldr	r2, [pc, #68]	; (800e200 <jinit_merged_upsampler+0x94>)
 800e1bc:	60da      	str	r2, [r3, #12]
    /* Allocate a spare row buffer */
    upsample->spare_row = (JSAMPROW)
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e1be:	687b      	ldr	r3, [r7, #4]
 800e1c0:	685b      	ldr	r3, [r3, #4]
 800e1c2:	685b      	ldr	r3, [r3, #4]
		(size_t) (upsample->out_row_width * SIZEOF(JSAMPLE)));
 800e1c4:	68fa      	ldr	r2, [r7, #12]
 800e1c6:	6a92      	ldr	r2, [r2, #40]	; 0x28
      (*cinfo->mem->alloc_large) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e1c8:	2101      	movs	r1, #1
 800e1ca:	6878      	ldr	r0, [r7, #4]
 800e1cc:	4798      	blx	r3
 800e1ce:	4602      	mov	r2, r0
    upsample->spare_row = (JSAMPROW)
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	621a      	str	r2, [r3, #32]
 800e1d4:	e008      	b.n	800e1e8 <jinit_merged_upsampler+0x7c>
  } else {
    upsample->pub.upsample = merged_1v_upsample;
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	4a0a      	ldr	r2, [pc, #40]	; (800e204 <jinit_merged_upsampler+0x98>)
 800e1da:	605a      	str	r2, [r3, #4]
    upsample->upmethod = h2v1_merged_upsample;
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	4a0a      	ldr	r2, [pc, #40]	; (800e208 <jinit_merged_upsampler+0x9c>)
 800e1e0:	60da      	str	r2, [r3, #12]
    /* No spare row needed */
    upsample->spare_row = NULL;
 800e1e2:	68fb      	ldr	r3, [r7, #12]
 800e1e4:	2200      	movs	r2, #0
 800e1e6:	621a      	str	r2, [r3, #32]
  }

  build_ycc_rgb_table(cinfo);
 800e1e8:	6878      	ldr	r0, [r7, #4]
 800e1ea:	f7ff fca7 	bl	800db3c <build_ycc_rgb_table>
}
 800e1ee:	bf00      	nop
 800e1f0:	3710      	adds	r7, #16
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	0800dc3d 	.word	0x0800dc3d
 800e1fc:	0800dc67 	.word	0x0800dc67
 800e200:	0800df2f 	.word	0x0800df2f
 800e204:	0800dd53 	.word	0x0800dd53
 800e208:	0800dd9f 	.word	0x0800dd9f

0800e20c <start_pass_dpost>:
 * Initialize for a processing pass.
 */

METHODDEF(void)
start_pass_dpost (j_decompress_ptr cinfo, J_BUF_MODE pass_mode)
{
 800e20c:	b590      	push	{r4, r7, lr}
 800e20e:	b087      	sub	sp, #28
 800e210:	af02      	add	r7, sp, #8
 800e212:	6078      	str	r0, [r7, #4]
 800e214:	460b      	mov	r3, r1
 800e216:	70fb      	strb	r3, [r7, #3]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e218:	687b      	ldr	r3, [r7, #4]
 800e21a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800e21e:	60fb      	str	r3, [r7, #12]

  switch (pass_mode) {
 800e220:	78fb      	ldrb	r3, [r7, #3]
 800e222:	2b03      	cmp	r3, #3
 800e224:	d028      	beq.n	800e278 <start_pass_dpost+0x6c>
 800e226:	2b03      	cmp	r3, #3
 800e228:	dc48      	bgt.n	800e2bc <start_pass_dpost+0xb0>
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d002      	beq.n	800e234 <start_pass_dpost+0x28>
 800e22e:	2b02      	cmp	r3, #2
 800e230:	d033      	beq.n	800e29a <start_pass_dpost+0x8e>
 800e232:	e043      	b.n	800e2bc <start_pass_dpost+0xb0>
  case JBUF_PASS_THRU:
    if (cinfo->quantize_colors) {
 800e234:	687b      	ldr	r3, [r7, #4]
 800e236:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e238:	2b00      	cmp	r3, #0
 800e23a:	d016      	beq.n	800e26a <start_pass_dpost+0x5e>
      /* Single-pass processing with color quantization. */
      post->pub.post_process_data = post_process_1pass;
 800e23c:	68fb      	ldr	r3, [r7, #12]
 800e23e:	4a2a      	ldr	r2, [pc, #168]	; (800e2e8 <start_pass_dpost+0xdc>)
 800e240:	605a      	str	r2, [r3, #4]
      /* We could be doing buffered-image output before starting a 2-pass
       * color quantization; in that case, jinit_d_post_controller did not
       * allocate a strip buffer.  Use the virtual-array buffer as workspace.
       */
      if (post->buffer == NULL) {
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	68db      	ldr	r3, [r3, #12]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d142      	bne.n	800e2d0 <start_pass_dpost+0xc4>
	post->buffer = (*cinfo->mem->access_virt_sarray)
 800e24a:	687b      	ldr	r3, [r7, #4]
 800e24c:	685b      	ldr	r3, [r3, #4]
 800e24e:	69dc      	ldr	r4, [r3, #28]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	6899      	ldr	r1, [r3, #8]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	691b      	ldr	r3, [r3, #16]
 800e258:	2201      	movs	r2, #1
 800e25a:	9200      	str	r2, [sp, #0]
 800e25c:	2200      	movs	r2, #0
 800e25e:	6878      	ldr	r0, [r7, #4]
 800e260:	47a0      	blx	r4
 800e262:	4602      	mov	r2, r0
 800e264:	68fb      	ldr	r3, [r7, #12]
 800e266:	60da      	str	r2, [r3, #12]
      /* For single-pass processing without color quantization,
       * I have no work to do; just call the upsampler directly.
       */
      post->pub.post_process_data = cinfo->upsample->upsample;
    }
    break;
 800e268:	e032      	b.n	800e2d0 <start_pass_dpost+0xc4>
      post->pub.post_process_data = cinfo->upsample->upsample;
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800e270:	685a      	ldr	r2, [r3, #4]
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	605a      	str	r2, [r3, #4]
    break;
 800e276:	e02b      	b.n	800e2d0 <start_pass_dpost+0xc4>
#ifdef QUANT_2PASS_SUPPORTED
  case JBUF_SAVE_AND_PASS:
    /* First pass of 2-pass quantization */
    if (post->whole_image == NULL)
 800e278:	68fb      	ldr	r3, [r7, #12]
 800e27a:	689b      	ldr	r3, [r3, #8]
 800e27c:	2b00      	cmp	r3, #0
 800e27e:	d108      	bne.n	800e292 <start_pass_dpost+0x86>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	2203      	movs	r2, #3
 800e286:	615a      	str	r2, [r3, #20]
 800e288:	687b      	ldr	r3, [r7, #4]
 800e28a:	681b      	ldr	r3, [r3, #0]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	6878      	ldr	r0, [r7, #4]
 800e290:	4798      	blx	r3
    post->pub.post_process_data = post_process_prepass;
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	4a15      	ldr	r2, [pc, #84]	; (800e2ec <start_pass_dpost+0xe0>)
 800e296:	605a      	str	r2, [r3, #4]
    break;
 800e298:	e01b      	b.n	800e2d2 <start_pass_dpost+0xc6>
  case JBUF_CRANK_DEST:
    /* Second pass of 2-pass quantization */
    if (post->whole_image == NULL)
 800e29a:	68fb      	ldr	r3, [r7, #12]
 800e29c:	689b      	ldr	r3, [r3, #8]
 800e29e:	2b00      	cmp	r3, #0
 800e2a0:	d108      	bne.n	800e2b4 <start_pass_dpost+0xa8>
      ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e2a2:	687b      	ldr	r3, [r7, #4]
 800e2a4:	681b      	ldr	r3, [r3, #0]
 800e2a6:	2203      	movs	r2, #3
 800e2a8:	615a      	str	r2, [r3, #20]
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681b      	ldr	r3, [r3, #0]
 800e2b0:	6878      	ldr	r0, [r7, #4]
 800e2b2:	4798      	blx	r3
    post->pub.post_process_data = post_process_2pass;
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	4a0e      	ldr	r2, [pc, #56]	; (800e2f0 <start_pass_dpost+0xe4>)
 800e2b8:	605a      	str	r2, [r3, #4]
    break;
 800e2ba:	e00a      	b.n	800e2d2 <start_pass_dpost+0xc6>
#endif /* QUANT_2PASS_SUPPORTED */
  default:
    ERREXIT(cinfo, JERR_BAD_BUFFER_MODE);
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	681b      	ldr	r3, [r3, #0]
 800e2c0:	2203      	movs	r2, #3
 800e2c2:	615a      	str	r2, [r3, #20]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	681b      	ldr	r3, [r3, #0]
 800e2c8:	681b      	ldr	r3, [r3, #0]
 800e2ca:	6878      	ldr	r0, [r7, #4]
 800e2cc:	4798      	blx	r3
    break;
 800e2ce:	e000      	b.n	800e2d2 <start_pass_dpost+0xc6>
    break;
 800e2d0:	bf00      	nop
  }
  post->starting_row = post->next_row = 0;
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	2200      	movs	r2, #0
 800e2d6:	619a      	str	r2, [r3, #24]
 800e2d8:	68fb      	ldr	r3, [r7, #12]
 800e2da:	699a      	ldr	r2, [r3, #24]
 800e2dc:	68fb      	ldr	r3, [r7, #12]
 800e2de:	615a      	str	r2, [r3, #20]
}
 800e2e0:	bf00      	nop
 800e2e2:	3714      	adds	r7, #20
 800e2e4:	46bd      	mov	sp, r7
 800e2e6:	bd90      	pop	{r4, r7, pc}
 800e2e8:	0800e2f5 	.word	0x0800e2f5
 800e2ec:	0800e37b 	.word	0x0800e37b
 800e2f0:	0800e445 	.word	0x0800e445

0800e2f4 <post_process_1pass>:
post_process_1pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800e2f4:	b590      	push	{r4, r7, lr}
 800e2f6:	b08d      	sub	sp, #52	; 0x34
 800e2f8:	af04      	add	r7, sp, #16
 800e2fa:	60f8      	str	r0, [r7, #12]
 800e2fc:	60b9      	str	r1, [r7, #8]
 800e2fe:	607a      	str	r2, [r7, #4]
 800e300:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e302:	68fb      	ldr	r3, [r7, #12]
 800e304:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800e308:	61bb      	str	r3, [r7, #24]
  JDIMENSION num_rows, max_rows;

  /* Fill the buffer, but not more than what we can dump out in one go. */
  /* Note we rely on the upsampler to detect bottom of image. */
  max_rows = out_rows_avail - *out_row_ctr;
 800e30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e30c:	681b      	ldr	r3, [r3, #0]
 800e30e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e310:	1ad3      	subs	r3, r2, r3
 800e312:	61fb      	str	r3, [r7, #28]
  if (max_rows > post->strip_height)
 800e314:	69bb      	ldr	r3, [r7, #24]
 800e316:	691b      	ldr	r3, [r3, #16]
 800e318:	69fa      	ldr	r2, [r7, #28]
 800e31a:	429a      	cmp	r2, r3
 800e31c:	d902      	bls.n	800e324 <post_process_1pass+0x30>
    max_rows = post->strip_height;
 800e31e:	69bb      	ldr	r3, [r7, #24]
 800e320:	691b      	ldr	r3, [r3, #16]
 800e322:	61fb      	str	r3, [r7, #28]
  num_rows = 0;
 800e324:	2300      	movs	r3, #0
 800e326:	617b      	str	r3, [r7, #20]
  (*cinfo->upsample->upsample) (cinfo,
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800e32e:	685c      	ldr	r4, [r3, #4]
 800e330:	69bb      	ldr	r3, [r7, #24]
 800e332:	68db      	ldr	r3, [r3, #12]
 800e334:	69fa      	ldr	r2, [r7, #28]
 800e336:	9202      	str	r2, [sp, #8]
 800e338:	f107 0214 	add.w	r2, r7, #20
 800e33c:	9201      	str	r2, [sp, #4]
 800e33e:	9300      	str	r3, [sp, #0]
 800e340:	683b      	ldr	r3, [r7, #0]
 800e342:	687a      	ldr	r2, [r7, #4]
 800e344:	68b9      	ldr	r1, [r7, #8]
 800e346:	68f8      	ldr	r0, [r7, #12]
 800e348:	47a0      	blx	r4
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &num_rows, max_rows);
  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e34a:	68fb      	ldr	r3, [r7, #12]
 800e34c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800e350:	685c      	ldr	r4, [r3, #4]
 800e352:	69bb      	ldr	r3, [r7, #24]
 800e354:	68d9      	ldr	r1, [r3, #12]
		post->buffer, output_buf + *out_row_ctr, (int) num_rows);
 800e356:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e358:	681b      	ldr	r3, [r3, #0]
 800e35a:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e35c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e35e:	441a      	add	r2, r3
 800e360:	697b      	ldr	r3, [r7, #20]
 800e362:	68f8      	ldr	r0, [r7, #12]
 800e364:	47a0      	blx	r4
  *out_row_ctr += num_rows;
 800e366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e368:	681a      	ldr	r2, [r3, #0]
 800e36a:	697b      	ldr	r3, [r7, #20]
 800e36c:	441a      	add	r2, r3
 800e36e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e370:	601a      	str	r2, [r3, #0]
}
 800e372:	bf00      	nop
 800e374:	3724      	adds	r7, #36	; 0x24
 800e376:	46bd      	mov	sp, r7
 800e378:	bd90      	pop	{r4, r7, pc}

0800e37a <post_process_prepass>:
post_process_prepass (j_decompress_ptr cinfo,
		      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		      JDIMENSION in_row_groups_avail,
		      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		      JDIMENSION out_rows_avail)
{
 800e37a:	b590      	push	{r4, r7, lr}
 800e37c:	b08d      	sub	sp, #52	; 0x34
 800e37e:	af04      	add	r7, sp, #16
 800e380:	60f8      	str	r0, [r7, #12]
 800e382:	60b9      	str	r1, [r7, #8]
 800e384:	607a      	str	r2, [r7, #4]
 800e386:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800e38e:	61fb      	str	r3, [r7, #28]
  JDIMENSION old_next_row, num_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800e390:	69fb      	ldr	r3, [r7, #28]
 800e392:	699b      	ldr	r3, [r3, #24]
 800e394:	2b00      	cmp	r3, #0
 800e396:	d10f      	bne.n	800e3b8 <post_process_prepass+0x3e>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800e398:	68fb      	ldr	r3, [r7, #12]
 800e39a:	685b      	ldr	r3, [r3, #4]
 800e39c:	69dc      	ldr	r4, [r3, #28]
 800e39e:	69fb      	ldr	r3, [r7, #28]
 800e3a0:	6899      	ldr	r1, [r3, #8]
 800e3a2:	69fb      	ldr	r3, [r7, #28]
 800e3a4:	695a      	ldr	r2, [r3, #20]
 800e3a6:	69fb      	ldr	r3, [r7, #28]
 800e3a8:	691b      	ldr	r3, [r3, #16]
 800e3aa:	2001      	movs	r0, #1
 800e3ac:	9000      	str	r0, [sp, #0]
 800e3ae:	68f8      	ldr	r0, [r7, #12]
 800e3b0:	47a0      	blx	r4
 800e3b2:	4602      	mov	r2, r0
 800e3b4:	69fb      	ldr	r3, [r7, #28]
 800e3b6:	60da      	str	r2, [r3, #12]
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, TRUE);
  }

  /* Upsample some data (up to a strip height's worth). */
  old_next_row = post->next_row;
 800e3b8:	69fb      	ldr	r3, [r7, #28]
 800e3ba:	699b      	ldr	r3, [r3, #24]
 800e3bc:	61bb      	str	r3, [r7, #24]
  (*cinfo->upsample->upsample) (cinfo,
 800e3be:	68fb      	ldr	r3, [r7, #12]
 800e3c0:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800e3c4:	685c      	ldr	r4, [r3, #4]
 800e3c6:	69fb      	ldr	r3, [r7, #28]
 800e3c8:	68db      	ldr	r3, [r3, #12]
 800e3ca:	69fa      	ldr	r2, [r7, #28]
 800e3cc:	3218      	adds	r2, #24
 800e3ce:	69f9      	ldr	r1, [r7, #28]
 800e3d0:	6909      	ldr	r1, [r1, #16]
 800e3d2:	9102      	str	r1, [sp, #8]
 800e3d4:	9201      	str	r2, [sp, #4]
 800e3d6:	9300      	str	r3, [sp, #0]
 800e3d8:	683b      	ldr	r3, [r7, #0]
 800e3da:	687a      	ldr	r2, [r7, #4]
 800e3dc:	68b9      	ldr	r1, [r7, #8]
 800e3de:	68f8      	ldr	r0, [r7, #12]
 800e3e0:	47a0      	blx	r4
		input_buf, in_row_group_ctr, in_row_groups_avail,
		post->buffer, &post->next_row, post->strip_height);

  /* Allow quantizer to scan new data.  No data is emitted, */
  /* but we advance out_row_ctr so outer loop can tell when we're done. */
  if (post->next_row > old_next_row) {
 800e3e2:	69fb      	ldr	r3, [r7, #28]
 800e3e4:	699b      	ldr	r3, [r3, #24]
 800e3e6:	69ba      	ldr	r2, [r7, #24]
 800e3e8:	429a      	cmp	r2, r3
 800e3ea:	d217      	bcs.n	800e41c <post_process_prepass+0xa2>
    num_rows = post->next_row - old_next_row;
 800e3ec:	69fb      	ldr	r3, [r7, #28]
 800e3ee:	699a      	ldr	r2, [r3, #24]
 800e3f0:	69bb      	ldr	r3, [r7, #24]
 800e3f2:	1ad3      	subs	r3, r2, r3
 800e3f4:	617b      	str	r3, [r7, #20]
    (*cinfo->cquantize->color_quantize) (cinfo, post->buffer + old_next_row,
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800e3fc:	685c      	ldr	r4, [r3, #4]
 800e3fe:	69fb      	ldr	r3, [r7, #28]
 800e400:	68da      	ldr	r2, [r3, #12]
 800e402:	69bb      	ldr	r3, [r7, #24]
 800e404:	009b      	lsls	r3, r3, #2
 800e406:	18d1      	adds	r1, r2, r3
 800e408:	697b      	ldr	r3, [r7, #20]
 800e40a:	2200      	movs	r2, #0
 800e40c:	68f8      	ldr	r0, [r7, #12]
 800e40e:	47a0      	blx	r4
					 (JSAMPARRAY) NULL, (int) num_rows);
    *out_row_ctr += num_rows;
 800e410:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e412:	681a      	ldr	r2, [r3, #0]
 800e414:	697b      	ldr	r3, [r7, #20]
 800e416:	441a      	add	r2, r3
 800e418:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e41a:	601a      	str	r2, [r3, #0]
  }

  /* Advance if we filled the strip. */
  if (post->next_row >= post->strip_height) {
 800e41c:	69fb      	ldr	r3, [r7, #28]
 800e41e:	699a      	ldr	r2, [r3, #24]
 800e420:	69fb      	ldr	r3, [r7, #28]
 800e422:	691b      	ldr	r3, [r3, #16]
 800e424:	429a      	cmp	r2, r3
 800e426:	d309      	bcc.n	800e43c <post_process_prepass+0xc2>
    post->starting_row += post->strip_height;
 800e428:	69fb      	ldr	r3, [r7, #28]
 800e42a:	695a      	ldr	r2, [r3, #20]
 800e42c:	69fb      	ldr	r3, [r7, #28]
 800e42e:	691b      	ldr	r3, [r3, #16]
 800e430:	441a      	add	r2, r3
 800e432:	69fb      	ldr	r3, [r7, #28]
 800e434:	615a      	str	r2, [r3, #20]
    post->next_row = 0;
 800e436:	69fb      	ldr	r3, [r7, #28]
 800e438:	2200      	movs	r2, #0
 800e43a:	619a      	str	r2, [r3, #24]
  }
}
 800e43c:	bf00      	nop
 800e43e:	3724      	adds	r7, #36	; 0x24
 800e440:	46bd      	mov	sp, r7
 800e442:	bd90      	pop	{r4, r7, pc}

0800e444 <post_process_2pass>:
post_process_2pass (j_decompress_ptr cinfo,
		    JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
		    JDIMENSION in_row_groups_avail,
		    JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
		    JDIMENSION out_rows_avail)
{
 800e444:	b590      	push	{r4, r7, lr}
 800e446:	b08b      	sub	sp, #44	; 0x2c
 800e448:	af02      	add	r7, sp, #8
 800e44a:	60f8      	str	r0, [r7, #12]
 800e44c:	60b9      	str	r1, [r7, #8]
 800e44e:	607a      	str	r2, [r7, #4]
 800e450:	603b      	str	r3, [r7, #0]
  my_post_ptr post = (my_post_ptr) cinfo->post;
 800e452:	68fb      	ldr	r3, [r7, #12]
 800e454:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800e458:	61bb      	str	r3, [r7, #24]
  JDIMENSION num_rows, max_rows;

  /* Reposition virtual buffer if at start of strip. */
  if (post->next_row == 0) {
 800e45a:	69bb      	ldr	r3, [r7, #24]
 800e45c:	699b      	ldr	r3, [r3, #24]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d10f      	bne.n	800e482 <post_process_2pass+0x3e>
    post->buffer = (*cinfo->mem->access_virt_sarray)
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	685b      	ldr	r3, [r3, #4]
 800e466:	69dc      	ldr	r4, [r3, #28]
 800e468:	69bb      	ldr	r3, [r7, #24]
 800e46a:	6899      	ldr	r1, [r3, #8]
 800e46c:	69bb      	ldr	r3, [r7, #24]
 800e46e:	695a      	ldr	r2, [r3, #20]
 800e470:	69bb      	ldr	r3, [r7, #24]
 800e472:	691b      	ldr	r3, [r3, #16]
 800e474:	2000      	movs	r0, #0
 800e476:	9000      	str	r0, [sp, #0]
 800e478:	68f8      	ldr	r0, [r7, #12]
 800e47a:	47a0      	blx	r4
 800e47c:	4602      	mov	r2, r0
 800e47e:	69bb      	ldr	r3, [r7, #24]
 800e480:	60da      	str	r2, [r3, #12]
	((j_common_ptr) cinfo, post->whole_image,
	 post->starting_row, post->strip_height, FALSE);
  }

  /* Determine number of rows to emit. */
  num_rows = post->strip_height - post->next_row; /* available in strip */
 800e482:	69bb      	ldr	r3, [r7, #24]
 800e484:	691a      	ldr	r2, [r3, #16]
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	699b      	ldr	r3, [r3, #24]
 800e48a:	1ad3      	subs	r3, r2, r3
 800e48c:	61fb      	str	r3, [r7, #28]
  max_rows = out_rows_avail - *out_row_ctr; /* available in output area */
 800e48e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e490:	681b      	ldr	r3, [r3, #0]
 800e492:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e494:	1ad3      	subs	r3, r2, r3
 800e496:	617b      	str	r3, [r7, #20]
  if (num_rows > max_rows)
 800e498:	69fa      	ldr	r2, [r7, #28]
 800e49a:	697b      	ldr	r3, [r7, #20]
 800e49c:	429a      	cmp	r2, r3
 800e49e:	d901      	bls.n	800e4a4 <post_process_2pass+0x60>
    num_rows = max_rows;
 800e4a0:	697b      	ldr	r3, [r7, #20]
 800e4a2:	61fb      	str	r3, [r7, #28]
  /* We have to check bottom of image here, can't depend on upsampler. */
  max_rows = cinfo->output_height - post->starting_row;
 800e4a4:	68fb      	ldr	r3, [r7, #12]
 800e4a6:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e4a8:	69bb      	ldr	r3, [r7, #24]
 800e4aa:	695b      	ldr	r3, [r3, #20]
 800e4ac:	1ad3      	subs	r3, r2, r3
 800e4ae:	617b      	str	r3, [r7, #20]
  if (num_rows > max_rows)
 800e4b0:	69fa      	ldr	r2, [r7, #28]
 800e4b2:	697b      	ldr	r3, [r7, #20]
 800e4b4:	429a      	cmp	r2, r3
 800e4b6:	d901      	bls.n	800e4bc <post_process_2pass+0x78>
    num_rows = max_rows;
 800e4b8:	697b      	ldr	r3, [r7, #20]
 800e4ba:	61fb      	str	r3, [r7, #28]

  /* Quantize and emit data. */
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e4bc:	68fb      	ldr	r3, [r7, #12]
 800e4be:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 800e4c2:	685c      	ldr	r4, [r3, #4]
		post->buffer + post->next_row, output_buf + *out_row_ctr,
 800e4c4:	69bb      	ldr	r3, [r7, #24]
 800e4c6:	68da      	ldr	r2, [r3, #12]
 800e4c8:	69bb      	ldr	r3, [r7, #24]
 800e4ca:	699b      	ldr	r3, [r3, #24]
 800e4cc:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e4ce:	18d1      	adds	r1, r2, r3
		post->buffer + post->next_row, output_buf + *out_row_ctr,
 800e4d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	009b      	lsls	r3, r3, #2
  (*cinfo->cquantize->color_quantize) (cinfo,
 800e4d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e4d8:	441a      	add	r2, r3
 800e4da:	69fb      	ldr	r3, [r7, #28]
 800e4dc:	68f8      	ldr	r0, [r7, #12]
 800e4de:	47a0      	blx	r4
		(int) num_rows);
  *out_row_ctr += num_rows;
 800e4e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4e2:	681a      	ldr	r2, [r3, #0]
 800e4e4:	69fb      	ldr	r3, [r7, #28]
 800e4e6:	441a      	add	r2, r3
 800e4e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e4ea:	601a      	str	r2, [r3, #0]

  /* Advance if we filled the strip. */
  post->next_row += num_rows;
 800e4ec:	69bb      	ldr	r3, [r7, #24]
 800e4ee:	699a      	ldr	r2, [r3, #24]
 800e4f0:	69fb      	ldr	r3, [r7, #28]
 800e4f2:	441a      	add	r2, r3
 800e4f4:	69bb      	ldr	r3, [r7, #24]
 800e4f6:	619a      	str	r2, [r3, #24]
  if (post->next_row >= post->strip_height) {
 800e4f8:	69bb      	ldr	r3, [r7, #24]
 800e4fa:	699a      	ldr	r2, [r3, #24]
 800e4fc:	69bb      	ldr	r3, [r7, #24]
 800e4fe:	691b      	ldr	r3, [r3, #16]
 800e500:	429a      	cmp	r2, r3
 800e502:	d309      	bcc.n	800e518 <post_process_2pass+0xd4>
    post->starting_row += post->strip_height;
 800e504:	69bb      	ldr	r3, [r7, #24]
 800e506:	695a      	ldr	r2, [r3, #20]
 800e508:	69bb      	ldr	r3, [r7, #24]
 800e50a:	691b      	ldr	r3, [r3, #16]
 800e50c:	441a      	add	r2, r3
 800e50e:	69bb      	ldr	r3, [r7, #24]
 800e510:	615a      	str	r2, [r3, #20]
    post->next_row = 0;
 800e512:	69bb      	ldr	r3, [r7, #24]
 800e514:	2200      	movs	r2, #0
 800e516:	619a      	str	r2, [r3, #24]
  }
}
 800e518:	bf00      	nop
 800e51a:	3724      	adds	r7, #36	; 0x24
 800e51c:	46bd      	mov	sp, r7
 800e51e:	bd90      	pop	{r4, r7, pc}

0800e520 <jinit_d_post_controller>:
 * Initialize postprocessing controller.
 */

GLOBAL(void)
jinit_d_post_controller (j_decompress_ptr cinfo, boolean need_full_buffer)
{
 800e520:	b5b0      	push	{r4, r5, r7, lr}
 800e522:	b086      	sub	sp, #24
 800e524:	af02      	add	r7, sp, #8
 800e526:	6078      	str	r0, [r7, #4]
 800e528:	6039      	str	r1, [r7, #0]
  my_post_ptr post;

  post = (my_post_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e52a:	687b      	ldr	r3, [r7, #4]
 800e52c:	685b      	ldr	r3, [r3, #4]
 800e52e:	681b      	ldr	r3, [r3, #0]
 800e530:	221c      	movs	r2, #28
 800e532:	2101      	movs	r1, #1
 800e534:	6878      	ldr	r0, [r7, #4]
 800e536:	4798      	blx	r3
 800e538:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_post_controller));
  cinfo->post = (struct jpeg_d_post_controller *) post;
 800e53a:	687b      	ldr	r3, [r7, #4]
 800e53c:	68fa      	ldr	r2, [r7, #12]
 800e53e:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
  post->pub.start_pass = start_pass_dpost;
 800e542:	68fb      	ldr	r3, [r7, #12]
 800e544:	4a25      	ldr	r2, [pc, #148]	; (800e5dc <jinit_d_post_controller+0xbc>)
 800e546:	601a      	str	r2, [r3, #0]
  post->whole_image = NULL;	/* flag for no virtual arrays */
 800e548:	68fb      	ldr	r3, [r7, #12]
 800e54a:	2200      	movs	r2, #0
 800e54c:	609a      	str	r2, [r3, #8]
  post->buffer = NULL;		/* flag for no strip buffer */
 800e54e:	68fb      	ldr	r3, [r7, #12]
 800e550:	2200      	movs	r2, #0
 800e552:	60da      	str	r2, [r3, #12]

  /* Create the quantization buffer, if needed */
  if (cinfo->quantize_colors) {
 800e554:	687b      	ldr	r3, [r7, #4]
 800e556:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e558:	2b00      	cmp	r3, #0
 800e55a:	d03a      	beq.n	800e5d2 <jinit_d_post_controller+0xb2>
    /* The buffer strip height is max_v_samp_factor, which is typically
     * an efficient number of rows for upsampling to return.
     * (In the presence of output rescaling, we might want to be smarter?)
     */
    post->strip_height = (JDIMENSION) cinfo->max_v_samp_factor;
 800e55c:	687b      	ldr	r3, [r7, #4]
 800e55e:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e562:	461a      	mov	r2, r3
 800e564:	68fb      	ldr	r3, [r7, #12]
 800e566:	611a      	str	r2, [r3, #16]
    if (need_full_buffer) {
 800e568:	683b      	ldr	r3, [r7, #0]
 800e56a:	2b00      	cmp	r3, #0
 800e56c:	d020      	beq.n	800e5b0 <jinit_d_post_controller+0x90>
      /* Two-pass color quantization: need full-image storage. */
      /* We round up the number of rows to a multiple of the strip height. */
#ifdef QUANT_2PASS_SUPPORTED
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e56e:	687b      	ldr	r3, [r7, #4]
 800e570:	685b      	ldr	r3, [r3, #4]
 800e572:	691c      	ldr	r4, [r3, #16]
	((j_common_ptr) cinfo, JPOOL_IMAGE, FALSE,
	 cinfo->output_width * cinfo->out_color_components,
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e578:	687a      	ldr	r2, [r7, #4]
 800e57a:	6f92      	ldr	r2, [r2, #120]	; 0x78
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e57c:	fb02 f503 	mul.w	r5, r2, r3
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e584:	461a      	mov	r2, r3
				(long) post->strip_height),
 800e586:	68fb      	ldr	r3, [r7, #12]
 800e588:	691b      	ldr	r3, [r3, #16]
	 (JDIMENSION) jround_up((long) cinfo->output_height,
 800e58a:	4619      	mov	r1, r3
 800e58c:	4610      	mov	r0, r2
 800e58e:	f010 fe85 	bl	801f29c <jround_up>
 800e592:	4603      	mov	r3, r0
      post->whole_image = (*cinfo->mem->request_virt_sarray)
 800e594:	461a      	mov	r2, r3
 800e596:	68fb      	ldr	r3, [r7, #12]
 800e598:	691b      	ldr	r3, [r3, #16]
 800e59a:	9301      	str	r3, [sp, #4]
 800e59c:	9200      	str	r2, [sp, #0]
 800e59e:	462b      	mov	r3, r5
 800e5a0:	2200      	movs	r2, #0
 800e5a2:	2101      	movs	r1, #1
 800e5a4:	6878      	ldr	r0, [r7, #4]
 800e5a6:	47a0      	blx	r4
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	609a      	str	r2, [r3, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 cinfo->output_width * cinfo->out_color_components,
	 post->strip_height);
    }
  }
}
 800e5ae:	e010      	b.n	800e5d2 <jinit_d_post_controller+0xb2>
      post->buffer = (*cinfo->mem->alloc_sarray)
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	685b      	ldr	r3, [r3, #4]
 800e5b4:	689c      	ldr	r4, [r3, #8]
	 cinfo->output_width * cinfo->out_color_components,
 800e5b6:	687b      	ldr	r3, [r7, #4]
 800e5b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5ba:	687a      	ldr	r2, [r7, #4]
 800e5bc:	6f92      	ldr	r2, [r2, #120]	; 0x78
      post->buffer = (*cinfo->mem->alloc_sarray)
 800e5be:	fb02 f203 	mul.w	r2, r2, r3
 800e5c2:	68fb      	ldr	r3, [r7, #12]
 800e5c4:	691b      	ldr	r3, [r3, #16]
 800e5c6:	2101      	movs	r1, #1
 800e5c8:	6878      	ldr	r0, [r7, #4]
 800e5ca:	47a0      	blx	r4
 800e5cc:	4602      	mov	r2, r0
 800e5ce:	68fb      	ldr	r3, [r7, #12]
 800e5d0:	60da      	str	r2, [r3, #12]
}
 800e5d2:	bf00      	nop
 800e5d4:	3710      	adds	r7, #16
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	bdb0      	pop	{r4, r5, r7, pc}
 800e5da:	bf00      	nop
 800e5dc:	0800e20d 	.word	0x0800e20d

0800e5e0 <start_pass_upsample>:
 * Initialize for an upsampling pass.
 */

METHODDEF(void)
start_pass_upsample (j_decompress_ptr cinfo)
{
 800e5e0:	b480      	push	{r7}
 800e5e2:	b085      	sub	sp, #20
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e5e8:	687b      	ldr	r3, [r7, #4]
 800e5ea:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800e5ee:	60fb      	str	r3, [r7, #12]

  /* Mark the conversion buffer empty */
  upsample->next_row_out = cinfo->max_v_samp_factor;
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e5f6:	68fb      	ldr	r3, [r7, #12]
 800e5f8:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Initialize total-height counter for detecting bottom of image */
  upsample->rows_to_go = cinfo->output_height;
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	6f5a      	ldr	r2, [r3, #116]	; 0x74
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	661a      	str	r2, [r3, #96]	; 0x60
}
 800e602:	bf00      	nop
 800e604:	3714      	adds	r7, #20
 800e606:	46bd      	mov	sp, r7
 800e608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e60c:	4770      	bx	lr

0800e60e <sep_upsample>:
sep_upsample (j_decompress_ptr cinfo,
	      JSAMPIMAGE input_buf, JDIMENSION *in_row_group_ctr,
	      JDIMENSION in_row_groups_avail,
	      JSAMPARRAY output_buf, JDIMENSION *out_row_ctr,
	      JDIMENSION out_rows_avail)
{
 800e60e:	b590      	push	{r4, r7, lr}
 800e610:	b08b      	sub	sp, #44	; 0x2c
 800e612:	af02      	add	r7, sp, #8
 800e614:	60f8      	str	r0, [r7, #12]
 800e616:	60b9      	str	r1, [r7, #8]
 800e618:	607a      	str	r2, [r7, #4]
 800e61a:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800e622:	613b      	str	r3, [r7, #16]
  int ci;
  jpeg_component_info * compptr;
  JDIMENSION num_rows;

  /* Fill the conversion buffer, if it's empty */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor) {
 800e624:	693b      	ldr	r3, [r7, #16]
 800e626:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e628:	68fb      	ldr	r3, [r7, #12]
 800e62a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e62e:	429a      	cmp	r2, r3
 800e630:	db35      	blt.n	800e69e <sep_upsample+0x90>
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e632:	2300      	movs	r3, #0
 800e634:	61fb      	str	r3, [r7, #28]
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e63c:	61bb      	str	r3, [r7, #24]
 800e63e:	e026      	b.n	800e68e <sep_upsample+0x80>
	 ci++, compptr++) {
      /* Invoke per-component upsample method.  Notice we pass a POINTER
       * to color_buf[ci], so that fullsize_upsample can change it.
       */
      (*upsample->methods[ci]) (cinfo, compptr,
 800e640:	693a      	ldr	r2, [r7, #16]
 800e642:	69fb      	ldr	r3, [r7, #28]
 800e644:	330c      	adds	r3, #12
 800e646:	009b      	lsls	r3, r3, #2
 800e648:	4413      	add	r3, r2
 800e64a:	685c      	ldr	r4, [r3, #4]
	input_buf[ci] + (*in_row_group_ctr * upsample->rowgroup_height[ci]),
 800e64c:	69fb      	ldr	r3, [r7, #28]
 800e64e:	009b      	lsls	r3, r3, #2
 800e650:	68ba      	ldr	r2, [r7, #8]
 800e652:	4413      	add	r3, r2
 800e654:	681a      	ldr	r2, [r3, #0]
 800e656:	687b      	ldr	r3, [r7, #4]
 800e658:	6819      	ldr	r1, [r3, #0]
 800e65a:	6938      	ldr	r0, [r7, #16]
 800e65c:	69fb      	ldr	r3, [r7, #28]
 800e65e:	3318      	adds	r3, #24
 800e660:	009b      	lsls	r3, r3, #2
 800e662:	4403      	add	r3, r0
 800e664:	685b      	ldr	r3, [r3, #4]
 800e666:	fb03 f301 	mul.w	r3, r3, r1
 800e66a:	009b      	lsls	r3, r3, #2
      (*upsample->methods[ci]) (cinfo, compptr,
 800e66c:	18d1      	adds	r1, r2, r3
	upsample->color_buf + ci);
 800e66e:	693b      	ldr	r3, [r7, #16]
 800e670:	f103 020c 	add.w	r2, r3, #12
 800e674:	69fb      	ldr	r3, [r7, #28]
 800e676:	009b      	lsls	r3, r3, #2
      (*upsample->methods[ci]) (cinfo, compptr,
 800e678:	4413      	add	r3, r2
 800e67a:	460a      	mov	r2, r1
 800e67c:	69b9      	ldr	r1, [r7, #24]
 800e67e:	68f8      	ldr	r0, [r7, #12]
 800e680:	47a0      	blx	r4
	 ci++, compptr++) {
 800e682:	69fb      	ldr	r3, [r7, #28]
 800e684:	3301      	adds	r3, #1
 800e686:	61fb      	str	r3, [r7, #28]
 800e688:	69bb      	ldr	r3, [r7, #24]
 800e68a:	3358      	adds	r3, #88	; 0x58
 800e68c:	61bb      	str	r3, [r7, #24]
    for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e68e:	68fb      	ldr	r3, [r7, #12]
 800e690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e692:	69fa      	ldr	r2, [r7, #28]
 800e694:	429a      	cmp	r2, r3
 800e696:	dbd3      	blt.n	800e640 <sep_upsample+0x32>
    }
    upsample->next_row_out = 0;
 800e698:	693b      	ldr	r3, [r7, #16]
 800e69a:	2200      	movs	r2, #0
 800e69c:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Color-convert and emit rows */

  /* How many we have in the buffer: */
  num_rows = (JDIMENSION) (cinfo->max_v_samp_factor - upsample->next_row_out);
 800e69e:	68fb      	ldr	r3, [r7, #12]
 800e6a0:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
 800e6a4:	693b      	ldr	r3, [r7, #16]
 800e6a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6a8:	1ad3      	subs	r3, r2, r3
 800e6aa:	617b      	str	r3, [r7, #20]
  /* Not more than the distance to the end of the image.  Need this test
   * in case the image height is not a multiple of max_v_samp_factor:
   */
  if (num_rows > upsample->rows_to_go) 
 800e6ac:	693b      	ldr	r3, [r7, #16]
 800e6ae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6b0:	697a      	ldr	r2, [r7, #20]
 800e6b2:	429a      	cmp	r2, r3
 800e6b4:	d902      	bls.n	800e6bc <sep_upsample+0xae>
    num_rows = upsample->rows_to_go;
 800e6b6:	693b      	ldr	r3, [r7, #16]
 800e6b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e6ba:	617b      	str	r3, [r7, #20]
  /* And not more than what the client can accept: */
  out_rows_avail -= *out_row_ctr;
 800e6bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6be:	681b      	ldr	r3, [r3, #0]
 800e6c0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800e6c2:	1ad3      	subs	r3, r2, r3
 800e6c4:	63bb      	str	r3, [r7, #56]	; 0x38
  if (num_rows > out_rows_avail)
 800e6c6:	697a      	ldr	r2, [r7, #20]
 800e6c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6ca:	429a      	cmp	r2, r3
 800e6cc:	d901      	bls.n	800e6d2 <sep_upsample+0xc4>
    num_rows = out_rows_avail;
 800e6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e6d0:	617b      	str	r3, [r7, #20]

  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800e6d2:	68fb      	ldr	r3, [r7, #12]
 800e6d4:	f8d3 31dc 	ldr.w	r3, [r3, #476]	; 0x1dc
 800e6d8:	685c      	ldr	r4, [r3, #4]
 800e6da:	693b      	ldr	r3, [r7, #16]
 800e6dc:	f103 010c 	add.w	r1, r3, #12
				     (JDIMENSION) upsample->next_row_out,
 800e6e0:	693b      	ldr	r3, [r7, #16]
 800e6e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800e6e4:	4618      	mov	r0, r3
				     output_buf + *out_row_ctr,
 800e6e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	009b      	lsls	r3, r3, #2
  (*cinfo->cconvert->color_convert) (cinfo, upsample->color_buf,
 800e6ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e6ee:	441a      	add	r2, r3
 800e6f0:	697b      	ldr	r3, [r7, #20]
 800e6f2:	9300      	str	r3, [sp, #0]
 800e6f4:	4613      	mov	r3, r2
 800e6f6:	4602      	mov	r2, r0
 800e6f8:	68f8      	ldr	r0, [r7, #12]
 800e6fa:	47a0      	blx	r4
				     (int) num_rows);

  /* Adjust counts */
  *out_row_ctr += num_rows;
 800e6fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e6fe:	681a      	ldr	r2, [r3, #0]
 800e700:	697b      	ldr	r3, [r7, #20]
 800e702:	441a      	add	r2, r3
 800e704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e706:	601a      	str	r2, [r3, #0]
  upsample->rows_to_go -= num_rows;
 800e708:	693b      	ldr	r3, [r7, #16]
 800e70a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800e70c:	697b      	ldr	r3, [r7, #20]
 800e70e:	1ad2      	subs	r2, r2, r3
 800e710:	693b      	ldr	r3, [r7, #16]
 800e712:	661a      	str	r2, [r3, #96]	; 0x60
  upsample->next_row_out += num_rows;
 800e714:	693b      	ldr	r3, [r7, #16]
 800e716:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e718:	461a      	mov	r2, r3
 800e71a:	697b      	ldr	r3, [r7, #20]
 800e71c:	4413      	add	r3, r2
 800e71e:	461a      	mov	r2, r3
 800e720:	693b      	ldr	r3, [r7, #16]
 800e722:	65da      	str	r2, [r3, #92]	; 0x5c
  /* When the buffer is emptied, declare this input row group consumed */
  if (upsample->next_row_out >= cinfo->max_v_samp_factor)
 800e724:	693b      	ldr	r3, [r7, #16]
 800e726:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800e728:	68fb      	ldr	r3, [r7, #12]
 800e72a:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e72e:	429a      	cmp	r2, r3
 800e730:	db04      	blt.n	800e73c <sep_upsample+0x12e>
    (*in_row_group_ctr)++;
 800e732:	687b      	ldr	r3, [r7, #4]
 800e734:	681b      	ldr	r3, [r3, #0]
 800e736:	1c5a      	adds	r2, r3, #1
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	601a      	str	r2, [r3, #0]
}
 800e73c:	bf00      	nop
 800e73e:	3724      	adds	r7, #36	; 0x24
 800e740:	46bd      	mov	sp, r7
 800e742:	bd90      	pop	{r4, r7, pc}

0800e744 <fullsize_upsample>:
 */

METHODDEF(void)
fullsize_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		   JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e744:	b480      	push	{r7}
 800e746:	b085      	sub	sp, #20
 800e748:	af00      	add	r7, sp, #0
 800e74a:	60f8      	str	r0, [r7, #12]
 800e74c:	60b9      	str	r1, [r7, #8]
 800e74e:	607a      	str	r2, [r7, #4]
 800e750:	603b      	str	r3, [r7, #0]
  *output_data_ptr = input_data;
 800e752:	683b      	ldr	r3, [r7, #0]
 800e754:	687a      	ldr	r2, [r7, #4]
 800e756:	601a      	str	r2, [r3, #0]
}
 800e758:	bf00      	nop
 800e75a:	3714      	adds	r7, #20
 800e75c:	46bd      	mov	sp, r7
 800e75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e762:	4770      	bx	lr

0800e764 <noop_upsample>:
 */

METHODDEF(void)
noop_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e764:	b480      	push	{r7}
 800e766:	b085      	sub	sp, #20
 800e768:	af00      	add	r7, sp, #0
 800e76a:	60f8      	str	r0, [r7, #12]
 800e76c:	60b9      	str	r1, [r7, #8]
 800e76e:	607a      	str	r2, [r7, #4]
 800e770:	603b      	str	r3, [r7, #0]
  *output_data_ptr = NULL;	/* safety check */
 800e772:	683b      	ldr	r3, [r7, #0]
 800e774:	2200      	movs	r2, #0
 800e776:	601a      	str	r2, [r3, #0]
}
 800e778:	bf00      	nop
 800e77a:	3714      	adds	r7, #20
 800e77c:	46bd      	mov	sp, r7
 800e77e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e782:	4770      	bx	lr

0800e784 <int_upsample>:
 */

METHODDEF(void)
int_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	      JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e784:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e788:	b08e      	sub	sp, #56	; 0x38
 800e78a:	af02      	add	r7, sp, #8
 800e78c:	60f8      	str	r0, [r7, #12]
 800e78e:	60b9      	str	r1, [r7, #8]
 800e790:	607a      	str	r2, [r7, #4]
 800e792:	603b      	str	r3, [r7, #0]
  my_upsample_ptr upsample = (my_upsample_ptr) cinfo->upsample;
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	f8d3 31d8 	ldr.w	r3, [r3, #472]	; 0x1d8
 800e79a:	627b      	str	r3, [r7, #36]	; 0x24
  JSAMPARRAY output_data = *output_data_ptr;
 800e79c:	683b      	ldr	r3, [r7, #0]
 800e79e:	681b      	ldr	r3, [r3, #0]
 800e7a0:	623b      	str	r3, [r7, #32]
  register int h;
  JSAMPROW outend;
  int h_expand, v_expand;
  int inrow, outrow;

  h_expand = upsample->h_expand[compptr->component_index];
 800e7a2:	68bb      	ldr	r3, [r7, #8]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7a8:	4413      	add	r3, r2
 800e7aa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800e7ae:	61fb      	str	r3, [r7, #28]
  v_expand = upsample->v_expand[compptr->component_index];
 800e7b0:	68bb      	ldr	r3, [r7, #8]
 800e7b2:	685b      	ldr	r3, [r3, #4]
 800e7b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e7b6:	4413      	add	r3, r2
 800e7b8:	f893 3096 	ldrb.w	r3, [r3, #150]	; 0x96
 800e7bc:	61bb      	str	r3, [r7, #24]

  inrow = outrow = 0;
 800e7be:	2300      	movs	r3, #0
 800e7c0:	62bb      	str	r3, [r7, #40]	; 0x28
 800e7c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (outrow < cinfo->max_v_samp_factor) {
 800e7c6:	e036      	b.n	800e836 <int_upsample+0xb2>
    /* Generate one output row with proper horizontal expansion */
    inptr = input_data[inrow];
 800e7c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ca:	009b      	lsls	r3, r3, #2
 800e7cc:	687a      	ldr	r2, [r7, #4]
 800e7ce:	4413      	add	r3, r2
 800e7d0:	681e      	ldr	r6, [r3, #0]
    outptr = output_data[outrow];
 800e7d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7d4:	009b      	lsls	r3, r3, #2
 800e7d6:	6a3a      	ldr	r2, [r7, #32]
 800e7d8:	4413      	add	r3, r2
 800e7da:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 800e7dc:	68fb      	ldr	r3, [r7, #12]
 800e7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e7e0:	4423      	add	r3, r4
 800e7e2:	617b      	str	r3, [r7, #20]
    while (outptr < outend) {
 800e7e4:	e00c      	b.n	800e800 <int_upsample+0x7c>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800e7e6:	4633      	mov	r3, r6
 800e7e8:	1c5e      	adds	r6, r3, #1
 800e7ea:	f893 8000 	ldrb.w	r8, [r3]
      for (h = h_expand; h > 0; h--) {
 800e7ee:	69fd      	ldr	r5, [r7, #28]
 800e7f0:	e004      	b.n	800e7fc <int_upsample+0x78>
	*outptr++ = invalue;
 800e7f2:	4623      	mov	r3, r4
 800e7f4:	1c5c      	adds	r4, r3, #1
 800e7f6:	4642      	mov	r2, r8
 800e7f8:	701a      	strb	r2, [r3, #0]
      for (h = h_expand; h > 0; h--) {
 800e7fa:	3d01      	subs	r5, #1
 800e7fc:	2d00      	cmp	r5, #0
 800e7fe:	dcf8      	bgt.n	800e7f2 <int_upsample+0x6e>
    while (outptr < outend) {
 800e800:	697b      	ldr	r3, [r7, #20]
 800e802:	429c      	cmp	r4, r3
 800e804:	d3ef      	bcc.n	800e7e6 <int_upsample+0x62>
      }
    }
    /* Generate any additional output rows by duplicating the first one */
    if (v_expand > 1) {
 800e806:	69bb      	ldr	r3, [r7, #24]
 800e808:	2b01      	cmp	r3, #1
 800e80a:	dd0d      	ble.n	800e828 <int_upsample+0xa4>
      jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e80c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e80e:	1c59      	adds	r1, r3, #1
 800e810:	69bb      	ldr	r3, [r7, #24]
 800e812:	3b01      	subs	r3, #1
 800e814:	68fa      	ldr	r2, [r7, #12]
 800e816:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800e818:	9201      	str	r2, [sp, #4]
 800e81a:	9300      	str	r3, [sp, #0]
 800e81c:	460b      	mov	r3, r1
 800e81e:	6a3a      	ldr	r2, [r7, #32]
 800e820:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e822:	6a38      	ldr	r0, [r7, #32]
 800e824:	f010 fd54 	bl	801f2d0 <jcopy_sample_rows>
			v_expand-1, cinfo->output_width);
    }
    inrow++;
 800e828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e82a:	3301      	adds	r3, #1
 800e82c:	62fb      	str	r3, [r7, #44]	; 0x2c
    outrow += v_expand;
 800e82e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e830:	69bb      	ldr	r3, [r7, #24]
 800e832:	4413      	add	r3, r2
 800e834:	62bb      	str	r3, [r7, #40]	; 0x28
  while (outrow < cinfo->max_v_samp_factor) {
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e83c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e83e:	429a      	cmp	r2, r3
 800e840:	dbc2      	blt.n	800e7c8 <int_upsample+0x44>
  }
}
 800e842:	bf00      	nop
 800e844:	bf00      	nop
 800e846:	3730      	adds	r7, #48	; 0x30
 800e848:	46bd      	mov	sp, r7
 800e84a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e84e <h2v1_upsample>:
 */

METHODDEF(void)
h2v1_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e84e:	b4f0      	push	{r4, r5, r6, r7}
 800e850:	b088      	sub	sp, #32
 800e852:	af00      	add	r7, sp, #0
 800e854:	60f8      	str	r0, [r7, #12]
 800e856:	60b9      	str	r1, [r7, #8]
 800e858:	607a      	str	r2, [r7, #4]
 800e85a:	603b      	str	r3, [r7, #0]
  JSAMPARRAY output_data = *output_data_ptr;
 800e85c:	683b      	ldr	r3, [r7, #0]
 800e85e:	681b      	ldr	r3, [r3, #0]
 800e860:	61bb      	str	r3, [r7, #24]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int outrow;

  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800e862:	2300      	movs	r3, #0
 800e864:	61fb      	str	r3, [r7, #28]
 800e866:	e01f      	b.n	800e8a8 <h2v1_upsample+0x5a>
    inptr = input_data[outrow];
 800e868:	69fb      	ldr	r3, [r7, #28]
 800e86a:	009b      	lsls	r3, r3, #2
 800e86c:	687a      	ldr	r2, [r7, #4]
 800e86e:	4413      	add	r3, r2
 800e870:	681d      	ldr	r5, [r3, #0]
    outptr = output_data[outrow];
 800e872:	69fb      	ldr	r3, [r7, #28]
 800e874:	009b      	lsls	r3, r3, #2
 800e876:	69ba      	ldr	r2, [r7, #24]
 800e878:	4413      	add	r3, r2
 800e87a:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e880:	4423      	add	r3, r4
 800e882:	617b      	str	r3, [r7, #20]
    while (outptr < outend) {
 800e884:	e00a      	b.n	800e89c <h2v1_upsample+0x4e>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800e886:	462b      	mov	r3, r5
 800e888:	1c5d      	adds	r5, r3, #1
 800e88a:	781e      	ldrb	r6, [r3, #0]
      *outptr++ = invalue;
 800e88c:	4623      	mov	r3, r4
 800e88e:	1c5c      	adds	r4, r3, #1
 800e890:	4632      	mov	r2, r6
 800e892:	701a      	strb	r2, [r3, #0]
      *outptr++ = invalue;
 800e894:	4623      	mov	r3, r4
 800e896:	1c5c      	adds	r4, r3, #1
 800e898:	4632      	mov	r2, r6
 800e89a:	701a      	strb	r2, [r3, #0]
    while (outptr < outend) {
 800e89c:	697b      	ldr	r3, [r7, #20]
 800e89e:	429c      	cmp	r4, r3
 800e8a0:	d3f1      	bcc.n	800e886 <h2v1_upsample+0x38>
  for (outrow = 0; outrow < cinfo->max_v_samp_factor; outrow++) {
 800e8a2:	69fb      	ldr	r3, [r7, #28]
 800e8a4:	3301      	adds	r3, #1
 800e8a6:	61fb      	str	r3, [r7, #28]
 800e8a8:	68fb      	ldr	r3, [r7, #12]
 800e8aa:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e8ae:	69fa      	ldr	r2, [r7, #28]
 800e8b0:	429a      	cmp	r2, r3
 800e8b2:	dbd9      	blt.n	800e868 <h2v1_upsample+0x1a>
    }
  }
}
 800e8b4:	bf00      	nop
 800e8b6:	bf00      	nop
 800e8b8:	3720      	adds	r7, #32
 800e8ba:	46bd      	mov	sp, r7
 800e8bc:	bcf0      	pop	{r4, r5, r6, r7}
 800e8be:	4770      	bx	lr

0800e8c0 <h2v2_upsample>:
 */

METHODDEF(void)
h2v2_upsample (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JSAMPARRAY input_data, JSAMPARRAY * output_data_ptr)
{
 800e8c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e8c2:	b08b      	sub	sp, #44	; 0x2c
 800e8c4:	af02      	add	r7, sp, #8
 800e8c6:	60f8      	str	r0, [r7, #12]
 800e8c8:	60b9      	str	r1, [r7, #8]
 800e8ca:	607a      	str	r2, [r7, #4]
 800e8cc:	603b      	str	r3, [r7, #0]
  JSAMPARRAY output_data = *output_data_ptr;
 800e8ce:	683b      	ldr	r3, [r7, #0]
 800e8d0:	681b      	ldr	r3, [r3, #0]
 800e8d2:	617b      	str	r3, [r7, #20]
  register JSAMPROW inptr, outptr;
  register JSAMPLE invalue;
  JSAMPROW outend;
  int inrow, outrow;

  inrow = outrow = 0;
 800e8d4:	2300      	movs	r3, #0
 800e8d6:	61bb      	str	r3, [r7, #24]
 800e8d8:	69bb      	ldr	r3, [r7, #24]
 800e8da:	61fb      	str	r3, [r7, #28]
  while (outrow < cinfo->max_v_samp_factor) {
 800e8dc:	e02f      	b.n	800e93e <h2v2_upsample+0x7e>
    inptr = input_data[inrow];
 800e8de:	69fb      	ldr	r3, [r7, #28]
 800e8e0:	009b      	lsls	r3, r3, #2
 800e8e2:	687a      	ldr	r2, [r7, #4]
 800e8e4:	4413      	add	r3, r2
 800e8e6:	681d      	ldr	r5, [r3, #0]
    outptr = output_data[outrow];
 800e8e8:	69bb      	ldr	r3, [r7, #24]
 800e8ea:	009b      	lsls	r3, r3, #2
 800e8ec:	697a      	ldr	r2, [r7, #20]
 800e8ee:	4413      	add	r3, r2
 800e8f0:	681c      	ldr	r4, [r3, #0]
    outend = outptr + cinfo->output_width;
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e8f6:	4423      	add	r3, r4
 800e8f8:	613b      	str	r3, [r7, #16]
    while (outptr < outend) {
 800e8fa:	e00a      	b.n	800e912 <h2v2_upsample+0x52>
      invalue = *inptr++;	/* don't need GETJSAMPLE() here */
 800e8fc:	462b      	mov	r3, r5
 800e8fe:	1c5d      	adds	r5, r3, #1
 800e900:	781e      	ldrb	r6, [r3, #0]
      *outptr++ = invalue;
 800e902:	4623      	mov	r3, r4
 800e904:	1c5c      	adds	r4, r3, #1
 800e906:	4632      	mov	r2, r6
 800e908:	701a      	strb	r2, [r3, #0]
      *outptr++ = invalue;
 800e90a:	4623      	mov	r3, r4
 800e90c:	1c5c      	adds	r4, r3, #1
 800e90e:	4632      	mov	r2, r6
 800e910:	701a      	strb	r2, [r3, #0]
    while (outptr < outend) {
 800e912:	693b      	ldr	r3, [r7, #16]
 800e914:	429c      	cmp	r4, r3
 800e916:	d3f1      	bcc.n	800e8fc <h2v2_upsample+0x3c>
    }
    jcopy_sample_rows(output_data, outrow, output_data, outrow+1,
 800e918:	69bb      	ldr	r3, [r7, #24]
 800e91a:	1c5a      	adds	r2, r3, #1
 800e91c:	68fb      	ldr	r3, [r7, #12]
 800e91e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e920:	9301      	str	r3, [sp, #4]
 800e922:	2301      	movs	r3, #1
 800e924:	9300      	str	r3, [sp, #0]
 800e926:	4613      	mov	r3, r2
 800e928:	697a      	ldr	r2, [r7, #20]
 800e92a:	69b9      	ldr	r1, [r7, #24]
 800e92c:	6978      	ldr	r0, [r7, #20]
 800e92e:	f010 fccf 	bl	801f2d0 <jcopy_sample_rows>
		      1, cinfo->output_width);
    inrow++;
 800e932:	69fb      	ldr	r3, [r7, #28]
 800e934:	3301      	adds	r3, #1
 800e936:	61fb      	str	r3, [r7, #28]
    outrow += 2;
 800e938:	69bb      	ldr	r3, [r7, #24]
 800e93a:	3302      	adds	r3, #2
 800e93c:	61bb      	str	r3, [r7, #24]
  while (outrow < cinfo->max_v_samp_factor) {
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e944:	69ba      	ldr	r2, [r7, #24]
 800e946:	429a      	cmp	r2, r3
 800e948:	dbc9      	blt.n	800e8de <h2v2_upsample+0x1e>
  }
}
 800e94a:	bf00      	nop
 800e94c:	bf00      	nop
 800e94e:	3724      	adds	r7, #36	; 0x24
 800e950:	46bd      	mov	sp, r7
 800e952:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800e954 <jinit_upsampler>:
 * Module initialization routine for upsampling.
 */

GLOBAL(void)
jinit_upsampler (j_decompress_ptr cinfo)
{
 800e954:	b590      	push	{r4, r7, lr}
 800e956:	b08b      	sub	sp, #44	; 0x2c
 800e958:	af00      	add	r7, sp, #0
 800e95a:	6078      	str	r0, [r7, #4]
  jpeg_component_info * compptr;
  boolean need_buffer;
  int h_in_group, v_in_group, h_out_group, v_out_group;

  upsample = (my_upsample_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	685b      	ldr	r3, [r3, #4]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	22a0      	movs	r2, #160	; 0xa0
 800e964:	2101      	movs	r1, #1
 800e966:	6878      	ldr	r0, [r7, #4]
 800e968:	4798      	blx	r3
 800e96a:	61b8      	str	r0, [r7, #24]
				SIZEOF(my_upsampler));
  cinfo->upsample = (struct jpeg_upsampler *) upsample;
 800e96c:	687b      	ldr	r3, [r7, #4]
 800e96e:	69ba      	ldr	r2, [r7, #24]
 800e970:	f8c3 21d8 	str.w	r2, [r3, #472]	; 0x1d8
  upsample->pub.start_pass = start_pass_upsample;
 800e974:	69bb      	ldr	r3, [r7, #24]
 800e976:	4a7a      	ldr	r2, [pc, #488]	; (800eb60 <jinit_upsampler+0x20c>)
 800e978:	601a      	str	r2, [r3, #0]
  upsample->pub.upsample = sep_upsample;
 800e97a:	69bb      	ldr	r3, [r7, #24]
 800e97c:	4a79      	ldr	r2, [pc, #484]	; (800eb64 <jinit_upsampler+0x210>)
 800e97e:	605a      	str	r2, [r3, #4]
  upsample->pub.need_context_rows = FALSE; /* until we find out differently */
 800e980:	69bb      	ldr	r3, [r7, #24]
 800e982:	2200      	movs	r2, #0
 800e984:	609a      	str	r2, [r3, #8]

  if (cinfo->CCIR601_sampling)	/* this isn't supported */
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	f8d3 3130 	ldr.w	r3, [r3, #304]	; 0x130
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d008      	beq.n	800e9a2 <jinit_upsampler+0x4e>
    ERREXIT(cinfo, JERR_CCIR601_NOTIMPL);
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	681b      	ldr	r3, [r3, #0]
 800e994:	221a      	movs	r2, #26
 800e996:	615a      	str	r2, [r3, #20]
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	681b      	ldr	r3, [r3, #0]
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	6878      	ldr	r0, [r7, #4]
 800e9a0:	4798      	blx	r3

  /* Verify we can handle the sampling factors, select per-component methods,
   * and create storage as needed.
   */
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800e9a2:	2300      	movs	r3, #0
 800e9a4:	627b      	str	r3, [r7, #36]	; 0x24
 800e9a6:	687b      	ldr	r3, [r7, #4]
 800e9a8:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e9ac:	623b      	str	r3, [r7, #32]
 800e9ae:	e0cb      	b.n	800eb48 <jinit_upsampler+0x1f4>
       ci++, compptr++) {
    /* Compute size of an "input group" after IDCT scaling.  This many samples
     * are to be converted to max_h_samp_factor * max_v_samp_factor pixels.
     */
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800e9b0:	6a3b      	ldr	r3, [r7, #32]
 800e9b2:	689b      	ldr	r3, [r3, #8]
 800e9b4:	6a3a      	ldr	r2, [r7, #32]
 800e9b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800e9b8:	fb02 f203 	mul.w	r2, r2, r3
		 cinfo->min_DCT_h_scaled_size;
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	f8d3 3140 	ldr.w	r3, [r3, #320]	; 0x140
    h_in_group = (compptr->h_samp_factor * compptr->DCT_h_scaled_size) /
 800e9c2:	fb92 f3f3 	sdiv	r3, r2, r3
 800e9c6:	617b      	str	r3, [r7, #20]
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e9c8:	6a3b      	ldr	r3, [r7, #32]
 800e9ca:	68db      	ldr	r3, [r3, #12]
 800e9cc:	6a3a      	ldr	r2, [r7, #32]
 800e9ce:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800e9d0:	fb02 f203 	mul.w	r2, r2, r3
		 cinfo->min_DCT_v_scaled_size;
 800e9d4:	687b      	ldr	r3, [r7, #4]
 800e9d6:	f8d3 3144 	ldr.w	r3, [r3, #324]	; 0x144
    v_in_group = (compptr->v_samp_factor * compptr->DCT_v_scaled_size) /
 800e9da:	fb92 f3f3 	sdiv	r3, r2, r3
 800e9de:	613b      	str	r3, [r7, #16]
    h_out_group = cinfo->max_h_samp_factor;
 800e9e0:	687b      	ldr	r3, [r7, #4]
 800e9e2:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
 800e9e6:	60fb      	str	r3, [r7, #12]
    v_out_group = cinfo->max_v_samp_factor;
 800e9e8:	687b      	ldr	r3, [r7, #4]
 800e9ea:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
 800e9ee:	60bb      	str	r3, [r7, #8]
    upsample->rowgroup_height[ci] = v_in_group; /* save for use later */
 800e9f0:	69ba      	ldr	r2, [r7, #24]
 800e9f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e9f4:	3318      	adds	r3, #24
 800e9f6:	009b      	lsls	r3, r3, #2
 800e9f8:	4413      	add	r3, r2
 800e9fa:	693a      	ldr	r2, [r7, #16]
 800e9fc:	605a      	str	r2, [r3, #4]
    need_buffer = TRUE;
 800e9fe:	2301      	movs	r3, #1
 800ea00:	61fb      	str	r3, [r7, #28]
    if (! compptr->component_needed) {
 800ea02:	6a3b      	ldr	r3, [r7, #32]
 800ea04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ea06:	2b00      	cmp	r3, #0
 800ea08:	d109      	bne.n	800ea1e <jinit_upsampler+0xca>
      /* Don't bother to upsample an uninteresting component. */
      upsample->methods[ci] = noop_upsample;
 800ea0a:	69ba      	ldr	r2, [r7, #24]
 800ea0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea0e:	330c      	adds	r3, #12
 800ea10:	009b      	lsls	r3, r3, #2
 800ea12:	4413      	add	r3, r2
 800ea14:	4a54      	ldr	r2, [pc, #336]	; (800eb68 <jinit_upsampler+0x214>)
 800ea16:	605a      	str	r2, [r3, #4]
      need_buffer = FALSE;
 800ea18:	2300      	movs	r3, #0
 800ea1a:	61fb      	str	r3, [r7, #28]
 800ea1c:	e06f      	b.n	800eafe <jinit_upsampler+0x1aa>
    } else if (h_in_group == h_out_group && v_in_group == v_out_group) {
 800ea1e:	697a      	ldr	r2, [r7, #20]
 800ea20:	68fb      	ldr	r3, [r7, #12]
 800ea22:	429a      	cmp	r2, r3
 800ea24:	d10d      	bne.n	800ea42 <jinit_upsampler+0xee>
 800ea26:	693a      	ldr	r2, [r7, #16]
 800ea28:	68bb      	ldr	r3, [r7, #8]
 800ea2a:	429a      	cmp	r2, r3
 800ea2c:	d109      	bne.n	800ea42 <jinit_upsampler+0xee>
      /* Fullsize components can be processed without any work. */
      upsample->methods[ci] = fullsize_upsample;
 800ea2e:	69ba      	ldr	r2, [r7, #24]
 800ea30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea32:	330c      	adds	r3, #12
 800ea34:	009b      	lsls	r3, r3, #2
 800ea36:	4413      	add	r3, r2
 800ea38:	4a4c      	ldr	r2, [pc, #304]	; (800eb6c <jinit_upsampler+0x218>)
 800ea3a:	605a      	str	r2, [r3, #4]
      need_buffer = FALSE;
 800ea3c:	2300      	movs	r3, #0
 800ea3e:	61fb      	str	r3, [r7, #28]
 800ea40:	e05d      	b.n	800eafe <jinit_upsampler+0x1aa>
    } else if (h_in_group * 2 == h_out_group &&
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	005b      	lsls	r3, r3, #1
 800ea46:	68fa      	ldr	r2, [r7, #12]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	d10b      	bne.n	800ea64 <jinit_upsampler+0x110>
 800ea4c:	693a      	ldr	r2, [r7, #16]
 800ea4e:	68bb      	ldr	r3, [r7, #8]
 800ea50:	429a      	cmp	r2, r3
 800ea52:	d107      	bne.n	800ea64 <jinit_upsampler+0x110>
	       v_in_group == v_out_group) {
      /* Special case for 2h1v upsampling */
      upsample->methods[ci] = h2v1_upsample;
 800ea54:	69ba      	ldr	r2, [r7, #24]
 800ea56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea58:	330c      	adds	r3, #12
 800ea5a:	009b      	lsls	r3, r3, #2
 800ea5c:	4413      	add	r3, r2
 800ea5e:	4a44      	ldr	r2, [pc, #272]	; (800eb70 <jinit_upsampler+0x21c>)
 800ea60:	605a      	str	r2, [r3, #4]
 800ea62:	e04c      	b.n	800eafe <jinit_upsampler+0x1aa>
    } else if (h_in_group * 2 == h_out_group &&
 800ea64:	697b      	ldr	r3, [r7, #20]
 800ea66:	005b      	lsls	r3, r3, #1
 800ea68:	68fa      	ldr	r2, [r7, #12]
 800ea6a:	429a      	cmp	r2, r3
 800ea6c:	d10c      	bne.n	800ea88 <jinit_upsampler+0x134>
	       v_in_group * 2 == v_out_group) {
 800ea6e:	693b      	ldr	r3, [r7, #16]
 800ea70:	005b      	lsls	r3, r3, #1
    } else if (h_in_group * 2 == h_out_group &&
 800ea72:	68ba      	ldr	r2, [r7, #8]
 800ea74:	429a      	cmp	r2, r3
 800ea76:	d107      	bne.n	800ea88 <jinit_upsampler+0x134>
      /* Special case for 2h2v upsampling */
      upsample->methods[ci] = h2v2_upsample;
 800ea78:	69ba      	ldr	r2, [r7, #24]
 800ea7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ea7c:	330c      	adds	r3, #12
 800ea7e:	009b      	lsls	r3, r3, #2
 800ea80:	4413      	add	r3, r2
 800ea82:	4a3c      	ldr	r2, [pc, #240]	; (800eb74 <jinit_upsampler+0x220>)
 800ea84:	605a      	str	r2, [r3, #4]
 800ea86:	e03a      	b.n	800eafe <jinit_upsampler+0x1aa>
    } else if ((h_out_group % h_in_group) == 0 &&
 800ea88:	68fb      	ldr	r3, [r7, #12]
 800ea8a:	697a      	ldr	r2, [r7, #20]
 800ea8c:	fb93 f2f2 	sdiv	r2, r3, r2
 800ea90:	6979      	ldr	r1, [r7, #20]
 800ea92:	fb01 f202 	mul.w	r2, r1, r2
 800ea96:	1a9b      	subs	r3, r3, r2
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d127      	bne.n	800eaec <jinit_upsampler+0x198>
	       (v_out_group % v_in_group) == 0) {
 800ea9c:	68bb      	ldr	r3, [r7, #8]
 800ea9e:	693a      	ldr	r2, [r7, #16]
 800eaa0:	fb93 f2f2 	sdiv	r2, r3, r2
 800eaa4:	6939      	ldr	r1, [r7, #16]
 800eaa6:	fb01 f202 	mul.w	r2, r1, r2
 800eaaa:	1a9b      	subs	r3, r3, r2
    } else if ((h_out_group % h_in_group) == 0 &&
 800eaac:	2b00      	cmp	r3, #0
 800eaae:	d11d      	bne.n	800eaec <jinit_upsampler+0x198>
      /* Generic integral-factors upsampling method */
      upsample->methods[ci] = int_upsample;
 800eab0:	69ba      	ldr	r2, [r7, #24]
 800eab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eab4:	330c      	adds	r3, #12
 800eab6:	009b      	lsls	r3, r3, #2
 800eab8:	4413      	add	r3, r2
 800eaba:	4a2f      	ldr	r2, [pc, #188]	; (800eb78 <jinit_upsampler+0x224>)
 800eabc:	605a      	str	r2, [r3, #4]
      upsample->h_expand[ci] = (UINT8) (h_out_group / h_in_group);
 800eabe:	68fa      	ldr	r2, [r7, #12]
 800eac0:	697b      	ldr	r3, [r7, #20]
 800eac2:	fb92 f3f3 	sdiv	r3, r2, r3
 800eac6:	b2d9      	uxtb	r1, r3
 800eac8:	69ba      	ldr	r2, [r7, #24]
 800eaca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eacc:	4413      	add	r3, r2
 800eace:	338c      	adds	r3, #140	; 0x8c
 800ead0:	460a      	mov	r2, r1
 800ead2:	701a      	strb	r2, [r3, #0]
      upsample->v_expand[ci] = (UINT8) (v_out_group / v_in_group);
 800ead4:	68ba      	ldr	r2, [r7, #8]
 800ead6:	693b      	ldr	r3, [r7, #16]
 800ead8:	fb92 f3f3 	sdiv	r3, r2, r3
 800eadc:	b2d9      	uxtb	r1, r3
 800eade:	69ba      	ldr	r2, [r7, #24]
 800eae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eae2:	4413      	add	r3, r2
 800eae4:	3396      	adds	r3, #150	; 0x96
 800eae6:	460a      	mov	r2, r1
 800eae8:	701a      	strb	r2, [r3, #0]
 800eaea:	e008      	b.n	800eafe <jinit_upsampler+0x1aa>
    } else
      ERREXIT(cinfo, JERR_FRACT_SAMPLE_NOTIMPL);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	2227      	movs	r2, #39	; 0x27
 800eaf2:	615a      	str	r2, [r3, #20]
 800eaf4:	687b      	ldr	r3, [r7, #4]
 800eaf6:	681b      	ldr	r3, [r3, #0]
 800eaf8:	681b      	ldr	r3, [r3, #0]
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	4798      	blx	r3
    if (need_buffer) {
 800eafe:	69fb      	ldr	r3, [r7, #28]
 800eb00:	2b00      	cmp	r3, #0
 800eb02:	d01b      	beq.n	800eb3c <jinit_upsampler+0x1e8>
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800eb04:	687b      	ldr	r3, [r7, #4]
 800eb06:	685b      	ldr	r3, [r3, #4]
 800eb08:	689c      	ldr	r4, [r3, #8]
	((j_common_ptr) cinfo, JPOOL_IMAGE,
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800eb0e:	461a      	mov	r2, r3
				(long) cinfo->max_h_samp_factor),
 800eb10:	687b      	ldr	r3, [r7, #4]
 800eb12:	f8d3 3138 	ldr.w	r3, [r3, #312]	; 0x138
	 (JDIMENSION) jround_up((long) cinfo->output_width,
 800eb16:	4619      	mov	r1, r3
 800eb18:	4610      	mov	r0, r2
 800eb1a:	f010 fbbf 	bl	801f29c <jround_up>
 800eb1e:	4603      	mov	r3, r0
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800eb20:	461a      	mov	r2, r3
	 (JDIMENSION) cinfo->max_v_samp_factor);
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	f8d3 313c 	ldr.w	r3, [r3, #316]	; 0x13c
      upsample->color_buf[ci] = (*cinfo->mem->alloc_sarray)
 800eb28:	2101      	movs	r1, #1
 800eb2a:	6878      	ldr	r0, [r7, #4]
 800eb2c:	47a0      	blx	r4
 800eb2e:	4601      	mov	r1, r0
 800eb30:	69ba      	ldr	r2, [r7, #24]
 800eb32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb34:	3302      	adds	r3, #2
 800eb36:	009b      	lsls	r3, r3, #2
 800eb38:	4413      	add	r3, r2
 800eb3a:	6059      	str	r1, [r3, #4]
       ci++, compptr++) {
 800eb3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eb3e:	3301      	adds	r3, #1
 800eb40:	627b      	str	r3, [r7, #36]	; 0x24
 800eb42:	6a3b      	ldr	r3, [r7, #32]
 800eb44:	3358      	adds	r3, #88	; 0x58
 800eb46:	623b      	str	r3, [r7, #32]
  for (ci = 0, compptr = cinfo->comp_info; ci < cinfo->num_components;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb4c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eb4e:	429a      	cmp	r2, r3
 800eb50:	f6ff af2e 	blt.w	800e9b0 <jinit_upsampler+0x5c>
    }
  }
}
 800eb54:	bf00      	nop
 800eb56:	bf00      	nop
 800eb58:	372c      	adds	r7, #44	; 0x2c
 800eb5a:	46bd      	mov	sp, r7
 800eb5c:	bd90      	pop	{r4, r7, pc}
 800eb5e:	bf00      	nop
 800eb60:	0800e5e1 	.word	0x0800e5e1
 800eb64:	0800e60f 	.word	0x0800e60f
 800eb68:	0800e765 	.word	0x0800e765
 800eb6c:	0800e745 	.word	0x0800e745
 800eb70:	0800e84f 	.word	0x0800e84f
 800eb74:	0800e8c1 	.word	0x0800e8c1
 800eb78:	0800e785 	.word	0x0800e785

0800eb7c <error_exit>:
 * or jpeg_destroy) at some point.
 */

METHODDEF(void)
error_exit (j_common_ptr cinfo)
{
 800eb7c:	b580      	push	{r7, lr}
 800eb7e:	b082      	sub	sp, #8
 800eb80:	af00      	add	r7, sp, #0
 800eb82:	6078      	str	r0, [r7, #4]
  /* Always display the message */
  (*cinfo->err->output_message) (cinfo);
 800eb84:	687b      	ldr	r3, [r7, #4]
 800eb86:	681b      	ldr	r3, [r3, #0]
 800eb88:	689b      	ldr	r3, [r3, #8]
 800eb8a:	6878      	ldr	r0, [r7, #4]
 800eb8c:	4798      	blx	r3

  /* Let the memory manager delete any temp files before we die */
  jpeg_destroy(cinfo);
 800eb8e:	6878      	ldr	r0, [r7, #4]
 800eb90:	f7f4 fdfa 	bl	8003788 <jpeg_destroy>

  //exit(EXIT_FAILURE);
}
 800eb94:	bf00      	nop
 800eb96:	3708      	adds	r7, #8
 800eb98:	46bd      	mov	sp, r7
 800eb9a:	bd80      	pop	{r7, pc}

0800eb9c <output_message>:
 * not just not use this routine.
 */

METHODDEF(void)
output_message (j_common_ptr cinfo)
{
 800eb9c:	b580      	push	{r7, lr}
 800eb9e:	b0b4      	sub	sp, #208	; 0xd0
 800eba0:	af00      	add	r7, sp, #0
 800eba2:	6078      	str	r0, [r7, #4]
  char buffer[JMSG_LENGTH_MAX];

  /* Create the message */
  (*cinfo->err->format_message) (cinfo, buffer);
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	68db      	ldr	r3, [r3, #12]
 800ebaa:	f107 0208 	add.w	r2, r7, #8
 800ebae:	4611      	mov	r1, r2
 800ebb0:	6878      	ldr	r0, [r7, #4]
 800ebb2:	4798      	blx	r3
#else
  /* Send it to stderr, adding a newline */
//  fprintf(stderr, "%s\n", buffer);
//  printf( "%s\n", buffer);
#endif
}
 800ebb4:	bf00      	nop
 800ebb6:	37d0      	adds	r7, #208	; 0xd0
 800ebb8:	46bd      	mov	sp, r7
 800ebba:	bd80      	pop	{r7, pc}

0800ebbc <emit_message>:
 * or change the policy about which messages to display.
 */

METHODDEF(void)
emit_message (j_common_ptr cinfo, int msg_level)
{
 800ebbc:	b580      	push	{r7, lr}
 800ebbe:	b084      	sub	sp, #16
 800ebc0:	af00      	add	r7, sp, #0
 800ebc2:	6078      	str	r0, [r7, #4]
 800ebc4:	6039      	str	r1, [r7, #0]
  struct jpeg_error_mgr * err = cinfo->err;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	60fb      	str	r3, [r7, #12]

  if (msg_level < 0) {
 800ebcc:	683b      	ldr	r3, [r7, #0]
 800ebce:	2b00      	cmp	r3, #0
 800ebd0:	da11      	bge.n	800ebf6 <emit_message+0x3a>
    /* It's a warning message.  Since corrupt files may generate many warnings,
     * the policy implemented here is to show only the first warning,
     * unless trace_level >= 3.
     */
    if (err->num_warnings == 0 || err->trace_level >= 3)
 800ebd2:	68fb      	ldr	r3, [r7, #12]
 800ebd4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d003      	beq.n	800ebe2 <emit_message+0x26>
 800ebda:	68fb      	ldr	r3, [r7, #12]
 800ebdc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebde:	2b02      	cmp	r3, #2
 800ebe0:	dd03      	ble.n	800ebea <emit_message+0x2e>
      (*err->output_message) (cinfo);
 800ebe2:	68fb      	ldr	r3, [r7, #12]
 800ebe4:	689b      	ldr	r3, [r3, #8]
 800ebe6:	6878      	ldr	r0, [r7, #4]
 800ebe8:	4798      	blx	r3
    /* Always count warnings in num_warnings. */
    err->num_warnings++;
 800ebea:	68fb      	ldr	r3, [r7, #12]
 800ebec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ebee:	1c5a      	adds	r2, r3, #1
 800ebf0:	68fb      	ldr	r3, [r7, #12]
 800ebf2:	66da      	str	r2, [r3, #108]	; 0x6c
  } else {
    /* It's a trace message.  Show it if trace_level >= msg_level. */
    if (err->trace_level >= msg_level)
      (*err->output_message) (cinfo);
  }
}
 800ebf4:	e008      	b.n	800ec08 <emit_message+0x4c>
    if (err->trace_level >= msg_level)
 800ebf6:	68fb      	ldr	r3, [r7, #12]
 800ebf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ebfa:	683a      	ldr	r2, [r7, #0]
 800ebfc:	429a      	cmp	r2, r3
 800ebfe:	dc03      	bgt.n	800ec08 <emit_message+0x4c>
      (*err->output_message) (cinfo);
 800ec00:	68fb      	ldr	r3, [r7, #12]
 800ec02:	689b      	ldr	r3, [r3, #8]
 800ec04:	6878      	ldr	r0, [r7, #4]
 800ec06:	4798      	blx	r3
}
 800ec08:	bf00      	nop
 800ec0a:	3710      	adds	r7, #16
 800ec0c:	46bd      	mov	sp, r7
 800ec0e:	bd80      	pop	{r7, pc}

0800ec10 <format_message>:
 * Few applications should need to override this method.
 */

METHODDEF(void)
format_message (j_common_ptr cinfo, char * buffer)
{
 800ec10:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ec12:	b091      	sub	sp, #68	; 0x44
 800ec14:	af06      	add	r7, sp, #24
 800ec16:	60f8      	str	r0, [r7, #12]
 800ec18:	60b9      	str	r1, [r7, #8]
  struct jpeg_error_mgr * err = cinfo->err;
 800ec1a:	68fb      	ldr	r3, [r7, #12]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	61bb      	str	r3, [r7, #24]
  int msg_code = err->msg_code;
 800ec20:	69bb      	ldr	r3, [r7, #24]
 800ec22:	695b      	ldr	r3, [r3, #20]
 800ec24:	617b      	str	r3, [r7, #20]
  const char * msgtext = NULL;
 800ec26:	2300      	movs	r3, #0
 800ec28:	627b      	str	r3, [r7, #36]	; 0x24
  const char * msgptr;
  char ch;
  boolean isstring;

  /* Look up message string in proper table */
  if (msg_code > 0 && msg_code <= err->last_jpeg_message) {
 800ec2a:	697b      	ldr	r3, [r7, #20]
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	dd0c      	ble.n	800ec4a <format_message+0x3a>
 800ec30:	69bb      	ldr	r3, [r7, #24]
 800ec32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ec34:	697a      	ldr	r2, [r7, #20]
 800ec36:	429a      	cmp	r2, r3
 800ec38:	dc07      	bgt.n	800ec4a <format_message+0x3a>
    msgtext = err->jpeg_message_table[msg_code];
 800ec3a:	69bb      	ldr	r3, [r7, #24]
 800ec3c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800ec3e:	697b      	ldr	r3, [r7, #20]
 800ec40:	009b      	lsls	r3, r3, #2
 800ec42:	4413      	add	r3, r2
 800ec44:	681b      	ldr	r3, [r3, #0]
 800ec46:	627b      	str	r3, [r7, #36]	; 0x24
 800ec48:	e018      	b.n	800ec7c <format_message+0x6c>
  } else if (err->addon_message_table != NULL &&
 800ec4a:	69bb      	ldr	r3, [r7, #24]
 800ec4c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d014      	beq.n	800ec7c <format_message+0x6c>
	     msg_code >= err->first_addon_message &&
 800ec52:	69bb      	ldr	r3, [r7, #24]
 800ec54:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
  } else if (err->addon_message_table != NULL &&
 800ec56:	697a      	ldr	r2, [r7, #20]
 800ec58:	429a      	cmp	r2, r3
 800ec5a:	db0f      	blt.n	800ec7c <format_message+0x6c>
	     msg_code <= err->last_addon_message) {
 800ec5c:	69bb      	ldr	r3, [r7, #24]
 800ec5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
	     msg_code >= err->first_addon_message &&
 800ec62:	697a      	ldr	r2, [r7, #20]
 800ec64:	429a      	cmp	r2, r3
 800ec66:	dc09      	bgt.n	800ec7c <format_message+0x6c>
    msgtext = err->addon_message_table[msg_code - err->first_addon_message];
 800ec68:	69bb      	ldr	r3, [r7, #24]
 800ec6a:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800ec6c:	69bb      	ldr	r3, [r7, #24]
 800ec6e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800ec70:	6979      	ldr	r1, [r7, #20]
 800ec72:	1acb      	subs	r3, r1, r3
 800ec74:	009b      	lsls	r3, r3, #2
 800ec76:	4413      	add	r3, r2
 800ec78:	681b      	ldr	r3, [r3, #0]
 800ec7a:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Defend against bogus message number */
  if (msgtext == NULL) {
 800ec7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec7e:	2b00      	cmp	r3, #0
 800ec80:	d106      	bne.n	800ec90 <format_message+0x80>
    err->msg_parm.i[0] = msg_code;
 800ec82:	69bb      	ldr	r3, [r7, #24]
 800ec84:	697a      	ldr	r2, [r7, #20]
 800ec86:	619a      	str	r2, [r3, #24]
    msgtext = err->jpeg_message_table[0];
 800ec88:	69bb      	ldr	r3, [r7, #24]
 800ec8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ec8c:	681b      	ldr	r3, [r3, #0]
 800ec8e:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check for string parameter, as indicated by %s in the message text */
  isstring = FALSE;
 800ec90:	2300      	movs	r3, #0
 800ec92:	61fb      	str	r3, [r7, #28]
  msgptr = msgtext;
 800ec94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ec96:	623b      	str	r3, [r7, #32]
  while ((ch = *msgptr++) != '\0') {
 800ec98:	e009      	b.n	800ecae <format_message+0x9e>
    if (ch == '%') {
 800ec9a:	7cfb      	ldrb	r3, [r7, #19]
 800ec9c:	2b25      	cmp	r3, #37	; 0x25
 800ec9e:	d106      	bne.n	800ecae <format_message+0x9e>
      if (*msgptr == 's') isstring = TRUE;
 800eca0:	6a3b      	ldr	r3, [r7, #32]
 800eca2:	781b      	ldrb	r3, [r3, #0]
 800eca4:	2b73      	cmp	r3, #115	; 0x73
 800eca6:	d10b      	bne.n	800ecc0 <format_message+0xb0>
 800eca8:	2301      	movs	r3, #1
 800ecaa:	61fb      	str	r3, [r7, #28]
      break;
 800ecac:	e008      	b.n	800ecc0 <format_message+0xb0>
  while ((ch = *msgptr++) != '\0') {
 800ecae:	6a3b      	ldr	r3, [r7, #32]
 800ecb0:	1c5a      	adds	r2, r3, #1
 800ecb2:	623a      	str	r2, [r7, #32]
 800ecb4:	781b      	ldrb	r3, [r3, #0]
 800ecb6:	74fb      	strb	r3, [r7, #19]
 800ecb8:	7cfb      	ldrb	r3, [r7, #19]
 800ecba:	2b00      	cmp	r3, #0
 800ecbc:	d1ed      	bne.n	800ec9a <format_message+0x8a>
 800ecbe:	e000      	b.n	800ecc2 <format_message+0xb2>
      break;
 800ecc0:	bf00      	nop
    }
  }

  /* Format the message into the passed buffer */
  if (isstring)
 800ecc2:	69fb      	ldr	r3, [r7, #28]
 800ecc4:	2b00      	cmp	r3, #0
 800ecc6:	d007      	beq.n	800ecd8 <format_message+0xc8>
    sprintf(buffer, msgtext, err->msg_parm.s);
 800ecc8:	69bb      	ldr	r3, [r7, #24]
 800ecca:	3318      	adds	r3, #24
 800eccc:	461a      	mov	r2, r3
 800ecce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ecd0:	68b8      	ldr	r0, [r7, #8]
 800ecd2:	f010 fc43 	bl	801f55c <siprintf>
    sprintf(buffer, msgtext,
	    err->msg_parm.i[0], err->msg_parm.i[1],
	    err->msg_parm.i[2], err->msg_parm.i[3],
	    err->msg_parm.i[4], err->msg_parm.i[5],
	    err->msg_parm.i[6], err->msg_parm.i[7]);
}
 800ecd6:	e01c      	b.n	800ed12 <format_message+0x102>
    sprintf(buffer, msgtext,
 800ecd8:	69bb      	ldr	r3, [r7, #24]
 800ecda:	699e      	ldr	r6, [r3, #24]
 800ecdc:	69bb      	ldr	r3, [r7, #24]
 800ecde:	69db      	ldr	r3, [r3, #28]
 800ece0:	607b      	str	r3, [r7, #4]
 800ece2:	69bb      	ldr	r3, [r7, #24]
 800ece4:	6a1b      	ldr	r3, [r3, #32]
 800ece6:	69ba      	ldr	r2, [r7, #24]
 800ece8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800ecea:	69b9      	ldr	r1, [r7, #24]
 800ecec:	6a89      	ldr	r1, [r1, #40]	; 0x28
 800ecee:	69b8      	ldr	r0, [r7, #24]
 800ecf0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 800ecf2:	69bc      	ldr	r4, [r7, #24]
 800ecf4:	6b24      	ldr	r4, [r4, #48]	; 0x30
 800ecf6:	69bd      	ldr	r5, [r7, #24]
 800ecf8:	6b6d      	ldr	r5, [r5, #52]	; 0x34
 800ecfa:	9505      	str	r5, [sp, #20]
 800ecfc:	9404      	str	r4, [sp, #16]
 800ecfe:	9003      	str	r0, [sp, #12]
 800ed00:	9102      	str	r1, [sp, #8]
 800ed02:	9201      	str	r2, [sp, #4]
 800ed04:	9300      	str	r3, [sp, #0]
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	4632      	mov	r2, r6
 800ed0a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800ed0c:	68b8      	ldr	r0, [r7, #8]
 800ed0e:	f010 fc25 	bl	801f55c <siprintf>
}
 800ed12:	bf00      	nop
 800ed14:	372c      	adds	r7, #44	; 0x2c
 800ed16:	46bd      	mov	sp, r7
 800ed18:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ed1a <reset_error_mgr>:
 * this method if it has additional error processing state.
 */

METHODDEF(void)
reset_error_mgr (j_common_ptr cinfo)
{
 800ed1a:	b480      	push	{r7}
 800ed1c:	b083      	sub	sp, #12
 800ed1e:	af00      	add	r7, sp, #0
 800ed20:	6078      	str	r0, [r7, #4]
  cinfo->err->num_warnings = 0;
 800ed22:	687b      	ldr	r3, [r7, #4]
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	2200      	movs	r2, #0
 800ed28:	66da      	str	r2, [r3, #108]	; 0x6c
  /* trace_level is not reset since it is an application-supplied parameter */
  cinfo->err->msg_code = 0;	/* may be useful as a flag for "no error" */
 800ed2a:	687b      	ldr	r3, [r7, #4]
 800ed2c:	681b      	ldr	r3, [r3, #0]
 800ed2e:	2200      	movs	r2, #0
 800ed30:	615a      	str	r2, [r3, #20]
}
 800ed32:	bf00      	nop
 800ed34:	370c      	adds	r7, #12
 800ed36:	46bd      	mov	sp, r7
 800ed38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed3c:	4770      	bx	lr
	...

0800ed40 <jpeg_std_error>:
 * after which the application may override some of the methods.
 */

GLOBAL(struct jpeg_error_mgr *)
jpeg_std_error (struct jpeg_error_mgr * err)
{
 800ed40:	b480      	push	{r7}
 800ed42:	b083      	sub	sp, #12
 800ed44:	af00      	add	r7, sp, #0
 800ed46:	6078      	str	r0, [r7, #4]
  err->error_exit = error_exit;
 800ed48:	687b      	ldr	r3, [r7, #4]
 800ed4a:	4a17      	ldr	r2, [pc, #92]	; (800eda8 <jpeg_std_error+0x68>)
 800ed4c:	601a      	str	r2, [r3, #0]
  err->emit_message = emit_message;
 800ed4e:	687b      	ldr	r3, [r7, #4]
 800ed50:	4a16      	ldr	r2, [pc, #88]	; (800edac <jpeg_std_error+0x6c>)
 800ed52:	605a      	str	r2, [r3, #4]
  err->output_message = output_message;
 800ed54:	687b      	ldr	r3, [r7, #4]
 800ed56:	4a16      	ldr	r2, [pc, #88]	; (800edb0 <jpeg_std_error+0x70>)
 800ed58:	609a      	str	r2, [r3, #8]
  err->format_message = format_message;
 800ed5a:	687b      	ldr	r3, [r7, #4]
 800ed5c:	4a15      	ldr	r2, [pc, #84]	; (800edb4 <jpeg_std_error+0x74>)
 800ed5e:	60da      	str	r2, [r3, #12]
  err->reset_error_mgr = reset_error_mgr;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	4a15      	ldr	r2, [pc, #84]	; (800edb8 <jpeg_std_error+0x78>)
 800ed64:	611a      	str	r2, [r3, #16]

  err->trace_level = 0;		/* default = no tracing */
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	2200      	movs	r2, #0
 800ed6a:	669a      	str	r2, [r3, #104]	; 0x68
  err->num_warnings = 0;	/* no warnings emitted yet */
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	2200      	movs	r2, #0
 800ed70:	66da      	str	r2, [r3, #108]	; 0x6c
  err->msg_code = 0;		/* may be useful as a flag for "no error" */
 800ed72:	687b      	ldr	r3, [r7, #4]
 800ed74:	2200      	movs	r2, #0
 800ed76:	615a      	str	r2, [r3, #20]

  /* Initialize message table pointers */
  err->jpeg_message_table = jpeg_std_message_table;
 800ed78:	687b      	ldr	r3, [r7, #4]
 800ed7a:	4a10      	ldr	r2, [pc, #64]	; (800edbc <jpeg_std_error+0x7c>)
 800ed7c:	671a      	str	r2, [r3, #112]	; 0x70
  err->last_jpeg_message = (int) JMSG_LASTMSGCODE - 1;
 800ed7e:	687b      	ldr	r3, [r7, #4]
 800ed80:	227e      	movs	r2, #126	; 0x7e
 800ed82:	675a      	str	r2, [r3, #116]	; 0x74

  err->addon_message_table = NULL;
 800ed84:	687b      	ldr	r3, [r7, #4]
 800ed86:	2200      	movs	r2, #0
 800ed88:	679a      	str	r2, [r3, #120]	; 0x78
  err->first_addon_message = 0;	/* for safety */
 800ed8a:	687b      	ldr	r3, [r7, #4]
 800ed8c:	2200      	movs	r2, #0
 800ed8e:	67da      	str	r2, [r3, #124]	; 0x7c
  err->last_addon_message = 0;
 800ed90:	687b      	ldr	r3, [r7, #4]
 800ed92:	2200      	movs	r2, #0
 800ed94:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return err;
 800ed98:	687b      	ldr	r3, [r7, #4]
}
 800ed9a:	4618      	mov	r0, r3
 800ed9c:	370c      	adds	r7, #12
 800ed9e:	46bd      	mov	sp, r7
 800eda0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	0800eb7d 	.word	0x0800eb7d
 800edac:	0800ebbd 	.word	0x0800ebbd
 800edb0:	0800eb9d 	.word	0x0800eb9d
 800edb4:	0800ec11 	.word	0x0800ec11
 800edb8:	0800ed1b 	.word	0x0800ed1b
 800edbc:	08021564 	.word	0x08021564

0800edc0 <jpeg_idct_float>:

GLOBAL(void)
jpeg_idct_float (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800edc0:	b490      	push	{r4, r7}
 800edc2:	b0dc      	sub	sp, #368	; 0x170
 800edc4:	af00      	add	r7, sp, #0
 800edc6:	f107 040c 	add.w	r4, r7, #12
 800edca:	6020      	str	r0, [r4, #0]
 800edcc:	f107 0008 	add.w	r0, r7, #8
 800edd0:	6001      	str	r1, [r0, #0]
 800edd2:	1d39      	adds	r1, r7, #4
 800edd4:	600a      	str	r2, [r1, #0]
 800edd6:	463a      	mov	r2, r7
 800edd8:	6013      	str	r3, [r2, #0]
  FAST_FLOAT z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  FLOAT_MULT_TYPE * quantptr;
  FAST_FLOAT * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 800edda:	f107 030c 	add.w	r3, r7, #12
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800ede4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  int ctr;
  FAST_FLOAT workspace[DCTSIZE2]; /* buffers data between passes */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 800ede8:	1d3b      	adds	r3, r7, #4
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  quantptr = (FLOAT_MULT_TYPE *) compptr->dct_table;
 800edf0:	f107 0308 	add.w	r3, r7, #8
 800edf4:	681b      	ldr	r3, [r3, #0]
 800edf6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800edf8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  wsptr = workspace;
 800edfc:	f107 0310 	add.w	r3, r7, #16
 800ee00:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800ee04:	2308      	movs	r3, #8
 800ee06:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800ee0a:	e230      	b.n	800f26e <jpeg_idct_float+0x4ae>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800ee0c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ee10:	3310      	adds	r3, #16
 800ee12:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee16:	2b00      	cmp	r3, #0
 800ee18:	d178      	bne.n	800ef0c <jpeg_idct_float+0x14c>
 800ee1a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ee1e:	3320      	adds	r3, #32
 800ee20:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee24:	2b00      	cmp	r3, #0
 800ee26:	d171      	bne.n	800ef0c <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800ee28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ee2c:	3330      	adds	r3, #48	; 0x30
 800ee2e:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800ee32:	2b00      	cmp	r3, #0
 800ee34:	d16a      	bne.n	800ef0c <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800ee36:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ee3a:	3340      	adds	r3, #64	; 0x40
 800ee3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d163      	bne.n	800ef0c <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ee44:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ee48:	3350      	adds	r3, #80	; 0x50
 800ee4a:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d15c      	bne.n	800ef0c <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ee52:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ee56:	3360      	adds	r3, #96	; 0x60
 800ee58:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee5c:	2b00      	cmp	r3, #0
 800ee5e:	d155      	bne.n	800ef0c <jpeg_idct_float+0x14c>
	inptr[DCTSIZE*7] == 0) {
 800ee60:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ee64:	3370      	adds	r3, #112	; 0x70
 800ee66:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d14e      	bne.n	800ef0c <jpeg_idct_float+0x14c>
      /* AC terms all zero */
      FAST_FLOAT dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ee6e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ee72:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ee76:	ee07 3a90 	vmov	s15, r3
 800ee7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ee7e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800ee82:	edd3 7a00 	vldr	s15, [r3]
 800ee86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ee8a:	edc7 7a44 	vstr	s15, [r7, #272]	; 0x110
      
      wsptr[DCTSIZE*0] = dcval;
 800ee8e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ee92:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800ee96:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 800ee98:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ee9c:	3320      	adds	r3, #32
 800ee9e:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800eea2:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 800eea4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800eea8:	3340      	adds	r3, #64	; 0x40
 800eeaa:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800eeae:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 800eeb0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800eeb4:	3360      	adds	r3, #96	; 0x60
 800eeb6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800eeba:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 800eebc:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800eec0:	3380      	adds	r3, #128	; 0x80
 800eec2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800eec6:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 800eec8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800eecc:	33a0      	adds	r3, #160	; 0xa0
 800eece:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800eed2:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 800eed4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800eed8:	33c0      	adds	r3, #192	; 0xc0
 800eeda:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800eede:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 800eee0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800eee4:	33e0      	adds	r3, #224	; 0xe0
 800eee6:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 800eeea:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 800eeec:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800eef0:	3302      	adds	r3, #2
 800eef2:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
      quantptr++;
 800eef6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800eefa:	3304      	adds	r3, #4
 800eefc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
      wsptr++;
 800ef00:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800ef04:	3304      	adds	r3, #4
 800ef06:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
      continue;
 800ef0a:	e1ab      	b.n	800f264 <jpeg_idct_float+0x4a4>
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ef0c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ef10:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef14:	ee07 3a90 	vmov	s15, r3
 800ef18:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ef1c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800ef20:	edd3 7a00 	vldr	s15, [r3]
 800ef24:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef28:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ef2c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ef30:	3320      	adds	r3, #32
 800ef32:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef36:	ee07 3a90 	vmov	s15, r3
 800ef3a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ef3e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800ef42:	3340      	adds	r3, #64	; 0x40
 800ef44:	edd3 7a00 	vldr	s15, [r3]
 800ef48:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef4c:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ef50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ef54:	3340      	adds	r3, #64	; 0x40
 800ef56:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef5a:	ee07 3a90 	vmov	s15, r3
 800ef5e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ef62:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800ef66:	3380      	adds	r3, #128	; 0x80
 800ef68:	edd3 7a00 	vldr	s15, [r3]
 800ef6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef70:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ef74:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800ef78:	3360      	adds	r3, #96	; 0x60
 800ef7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ef7e:	ee07 3a90 	vmov	s15, r3
 800ef82:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800ef86:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800ef8a:	33c0      	adds	r3, #192	; 0xc0
 800ef8c:	edd3 7a00 	vldr	s15, [r3]
 800ef90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ef94:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c

    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800ef98:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800ef9c:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800efa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efa4:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
    tmp11 = tmp0 - tmp2;
 800efa8:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800efac:	edd7 7a4d 	vldr	s15, [r7, #308]	; 0x134
 800efb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efb4:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800efb8:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 800efbc:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 800efc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800efc4:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
    tmp12 = (tmp1 - tmp3) * ((FAST_FLOAT) 1.414213562) - tmp13; /* 2*c4 */
 800efc8:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 800efcc:	edd7 7a4f 	vldr	s15, [r7, #316]	; 0x13c
 800efd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efd4:	ed9f 7aad 	vldr	s14, [pc, #692]	; 800f28c <jpeg_idct_float+0x4cc>
 800efd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800efdc:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800efe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800efe4:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800efe8:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 800efec:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800eff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800eff4:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
    tmp3 = tmp10 - tmp13;
 800eff8:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 800effc:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800f000:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f004:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
    tmp1 = tmp11 + tmp12;
 800f008:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 800f00c:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 800f010:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f014:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
    tmp2 = tmp11 - tmp12;
 800f018:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 800f01c:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 800f020:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f024:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f028:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f02c:	3310      	adds	r3, #16
 800f02e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f032:	ee07 3a90 	vmov	s15, r3
 800f036:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f03a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800f03e:	3320      	adds	r3, #32
 800f040:	edd3 7a00 	vldr	s15, [r3]
 800f044:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f048:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f04c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f050:	3330      	adds	r3, #48	; 0x30
 800f052:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f056:	ee07 3a90 	vmov	s15, r3
 800f05a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f05e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800f062:	3360      	adds	r3, #96	; 0x60
 800f064:	edd3 7a00 	vldr	s15, [r3]
 800f068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f06c:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f070:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f074:	3350      	adds	r3, #80	; 0x50
 800f076:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f07a:	ee07 3a90 	vmov	s15, r3
 800f07e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f082:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800f086:	33a0      	adds	r3, #160	; 0xa0
 800f088:	edd3 7a00 	vldr	s15, [r3]
 800f08c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f090:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f094:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f098:	3370      	adds	r3, #112	; 0x70
 800f09a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f09e:	ee07 3a90 	vmov	s15, r3
 800f0a2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800f0a6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800f0aa:	33e0      	adds	r3, #224	; 0xe0
 800f0ac:	edd3 7a00 	vldr	s15, [r3]
 800f0b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0b4:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120

    z13 = tmp6 + tmp5;		/* phase 6 */
 800f0b8:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 800f0bc:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800f0c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0c4:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    z10 = tmp6 - tmp5;
 800f0c8:	ed97 7a47 	vldr	s14, [r7, #284]	; 0x11c
 800f0cc:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800f0d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0d4:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
    z11 = tmp4 + tmp7;
 800f0d8:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 800f0dc:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800f0e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f0e4:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
    z12 = tmp4 - tmp7;
 800f0e8:	ed97 7a45 	vldr	s14, [r7, #276]	; 0x114
 800f0ec:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800f0f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f0f4:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124

    tmp7 = z11 + z13;		/* phase 5 */
 800f0f8:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 800f0fc:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800f100:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f104:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562); /* 2*c4 */
 800f108:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 800f10c:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800f110:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f114:	ed9f 7a5d 	vldr	s14, [pc, #372]	; 800f28c <jpeg_idct_float+0x4cc>
 800f118:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f11c:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f120:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 800f124:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800f128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f12c:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800f290 <jpeg_idct_float+0x4d0>
 800f130:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f134:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f138:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800f13c:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800f294 <jpeg_idct_float+0x4d4>
 800f140:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f144:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800f148:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f14c:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f150:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 800f154:	ed9f 7a50 	vldr	s14, [pc, #320]	; 800f298 <jpeg_idct_float+0x4d8>
 800f158:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f15c:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800f160:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f164:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f168:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800f16c:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800f170:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f174:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    tmp5 = tmp11 - tmp6;
 800f178:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 800f17c:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800f180:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f184:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
    tmp4 = tmp10 - tmp5;
 800f188:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 800f18c:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800f190:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f194:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114

    wsptr[DCTSIZE*0] = tmp0 + tmp7;
 800f198:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800f19c:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800f1a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1a4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f1a8:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*7] = tmp0 - tmp7;
 800f1ac:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f1b0:	33e0      	adds	r3, #224	; 0xe0
 800f1b2:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800f1b6:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800f1ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1be:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*1] = tmp1 + tmp6;
 800f1c2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f1c6:	3320      	adds	r3, #32
 800f1c8:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 800f1cc:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800f1d0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f1d4:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*6] = tmp1 - tmp6;
 800f1d8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f1dc:	33c0      	adds	r3, #192	; 0xc0
 800f1de:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 800f1e2:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800f1e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f1ea:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*2] = tmp2 + tmp5;
 800f1ee:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f1f2:	3340      	adds	r3, #64	; 0x40
 800f1f4:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 800f1f8:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800f1fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f200:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*5] = tmp2 - tmp5;
 800f204:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f208:	33a0      	adds	r3, #160	; 0xa0
 800f20a:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 800f20e:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800f212:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f216:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*3] = tmp3 + tmp4;
 800f21a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f21e:	3360      	adds	r3, #96	; 0x60
 800f220:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 800f224:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800f228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f22c:	edc3 7a00 	vstr	s15, [r3]
    wsptr[DCTSIZE*4] = tmp3 - tmp4;
 800f230:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f234:	3380      	adds	r3, #128	; 0x80
 800f236:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 800f23a:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800f23e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f242:	edc3 7a00 	vstr	s15, [r3]

    inptr++;			/* advance pointers to next column */
 800f246:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f24a:	3302      	adds	r3, #2
 800f24c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    quantptr++;
 800f250:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800f254:	3304      	adds	r3, #4
 800f256:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    wsptr++;
 800f25a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f25e:	3304      	adds	r3, #4
 800f260:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f264:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800f268:	3b01      	subs	r3, #1
 800f26a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800f26e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800f272:	2b00      	cmp	r3, #0
 800f274:	f73f adca 	bgt.w	800ee0c <jpeg_idct_float+0x4c>
  }
  
  /* Pass 2: process rows from work array, store into output array. */

  wsptr = workspace;
 800f278:	f107 0310 	add.w	r3, r7, #16
 800f27c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f280:	2300      	movs	r3, #0
 800f282:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800f286:	e1aa      	b.n	800f5de <jpeg_idct_float+0x81e>
 800f288:	43008000 	.word	0x43008000
 800f28c:	3fb504f3 	.word	0x3fb504f3
 800f290:	3fec835e 	.word	0x3fec835e
 800f294:	3f8a8bd4 	.word	0x3f8a8bd4
 800f298:	40273d75 	.word	0x40273d75
    outptr = output_buf[ctr] + output_col;
 800f29c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800f2a0:	009b      	lsls	r3, r3, #2
 800f2a2:	463a      	mov	r2, r7
 800f2a4:	6812      	ldr	r2, [r2, #0]
 800f2a6:	4413      	add	r3, r2
 800f2a8:	681a      	ldr	r2, [r3, #0]
 800f2aa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 800f2ae:	4413      	add	r3, r2
 800f2b0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
     */
    
    /* Even part */

    /* Apply signed->unsigned and prepare float->int conversion */
    z5 = wsptr[0] + ((FAST_FLOAT) CENTERJSAMPLE + (FAST_FLOAT) 0.5);
 800f2b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f2b8:	edd3 7a00 	vldr	s15, [r3]
 800f2bc:	ed1f 7a0e 	vldr	s14, [pc, #-56]	; 800f288 <jpeg_idct_float+0x4c8>
 800f2c0:	ee77 7a87 	vadd.f32	s15, s15, s14
 800f2c4:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
    tmp10 = z5 + wsptr[4];
 800f2c8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f2cc:	3310      	adds	r3, #16
 800f2ce:	edd3 7a00 	vldr	s15, [r3]
 800f2d2:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800f2d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f2da:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
    tmp11 = z5 - wsptr[4];
 800f2de:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f2e2:	3310      	adds	r3, #16
 800f2e4:	edd3 7a00 	vldr	s15, [r3]
 800f2e8:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800f2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f2f0:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

    tmp13 = wsptr[2] + wsptr[6];
 800f2f4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f2f8:	3308      	adds	r3, #8
 800f2fa:	ed93 7a00 	vldr	s14, [r3]
 800f2fe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f302:	3318      	adds	r3, #24
 800f304:	edd3 7a00 	vldr	s15, [r3]
 800f308:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f30c:	edc7 7a52 	vstr	s15, [r7, #328]	; 0x148
    tmp12 = (wsptr[2] - wsptr[6]) * ((FAST_FLOAT) 1.414213562) - tmp13;
 800f310:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f314:	3308      	adds	r3, #8
 800f316:	ed93 7a00 	vldr	s14, [r3]
 800f31a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f31e:	3318      	adds	r3, #24
 800f320:	edd3 7a00 	vldr	s15, [r3]
 800f324:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f328:	ed1f 7a28 	vldr	s14, [pc, #-160]	; 800f28c <jpeg_idct_float+0x4cc>
 800f32c:	ee27 7a87 	vmul.f32	s14, s15, s14
 800f330:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800f334:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f338:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

    tmp0 = tmp10 + tmp13;
 800f33c:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 800f340:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800f344:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f348:	edc7 7a50 	vstr	s15, [r7, #320]	; 0x140
    tmp3 = tmp10 - tmp13;
 800f34c:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 800f350:	edd7 7a52 	vldr	s15, [r7, #328]	; 0x148
 800f354:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f358:	edc7 7a4f 	vstr	s15, [r7, #316]	; 0x13c
    tmp1 = tmp11 + tmp12;
 800f35c:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 800f360:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 800f364:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f368:	edc7 7a4e 	vstr	s15, [r7, #312]	; 0x138
    tmp2 = tmp11 - tmp12;
 800f36c:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 800f370:	edd7 7a51 	vldr	s15, [r7, #324]	; 0x144
 800f374:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f378:	edc7 7a4d 	vstr	s15, [r7, #308]	; 0x134

    /* Odd part */

    z13 = wsptr[5] + wsptr[3];
 800f37c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f380:	3314      	adds	r3, #20
 800f382:	ed93 7a00 	vldr	s14, [r3]
 800f386:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f38a:	330c      	adds	r3, #12
 800f38c:	edd3 7a00 	vldr	s15, [r3]
 800f390:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f394:	edc7 7a4c 	vstr	s15, [r7, #304]	; 0x130
    z10 = wsptr[5] - wsptr[3];
 800f398:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f39c:	3314      	adds	r3, #20
 800f39e:	ed93 7a00 	vldr	s14, [r3]
 800f3a2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f3a6:	330c      	adds	r3, #12
 800f3a8:	edd3 7a00 	vldr	s15, [r3]
 800f3ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3b0:	edc7 7a4b 	vstr	s15, [r7, #300]	; 0x12c
    z11 = wsptr[1] + wsptr[7];
 800f3b4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f3b8:	3304      	adds	r3, #4
 800f3ba:	ed93 7a00 	vldr	s14, [r3]
 800f3be:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f3c2:	331c      	adds	r3, #28
 800f3c4:	edd3 7a00 	vldr	s15, [r3]
 800f3c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3cc:	edc7 7a4a 	vstr	s15, [r7, #296]	; 0x128
    z12 = wsptr[1] - wsptr[7];
 800f3d0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f3d4:	3304      	adds	r3, #4
 800f3d6:	ed93 7a00 	vldr	s14, [r3]
 800f3da:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f3de:	331c      	adds	r3, #28
 800f3e0:	edd3 7a00 	vldr	s15, [r3]
 800f3e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f3e8:	edc7 7a49 	vstr	s15, [r7, #292]	; 0x124

    tmp7 = z11 + z13;
 800f3ec:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 800f3f0:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800f3f4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f3f8:	edc7 7a48 	vstr	s15, [r7, #288]	; 0x120
    tmp11 = (z11 - z13) * ((FAST_FLOAT) 1.414213562);
 800f3fc:	ed97 7a4a 	vldr	s14, [r7, #296]	; 0x128
 800f400:	edd7 7a4c 	vldr	s15, [r7, #304]	; 0x130
 800f404:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f408:	ed1f 7a60 	vldr	s14, [pc, #-384]	; 800f28c <jpeg_idct_float+0x4cc>
 800f40c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f410:	edc7 7a53 	vstr	s15, [r7, #332]	; 0x14c

    z5 = (z10 + z12) * ((FAST_FLOAT) 1.847759065); /* 2*c2 */
 800f414:	ed97 7a4b 	vldr	s14, [r7, #300]	; 0x12c
 800f418:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800f41c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f420:	ed1f 7a65 	vldr	s14, [pc, #-404]	; 800f290 <jpeg_idct_float+0x4d0>
 800f424:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f428:	edc7 7a55 	vstr	s15, [r7, #340]	; 0x154
    tmp10 = z5 - z12 * ((FAST_FLOAT) 1.082392200); /* 2*(c2-c6) */
 800f42c:	edd7 7a49 	vldr	s15, [r7, #292]	; 0x124
 800f430:	ed1f 7a68 	vldr	s14, [pc, #-416]	; 800f294 <jpeg_idct_float+0x4d4>
 800f434:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f438:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800f43c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f440:	edc7 7a54 	vstr	s15, [r7, #336]	; 0x150
    tmp12 = z5 - z10 * ((FAST_FLOAT) 2.613125930); /* 2*(c2+c6) */
 800f444:	edd7 7a4b 	vldr	s15, [r7, #300]	; 0x12c
 800f448:	ed1f 7a6d 	vldr	s14, [pc, #-436]	; 800f298 <jpeg_idct_float+0x4d8>
 800f44c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800f450:	ed97 7a55 	vldr	s14, [r7, #340]	; 0x154
 800f454:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f458:	edc7 7a51 	vstr	s15, [r7, #324]	; 0x144

    tmp6 = tmp12 - tmp7;
 800f45c:	ed97 7a51 	vldr	s14, [r7, #324]	; 0x144
 800f460:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800f464:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f468:	edc7 7a47 	vstr	s15, [r7, #284]	; 0x11c
    tmp5 = tmp11 - tmp6;
 800f46c:	ed97 7a53 	vldr	s14, [r7, #332]	; 0x14c
 800f470:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800f474:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f478:	edc7 7a46 	vstr	s15, [r7, #280]	; 0x118
    tmp4 = tmp10 - tmp5;
 800f47c:	ed97 7a54 	vldr	s14, [r7, #336]	; 0x150
 800f480:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800f484:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f488:	edc7 7a45 	vstr	s15, [r7, #276]	; 0x114

    /* Final output stage: float->int conversion and range-limit */

    outptr[0] = range_limit[((int) (tmp0 + tmp7)) & RANGE_MASK];
 800f48c:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800f490:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800f494:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f498:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f49c:	ee17 3a90 	vmov	r3, s15
 800f4a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f4a4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800f4a8:	4413      	add	r3, r2
 800f4aa:	781a      	ldrb	r2, [r3, #0]
 800f4ac:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f4b0:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[((int) (tmp0 - tmp7)) & RANGE_MASK];
 800f4b2:	ed97 7a50 	vldr	s14, [r7, #320]	; 0x140
 800f4b6:	edd7 7a48 	vldr	s15, [r7, #288]	; 0x120
 800f4ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f4be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4c2:	ee17 3a90 	vmov	r3, s15
 800f4c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f4ca:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800f4ce:	441a      	add	r2, r3
 800f4d0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f4d4:	3307      	adds	r3, #7
 800f4d6:	7812      	ldrb	r2, [r2, #0]
 800f4d8:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[((int) (tmp1 + tmp6)) & RANGE_MASK];
 800f4da:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 800f4de:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800f4e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f4e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f4ea:	ee17 3a90 	vmov	r3, s15
 800f4ee:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f4f2:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800f4f6:	441a      	add	r2, r3
 800f4f8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	7812      	ldrb	r2, [r2, #0]
 800f500:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[((int) (tmp1 - tmp6)) & RANGE_MASK];
 800f502:	ed97 7a4e 	vldr	s14, [r7, #312]	; 0x138
 800f506:	edd7 7a47 	vldr	s15, [r7, #284]	; 0x11c
 800f50a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f50e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f512:	ee17 3a90 	vmov	r3, s15
 800f516:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f51a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800f51e:	441a      	add	r2, r3
 800f520:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f524:	3306      	adds	r3, #6
 800f526:	7812      	ldrb	r2, [r2, #0]
 800f528:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[((int) (tmp2 + tmp5)) & RANGE_MASK];
 800f52a:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 800f52e:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800f532:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f536:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f53a:	ee17 3a90 	vmov	r3, s15
 800f53e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f542:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800f546:	441a      	add	r2, r3
 800f548:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f54c:	3302      	adds	r3, #2
 800f54e:	7812      	ldrb	r2, [r2, #0]
 800f550:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[((int) (tmp2 - tmp5)) & RANGE_MASK];
 800f552:	ed97 7a4d 	vldr	s14, [r7, #308]	; 0x134
 800f556:	edd7 7a46 	vldr	s15, [r7, #280]	; 0x118
 800f55a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f55e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f562:	ee17 3a90 	vmov	r3, s15
 800f566:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f56a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800f56e:	441a      	add	r2, r3
 800f570:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f574:	3305      	adds	r3, #5
 800f576:	7812      	ldrb	r2, [r2, #0]
 800f578:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[((int) (tmp3 + tmp4)) & RANGE_MASK];
 800f57a:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 800f57e:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800f582:	ee77 7a27 	vadd.f32	s15, s14, s15
 800f586:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f58a:	ee17 3a90 	vmov	r3, s15
 800f58e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f592:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800f596:	441a      	add	r2, r3
 800f598:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f59c:	3303      	adds	r3, #3
 800f59e:	7812      	ldrb	r2, [r2, #0]
 800f5a0:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[((int) (tmp3 - tmp4)) & RANGE_MASK];
 800f5a2:	ed97 7a4f 	vldr	s14, [r7, #316]	; 0x13c
 800f5a6:	edd7 7a45 	vldr	s15, [r7, #276]	; 0x114
 800f5aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800f5ae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f5b2:	ee17 3a90 	vmov	r3, s15
 800f5b6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800f5ba:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 800f5be:	441a      	add	r2, r3
 800f5c0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800f5c4:	3304      	adds	r3, #4
 800f5c6:	7812      	ldrb	r2, [r2, #0]
 800f5c8:	701a      	strb	r2, [r3, #0]
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 800f5ca:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800f5ce:	3320      	adds	r3, #32
 800f5d0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800f5d4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800f5d8:	3301      	adds	r3, #1
 800f5da:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
 800f5de:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800f5e2:	2b07      	cmp	r3, #7
 800f5e4:	f77f ae5a 	ble.w	800f29c <jpeg_idct_float+0x4dc>
  }
}
 800f5e8:	bf00      	nop
 800f5ea:	bf00      	nop
 800f5ec:	f507 77b8 	add.w	r7, r7, #368	; 0x170
 800f5f0:	46bd      	mov	sp, r7
 800f5f2:	bc90      	pop	{r4, r7}
 800f5f4:	4770      	bx	lr
 800f5f6:	bf00      	nop

0800f5f8 <jpeg_idct_ifast>:

GLOBAL(void)
jpeg_idct_ifast (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800f5f8:	b490      	push	{r4, r7}
 800f5fa:	b0de      	sub	sp, #376	; 0x178
 800f5fc:	af00      	add	r7, sp, #0
 800f5fe:	f107 040c 	add.w	r4, r7, #12
 800f602:	6020      	str	r0, [r4, #0]
 800f604:	f107 0008 	add.w	r0, r7, #8
 800f608:	6001      	str	r1, [r0, #0]
 800f60a:	1d39      	adds	r1, r7, #4
 800f60c:	600a      	str	r2, [r1, #0]
 800f60e:	463a      	mov	r2, r7
 800f610:	6013      	str	r3, [r2, #0]
  DCTELEM z5, z10, z11, z12, z13;
  JCOEFPTR inptr;
  IFAST_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800f612:	f107 030c 	add.w	r3, r7, #12
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800f61c:	3380      	adds	r3, #128	; 0x80
 800f61e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  SHIFT_TEMPS			/* for DESCALE */
  ISHIFT_TEMPS			/* for IDESCALE */

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 800f622:	1d3b      	adds	r3, r7, #4
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  quantptr = (IFAST_MULT_TYPE *) compptr->dct_table;
 800f62a:	f107 0308 	add.w	r3, r7, #8
 800f62e:	681b      	ldr	r3, [r3, #0]
 800f630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800f632:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  wsptr = workspace;
 800f636:	f107 0314 	add.w	r3, r7, #20
 800f63a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800f63e:	2308      	movs	r3, #8
 800f640:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800f644:	e1ec      	b.n	800fa20 <jpeg_idct_ifast+0x428>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f646:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f64a:	3310      	adds	r3, #16
 800f64c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f650:	2b00      	cmp	r3, #0
 800f652:	d174      	bne.n	800f73e <jpeg_idct_ifast+0x146>
 800f654:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f658:	3320      	adds	r3, #32
 800f65a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f65e:	2b00      	cmp	r3, #0
 800f660:	d16d      	bne.n	800f73e <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f662:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f666:	3330      	adds	r3, #48	; 0x30
 800f668:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800f66c:	2b00      	cmp	r3, #0
 800f66e:	d166      	bne.n	800f73e <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f670:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f674:	3340      	adds	r3, #64	; 0x40
 800f676:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d15f      	bne.n	800f73e <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f67e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f682:	3350      	adds	r3, #80	; 0x50
 800f684:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800f688:	2b00      	cmp	r3, #0
 800f68a:	d158      	bne.n	800f73e <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f68c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f690:	3360      	adds	r3, #96	; 0x60
 800f692:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f696:	2b00      	cmp	r3, #0
 800f698:	d151      	bne.n	800f73e <jpeg_idct_ifast+0x146>
	inptr[DCTSIZE*7] == 0) {
 800f69a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f69e:	3370      	adds	r3, #112	; 0x70
 800f6a0:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d14a      	bne.n	800f73e <jpeg_idct_ifast+0x146>
      /* AC terms all zero */
      int dcval = (int) DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f6a8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f6ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6b0:	461a      	mov	r2, r3
 800f6b2:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f6b6:	681b      	ldr	r3, [r3, #0]
 800f6b8:	fb03 f302 	mul.w	r3, r3, r2
 800f6bc:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

      wsptr[DCTSIZE*0] = dcval;
 800f6c0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f6c4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f6c8:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 800f6ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f6ce:	3320      	adds	r3, #32
 800f6d0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f6d4:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 800f6d6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f6da:	3340      	adds	r3, #64	; 0x40
 800f6dc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f6e0:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 800f6e2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f6e6:	3360      	adds	r3, #96	; 0x60
 800f6e8:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f6ec:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 800f6ee:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f6f2:	3380      	adds	r3, #128	; 0x80
 800f6f4:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f6f8:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 800f6fa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f6fe:	33a0      	adds	r3, #160	; 0xa0
 800f700:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f704:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 800f706:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f70a:	33c0      	adds	r3, #192	; 0xc0
 800f70c:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f710:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 800f712:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f716:	33e0      	adds	r3, #224	; 0xe0
 800f718:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800f71c:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 800f71e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f722:	3302      	adds	r3, #2
 800f724:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
      quantptr++;
 800f728:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f72c:	3304      	adds	r3, #4
 800f72e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
      wsptr++;
 800f732:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f736:	3304      	adds	r3, #4
 800f738:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
      continue;
 800f73c:	e16b      	b.n	800fa16 <jpeg_idct_ifast+0x41e>
    }
    
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800f73e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f742:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f746:	461a      	mov	r2, r3
 800f748:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f74c:	681b      	ldr	r3, [r3, #0]
 800f74e:	fb03 f302 	mul.w	r3, r3, r2
 800f752:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800f756:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f75a:	3320      	adds	r3, #32
 800f75c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f760:	461a      	mov	r2, r3
 800f762:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f766:	3340      	adds	r3, #64	; 0x40
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	fb03 f302 	mul.w	r3, r3, r2
 800f76e:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800f772:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f776:	3340      	adds	r3, #64	; 0x40
 800f778:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f77c:	461a      	mov	r2, r3
 800f77e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f782:	3380      	adds	r3, #128	; 0x80
 800f784:	681b      	ldr	r3, [r3, #0]
 800f786:	fb03 f302 	mul.w	r3, r3, r2
 800f78a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800f78e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f792:	3360      	adds	r3, #96	; 0x60
 800f794:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f798:	461a      	mov	r2, r3
 800f79a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f79e:	33c0      	adds	r3, #192	; 0xc0
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	fb03 f302 	mul.w	r3, r3, r2
 800f7a6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp10 = tmp0 + tmp2;	/* phase 3 */
 800f7aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f7ae:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800f7b2:	4413      	add	r3, r2
 800f7b4:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp11 = tmp0 - tmp2;
 800f7b8:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f7bc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800f7c0:	1ad3      	subs	r3, r2, r3
 800f7c2:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    tmp13 = tmp1 + tmp3;	/* phases 5-3 */
 800f7c6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800f7ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f7ce:	4413      	add	r3, r2
 800f7d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = MULTIPLY(tmp1 - tmp3, FIX_1_414213562) - tmp13; /* 2*c4 */
 800f7d4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800f7d8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800f7dc:	1ad3      	subs	r3, r2, r3
 800f7de:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f7e2:	fb02 f303 	mul.w	r3, r2, r3
 800f7e6:	121a      	asrs	r2, r3, #8
 800f7e8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f7ec:	1ad3      	subs	r3, r2, r3
 800f7ee:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp0 = tmp10 + tmp13;	/* phase 2 */
 800f7f2:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800f7f6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f7fa:	4413      	add	r3, r2
 800f7fc:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp3 = tmp10 - tmp13;
 800f800:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800f804:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800f808:	1ad3      	subs	r3, r2, r3
 800f80a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp1 = tmp11 + tmp12;
 800f80e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800f812:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f816:	4413      	add	r3, r2
 800f818:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp2 = tmp11 - tmp12;
 800f81c:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800f820:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800f824:	1ad3      	subs	r3, r2, r3
 800f826:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    
    /* Odd part */

    tmp4 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 800f82a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f82e:	3310      	adds	r3, #16
 800f830:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f834:	461a      	mov	r2, r3
 800f836:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f83a:	3320      	adds	r3, #32
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	fb03 f302 	mul.w	r3, r3, r2
 800f842:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    tmp5 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 800f846:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f84a:	3330      	adds	r3, #48	; 0x30
 800f84c:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f850:	461a      	mov	r2, r3
 800f852:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f856:	3360      	adds	r3, #96	; 0x60
 800f858:	681b      	ldr	r3, [r3, #0]
 800f85a:	fb03 f302 	mul.w	r3, r3, r2
 800f85e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp6 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 800f862:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f866:	3350      	adds	r3, #80	; 0x50
 800f868:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f86c:	461a      	mov	r2, r3
 800f86e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f872:	33a0      	adds	r3, #160	; 0xa0
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	fb03 f302 	mul.w	r3, r3, r2
 800f87a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp7 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 800f87e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f882:	3370      	adds	r3, #112	; 0x70
 800f884:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f888:	461a      	mov	r2, r3
 800f88a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800f88e:	33e0      	adds	r3, #224	; 0xe0
 800f890:	681b      	ldr	r3, [r3, #0]
 800f892:	fb03 f302 	mul.w	r3, r3, r2
 800f896:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    z13 = tmp6 + tmp5;		/* phase 6 */
 800f89a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f89e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f8a2:	4413      	add	r3, r2
 800f8a4:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z10 = tmp6 - tmp5;
 800f8a8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f8ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f8b0:	1ad3      	subs	r3, r2, r3
 800f8b2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z11 = tmp4 + tmp7;
 800f8b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f8ba:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f8be:	4413      	add	r3, r2
 800f8c0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    z12 = tmp4 - tmp7;
 800f8c4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f8c8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f8cc:	1ad3      	subs	r3, r2, r3
 800f8ce:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    tmp7 = z11 + z13;		/* phase 5 */
 800f8d2:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800f8d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f8da:	4413      	add	r3, r2
 800f8dc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800f8e0:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800f8e4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800f8e8:	1ad3      	subs	r3, r2, r3
 800f8ea:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800f8ee:	fb02 f303 	mul.w	r3, r2, r3
 800f8f2:	121b      	asrs	r3, r3, #8
 800f8f4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800f8f8:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800f8fc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f900:	4413      	add	r3, r2
 800f902:	f240 12d9 	movw	r2, #473	; 0x1d9
 800f906:	fb02 f303 	mul.w	r3, r2, r3
 800f90a:	121b      	asrs	r3, r3, #8
 800f90c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800f910:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800f914:	f240 1215 	movw	r2, #277	; 0x115
 800f918:	fb02 f303 	mul.w	r3, r2, r3
 800f91c:	121a      	asrs	r2, r3, #8
 800f91e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800f922:	1ad3      	subs	r3, r2, r3
 800f924:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800f928:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800f92c:	f46f 7227 	mvn.w	r2, #668	; 0x29c
 800f930:	fb02 f303 	mul.w	r3, r2, r3
 800f934:	121b      	asrs	r3, r3, #8
 800f936:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800f93a:	4413      	add	r3, r2
 800f93c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800f940:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800f944:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f948:	1ad3      	subs	r3, r2, r3
 800f94a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp5 = tmp11 - tmp6;
 800f94e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800f952:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800f956:	1ad3      	subs	r3, r2, r3
 800f958:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp4 = tmp10 + tmp5;
 800f95c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800f960:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800f964:	4413      	add	r3, r2
 800f966:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    wsptr[DCTSIZE*0] = (int) (tmp0 + tmp7);
 800f96a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800f96e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800f972:	441a      	add	r2, r3
 800f974:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f978:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) (tmp0 - tmp7);
 800f97a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f97e:	33e0      	adds	r3, #224	; 0xe0
 800f980:	f8d7 1148 	ldr.w	r1, [r7, #328]	; 0x148
 800f984:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 800f988:	1a8a      	subs	r2, r1, r2
 800f98a:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) (tmp1 + tmp6);
 800f98c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f990:	3320      	adds	r3, #32
 800f992:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800f996:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f99a:	440a      	add	r2, r1
 800f99c:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) (tmp1 - tmp6);
 800f99e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f9a2:	33c0      	adds	r3, #192	; 0xc0
 800f9a4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800f9a8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 800f9ac:	1a8a      	subs	r2, r1, r2
 800f9ae:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) (tmp2 + tmp5);
 800f9b0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f9b4:	3340      	adds	r3, #64	; 0x40
 800f9b6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800f9ba:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800f9be:	440a      	add	r2, r1
 800f9c0:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) (tmp2 - tmp5);
 800f9c2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f9c6:	33a0      	adds	r3, #160	; 0xa0
 800f9c8:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 800f9cc:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800f9d0:	1a8a      	subs	r2, r1, r2
 800f9d2:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) (tmp3 + tmp4);
 800f9d4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f9d8:	3380      	adds	r3, #128	; 0x80
 800f9da:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800f9de:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f9e2:	440a      	add	r2, r1
 800f9e4:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) (tmp3 - tmp4);
 800f9e6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800f9ea:	3360      	adds	r3, #96	; 0x60
 800f9ec:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800f9f0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800f9f4:	1a8a      	subs	r2, r1, r2
 800f9f6:	601a      	str	r2, [r3, #0]

    inptr++;			/* advance pointers to next column */
 800f9f8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800f9fc:	3302      	adds	r3, #2
 800f9fe:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    quantptr++;
 800fa02:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800fa06:	3304      	adds	r3, #4
 800fa08:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    wsptr++;
 800fa0c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa10:	3304      	adds	r3, #4
 800fa12:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fa16:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800fa1a:	3b01      	subs	r3, #1
 800fa1c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800fa20:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800fa24:	2b00      	cmp	r3, #0
 800fa26:	f73f ae0e 	bgt.w	800f646 <jpeg_idct_ifast+0x4e>
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 800fa2a:	f107 0314 	add.w	r3, r7, #20
 800fa2e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fa32:	2300      	movs	r3, #0
 800fa34:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800fa38:	e1c5      	b.n	800fdc6 <jpeg_idct_ifast+0x7ce>
    outptr = output_buf[ctr] + output_col;
 800fa3a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800fa3e:	009b      	lsls	r3, r3, #2
 800fa40:	463a      	mov	r2, r7
 800fa42:	6812      	ldr	r2, [r2, #0]
 800fa44:	4413      	add	r3, r2
 800fa46:	681a      	ldr	r2, [r3, #0]
 800fa48:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800fa4c:	4413      	add	r3, r2
 800fa4e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */
    
#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fa52:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa56:	3304      	adds	r3, #4
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2b00      	cmp	r3, #0
 800fa5c:	d164      	bne.n	800fb28 <jpeg_idct_ifast+0x530>
 800fa5e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa62:	3308      	adds	r3, #8
 800fa64:	681b      	ldr	r3, [r3, #0]
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d15e      	bne.n	800fb28 <jpeg_idct_ifast+0x530>
 800fa6a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa6e:	330c      	adds	r3, #12
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d158      	bne.n	800fb28 <jpeg_idct_ifast+0x530>
 800fa76:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa7a:	3310      	adds	r3, #16
 800fa7c:	681b      	ldr	r3, [r3, #0]
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d152      	bne.n	800fb28 <jpeg_idct_ifast+0x530>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fa82:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa86:	3314      	adds	r3, #20
 800fa88:	681b      	ldr	r3, [r3, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	d14c      	bne.n	800fb28 <jpeg_idct_ifast+0x530>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 800fa8e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa92:	3318      	adds	r3, #24
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	2b00      	cmp	r3, #0
 800fa98:	d146      	bne.n	800fb28 <jpeg_idct_ifast+0x530>
 800fa9a:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fa9e:	331c      	adds	r3, #28
 800faa0:	681b      	ldr	r3, [r3, #0]
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d140      	bne.n	800fb28 <jpeg_idct_ifast+0x530>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800faa6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800faaa:	681b      	ldr	r3, [r3, #0]
 800faac:	115b      	asrs	r3, r3, #5
				  & RANGE_MASK];
 800faae:	f3c3 0309 	ubfx	r3, r3, #0, #10
      JSAMPLE dcval = range_limit[IDESCALE(wsptr[0], PASS1_BITS+3)
 800fab2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fab6:	4413      	add	r3, r2
 800fab8:	781b      	ldrb	r3, [r3, #0]
 800faba:	f887 315f 	strb.w	r3, [r7, #351]	; 0x15f
      
      outptr[0] = dcval;
 800fabe:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fac2:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800fac6:	701a      	strb	r2, [r3, #0]
      outptr[1] = dcval;
 800fac8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800facc:	3301      	adds	r3, #1
 800face:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800fad2:	701a      	strb	r2, [r3, #0]
      outptr[2] = dcval;
 800fad4:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fad8:	3302      	adds	r3, #2
 800fada:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800fade:	701a      	strb	r2, [r3, #0]
      outptr[3] = dcval;
 800fae0:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fae4:	3303      	adds	r3, #3
 800fae6:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800faea:	701a      	strb	r2, [r3, #0]
      outptr[4] = dcval;
 800faec:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800faf0:	3304      	adds	r3, #4
 800faf2:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800faf6:	701a      	strb	r2, [r3, #0]
      outptr[5] = dcval;
 800faf8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fafc:	3305      	adds	r3, #5
 800fafe:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800fb02:	701a      	strb	r2, [r3, #0]
      outptr[6] = dcval;
 800fb04:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fb08:	3306      	adds	r3, #6
 800fb0a:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800fb0e:	701a      	strb	r2, [r3, #0]
      outptr[7] = dcval;
 800fb10:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fb14:	3307      	adds	r3, #7
 800fb16:	f897 215f 	ldrb.w	r2, [r7, #351]	; 0x15f
 800fb1a:	701a      	strb	r2, [r3, #0]

      wsptr += DCTSIZE;		/* advance pointer to next row */
 800fb1c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb20:	3320      	adds	r3, #32
 800fb22:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
      continue;
 800fb26:	e149      	b.n	800fdbc <jpeg_idct_ifast+0x7c4>
    }
#endif
    
    /* Even part */

    tmp10 = ((DCTELEM) wsptr[0] + (DCTELEM) wsptr[4]);
 800fb28:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb2c:	681a      	ldr	r2, [r3, #0]
 800fb2e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb32:	3310      	adds	r3, #16
 800fb34:	681b      	ldr	r3, [r3, #0]
 800fb36:	4413      	add	r3, r2
 800fb38:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp11 = ((DCTELEM) wsptr[0] - (DCTELEM) wsptr[4]);
 800fb3c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb40:	681a      	ldr	r2, [r3, #0]
 800fb42:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb46:	3310      	adds	r3, #16
 800fb48:	681b      	ldr	r3, [r3, #0]
 800fb4a:	1ad3      	subs	r3, r2, r3
 800fb4c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    tmp13 = ((DCTELEM) wsptr[2] + (DCTELEM) wsptr[6]);
 800fb50:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb54:	3308      	adds	r3, #8
 800fb56:	681a      	ldr	r2, [r3, #0]
 800fb58:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb5c:	3318      	adds	r3, #24
 800fb5e:	681b      	ldr	r3, [r3, #0]
 800fb60:	4413      	add	r3, r2
 800fb62:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = MULTIPLY((DCTELEM) wsptr[2] - (DCTELEM) wsptr[6], FIX_1_414213562)
 800fb66:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb6a:	3308      	adds	r3, #8
 800fb6c:	681a      	ldr	r2, [r3, #0]
 800fb6e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fb72:	3318      	adds	r3, #24
 800fb74:	681b      	ldr	r3, [r3, #0]
 800fb76:	1ad3      	subs	r3, r2, r3
 800fb78:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800fb7c:	fb02 f303 	mul.w	r3, r2, r3
 800fb80:	121a      	asrs	r2, r3, #8
 800fb82:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fb86:	1ad3      	subs	r3, r2, r3
 800fb88:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
	    - tmp13;

    tmp0 = tmp10 + tmp13;
 800fb8c:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800fb90:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fb94:	4413      	add	r3, r2
 800fb96:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp3 = tmp10 - tmp13;
 800fb9a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800fb9e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 800fba2:	1ad3      	subs	r3, r2, r3
 800fba4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp1 = tmp11 + tmp12;
 800fba8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800fbac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fbb0:	4413      	add	r3, r2
 800fbb2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp2 = tmp11 - tmp12;
 800fbb6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800fbba:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 800fbbe:	1ad3      	subs	r3, r2, r3
 800fbc0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    /* Odd part */

    z13 = (DCTELEM) wsptr[5] + (DCTELEM) wsptr[3];
 800fbc4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fbc8:	3314      	adds	r3, #20
 800fbca:	681a      	ldr	r2, [r3, #0]
 800fbcc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fbd0:	330c      	adds	r3, #12
 800fbd2:	681b      	ldr	r3, [r3, #0]
 800fbd4:	4413      	add	r3, r2
 800fbd6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z10 = (DCTELEM) wsptr[5] - (DCTELEM) wsptr[3];
 800fbda:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fbde:	3314      	adds	r3, #20
 800fbe0:	681a      	ldr	r2, [r3, #0]
 800fbe2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fbe6:	330c      	adds	r3, #12
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	1ad3      	subs	r3, r2, r3
 800fbec:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z11 = (DCTELEM) wsptr[1] + (DCTELEM) wsptr[7];
 800fbf0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fbf4:	3304      	adds	r3, #4
 800fbf6:	681a      	ldr	r2, [r3, #0]
 800fbf8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fbfc:	331c      	adds	r3, #28
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	4413      	add	r3, r2
 800fc02:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    z12 = (DCTELEM) wsptr[1] - (DCTELEM) wsptr[7];
 800fc06:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fc0a:	3304      	adds	r3, #4
 800fc0c:	681a      	ldr	r2, [r3, #0]
 800fc0e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fc12:	331c      	adds	r3, #28
 800fc14:	681b      	ldr	r3, [r3, #0]
 800fc16:	1ad3      	subs	r3, r2, r3
 800fc18:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    tmp7 = z11 + z13;		/* phase 5 */
 800fc1c:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800fc20:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fc24:	4413      	add	r3, r2
 800fc26:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp11 = MULTIPLY(z11 - z13, FIX_1_414213562); /* 2*c4 */
 800fc2a:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 800fc2e:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 800fc32:	1ad3      	subs	r3, r2, r3
 800fc34:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800fc38:	fb02 f303 	mul.w	r3, r2, r3
 800fc3c:	121b      	asrs	r3, r3, #8
 800fc3e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    z5 = MULTIPLY(z10 + z12, FIX_1_847759065); /* 2*c2 */
 800fc42:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800fc46:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc4a:	4413      	add	r3, r2
 800fc4c:	f240 12d9 	movw	r2, #473	; 0x1d9
 800fc50:	fb02 f303 	mul.w	r3, r2, r3
 800fc54:	121b      	asrs	r3, r3, #8
 800fc56:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp10 = MULTIPLY(z12, FIX_1_082392200) - z5; /* 2*(c2-c6) */
 800fc5a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800fc5e:	f240 1215 	movw	r2, #277	; 0x115
 800fc62:	fb02 f303 	mul.w	r3, r2, r3
 800fc66:	121a      	asrs	r2, r3, #8
 800fc68:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800fc6c:	1ad3      	subs	r3, r2, r3
 800fc6e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp12 = MULTIPLY(z10, - FIX_2_613125930) + z5; /* -2*(c2+c6) */
 800fc72:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800fc76:	f46f 7227 	mvn.w	r2, #668	; 0x29c
 800fc7a:	fb02 f303 	mul.w	r3, r2, r3
 800fc7e:	121b      	asrs	r3, r3, #8
 800fc80:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800fc84:	4413      	add	r3, r2
 800fc86:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp6 = tmp12 - tmp7;	/* phase 2 */
 800fc8a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800fc8e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fc92:	1ad3      	subs	r3, r2, r3
 800fc94:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp5 = tmp11 - tmp6;
 800fc98:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 800fc9c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fca0:	1ad3      	subs	r3, r2, r3
 800fca2:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp4 = tmp10 + tmp5;
 800fca6:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 800fcaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fcae:	4413      	add	r3, r2
 800fcb0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Final output stage: scale down by a factor of 8 and range-limit */

    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fcb4:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800fcb8:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fcbc:	4413      	add	r3, r2
 800fcbe:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 800fcc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[IDESCALE(tmp0 + tmp7, PASS1_BITS+3)
 800fcc4:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fcc8:	4413      	add	r3, r2
 800fcca:	781a      	ldrb	r2, [r3, #0]
 800fccc:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fcd0:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800fcd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800fcd6:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800fcda:	1ad3      	subs	r3, r2, r3
 800fcdc:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 800fcde:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[IDESCALE(tmp0 - tmp7, PASS1_BITS+3)
 800fce2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fce6:	441a      	add	r2, r3
 800fce8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fcec:	3307      	adds	r3, #7
 800fcee:	7812      	ldrb	r2, [r2, #0]
 800fcf0:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800fcf2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800fcf6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fcfa:	4413      	add	r3, r2
 800fcfc:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 800fcfe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[IDESCALE(tmp1 + tmp6, PASS1_BITS+3)
 800fd02:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fd06:	441a      	add	r2, r3
 800fd08:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fd0c:	3301      	adds	r3, #1
 800fd0e:	7812      	ldrb	r2, [r2, #0]
 800fd10:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800fd12:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800fd16:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800fd1a:	1ad3      	subs	r3, r2, r3
 800fd1c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 800fd1e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[IDESCALE(tmp1 - tmp6, PASS1_BITS+3)
 800fd22:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fd26:	441a      	add	r2, r3
 800fd28:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fd2c:	3306      	adds	r3, #6
 800fd2e:	7812      	ldrb	r2, [r2, #0]
 800fd30:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800fd32:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800fd36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fd3a:	4413      	add	r3, r2
 800fd3c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 800fd3e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[IDESCALE(tmp2 + tmp5, PASS1_BITS+3)
 800fd42:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fd46:	441a      	add	r2, r3
 800fd48:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fd4c:	3302      	adds	r3, #2
 800fd4e:	7812      	ldrb	r2, [r2, #0]
 800fd50:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800fd52:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800fd56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800fd5a:	1ad3      	subs	r3, r2, r3
 800fd5c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 800fd5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[IDESCALE(tmp2 - tmp5, PASS1_BITS+3)
 800fd62:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fd66:	441a      	add	r2, r3
 800fd68:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fd6c:	3305      	adds	r3, #5
 800fd6e:	7812      	ldrb	r2, [r2, #0]
 800fd70:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800fd72:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800fd76:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fd7a:	4413      	add	r3, r2
 800fd7c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 800fd7e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[IDESCALE(tmp3 + tmp4, PASS1_BITS+3)
 800fd82:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fd86:	441a      	add	r2, r3
 800fd88:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fd8c:	3304      	adds	r3, #4
 800fd8e:	7812      	ldrb	r2, [r2, #0]
 800fd90:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800fd92:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 800fd96:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800fd9a:	1ad3      	subs	r3, r2, r3
 800fd9c:	115b      	asrs	r3, r3, #5
			    & RANGE_MASK];
 800fd9e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[IDESCALE(tmp3 - tmp4, PASS1_BITS+3)
 800fda2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 800fda6:	441a      	add	r2, r3
 800fda8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 800fdac:	3303      	adds	r3, #3
 800fdae:	7812      	ldrb	r2, [r2, #0]
 800fdb0:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 800fdb2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 800fdb6:	3320      	adds	r3, #32
 800fdb8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 800fdbc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800fdc0:	3301      	adds	r3, #1
 800fdc2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
 800fdc6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800fdca:	2b07      	cmp	r3, #7
 800fdcc:	f77f ae35 	ble.w	800fa3a <jpeg_idct_ifast+0x442>
  }
}
 800fdd0:	bf00      	nop
 800fdd2:	bf00      	nop
 800fdd4:	f507 77bc 	add.w	r7, r7, #376	; 0x178
 800fdd8:	46bd      	mov	sp, r7
 800fdda:	bc90      	pop	{r4, r7}
 800fddc:	4770      	bx	lr
	...

0800fde0 <jpeg_idct_islow>:

GLOBAL(void)
jpeg_idct_islow (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 800fde0:	b490      	push	{r4, r7}
 800fde2:	b0d8      	sub	sp, #352	; 0x160
 800fde4:	af00      	add	r7, sp, #0
 800fde6:	f107 040c 	add.w	r4, r7, #12
 800fdea:	6020      	str	r0, [r4, #0]
 800fdec:	f107 0008 	add.w	r0, r7, #8
 800fdf0:	6001      	str	r1, [r0, #0]
 800fdf2:	1d39      	adds	r1, r7, #4
 800fdf4:	600a      	str	r2, [r1, #0]
 800fdf6:	463a      	mov	r2, r7
 800fdf8:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 800fdfa:	f107 030c 	add.w	r3, r7, #12
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 800fe04:	3380      	adds	r3, #128	; 0x80
 800fe06:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 800fe0a:	1d3b      	adds	r3, r7, #4
 800fe0c:	681b      	ldr	r3, [r3, #0]
 800fe0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 800fe12:	f107 0308 	add.w	r3, r7, #8
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800fe1a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
  wsptr = workspace;
 800fe1e:	f107 0314 	add.w	r3, r7, #20
 800fe22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 800fe26:	2308      	movs	r3, #8
 800fe28:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800fe2c:	e238      	b.n	80102a0 <jpeg_idct_islow+0x4c0>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fe2e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fe32:	3310      	adds	r3, #16
 800fe34:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe38:	2b00      	cmp	r3, #0
 800fe3a:	d175      	bne.n	800ff28 <jpeg_idct_islow+0x148>
 800fe3c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fe40:	3320      	adds	r3, #32
 800fe42:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe46:	2b00      	cmp	r3, #0
 800fe48:	d16e      	bne.n	800ff28 <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fe4a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fe4e:	3330      	adds	r3, #48	; 0x30
 800fe50:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d167      	bne.n	800ff28 <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fe58:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fe5c:	3340      	adds	r3, #64	; 0x40
 800fe5e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d160      	bne.n	800ff28 <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fe66:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fe6a:	3350      	adds	r3, #80	; 0x50
 800fe6c:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 800fe70:	2b00      	cmp	r3, #0
 800fe72:	d159      	bne.n	800ff28 <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fe74:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fe78:	3360      	adds	r3, #96	; 0x60
 800fe7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe7e:	2b00      	cmp	r3, #0
 800fe80:	d152      	bne.n	800ff28 <jpeg_idct_islow+0x148>
	inptr[DCTSIZE*7] == 0) {
 800fe82:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fe86:	3370      	adds	r3, #112	; 0x70
 800fe88:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 800fe8c:	2b00      	cmp	r3, #0
 800fe8e:	d14b      	bne.n	800ff28 <jpeg_idct_islow+0x148>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 800fe90:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800fe94:	f9b3 3000 	ldrsh.w	r3, [r3]
 800fe98:	461a      	mov	r2, r3
 800fe9a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800fe9e:	681b      	ldr	r3, [r3, #0]
 800fea0:	fb03 f302 	mul.w	r3, r3, r2
 800fea4:	009b      	lsls	r3, r3, #2
 800fea6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

      wsptr[DCTSIZE*0] = dcval;
 800feaa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800feae:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800feb2:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 800feb4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800feb8:	3320      	adds	r3, #32
 800feba:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800febe:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 800fec0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800fec4:	3340      	adds	r3, #64	; 0x40
 800fec6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800feca:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 800fecc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800fed0:	3360      	adds	r3, #96	; 0x60
 800fed2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800fed6:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 800fed8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800fedc:	3380      	adds	r3, #128	; 0x80
 800fede:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800fee2:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 800fee4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800fee8:	33a0      	adds	r3, #160	; 0xa0
 800feea:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800feee:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 800fef0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800fef4:	33c0      	adds	r3, #192	; 0xc0
 800fef6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800fefa:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 800fefc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ff00:	33e0      	adds	r3, #224	; 0xe0
 800ff02:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 800ff06:	601a      	str	r2, [r3, #0]

      inptr++;			/* advance pointers to next column */
 800ff08:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ff0c:	3302      	adds	r3, #2
 800ff0e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
      quantptr++;
 800ff12:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ff16:	3304      	adds	r3, #4
 800ff18:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
      wsptr++;
 800ff1c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800ff20:	3304      	adds	r3, #4
 800ff22:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      continue;
 800ff26:	e1b6      	b.n	8010296 <jpeg_idct_islow+0x4b6>
    }

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 800ff28:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ff2c:	3320      	adds	r3, #32
 800ff2e:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff32:	461a      	mov	r2, r3
 800ff34:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ff38:	3340      	adds	r3, #64	; 0x40
 800ff3a:	681b      	ldr	r3, [r3, #0]
 800ff3c:	fb03 f302 	mul.w	r3, r3, r2
 800ff40:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 800ff44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ff48:	3360      	adds	r3, #96	; 0x60
 800ff4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ff4e:	461a      	mov	r2, r3
 800ff50:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ff54:	33c0      	adds	r3, #192	; 0xc0
 800ff56:	681b      	ldr	r3, [r3, #0]
 800ff58:	fb03 f302 	mul.w	r3, r3, r2
 800ff5c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 800ff60:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800ff64:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ff68:	4413      	add	r3, r2
 800ff6a:	f241 1251 	movw	r2, #4433	; 0x1151
 800ff6e:	fb02 f303 	mul.w	r3, r2, r3
 800ff72:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 800ff76:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ff7a:	f641 027e 	movw	r2, #6270	; 0x187e
 800ff7e:	fb02 f303 	mul.w	r3, r2, r3
 800ff82:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800ff86:	4413      	add	r3, r2
 800ff88:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 800ff8c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ff90:	4aca      	ldr	r2, [pc, #808]	; (80102bc <jpeg_idct_islow+0x4dc>)
 800ff92:	fb02 f303 	mul.w	r3, r2, r3
 800ff96:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 800ff9a:	4413      	add	r3, r2
 800ff9c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 800ffa0:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ffa4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ffae:	681b      	ldr	r3, [r3, #0]
 800ffb0:	fb03 f302 	mul.w	r3, r3, r2
 800ffb4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 800ffb8:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800ffbc:	3340      	adds	r3, #64	; 0x40
 800ffbe:	f9b3 3000 	ldrsh.w	r3, [r3]
 800ffc2:	461a      	mov	r2, r3
 800ffc4:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 800ffc8:	3380      	adds	r3, #128	; 0x80
 800ffca:	681b      	ldr	r3, [r3, #0]
 800ffcc:	fb03 f302 	mul.w	r3, r3, r2
 800ffd0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    z2 <<= CONST_BITS;
 800ffd4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ffd8:	035b      	lsls	r3, r3, #13
 800ffda:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 <<= CONST_BITS;
 800ffde:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800ffe2:	035b      	lsls	r3, r3, #13
 800ffe4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 800ffe8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800ffec:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800fff0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    tmp0 = z2 + z3;
 800fff4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800fff8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800fffc:	4413      	add	r3, r2
 800fffe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp1 = z2 - z3;
 8010002:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8010006:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801000a:	1ad3      	subs	r3, r2, r3
 801000c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    tmp10 = tmp0 + tmp2;
 8010010:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8010014:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010018:	4413      	add	r3, r2
 801001a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp13 = tmp0 - tmp2;
 801001e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8010022:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010026:	1ad3      	subs	r3, r2, r3
 8010028:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp11 = tmp1 + tmp3;
 801002c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010030:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010034:	4413      	add	r3, r2
 8010036:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp12 = tmp1 - tmp3;
 801003a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801003e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010042:	1ad3      	subs	r3, r2, r3
 8010044:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8010048:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801004c:	3370      	adds	r3, #112	; 0x70
 801004e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010052:	461a      	mov	r2, r3
 8010054:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8010058:	33e0      	adds	r3, #224	; 0xe0
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	fb03 f302 	mul.w	r3, r3, r2
 8010060:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010064:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8010068:	3350      	adds	r3, #80	; 0x50
 801006a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801006e:	461a      	mov	r2, r3
 8010070:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8010074:	33a0      	adds	r3, #160	; 0xa0
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	fb03 f302 	mul.w	r3, r3, r2
 801007c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010080:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8010084:	3330      	adds	r3, #48	; 0x30
 8010086:	f9b3 3000 	ldrsh.w	r3, [r3]
 801008a:	461a      	mov	r2, r3
 801008c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8010090:	3360      	adds	r3, #96	; 0x60
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	fb03 f302 	mul.w	r3, r3, r2
 8010098:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801009c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80100a0:	3310      	adds	r3, #16
 80100a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80100a6:	461a      	mov	r2, r3
 80100a8:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80100ac:	3320      	adds	r3, #32
 80100ae:	681b      	ldr	r3, [r3, #0]
 80100b0:	fb03 f302 	mul.w	r3, r3, r2
 80100b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    
    z2 = tmp0 + tmp2;
 80100b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80100bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80100c0:	4413      	add	r3, r2
 80100c2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = tmp1 + tmp3;
 80100c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80100ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80100ce:	4413      	add	r3, r2
 80100d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80100d4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80100d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80100dc:	4413      	add	r3, r2
 80100de:	f242 52a1 	movw	r2, #9633	; 0x25a1
 80100e2:	fb02 f303 	mul.w	r3, r2, r3
 80100e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 80100ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80100ee:	4a74      	ldr	r2, [pc, #464]	; (80102c0 <jpeg_idct_islow+0x4e0>)
 80100f0:	fb02 f303 	mul.w	r3, r2, r3
 80100f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 80100f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80100fc:	4a71      	ldr	r2, [pc, #452]	; (80102c4 <jpeg_idct_islow+0x4e4>)
 80100fe:	fb02 f303 	mul.w	r3, r2, r3
 8010102:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    z2 += z1;
 8010106:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801010a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801010e:	4413      	add	r3, r2
 8010110:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 += z1;
 8010114:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8010118:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801011c:	4413      	add	r3, r2
 801011e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8010122:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8010126:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801012a:	4413      	add	r3, r2
 801012c:	4a66      	ldr	r2, [pc, #408]	; (80102c8 <jpeg_idct_islow+0x4e8>)
 801012e:	fb02 f303 	mul.w	r3, r2, r3
 8010132:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8010136:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801013a:	f640 128e 	movw	r2, #2446	; 0x98e
 801013e:	fb02 f303 	mul.w	r3, r2, r3
 8010142:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8010146:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801014a:	f243 020b 	movw	r2, #12299	; 0x300b
 801014e:	fb02 f303 	mul.w	r3, r2, r3
 8010152:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp0 += z1 + z2;
 8010156:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801015a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801015e:	4413      	add	r3, r2
 8010160:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8010164:	4413      	add	r3, r2
 8010166:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp3 += z1 + z3;
 801016a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801016e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010172:	4413      	add	r3, r2
 8010174:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010178:	4413      	add	r3, r2
 801017a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801017e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010182:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010186:	4413      	add	r3, r2
 8010188:	4a50      	ldr	r2, [pc, #320]	; (80102cc <jpeg_idct_islow+0x4ec>)
 801018a:	fb02 f303 	mul.w	r3, r2, r3
 801018e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8010192:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010196:	f244 12b3 	movw	r2, #16819	; 0x41b3
 801019a:	fb02 f303 	mul.w	r3, r2, r3
 801019e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 80101a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80101a6:	f246 2254 	movw	r2, #25172	; 0x6254
 80101aa:	fb02 f303 	mul.w	r3, r2, r3
 80101ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp1 += z1 + z3;
 80101b2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80101b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80101ba:	4413      	add	r3, r2
 80101bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80101c0:	4413      	add	r3, r2
 80101c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 += z1 + z2;
 80101c6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80101ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80101ce:	4413      	add	r3, r2
 80101d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80101d4:	4413      	add	r3, r2
 80101d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 80101da:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80101de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80101e2:	4413      	add	r3, r2
 80101e4:	12da      	asrs	r2, r3, #11
 80101e6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80101ea:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 80101ec:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80101f0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80101f4:	1ad2      	subs	r2, r2, r3
 80101f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80101fa:	33e0      	adds	r3, #224	; 0xe0
 80101fc:	12d2      	asrs	r2, r2, #11
 80101fe:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8010200:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8010204:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010208:	441a      	add	r2, r3
 801020a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801020e:	3320      	adds	r3, #32
 8010210:	12d2      	asrs	r2, r2, #11
 8010212:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8010214:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8010218:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801021c:	1ad2      	subs	r2, r2, r3
 801021e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010222:	33c0      	adds	r3, #192	; 0xc0
 8010224:	12d2      	asrs	r2, r2, #11
 8010226:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8010228:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801022c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010230:	441a      	add	r2, r3
 8010232:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010236:	3340      	adds	r3, #64	; 0x40
 8010238:	12d2      	asrs	r2, r2, #11
 801023a:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801023c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8010240:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010244:	1ad2      	subs	r2, r2, r3
 8010246:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801024a:	33a0      	adds	r3, #160	; 0xa0
 801024c:	12d2      	asrs	r2, r2, #11
 801024e:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8010250:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8010254:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8010258:	441a      	add	r2, r3
 801025a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801025e:	3360      	adds	r3, #96	; 0x60
 8010260:	12d2      	asrs	r2, r2, #11
 8010262:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8010264:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8010268:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801026c:	1ad2      	subs	r2, r2, r3
 801026e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010272:	3380      	adds	r3, #128	; 0x80
 8010274:	12d2      	asrs	r2, r2, #11
 8010276:	601a      	str	r2, [r3, #0]
    
    inptr++;			/* advance pointers to next column */
 8010278:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801027c:	3302      	adds	r3, #2
 801027e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    quantptr++;
 8010282:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8010286:	3304      	adds	r3, #4
 8010288:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    wsptr++;
 801028c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010290:	3304      	adds	r3, #4
 8010292:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8010296:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801029a:	3b01      	subs	r3, #1
 801029c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80102a0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f73f adc2 	bgt.w	800fe2e <jpeg_idct_islow+0x4e>

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 80102aa:	f107 0314 	add.w	r3, r7, #20
 80102ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80102b2:	2300      	movs	r3, #0
 80102b4:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80102b8:	e218      	b.n	80106ec <jpeg_idct_islow+0x90c>
 80102ba:	bf00      	nop
 80102bc:	ffffc4df 	.word	0xffffc4df
 80102c0:	ffffc13b 	.word	0xffffc13b
 80102c4:	fffff384 	.word	0xfffff384
 80102c8:	ffffe333 	.word	0xffffe333
 80102cc:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 80102d0:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	463a      	mov	r2, r7
 80102d8:	6812      	ldr	r2, [r2, #0]
 80102da:	4413      	add	r3, r2
 80102dc:	681a      	ldr	r2, [r3, #0]
 80102de:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80102e2:	4413      	add	r3, r2
 80102e4:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
     * test takes more time than it's worth.  In that case this section
     * may be commented out.
     */

#ifndef NO_ZERO_ROW_TEST
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 80102e8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80102ec:	3304      	adds	r3, #4
 80102ee:	681b      	ldr	r3, [r3, #0]
 80102f0:	2b00      	cmp	r3, #0
 80102f2:	d165      	bne.n	80103c0 <jpeg_idct_islow+0x5e0>
 80102f4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80102f8:	3308      	adds	r3, #8
 80102fa:	681b      	ldr	r3, [r3, #0]
 80102fc:	2b00      	cmp	r3, #0
 80102fe:	d15f      	bne.n	80103c0 <jpeg_idct_islow+0x5e0>
 8010300:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010304:	330c      	adds	r3, #12
 8010306:	681b      	ldr	r3, [r3, #0]
 8010308:	2b00      	cmp	r3, #0
 801030a:	d159      	bne.n	80103c0 <jpeg_idct_islow+0x5e0>
 801030c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010310:	3310      	adds	r3, #16
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	2b00      	cmp	r3, #0
 8010316:	d153      	bne.n	80103c0 <jpeg_idct_islow+0x5e0>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010318:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801031c:	3314      	adds	r3, #20
 801031e:	681b      	ldr	r3, [r3, #0]
    if (wsptr[1] == 0 && wsptr[2] == 0 && wsptr[3] == 0 && wsptr[4] == 0 &&
 8010320:	2b00      	cmp	r3, #0
 8010322:	d14d      	bne.n	80103c0 <jpeg_idct_islow+0x5e0>
	wsptr[5] == 0 && wsptr[6] == 0 && wsptr[7] == 0) {
 8010324:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010328:	3318      	adds	r3, #24
 801032a:	681b      	ldr	r3, [r3, #0]
 801032c:	2b00      	cmp	r3, #0
 801032e:	d147      	bne.n	80103c0 <jpeg_idct_islow+0x5e0>
 8010330:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010334:	331c      	adds	r3, #28
 8010336:	681b      	ldr	r3, [r3, #0]
 8010338:	2b00      	cmp	r3, #0
 801033a:	d141      	bne.n	80103c0 <jpeg_idct_islow+0x5e0>
      /* AC terms all zero */
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801033c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010340:	681b      	ldr	r3, [r3, #0]
 8010342:	3310      	adds	r3, #16
 8010344:	115b      	asrs	r3, r3, #5
				  & RANGE_MASK];
 8010346:	f3c3 0309 	ubfx	r3, r3, #0, #10
      JSAMPLE dcval = range_limit[(int) DESCALE((INT32) wsptr[0], PASS1_BITS+3)
 801034a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801034e:	4413      	add	r3, r2
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147

      outptr[0] = dcval;
 8010356:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801035a:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 801035e:	701a      	strb	r2, [r3, #0]
      outptr[1] = dcval;
 8010360:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010364:	3301      	adds	r3, #1
 8010366:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 801036a:	701a      	strb	r2, [r3, #0]
      outptr[2] = dcval;
 801036c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010370:	3302      	adds	r3, #2
 8010372:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8010376:	701a      	strb	r2, [r3, #0]
      outptr[3] = dcval;
 8010378:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801037c:	3303      	adds	r3, #3
 801037e:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 8010382:	701a      	strb	r2, [r3, #0]
      outptr[4] = dcval;
 8010384:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010388:	3304      	adds	r3, #4
 801038a:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 801038e:	701a      	strb	r2, [r3, #0]
      outptr[5] = dcval;
 8010390:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010394:	3305      	adds	r3, #5
 8010396:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 801039a:	701a      	strb	r2, [r3, #0]
      outptr[6] = dcval;
 801039c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80103a0:	3306      	adds	r3, #6
 80103a2:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 80103a6:	701a      	strb	r2, [r3, #0]
      outptr[7] = dcval;
 80103a8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80103ac:	3307      	adds	r3, #7
 80103ae:	f897 2147 	ldrb.w	r2, [r7, #327]	; 0x147
 80103b2:	701a      	strb	r2, [r3, #0]

      wsptr += DCTSIZE;		/* advance pointer to next row */
 80103b4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80103b8:	3320      	adds	r3, #32
 80103ba:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
      continue;
 80103be:	e190      	b.n	80106e2 <jpeg_idct_islow+0x902>
#endif

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
 80103c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80103c4:	3308      	adds	r3, #8
 80103c6:	681b      	ldr	r3, [r3, #0]
 80103c8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = (INT32) wsptr[6];
 80103cc:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80103d0:	3318      	adds	r3, #24
 80103d2:	681b      	ldr	r3, [r3, #0]
 80103d4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 80103d8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80103dc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80103e0:	4413      	add	r3, r2
 80103e2:	f241 1251 	movw	r2, #4433	; 0x1151
 80103e6:	fb02 f303 	mul.w	r3, r2, r3
 80103ea:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 80103ee:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80103f2:	f641 027e 	movw	r2, #6270	; 0x187e
 80103f6:	fb02 f303 	mul.w	r3, r2, r3
 80103fa:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80103fe:	4413      	add	r3, r2
 8010400:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8010404:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010408:	4abe      	ldr	r2, [pc, #760]	; (8010704 <jpeg_idct_islow+0x924>)
 801040a:	fb02 f303 	mul.w	r3, r2, r3
 801040e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8010412:	4413      	add	r3, r2
 8010414:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010418:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801041c:	681b      	ldr	r3, [r3, #0]
 801041e:	3310      	adds	r3, #16
 8010420:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = (INT32) wsptr[4];
 8010424:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010428:	3310      	adds	r3, #16
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    tmp0 = (z2 + z3) << CONST_BITS;
 8010430:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8010434:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010438:	4413      	add	r3, r2
 801043a:	035b      	lsls	r3, r3, #13
 801043c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp1 = (z2 - z3) << CONST_BITS;
 8010440:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8010444:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010448:	1ad3      	subs	r3, r2, r3
 801044a:	035b      	lsls	r3, r3, #13
 801044c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    
    tmp10 = tmp0 + tmp2;
 8010450:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8010454:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010458:	4413      	add	r3, r2
 801045a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp13 = tmp0 - tmp2;
 801045e:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8010462:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010466:	1ad3      	subs	r3, r2, r3
 8010468:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp11 = tmp1 + tmp3;
 801046c:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010470:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010474:	4413      	add	r3, r2
 8010476:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp12 = tmp1 - tmp3;
 801047a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801047e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010482:	1ad3      	subs	r3, r2, r3
 8010484:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = (INT32) wsptr[7];
 8010488:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801048c:	331c      	adds	r3, #28
 801048e:	681b      	ldr	r3, [r3, #0]
 8010490:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp1 = (INT32) wsptr[5];
 8010494:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8010498:	3314      	adds	r3, #20
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 = (INT32) wsptr[3];
 80104a0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80104a4:	330c      	adds	r3, #12
 80104a6:	681b      	ldr	r3, [r3, #0]
 80104a8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp3 = (INT32) wsptr[1];
 80104ac:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80104b0:	3304      	adds	r3, #4
 80104b2:	681b      	ldr	r3, [r3, #0]
 80104b4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    z2 = tmp0 + tmp2;
 80104b8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 80104bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80104c0:	4413      	add	r3, r2
 80104c2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = tmp1 + tmp3;
 80104c6:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80104ca:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80104ce:	4413      	add	r3, r2
 80104d0:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 80104d4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80104d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80104dc:	4413      	add	r3, r2
 80104de:	f242 52a1 	movw	r2, #9633	; 0x25a1
 80104e2:	fb02 f303 	mul.w	r3, r2, r3
 80104e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 80104ea:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80104ee:	4a86      	ldr	r2, [pc, #536]	; (8010708 <jpeg_idct_islow+0x928>)
 80104f0:	fb02 f303 	mul.w	r3, r2, r3
 80104f4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 80104f8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80104fc:	4a83      	ldr	r2, [pc, #524]	; (801070c <jpeg_idct_islow+0x92c>)
 80104fe:	fb02 f303 	mul.w	r3, r2, r3
 8010502:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    z2 += z1;
 8010506:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801050a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801050e:	4413      	add	r3, r2
 8010510:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z3 += z1;
 8010514:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8010518:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801051c:	4413      	add	r3, r2
 801051e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8010522:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8010526:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801052a:	4413      	add	r3, r2
 801052c:	4a78      	ldr	r2, [pc, #480]	; (8010710 <jpeg_idct_islow+0x930>)
 801052e:	fb02 f303 	mul.w	r3, r2, r3
 8010532:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8010536:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801053a:	f640 128e 	movw	r2, #2446	; 0x98e
 801053e:	fb02 f303 	mul.w	r3, r2, r3
 8010542:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8010546:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801054a:	f243 020b 	movw	r2, #12299	; 0x300b
 801054e:	fb02 f303 	mul.w	r3, r2, r3
 8010552:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp0 += z1 + z2;
 8010556:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801055a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801055e:	4413      	add	r3, r2
 8010560:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8010564:	4413      	add	r3, r2
 8010566:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp3 += z1 + z3;
 801056a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801056e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8010572:	4413      	add	r3, r2
 8010574:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8010578:	4413      	add	r3, r2
 801057a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801057e:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8010582:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010586:	4413      	add	r3, r2
 8010588:	4a62      	ldr	r2, [pc, #392]	; (8010714 <jpeg_idct_islow+0x934>)
 801058a:	fb02 f303 	mul.w	r3, r2, r3
 801058e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8010592:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010596:	f244 12b3 	movw	r2, #16819	; 0x41b3
 801059a:	fb02 f303 	mul.w	r3, r2, r3
 801059e:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 80105a2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80105a6:	f246 2254 	movw	r2, #25172	; 0x6254
 80105aa:	fb02 f303 	mul.w	r3, r2, r3
 80105ae:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp1 += z1 + z3;
 80105b2:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80105b6:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80105ba:	4413      	add	r3, r2
 80105bc:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80105c0:	4413      	add	r3, r2
 80105c2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp2 += z1 + z2;
 80105c6:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80105ca:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80105ce:	4413      	add	r3, r2
 80105d0:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80105d4:	4413      	add	r3, r2
 80105d6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80105da:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80105de:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80105e2:	4413      	add	r3, r2
 80105e4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80105e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 80105ea:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80105ee:	4413      	add	r3, r2
 80105f0:	781a      	ldrb	r2, [r3, #0]
 80105f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80105f6:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 80105f8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80105fc:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8010600:	1ad3      	subs	r3, r2, r3
 8010602:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010604:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8010608:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801060c:	441a      	add	r2, r3
 801060e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010612:	3307      	adds	r3, #7
 8010614:	7812      	ldrb	r2, [r2, #0]
 8010616:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010618:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801061c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010620:	4413      	add	r3, r2
 8010622:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010624:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8010628:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801062c:	441a      	add	r2, r3
 801062e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010632:	3301      	adds	r3, #1
 8010634:	7812      	ldrb	r2, [r2, #0]
 8010636:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010638:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801063c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8010640:	1ad3      	subs	r3, r2, r3
 8010642:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010644:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8010648:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801064c:	441a      	add	r2, r3
 801064e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010652:	3306      	adds	r3, #6
 8010654:	7812      	ldrb	r2, [r2, #0]
 8010656:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010658:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801065c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010660:	4413      	add	r3, r2
 8010662:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010664:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8010668:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801066c:	441a      	add	r2, r3
 801066e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010672:	3302      	adds	r3, #2
 8010674:	7812      	ldrb	r2, [r2, #0]
 8010676:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010678:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 801067c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8010680:	1ad3      	subs	r3, r2, r3
 8010682:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010684:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8010688:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801068c:	441a      	add	r2, r3
 801068e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8010692:	3305      	adds	r3, #5
 8010694:	7812      	ldrb	r2, [r2, #0]
 8010696:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8010698:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801069c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80106a0:	4413      	add	r3, r2
 80106a2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80106a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 80106a8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80106ac:	441a      	add	r2, r3
 80106ae:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106b2:	3303      	adds	r3, #3
 80106b4:	7812      	ldrb	r2, [r2, #0]
 80106b6:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80106b8:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80106bc:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80106c0:	1ad3      	subs	r3, r2, r3
 80106c2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80106c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 80106c8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80106cc:	441a      	add	r2, r3
 80106ce:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80106d2:	3304      	adds	r3, #4
 80106d4:	7812      	ldrb	r2, [r2, #0]
 80106d6:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 80106d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80106dc:	3320      	adds	r3, #32
 80106de:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
  for (ctr = 0; ctr < DCTSIZE; ctr++) {
 80106e2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80106e6:	3301      	adds	r3, #1
 80106e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80106ec:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80106f0:	2b07      	cmp	r3, #7
 80106f2:	f77f aded 	ble.w	80102d0 <jpeg_idct_islow+0x4f0>
  }
}
 80106f6:	bf00      	nop
 80106f8:	bf00      	nop
 80106fa:	f507 77b0 	add.w	r7, r7, #352	; 0x160
 80106fe:	46bd      	mov	sp, r7
 8010700:	bc90      	pop	{r4, r7}
 8010702:	4770      	bx	lr
 8010704:	ffffc4df 	.word	0xffffc4df
 8010708:	ffffc13b 	.word	0xffffc13b
 801070c:	fffff384 	.word	0xfffff384
 8010710:	ffffe333 	.word	0xffffe333
 8010714:	ffffadfd 	.word	0xffffadfd

08010718 <jpeg_idct_7x7>:

GLOBAL(void)
jpeg_idct_7x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010718:	b490      	push	{r4, r7}
 801071a:	b0c6      	sub	sp, #280	; 0x118
 801071c:	af00      	add	r7, sp, #0
 801071e:	f107 040c 	add.w	r4, r7, #12
 8010722:	6020      	str	r0, [r4, #0]
 8010724:	f107 0008 	add.w	r0, r7, #8
 8010728:	6001      	str	r1, [r0, #0]
 801072a:	1d39      	adds	r1, r7, #4
 801072c:	600a      	str	r2, [r1, #0]
 801072e:	463a      	mov	r2, r7
 8010730:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010732:	f107 030c 	add.w	r3, r7, #12
 8010736:	681b      	ldr	r3, [r3, #0]
 8010738:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801073c:	3380      	adds	r3, #128	; 0x80
 801073e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  int workspace[7*7];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8010742:	1d3b      	adds	r3, r7, #4
 8010744:	681b      	ldr	r3, [r3, #0]
 8010746:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801074a:	f107 0308 	add.w	r3, r7, #8
 801074e:	681b      	ldr	r3, [r3, #0]
 8010750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010752:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  wsptr = workspace;
 8010756:	f107 0314 	add.w	r3, r7, #20
 801075a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801075e:	2300      	movs	r3, #0
 8010760:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8010764:	e17a      	b.n	8010a5c <jpeg_idct_7x7+0x344>
    /* Even part */

    tmp13 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010766:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801076a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801076e:	461a      	mov	r2, r3
 8010770:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	fb03 f302 	mul.w	r3, r3, r2
 801077a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp13 <<= CONST_BITS;
 801077e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010782:	035b      	lsls	r3, r3, #13
 8010784:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    /* Add fudge factor here for final descale. */
    tmp13 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010788:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801078c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010790:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010794:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010798:	3320      	adds	r3, #32
 801079a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801079e:	461a      	mov	r2, r3
 80107a0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80107a4:	3340      	adds	r3, #64	; 0x40
 80107a6:	681b      	ldr	r3, [r3, #0]
 80107a8:	fb03 f302 	mul.w	r3, r3, r2
 80107ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80107b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107b4:	3340      	adds	r3, #64	; 0x40
 80107b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107ba:	461a      	mov	r2, r3
 80107bc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80107c0:	3380      	adds	r3, #128	; 0x80
 80107c2:	681b      	ldr	r3, [r3, #0]
 80107c4:	fb03 f302 	mul.w	r3, r3, r2
 80107c8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80107cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80107d0:	3360      	adds	r3, #96	; 0x60
 80107d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80107d6:	461a      	mov	r2, r3
 80107d8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80107dc:	33c0      	adds	r3, #192	; 0xc0
 80107de:	681b      	ldr	r3, [r3, #0]
 80107e0:	fb03 f302 	mul.w	r3, r3, r2
 80107e4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 80107e8:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80107ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80107f0:	1ad3      	subs	r3, r2, r3
 80107f2:	f641 4237 	movw	r2, #7223	; 0x1c37
 80107f6:	fb02 f303 	mul.w	r3, r2, r3
 80107fa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 80107fe:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010806:	1ad3      	subs	r3, r2, r3
 8010808:	f640 2212 	movw	r2, #2578	; 0xa12
 801080c:	fb02 f303 	mul.w	r3, r2, r3
 8010810:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010814:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010818:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801081c:	441a      	add	r2, r3
 801081e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010822:	441a      	add	r2, r3
 8010824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010828:	4993      	ldr	r1, [pc, #588]	; (8010a78 <jpeg_idct_7x7+0x360>)
 801082a:	fb01 f303 	mul.w	r3, r1, r3
 801082e:	4413      	add	r3, r2
 8010830:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    tmp0 = z1 + z3;
 8010834:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010838:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801083c:	4413      	add	r3, r2
 801083e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    z2 -= tmp0;
 8010842:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010846:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801084a:	1ad3      	subs	r3, r2, r3
 801084c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010850:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010854:	f642 02c6 	movw	r2, #10438	; 0x28c6
 8010858:	fb02 f303 	mul.w	r3, r2, r3
 801085c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010860:	4413      	add	r3, r2
 8010862:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010866:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801086a:	f46f 721f 	mvn.w	r2, #636	; 0x27c
 801086e:	fb02 f203 	mul.w	r2, r2, r3
 8010872:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010876:	4413      	add	r3, r2
 8010878:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801087c:	4413      	add	r3, r2
 801087e:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010882:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010886:	4a7d      	ldr	r2, [pc, #500]	; (8010a7c <jpeg_idct_7x7+0x364>)
 8010888:	fb02 f203 	mul.w	r2, r2, r3
 801088c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010890:	4413      	add	r3, r2
 8010892:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010896:	4413      	add	r3, r2
 8010898:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 801089c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80108a0:	f642 5241 	movw	r2, #11585	; 0x2d41
 80108a4:	fb02 f303 	mul.w	r3, r2, r3
 80108a8:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80108ac:	4413      	add	r3, r2
 80108ae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80108b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108b6:	3310      	adds	r3, #16
 80108b8:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108bc:	461a      	mov	r2, r3
 80108be:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80108c2:	3320      	adds	r3, #32
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	fb03 f302 	mul.w	r3, r3, r2
 80108ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80108ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108d2:	3330      	adds	r3, #48	; 0x30
 80108d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108d8:	461a      	mov	r2, r3
 80108da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80108de:	3360      	adds	r3, #96	; 0x60
 80108e0:	681b      	ldr	r3, [r3, #0]
 80108e2:	fb03 f302 	mul.w	r3, r3, r2
 80108e6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80108ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80108ee:	3350      	adds	r3, #80	; 0x50
 80108f0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80108f4:	461a      	mov	r2, r3
 80108f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80108fa:	33a0      	adds	r3, #160	; 0xa0
 80108fc:	681b      	ldr	r3, [r3, #0]
 80108fe:	fb03 f302 	mul.w	r3, r3, r2
 8010902:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010906:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801090a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801090e:	4413      	add	r3, r2
 8010910:	f641 52ef 	movw	r2, #7663	; 0x1def
 8010914:	fb02 f303 	mul.w	r3, r2, r3
 8010918:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 801091c:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010924:	1ad3      	subs	r3, r2, r3
 8010926:	f240 5273 	movw	r2, #1395	; 0x573
 801092a:	fb02 f303 	mul.w	r3, r2, r3
 801092e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp0 = tmp1 - tmp2;
 8010932:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010936:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801093a:	1ad3      	subs	r3, r2, r3
 801093c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp1 += tmp2;
 8010940:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010944:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010948:	4413      	add	r3, r2
 801094a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 801094e:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010952:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010956:	4413      	add	r3, r2
 8010958:	4a49      	ldr	r2, [pc, #292]	; (8010a80 <jpeg_idct_7x7+0x368>)
 801095a:	fb02 f303 	mul.w	r3, r2, r3
 801095e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp1 += tmp2;
 8010962:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010966:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801096a:	4413      	add	r3, r2
 801096c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010970:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010974:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010978:	4413      	add	r3, r2
 801097a:	f241 32a3 	movw	r2, #5027	; 0x13a3
 801097e:	fb02 f303 	mul.w	r3, r2, r3
 8010982:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp0 += z2;
 8010986:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801098a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801098e:	4413      	add	r3, r2
 8010990:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010994:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010998:	f643 32de 	movw	r2, #15326	; 0x3bde
 801099c:	fb02 f203 	mul.w	r2, r2, r3
 80109a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80109a4:	4413      	add	r3, r2
 80109a6:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80109aa:	4413      	add	r3, r2
 80109ac:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    /* Final output stage */

    wsptr[7*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 80109b0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80109b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109b8:	4413      	add	r3, r2
 80109ba:	12da      	asrs	r2, r3, #11
 80109bc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80109c0:	601a      	str	r2, [r3, #0]
    wsptr[7*6] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80109c2:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80109c6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80109ca:	1ad2      	subs	r2, r2, r3
 80109cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80109d0:	33a8      	adds	r3, #168	; 0xa8
 80109d2:	12d2      	asrs	r2, r2, #11
 80109d4:	601a      	str	r2, [r3, #0]
    wsptr[7*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 80109d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80109da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109de:	441a      	add	r2, r3
 80109e0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80109e4:	331c      	adds	r3, #28
 80109e6:	12d2      	asrs	r2, r2, #11
 80109e8:	601a      	str	r2, [r3, #0]
    wsptr[7*5] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 80109ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80109ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80109f2:	1ad2      	subs	r2, r2, r3
 80109f4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80109f8:	338c      	adds	r3, #140	; 0x8c
 80109fa:	12d2      	asrs	r2, r2, #11
 80109fc:	601a      	str	r2, [r3, #0]
    wsptr[7*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 80109fe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010a02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a06:	441a      	add	r2, r3
 8010a08:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010a0c:	3338      	adds	r3, #56	; 0x38
 8010a0e:	12d2      	asrs	r2, r2, #11
 8010a10:	601a      	str	r2, [r3, #0]
    wsptr[7*4] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010a12:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010a16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010a1a:	1ad2      	subs	r2, r2, r3
 8010a1c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010a20:	3370      	adds	r3, #112	; 0x70
 8010a22:	12d2      	asrs	r2, r2, #11
 8010a24:	601a      	str	r2, [r3, #0]
    wsptr[7*3] = (int) RIGHT_SHIFT(tmp13, CONST_BITS-PASS1_BITS);
 8010a26:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010a2a:	3354      	adds	r3, #84	; 0x54
 8010a2c:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010a30:	12d2      	asrs	r2, r2, #11
 8010a32:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8010a34:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010a38:	3301      	adds	r3, #1
 8010a3a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8010a3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8010a42:	3302      	adds	r3, #2
 8010a44:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 8010a48:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8010a4c:	3304      	adds	r3, #4
 8010a4e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8010a52:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010a56:	3304      	adds	r3, #4
 8010a58:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8010a5c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010a60:	2b06      	cmp	r3, #6
 8010a62:	f77f ae80 	ble.w	8010766 <jpeg_idct_7x7+0x4e>
  }

  /* Pass 2: process 7 rows from work array, store into output array. */

  wsptr = workspace;
 8010a66:	f107 0314 	add.w	r3, r7, #20
 8010a6a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for (ctr = 0; ctr < 7; ctr++) {
 8010a6e:	2300      	movs	r3, #0
 8010a70:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8010a74:	e171      	b.n	8010d5a <jpeg_idct_7x7+0x642>
 8010a76:	bf00      	nop
 8010a78:	ffffc515 	.word	0xffffc515
 8010a7c:	ffffb0f1 	.word	0xffffb0f1
 8010a80:	ffffd3e1 	.word	0xffffd3e1
    outptr = output_buf[ctr] + output_col;
 8010a84:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010a88:	009b      	lsls	r3, r3, #2
 8010a8a:	463a      	mov	r2, r7
 8010a8c:	6812      	ldr	r2, [r2, #0]
 8010a8e:	4413      	add	r3, r2
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8010a96:	4413      	add	r3, r2
 8010a98:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp13 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010a9c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010aa0:	681b      	ldr	r3, [r3, #0]
 8010aa2:	3310      	adds	r3, #16
 8010aa4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp13 <<= CONST_BITS;
 8010aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010aac:	035b      	lsls	r3, r3, #13
 8010aae:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    z1 = (INT32) wsptr[2];
 8010ab2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010ab6:	3308      	adds	r3, #8
 8010ab8:	681b      	ldr	r3, [r3, #0]
 8010aba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 = (INT32) wsptr[4];
 8010abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010ac2:	3310      	adds	r3, #16
 8010ac4:	681b      	ldr	r3, [r3, #0]
 8010ac6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z3 = (INT32) wsptr[6];
 8010aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010ace:	3318      	adds	r3, #24
 8010ad0:	681b      	ldr	r3, [r3, #0]
 8010ad2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    tmp10 = MULTIPLY(z2 - z3, FIX(0.881747734));     /* c4 */
 8010ad6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010ada:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010ade:	1ad3      	subs	r3, r2, r3
 8010ae0:	f641 4237 	movw	r2, #7223	; 0x1c37
 8010ae4:	fb02 f303 	mul.w	r3, r2, r3
 8010ae8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp12 = MULTIPLY(z1 - z2, FIX(0.314692123));     /* c6 */
 8010aec:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010af0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010af4:	1ad3      	subs	r3, r2, r3
 8010af6:	f640 2212 	movw	r2, #2578	; 0xa12
 8010afa:	fb02 f303 	mul.w	r3, r2, r3
 8010afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp11 = tmp10 + tmp12 + tmp13 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 8010b02:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010b06:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010b0a:	441a      	add	r2, r3
 8010b0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010b10:	441a      	add	r2, r3
 8010b12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b16:	4997      	ldr	r1, [pc, #604]	; (8010d74 <jpeg_idct_7x7+0x65c>)
 8010b18:	fb01 f303 	mul.w	r3, r1, r3
 8010b1c:	4413      	add	r3, r2
 8010b1e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    tmp0 = z1 + z3;
 8010b22:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010b26:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010b2a:	4413      	add	r3, r2
 8010b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    z2 -= tmp0;
 8010b30:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010b34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b38:	1ad3      	subs	r3, r2, r3
 8010b3a:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp0 = MULTIPLY(tmp0, FIX(1.274162392)) + tmp13; /* c2 */
 8010b3e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b42:	f642 02c6 	movw	r2, #10438	; 0x28c6
 8010b46:	fb02 f303 	mul.w	r3, r2, r3
 8010b4a:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010b4e:	4413      	add	r3, r2
 8010b50:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp10 += tmp0 - MULTIPLY(z3, FIX(0.077722536));  /* c2-c4-c6 */
 8010b54:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010b58:	f46f 721f 	mvn.w	r2, #636	; 0x27c
 8010b5c:	fb02 f203 	mul.w	r2, r2, r3
 8010b60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b64:	4413      	add	r3, r2
 8010b66:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010b6a:	4413      	add	r3, r2
 8010b6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp12 += tmp0 - MULTIPLY(z1, FIX(2.470602249));  /* c2+c4+c6 */
 8010b70:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8010b74:	4a80      	ldr	r2, [pc, #512]	; (8010d78 <jpeg_idct_7x7+0x660>)
 8010b76:	fb02 f203 	mul.w	r2, r2, r3
 8010b7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010b7e:	4413      	add	r3, r2
 8010b80:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010b84:	4413      	add	r3, r2
 8010b86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp13 += MULTIPLY(z2, FIX(1.414213562));         /* c0 */
 8010b8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010b8e:	f642 5241 	movw	r2, #11585	; 0x2d41
 8010b92:	fb02 f303 	mul.w	r3, r2, r3
 8010b96:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8010b9a:	4413      	add	r3, r2
 8010b9c:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8010ba0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010ba4:	3304      	adds	r3, #4
 8010ba6:	681b      	ldr	r3, [r3, #0]
 8010ba8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 = (INT32) wsptr[3];
 8010bac:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010bb0:	330c      	adds	r3, #12
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z3 = (INT32) wsptr[5];
 8010bb8:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010bbc:	3314      	adds	r3, #20
 8010bbe:	681b      	ldr	r3, [r3, #0]
 8010bc0:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0

    tmp1 = MULTIPLY(z1 + z2, FIX(0.935414347));      /* (c3+c1-c5)/2 */
 8010bc4:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010bcc:	4413      	add	r3, r2
 8010bce:	f641 52ef 	movw	r2, #7663	; 0x1def
 8010bd2:	fb02 f303 	mul.w	r3, r2, r3
 8010bd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp2 = MULTIPLY(z1 - z2, FIX(0.170262339));      /* (c3+c5-c1)/2 */
 8010bda:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010be2:	1ad3      	subs	r3, r2, r3
 8010be4:	f240 5273 	movw	r2, #1395	; 0x573
 8010be8:	fb02 f303 	mul.w	r3, r2, r3
 8010bec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp0 = tmp1 - tmp2;
 8010bf0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010bf4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010bf8:	1ad3      	subs	r3, r2, r3
 8010bfa:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp1 += tmp2;
 8010bfe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010c02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c06:	4413      	add	r3, r2
 8010c08:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp2 = MULTIPLY(z2 + z3, - FIX(1.378756276));    /* -c1 */
 8010c0c:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8010c10:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010c14:	4413      	add	r3, r2
 8010c16:	4a59      	ldr	r2, [pc, #356]	; (8010d7c <jpeg_idct_7x7+0x664>)
 8010c18:	fb02 f303 	mul.w	r3, r2, r3
 8010c1c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp1 += tmp2;
 8010c20:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8010c24:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010c28:	4413      	add	r3, r2
 8010c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));        /* c5 */
 8010c2e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8010c32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010c36:	4413      	add	r3, r2
 8010c38:	f241 32a3 	movw	r2, #5027	; 0x13a3
 8010c3c:	fb02 f303 	mul.w	r3, r2, r3
 8010c40:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp0 += z2;
 8010c44:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8010c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c4c:	4413      	add	r3, r2
 8010c4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp2 += z2 + MULTIPLY(z3, FIX(1.870828693));     /* c3+c1-c5 */
 8010c52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8010c56:	f643 32de 	movw	r2, #15326	; 0x3bde
 8010c5a:	fb02 f203 	mul.w	r2, r2, r3
 8010c5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8010c62:	4413      	add	r3, r2
 8010c64:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 8010c68:	4413      	add	r3, r2
 8010c6a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c6e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c76:	4413      	add	r3, r2
 8010c78:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8010c7e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010c82:	4413      	add	r3, r2
 8010c84:	781a      	ldrb	r2, [r3, #0]
 8010c86:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010c8a:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010c8c:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8010c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8010c94:	1ad3      	subs	r3, r2, r3
 8010c96:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8010c9c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010ca0:	441a      	add	r2, r3
 8010ca2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ca6:	3306      	adds	r3, #6
 8010ca8:	7812      	ldrb	r2, [r2, #0]
 8010caa:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010cac:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010cb0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cb4:	4413      	add	r3, r2
 8010cb6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010cb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 8010cbc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010cc0:	441a      	add	r2, r3
 8010cc2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010cc6:	3301      	adds	r3, #1
 8010cc8:	7812      	ldrb	r2, [r2, #0]
 8010cca:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010ccc:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8010cd0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010cd4:	1ad3      	subs	r3, r2, r3
 8010cd6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010cd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 8010cdc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010ce0:	441a      	add	r2, r3
 8010ce2:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010ce6:	3305      	adds	r3, #5
 8010ce8:	7812      	ldrb	r2, [r2, #0]
 8010cea:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010cec:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010cf0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010cf4:	4413      	add	r3, r2
 8010cf6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010cf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8010cfc:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010d00:	441a      	add	r2, r3
 8010d02:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d06:	3302      	adds	r3, #2
 8010d08:	7812      	ldrb	r2, [r2, #0]
 8010d0a:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010d0c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8010d10:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010d14:	1ad3      	subs	r3, r2, r3
 8010d16:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010d18:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8010d1c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010d20:	441a      	add	r2, r3
 8010d22:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d26:	3304      	adds	r3, #4
 8010d28:	7812      	ldrb	r2, [r2, #0]
 8010d2a:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010d2c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8010d30:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8010d32:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13,
 8010d36:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8010d3a:	441a      	add	r2, r3
 8010d3c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8010d40:	3303      	adds	r3, #3
 8010d42:	7812      	ldrb	r2, [r2, #0]
 8010d44:	701a      	strb	r2, [r3, #0]

    wsptr += 7;		/* advance pointer to next row */
 8010d46:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8010d4a:	331c      	adds	r3, #28
 8010d4c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for (ctr = 0; ctr < 7; ctr++) {
 8010d50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010d54:	3301      	adds	r3, #1
 8010d56:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8010d5a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8010d5e:	2b06      	cmp	r3, #6
 8010d60:	f77f ae90 	ble.w	8010a84 <jpeg_idct_7x7+0x36c>
  }
}
 8010d64:	bf00      	nop
 8010d66:	bf00      	nop
 8010d68:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8010d6c:	46bd      	mov	sp, r7
 8010d6e:	bc90      	pop	{r4, r7}
 8010d70:	4770      	bx	lr
 8010d72:	bf00      	nop
 8010d74:	ffffc515 	.word	0xffffc515
 8010d78:	ffffb0f1 	.word	0xffffb0f1
 8010d7c:	ffffd3e1 	.word	0xffffd3e1

08010d80 <jpeg_idct_6x6>:

GLOBAL(void)
jpeg_idct_6x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8010d80:	b480      	push	{r7}
 8010d82:	b0b9      	sub	sp, #228	; 0xe4
 8010d84:	af00      	add	r7, sp, #0
 8010d86:	60f8      	str	r0, [r7, #12]
 8010d88:	60b9      	str	r1, [r7, #8]
 8010d8a:	607a      	str	r2, [r7, #4]
 8010d8c:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8010d8e:	68fb      	ldr	r3, [r7, #12]
 8010d90:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8010d94:	3380      	adds	r3, #128	; 0x80
 8010d96:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  int workspace[6*6];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8010d9a:	687b      	ldr	r3, [r7, #4]
 8010d9c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8010da0:	68bb      	ldr	r3, [r7, #8]
 8010da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8010da4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  wsptr = workspace;
 8010da8:	f107 0314 	add.w	r3, r7, #20
 8010dac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010db0:	2300      	movs	r3, #0
 8010db2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010db6:	e105      	b.n	8010fc4 <jpeg_idct_6x6+0x244>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8010db8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010dc0:	461a      	mov	r2, r3
 8010dc2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010dc6:	681b      	ldr	r3, [r3, #0]
 8010dc8:	fb03 f302 	mul.w	r3, r3, r2
 8010dcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp0 <<= CONST_BITS;
 8010dd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010dd4:	035b      	lsls	r3, r3, #13
 8010dd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8010dda:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010dde:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8010de2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8010de6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010dea:	3340      	adds	r3, #64	; 0x40
 8010dec:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010df0:	461a      	mov	r2, r3
 8010df2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010df6:	3380      	adds	r3, #128	; 0x80
 8010df8:	681b      	ldr	r3, [r3, #0]
 8010dfa:	fb03 f302 	mul.w	r3, r3, r2
 8010dfe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8010e02:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010e06:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8010e0a:	fb02 f303 	mul.w	r3, r2, r3
 8010e0e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp1 = tmp0 + tmp10;
 8010e12:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010e16:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010e1a:	4413      	add	r3, r2
 8010e1c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 8010e20:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8010e24:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010e28:	1ad2      	subs	r2, r2, r3
 8010e2a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010e2e:	1ad3      	subs	r3, r2, r3
 8010e30:	12db      	asrs	r3, r3, #11
 8010e32:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8010e36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e3a:	3320      	adds	r3, #32
 8010e3c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010e40:	461a      	mov	r2, r3
 8010e42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010e46:	3340      	adds	r3, #64	; 0x40
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	fb03 f302 	mul.w	r3, r3, r2
 8010e4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8010e52:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8010e56:	f242 7231 	movw	r2, #10033	; 0x2731
 8010e5a:	fb02 f303 	mul.w	r3, r2, r3
 8010e5e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp10 = tmp1 + tmp0;
 8010e62:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010e66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010e6a:	4413      	add	r3, r2
 8010e6c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp12 = tmp1 - tmp0;
 8010e70:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010e74:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010e78:	1ad3      	subs	r3, r2, r3
 8010e7a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8010e7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e82:	3310      	adds	r3, #16
 8010e84:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010e88:	461a      	mov	r2, r3
 8010e8a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010e8e:	3320      	adds	r3, #32
 8010e90:	681b      	ldr	r3, [r3, #0]
 8010e92:	fb03 f302 	mul.w	r3, r3, r2
 8010e96:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8010e9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010e9e:	3330      	adds	r3, #48	; 0x30
 8010ea0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ea4:	461a      	mov	r2, r3
 8010ea6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010eaa:	3360      	adds	r3, #96	; 0x60
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	fb03 f302 	mul.w	r3, r3, r2
 8010eb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8010eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010eba:	3350      	adds	r3, #80	; 0x50
 8010ebc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8010ec0:	461a      	mov	r2, r3
 8010ec2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010ec6:	33a0      	adds	r3, #160	; 0xa0
 8010ec8:	681b      	ldr	r3, [r3, #0]
 8010eca:	fb03 f302 	mul.w	r3, r3, r2
 8010ece:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8010ed2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010ed6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010eda:	4413      	add	r3, r2
 8010edc:	f640 32b6 	movw	r2, #2998	; 0xbb6
 8010ee0:	fb02 f303 	mul.w	r3, r2, r3
 8010ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 8010ee8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010eec:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010ef0:	4413      	add	r3, r2
 8010ef2:	035b      	lsls	r3, r3, #13
 8010ef4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010ef8:	4413      	add	r3, r2
 8010efa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8010efe:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8010f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010f06:	1ad3      	subs	r3, r2, r3
 8010f08:	035b      	lsls	r3, r3, #13
 8010f0a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010f0e:	4413      	add	r3, r2
 8010f10:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 8010f14:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8010f18:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8010f1c:	1ad2      	subs	r2, r2, r3
 8010f1e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8010f22:	1ad3      	subs	r3, r2, r3
 8010f24:	009b      	lsls	r3, r3, #2
 8010f26:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8010f2a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010f2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f32:	4413      	add	r3, r2
 8010f34:	12da      	asrs	r2, r3, #11
 8010f36:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f3a:	601a      	str	r2, [r3, #0]
    wsptr[6*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8010f3c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8010f40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8010f44:	1ad2      	subs	r2, r2, r3
 8010f46:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f4a:	3378      	adds	r3, #120	; 0x78
 8010f4c:	12d2      	asrs	r2, r2, #11
 8010f4e:	601a      	str	r2, [r3, #0]
    wsptr[6*1] = (int) (tmp11 + tmp1);
 8010f50:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f54:	3318      	adds	r3, #24
 8010f56:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8010f5a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010f5e:	440a      	add	r2, r1
 8010f60:	601a      	str	r2, [r3, #0]
    wsptr[6*4] = (int) (tmp11 - tmp1);
 8010f62:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f66:	3360      	adds	r3, #96	; 0x60
 8010f68:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8010f6c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8010f70:	1a8a      	subs	r2, r1, r2
 8010f72:	601a      	str	r2, [r3, #0]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8010f74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010f78:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010f7c:	441a      	add	r2, r3
 8010f7e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f82:	3330      	adds	r3, #48	; 0x30
 8010f84:	12d2      	asrs	r2, r2, #11
 8010f86:	601a      	str	r2, [r3, #0]
    wsptr[6*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8010f88:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8010f8c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8010f90:	1ad2      	subs	r2, r2, r3
 8010f92:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010f96:	3348      	adds	r3, #72	; 0x48
 8010f98:	12d2      	asrs	r2, r2, #11
 8010f9a:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8010f9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010fa0:	3301      	adds	r3, #1
 8010fa2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010fa6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8010faa:	3302      	adds	r3, #2
 8010fac:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8010fb0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8010fb4:	3304      	adds	r3, #4
 8010fb6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8010fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010fbe:	3304      	adds	r3, #4
 8010fc0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8010fc4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010fc8:	2b05      	cmp	r3, #5
 8010fca:	f77f aef5 	ble.w	8010db8 <jpeg_idct_6x6+0x38>
  }

  /* Pass 2: process 6 rows from work array, store into output array. */

  wsptr = workspace;
 8010fce:	f107 0314 	add.w	r3, r7, #20
 8010fd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  for (ctr = 0; ctr < 6; ctr++) {
 8010fd6:	2300      	movs	r3, #0
 8010fd8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8010fdc:	e0f7      	b.n	80111ce <jpeg_idct_6x6+0x44e>
    outptr = output_buf[ctr] + output_col;
 8010fde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	683a      	ldr	r2, [r7, #0]
 8010fe6:	4413      	add	r3, r2
 8010fe8:	681a      	ldr	r2, [r3, #0]
 8010fea:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8010fee:	4413      	add	r3, r2
 8010ff0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8010ff4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8010ff8:	681b      	ldr	r3, [r3, #0]
 8010ffa:	3310      	adds	r3, #16
 8010ffc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp0 <<= CONST_BITS;
 8011000:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011004:	035b      	lsls	r3, r3, #13
 8011006:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp2 = (INT32) wsptr[4];
 801100a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801100e:	3310      	adds	r3, #16
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 8011016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801101a:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801101e:	fb02 f303 	mul.w	r3, r2, r3
 8011022:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp1 = tmp0 + tmp10;
 8011026:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801102a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801102e:	4413      	add	r3, r2
 8011030:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp11 = tmp0 - tmp10 - tmp10;
 8011034:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8011038:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801103c:	1ad2      	subs	r2, r2, r3
 801103e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011042:	1ad3      	subs	r3, r2, r3
 8011044:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp10 = (INT32) wsptr[2];
 8011048:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801104c:	3308      	adds	r3, #8
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8011054:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8011058:	f242 7231 	movw	r2, #10033	; 0x2731
 801105c:	fb02 f303 	mul.w	r3, r2, r3
 8011060:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp10 = tmp1 + tmp0;
 8011064:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011068:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801106c:	4413      	add	r3, r2
 801106e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp12 = tmp1 - tmp0;
 8011072:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011076:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801107a:	1ad3      	subs	r3, r2, r3
 801107c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8011080:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011084:	3304      	adds	r3, #4
 8011086:	681b      	ldr	r3, [r3, #0]
 8011088:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z2 = (INT32) wsptr[3];
 801108c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8011090:	330c      	adds	r3, #12
 8011092:	681b      	ldr	r3, [r3, #0]
 8011094:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    z3 = (INT32) wsptr[5];
 8011098:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801109c:	3314      	adds	r3, #20
 801109e:	681b      	ldr	r3, [r3, #0]
 80110a0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 80110a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80110a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80110ac:	4413      	add	r3, r2
 80110ae:	f640 32b6 	movw	r2, #2998	; 0xbb6
 80110b2:	fb02 f303 	mul.w	r3, r2, r3
 80110b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 80110ba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80110be:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80110c2:	4413      	add	r3, r2
 80110c4:	035b      	lsls	r3, r3, #13
 80110c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80110ca:	4413      	add	r3, r2
 80110cc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 80110d0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 80110d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80110d8:	1ad3      	subs	r3, r2, r3
 80110da:	035b      	lsls	r3, r3, #13
 80110dc:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80110e0:	4413      	add	r3, r2
 80110e2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 80110e6:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80110ea:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80110ee:	1ad2      	subs	r2, r2, r3
 80110f0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80110f4:	1ad3      	subs	r3, r2, r3
 80110f6:	035b      	lsls	r3, r3, #13
 80110f8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80110fc:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011100:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011104:	4413      	add	r3, r2
 8011106:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011108:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801110c:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8011110:	4413      	add	r3, r2
 8011112:	781a      	ldrb	r2, [r3, #0]
 8011114:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011118:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801111a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801111e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8011122:	1ad3      	subs	r3, r2, r3
 8011124:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011126:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801112a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801112e:	441a      	add	r2, r3
 8011130:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011134:	3305      	adds	r3, #5
 8011136:	7812      	ldrb	r2, [r2, #0]
 8011138:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801113a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801113e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011142:	4413      	add	r3, r2
 8011144:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011146:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801114a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801114e:	441a      	add	r2, r3
 8011150:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011154:	3301      	adds	r3, #1
 8011156:	7812      	ldrb	r2, [r2, #0]
 8011158:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801115a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801115e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011162:	1ad3      	subs	r3, r2, r3
 8011164:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011166:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801116a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801116e:	441a      	add	r2, r3
 8011170:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011174:	3304      	adds	r3, #4
 8011176:	7812      	ldrb	r2, [r2, #0]
 8011178:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801117a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801117e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011182:	4413      	add	r3, r2
 8011184:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011186:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801118a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 801118e:	441a      	add	r2, r3
 8011190:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8011194:	3302      	adds	r3, #2
 8011196:	7812      	ldrb	r2, [r2, #0]
 8011198:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801119a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801119e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80111a2:	1ad3      	subs	r3, r2, r3
 80111a4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80111a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80111aa:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80111ae:	441a      	add	r2, r3
 80111b0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80111b4:	3303      	adds	r3, #3
 80111b6:	7812      	ldrb	r2, [r2, #0]
 80111b8:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 80111ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80111be:	3318      	adds	r3, #24
 80111c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  for (ctr = 0; ctr < 6; ctr++) {
 80111c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80111c8:	3301      	adds	r3, #1
 80111ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80111ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80111d2:	2b05      	cmp	r3, #5
 80111d4:	f77f af03 	ble.w	8010fde <jpeg_idct_6x6+0x25e>
  }
}
 80111d8:	bf00      	nop
 80111da:	bf00      	nop
 80111dc:	37e4      	adds	r7, #228	; 0xe4
 80111de:	46bd      	mov	sp, r7
 80111e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111e4:	4770      	bx	lr
	...

080111e8 <jpeg_idct_5x5>:

GLOBAL(void)
jpeg_idct_5x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80111e8:	b480      	push	{r7}
 80111ea:	b0ad      	sub	sp, #180	; 0xb4
 80111ec:	af00      	add	r7, sp, #0
 80111ee:	60f8      	str	r0, [r7, #12]
 80111f0:	60b9      	str	r1, [r7, #8]
 80111f2:	607a      	str	r2, [r7, #4]
 80111f4:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80111f6:	68fb      	ldr	r3, [r7, #12]
 80111f8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80111fc:	3380      	adds	r3, #128	; 0x80
 80111fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  int workspace[5*5];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8011202:	687b      	ldr	r3, [r7, #4]
 8011204:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011208:	68bb      	ldr	r3, [r7, #8]
 801120a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801120c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  wsptr = workspace;
 8011210:	f107 0314 	add.w	r3, r7, #20
 8011214:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 8011218:	2300      	movs	r3, #0
 801121a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 801121e:	e0dd      	b.n	80113dc <jpeg_idct_5x5+0x1f4>
    /* Even part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011220:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011224:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011228:	461a      	mov	r2, r3
 801122a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	fb03 f302 	mul.w	r3, r3, r2
 8011234:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp12 <<= CONST_BITS;
 8011238:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801123c:	035b      	lsls	r3, r3, #13
 801123e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011242:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011246:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801124a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801124e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011252:	3320      	adds	r3, #32
 8011254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011258:	461a      	mov	r2, r3
 801125a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801125e:	3340      	adds	r3, #64	; 0x40
 8011260:	681b      	ldr	r3, [r3, #0]
 8011262:	fb03 f302 	mul.w	r3, r3, r2
 8011266:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801126a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801126e:	3340      	adds	r3, #64	; 0x40
 8011270:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011274:	461a      	mov	r2, r3
 8011276:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801127a:	3380      	adds	r3, #128	; 0x80
 801127c:	681b      	ldr	r3, [r3, #0]
 801127e:	fb03 f302 	mul.w	r3, r3, r2
 8011282:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 8011286:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801128a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801128e:	4413      	add	r3, r2
 8011290:	f641 124c 	movw	r2, #6476	; 0x194c
 8011294:	fb02 f303 	mul.w	r3, r2, r3
 8011298:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 801129c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 80112a0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80112a4:	1ad3      	subs	r3, r2, r3
 80112a6:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 80112aa:	fb02 f303 	mul.w	r3, r2, r3
 80112ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    z3 = tmp12 + z2;
 80112b2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80112b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80112ba:	4413      	add	r3, r2
 80112bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    tmp10 = z3 + z1;
 80112c0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80112c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80112c8:	4413      	add	r3, r2
 80112ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp11 = z3 - z1;
 80112cc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80112d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80112d4:	1ad3      	subs	r3, r2, r3
 80112d6:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp12 -= z2 << 2;
 80112d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80112dc:	009b      	lsls	r3, r3, #2
 80112de:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80112e2:	1ad3      	subs	r3, r2, r3
 80112e4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80112e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80112ec:	3310      	adds	r3, #16
 80112ee:	f9b3 3000 	ldrsh.w	r3, [r3]
 80112f2:	461a      	mov	r2, r3
 80112f4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80112f8:	3320      	adds	r3, #32
 80112fa:	681b      	ldr	r3, [r3, #0]
 80112fc:	fb03 f302 	mul.w	r3, r3, r2
 8011300:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011304:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8011308:	3330      	adds	r3, #48	; 0x30
 801130a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801130e:	461a      	mov	r2, r3
 8011310:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011314:	3360      	adds	r3, #96	; 0x60
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	fb03 f302 	mul.w	r3, r3, r2
 801131c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 8011320:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011324:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011328:	4413      	add	r3, r2
 801132a:	f641 229a 	movw	r2, #6810	; 0x1a9a
 801132e:	fb02 f303 	mul.w	r3, r2, r3
 8011332:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 8011336:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801133a:	f241 0271 	movw	r2, #4209	; 0x1071
 801133e:	fb02 f303 	mul.w	r3, r2, r3
 8011342:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011346:	4413      	add	r3, r2
 8011348:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 801134c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011350:	4a97      	ldr	r2, [pc, #604]	; (80115b0 <jpeg_idct_5x5+0x3c8>)
 8011352:	fb02 f303 	mul.w	r3, r2, r3
 8011356:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801135a:	4413      	add	r3, r2
 801135c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011360:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011362:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011366:	4413      	add	r3, r2
 8011368:	12da      	asrs	r2, r3, #11
 801136a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801136e:	601a      	str	r2, [r3, #0]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011370:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011372:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011376:	1ad2      	subs	r2, r2, r3
 8011378:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801137c:	3350      	adds	r3, #80	; 0x50
 801137e:	12d2      	asrs	r2, r2, #11
 8011380:	601a      	str	r2, [r3, #0]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011382:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011384:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011388:	441a      	add	r2, r3
 801138a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801138e:	3314      	adds	r3, #20
 8011390:	12d2      	asrs	r2, r2, #11
 8011392:	601a      	str	r2, [r3, #0]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011394:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011396:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801139a:	1ad2      	subs	r2, r2, r3
 801139c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113a0:	333c      	adds	r3, #60	; 0x3c
 80113a2:	12d2      	asrs	r2, r2, #11
 80113a4:	601a      	str	r2, [r3, #0]
    wsptr[5*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 80113a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113aa:	3328      	adds	r3, #40	; 0x28
 80113ac:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80113b0:	12d2      	asrs	r2, r2, #11
 80113b2:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 80113b4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113b8:	3301      	adds	r3, #1
 80113ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80113be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80113c2:	3302      	adds	r3, #2
 80113c4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80113c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80113cc:	3304      	adds	r3, #4
 80113ce:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80113d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80113d6:	3304      	adds	r3, #4
 80113d8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80113dc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113e0:	2b04      	cmp	r3, #4
 80113e2:	f77f af1d 	ble.w	8011220 <jpeg_idct_5x5+0x38>
  }

  /* Pass 2: process 5 rows from work array, store into output array. */

  wsptr = workspace;
 80113e6:	f107 0314 	add.w	r3, r7, #20
 80113ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (ctr = 0; ctr < 5; ctr++) {
 80113ee:	2300      	movs	r3, #0
 80113f0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80113f4:	e0d0      	b.n	8011598 <jpeg_idct_5x5+0x3b0>
    outptr = output_buf[ctr] + output_col;
 80113f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80113fa:	009b      	lsls	r3, r3, #2
 80113fc:	683a      	ldr	r2, [r7, #0]
 80113fe:	4413      	add	r3, r2
 8011400:	681a      	ldr	r2, [r3, #0]
 8011402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011406:	4413      	add	r3, r2
 8011408:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801140c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011410:	681b      	ldr	r3, [r3, #0]
 8011412:	3310      	adds	r3, #16
 8011414:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp12 <<= CONST_BITS;
 8011418:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801141c:	035b      	lsls	r3, r3, #13
 801141e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp0 = (INT32) wsptr[2];
 8011422:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011426:	3308      	adds	r3, #8
 8011428:	681b      	ldr	r3, [r3, #0]
 801142a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp1 = (INT32) wsptr[4];
 801142e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011432:	3310      	adds	r3, #16
 8011434:	681b      	ldr	r3, [r3, #0]
 8011436:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    z1 = MULTIPLY(tmp0 + tmp1, FIX(0.790569415)); /* (c2+c4)/2 */
 801143a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801143e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011442:	4413      	add	r3, r2
 8011444:	f641 124c 	movw	r2, #6476	; 0x194c
 8011448:	fb02 f303 	mul.w	r3, r2, r3
 801144c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    z2 = MULTIPLY(tmp0 - tmp1, FIX(0.353553391)); /* (c2-c4)/2 */
 8011450:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011454:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 801145e:	fb02 f303 	mul.w	r3, r2, r3
 8011462:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    z3 = tmp12 + z2;
 8011466:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801146a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801146e:	4413      	add	r3, r2
 8011470:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    tmp10 = z3 + z1;
 8011474:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011478:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801147c:	4413      	add	r3, r2
 801147e:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp11 = z3 - z1;
 8011480:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011484:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011488:	1ad3      	subs	r3, r2, r3
 801148a:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp12 -= z2 << 2;
 801148c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011490:	009b      	lsls	r3, r3, #2
 8011492:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011496:	1ad3      	subs	r3, r2, r3
 8011498:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Odd part */

    z2 = (INT32) wsptr[1];
 801149c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80114a0:	3304      	adds	r3, #4
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    z3 = (INT32) wsptr[3];
 80114a8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80114ac:	330c      	adds	r3, #12
 80114ae:	681b      	ldr	r3, [r3, #0]
 80114b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));     /* c3 */
 80114b4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80114b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80114bc:	4413      	add	r3, r2
 80114be:	f641 229a 	movw	r2, #6810	; 0x1a9a
 80114c2:	fb02 f303 	mul.w	r3, r2, r3
 80114c6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    tmp0 = z1 + MULTIPLY(z2, FIX(0.513743148));   /* c1-c3 */
 80114ca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80114ce:	f241 0271 	movw	r2, #4209	; 0x1071
 80114d2:	fb02 f303 	mul.w	r3, r2, r3
 80114d6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80114da:	4413      	add	r3, r2
 80114dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp1 = z1 - MULTIPLY(z3, FIX(2.176250899));   /* c1+c3 */
 80114e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80114e4:	4a32      	ldr	r2, [pc, #200]	; (80115b0 <jpeg_idct_5x5+0x3c8>)
 80114e6:	fb02 f303 	mul.w	r3, r2, r3
 80114ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80114ee:	4413      	add	r3, r2
 80114f0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80114f4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80114f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80114fa:	4413      	add	r3, r2
 80114fc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80114fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8011502:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011506:	4413      	add	r3, r2
 8011508:	781a      	ldrb	r2, [r3, #0]
 801150a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801150e:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011510:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011512:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011516:	1ad3      	subs	r3, r2, r3
 8011518:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801151a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801151e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011522:	441a      	add	r2, r3
 8011524:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011528:	3304      	adds	r3, #4
 801152a:	7812      	ldrb	r2, [r2, #0]
 801152c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801152e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011530:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011534:	4413      	add	r3, r2
 8011536:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011538:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801153c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011540:	441a      	add	r2, r3
 8011542:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011546:	3301      	adds	r3, #1
 8011548:	7812      	ldrb	r2, [r2, #0]
 801154a:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801154c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801154e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011552:	1ad3      	subs	r3, r2, r3
 8011554:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011556:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801155a:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801155e:	441a      	add	r2, r3
 8011560:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011564:	3303      	adds	r3, #3
 8011566:	7812      	ldrb	r2, [r2, #0]
 8011568:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801156a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801156e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011570:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 8011574:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011578:	441a      	add	r2, r3
 801157a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801157e:	3302      	adds	r3, #2
 8011580:	7812      	ldrb	r2, [r2, #0]
 8011582:	701a      	strb	r2, [r3, #0]

    wsptr += 5;		/* advance pointer to next row */
 8011584:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8011588:	3314      	adds	r3, #20
 801158a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  for (ctr = 0; ctr < 5; ctr++) {
 801158e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8011592:	3301      	adds	r3, #1
 8011594:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011598:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801159c:	2b04      	cmp	r3, #4
 801159e:	f77f af2a 	ble.w	80113f6 <jpeg_idct_5x5+0x20e>
  }
}
 80115a2:	bf00      	nop
 80115a4:	bf00      	nop
 80115a6:	37b4      	adds	r7, #180	; 0xb4
 80115a8:	46bd      	mov	sp, r7
 80115aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115ae:	4770      	bx	lr
 80115b0:	ffffba5c 	.word	0xffffba5c

080115b4 <jpeg_idct_4x4>:

GLOBAL(void)
jpeg_idct_4x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80115b4:	b480      	push	{r7}
 80115b6:	b0a3      	sub	sp, #140	; 0x8c
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	60f8      	str	r0, [r7, #12]
 80115bc:	60b9      	str	r1, [r7, #8]
 80115be:	607a      	str	r2, [r7, #4]
 80115c0:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80115c8:	3380      	adds	r3, #128	; 0x80
 80115ca:	677b      	str	r3, [r7, #116]	; 0x74
  int workspace[4*4];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 80115cc:	687b      	ldr	r3, [r7, #4]
 80115ce:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80115d2:	68bb      	ldr	r3, [r7, #8]
 80115d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80115d6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  wsptr = workspace;
 80115da:	f107 0314 	add.w	r3, r7, #20
 80115de:	67fb      	str	r3, [r7, #124]	; 0x7c
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80115e0:	2300      	movs	r3, #0
 80115e2:	67bb      	str	r3, [r7, #120]	; 0x78
 80115e4:	e07f      	b.n	80116e6 <jpeg_idct_4x4+0x132>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80115e6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80115ee:	461a      	mov	r2, r3
 80115f0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80115f4:	681b      	ldr	r3, [r3, #0]
 80115f6:	fb03 f302 	mul.w	r3, r3, r2
 80115fa:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80115fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011600:	3320      	adds	r3, #32
 8011602:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011606:	461a      	mov	r2, r3
 8011608:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801160c:	3340      	adds	r3, #64	; 0x40
 801160e:	681b      	ldr	r3, [r3, #0]
 8011610:	fb03 f302 	mul.w	r3, r3, r2
 8011614:	66bb      	str	r3, [r7, #104]	; 0x68
    
    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8011616:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011618:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801161a:	4413      	add	r3, r2
 801161c:	009b      	lsls	r3, r3, #2
 801161e:	667b      	str	r3, [r7, #100]	; 0x64
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8011620:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011622:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011624:	1ad3      	subs	r3, r2, r3
 8011626:	009b      	lsls	r3, r3, #2
 8011628:	663b      	str	r3, [r7, #96]	; 0x60

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801162a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801162e:	3310      	adds	r3, #16
 8011630:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011634:	461a      	mov	r2, r3
 8011636:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801163a:	3320      	adds	r3, #32
 801163c:	681b      	ldr	r3, [r3, #0]
 801163e:	fb03 f302 	mul.w	r3, r3, r2
 8011642:	65fb      	str	r3, [r7, #92]	; 0x5c
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011644:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011648:	3330      	adds	r3, #48	; 0x30
 801164a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801164e:	461a      	mov	r2, r3
 8011650:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011654:	3360      	adds	r3, #96	; 0x60
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	fb03 f302 	mul.w	r3, r3, r2
 801165c:	65bb      	str	r3, [r7, #88]	; 0x58

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 801165e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011660:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011662:	4413      	add	r3, r2
 8011664:	f241 1251 	movw	r2, #4433	; 0x1151
 8011668:	fb02 f303 	mul.w	r3, r2, r3
 801166c:	657b      	str	r3, [r7, #84]	; 0x54
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 801166e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011670:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011674:	657b      	str	r3, [r7, #84]	; 0x54
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8011676:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011678:	f641 027e 	movw	r2, #6270	; 0x187e
 801167c:	fb02 f203 	mul.w	r2, r2, r3
 8011680:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011682:	4413      	add	r3, r2
 8011684:	12db      	asrs	r3, r3, #11
 8011686:	66fb      	str	r3, [r7, #108]	; 0x6c
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8011688:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801168a:	4a58      	ldr	r2, [pc, #352]	; (80117ec <jpeg_idct_4x4+0x238>)
 801168c:	fb02 f203 	mul.w	r2, r2, r3
 8011690:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011692:	4413      	add	r3, r2
 8011694:	12db      	asrs	r3, r3, #11
 8011696:	66bb      	str	r3, [r7, #104]	; 0x68
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[4*0] = (int) (tmp10 + tmp0);
 8011698:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801169a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801169c:	441a      	add	r2, r3
 801169e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80116a0:	601a      	str	r2, [r3, #0]
    wsptr[4*3] = (int) (tmp10 - tmp0);
 80116a2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80116a4:	3330      	adds	r3, #48	; 0x30
 80116a6:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80116a8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80116aa:	1a8a      	subs	r2, r1, r2
 80116ac:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = (int) (tmp12 + tmp2);
 80116ae:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80116b0:	3310      	adds	r3, #16
 80116b2:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80116b4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80116b6:	440a      	add	r2, r1
 80116b8:	601a      	str	r2, [r3, #0]
    wsptr[4*2] = (int) (tmp12 - tmp2);
 80116ba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80116bc:	3320      	adds	r3, #32
 80116be:	6e39      	ldr	r1, [r7, #96]	; 0x60
 80116c0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80116c2:	1a8a      	subs	r2, r1, r2
 80116c4:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80116c6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116c8:	3301      	adds	r3, #1
 80116ca:	67bb      	str	r3, [r7, #120]	; 0x78
 80116cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80116d0:	3302      	adds	r3, #2
 80116d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80116d6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80116da:	3304      	adds	r3, #4
 80116dc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80116e0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80116e2:	3304      	adds	r3, #4
 80116e4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80116e6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116e8:	2b03      	cmp	r3, #3
 80116ea:	f77f af7c 	ble.w	80115e6 <jpeg_idct_4x4+0x32>
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 80116ee:	f107 0314 	add.w	r3, r7, #20
 80116f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  for (ctr = 0; ctr < 4; ctr++) {
 80116f4:	2300      	movs	r3, #0
 80116f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80116f8:	e06e      	b.n	80117d8 <jpeg_idct_4x4+0x224>
    outptr = output_buf[ctr] + output_col;
 80116fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80116fc:	009b      	lsls	r3, r3, #2
 80116fe:	683a      	ldr	r2, [r7, #0]
 8011700:	4413      	add	r3, r2
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011708:	4413      	add	r3, r2
 801170a:	673b      	str	r3, [r7, #112]	; 0x70

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801170c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801170e:	681b      	ldr	r3, [r3, #0]
 8011710:	3310      	adds	r3, #16
 8011712:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp2 = (INT32) wsptr[2];
 8011714:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011716:	3308      	adds	r3, #8
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	66bb      	str	r3, [r7, #104]	; 0x68

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801171c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801171e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011720:	4413      	add	r3, r2
 8011722:	035b      	lsls	r3, r3, #13
 8011724:	667b      	str	r3, [r7, #100]	; 0x64
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8011726:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8011728:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801172a:	1ad3      	subs	r3, r2, r3
 801172c:	035b      	lsls	r3, r3, #13
 801172e:	663b      	str	r3, [r7, #96]	; 0x60

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
 8011730:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011732:	3304      	adds	r3, #4
 8011734:	681b      	ldr	r3, [r3, #0]
 8011736:	65fb      	str	r3, [r7, #92]	; 0x5c
    z3 = (INT32) wsptr[3];
 8011738:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801173a:	330c      	adds	r3, #12
 801173c:	681b      	ldr	r3, [r3, #0]
 801173e:	65bb      	str	r3, [r7, #88]	; 0x58

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 8011740:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8011742:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011744:	4413      	add	r3, r2
 8011746:	f241 1251 	movw	r2, #4433	; 0x1151
 801174a:	fb02 f303 	mul.w	r3, r2, r3
 801174e:	657b      	str	r3, [r7, #84]	; 0x54
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 8011750:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011752:	f641 027e 	movw	r2, #6270	; 0x187e
 8011756:	fb02 f303 	mul.w	r3, r2, r3
 801175a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801175c:	4413      	add	r3, r2
 801175e:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 8011760:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011762:	4a22      	ldr	r2, [pc, #136]	; (80117ec <jpeg_idct_4x4+0x238>)
 8011764:	fb02 f303 	mul.w	r3, r2, r3
 8011768:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801176a:	4413      	add	r3, r2
 801176c:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801176e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011770:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011772:	4413      	add	r3, r2
 8011774:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011776:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801177a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801177c:	4413      	add	r3, r2
 801177e:	781a      	ldrb	r2, [r3, #0]
 8011780:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011782:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011784:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011786:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011788:	1ad3      	subs	r3, r2, r3
 801178a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801178c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011790:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011792:	441a      	add	r2, r3
 8011794:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011796:	3303      	adds	r3, #3
 8011798:	7812      	ldrb	r2, [r2, #0]
 801179a:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801179c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801179e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117a0:	4413      	add	r3, r2
 80117a2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80117a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80117a8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80117aa:	441a      	add	r2, r3
 80117ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117ae:	3301      	adds	r3, #1
 80117b0:	7812      	ldrb	r2, [r2, #0]
 80117b2:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80117b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80117b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80117b8:	1ad3      	subs	r3, r2, r3
 80117ba:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80117bc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80117c0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80117c2:	441a      	add	r2, r3
 80117c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80117c6:	3302      	adds	r3, #2
 80117c8:	7812      	ldrb	r2, [r2, #0]
 80117ca:	701a      	strb	r2, [r3, #0]

    wsptr += 4;		/* advance pointer to next row */
 80117cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80117ce:	3310      	adds	r3, #16
 80117d0:	67fb      	str	r3, [r7, #124]	; 0x7c
  for (ctr = 0; ctr < 4; ctr++) {
 80117d2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80117d4:	3301      	adds	r3, #1
 80117d6:	67bb      	str	r3, [r7, #120]	; 0x78
 80117d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80117da:	2b03      	cmp	r3, #3
 80117dc:	dd8d      	ble.n	80116fa <jpeg_idct_4x4+0x146>
  }
}
 80117de:	bf00      	nop
 80117e0:	bf00      	nop
 80117e2:	378c      	adds	r7, #140	; 0x8c
 80117e4:	46bd      	mov	sp, r7
 80117e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80117ea:	4770      	bx	lr
 80117ec:	ffffc4df 	.word	0xffffc4df

080117f0 <jpeg_idct_3x3>:

GLOBAL(void)
jpeg_idct_3x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80117f0:	b480      	push	{r7}
 80117f2:	b099      	sub	sp, #100	; 0x64
 80117f4:	af00      	add	r7, sp, #0
 80117f6:	60f8      	str	r0, [r7, #12]
 80117f8:	60b9      	str	r1, [r7, #8]
 80117fa:	607a      	str	r2, [r7, #4]
 80117fc:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp2, tmp10, tmp12;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80117fe:	68fb      	ldr	r3, [r7, #12]
 8011800:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011804:	3380      	adds	r3, #128	; 0x80
 8011806:	64fb      	str	r3, [r7, #76]	; 0x4c
  int workspace[3*3];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8011808:	687b      	ldr	r3, [r7, #4]
 801180a:	65fb      	str	r3, [r7, #92]	; 0x5c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801180c:	68bb      	ldr	r3, [r7, #8]
 801180e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011810:	65bb      	str	r3, [r7, #88]	; 0x58
  wsptr = workspace;
 8011812:	f107 0314 	add.w	r3, r7, #20
 8011816:	657b      	str	r3, [r7, #84]	; 0x54
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 8011818:	2300      	movs	r3, #0
 801181a:	653b      	str	r3, [r7, #80]	; 0x50
 801181c:	e059      	b.n	80118d2 <jpeg_idct_3x3+0xe2>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801181e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011820:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011824:	461a      	mov	r2, r3
 8011826:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011828:	681b      	ldr	r3, [r3, #0]
 801182a:	fb03 f302 	mul.w	r3, r3, r2
 801182e:	647b      	str	r3, [r7, #68]	; 0x44
    tmp0 <<= CONST_BITS;
 8011830:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011832:	035b      	lsls	r3, r3, #13
 8011834:	647b      	str	r3, [r7, #68]	; 0x44
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011836:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011838:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801183c:	647b      	str	r3, [r7, #68]	; 0x44
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801183e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011840:	3320      	adds	r3, #32
 8011842:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011846:	461a      	mov	r2, r3
 8011848:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801184a:	3340      	adds	r3, #64	; 0x40
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	fb03 f302 	mul.w	r3, r3, r2
 8011852:	643b      	str	r3, [r7, #64]	; 0x40
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8011854:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011856:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801185a:	fb02 f303 	mul.w	r3, r2, r3
 801185e:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmp10 = tmp0 + tmp12;
 8011860:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011864:	4413      	add	r3, r2
 8011866:	63bb      	str	r3, [r7, #56]	; 0x38
    tmp2 = tmp0 - tmp12 - tmp12;
 8011868:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801186a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801186c:	1ad2      	subs	r2, r2, r3
 801186e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011870:	1ad3      	subs	r3, r2, r3
 8011872:	643b      	str	r3, [r7, #64]	; 0x40

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011874:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011876:	3310      	adds	r3, #16
 8011878:	f9b3 3000 	ldrsh.w	r3, [r3]
 801187c:	461a      	mov	r2, r3
 801187e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011880:	3320      	adds	r3, #32
 8011882:	681b      	ldr	r3, [r3, #0]
 8011884:	fb03 f302 	mul.w	r3, r3, r2
 8011888:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801188a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801188c:	f242 7231 	movw	r2, #10033	; 0x2731
 8011890:	fb02 f303 	mul.w	r3, r2, r3
 8011894:	647b      	str	r3, [r7, #68]	; 0x44

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011898:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801189a:	4413      	add	r3, r2
 801189c:	12da      	asrs	r2, r3, #11
 801189e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118a0:	601a      	str	r2, [r3, #0]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 80118a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80118a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118a6:	1ad2      	subs	r2, r2, r3
 80118a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118aa:	3318      	adds	r3, #24
 80118ac:	12d2      	asrs	r2, r2, #11
 80118ae:	601a      	str	r2, [r3, #0]
    wsptr[3*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 80118b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118b2:	330c      	adds	r3, #12
 80118b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80118b6:	12d2      	asrs	r2, r2, #11
 80118b8:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 80118ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118bc:	3301      	adds	r3, #1
 80118be:	653b      	str	r3, [r7, #80]	; 0x50
 80118c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80118c2:	3302      	adds	r3, #2
 80118c4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80118c6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80118c8:	3304      	adds	r3, #4
 80118ca:	65bb      	str	r3, [r7, #88]	; 0x58
 80118cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118ce:	3304      	adds	r3, #4
 80118d0:	657b      	str	r3, [r7, #84]	; 0x54
 80118d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118d4:	2b02      	cmp	r3, #2
 80118d6:	dda2      	ble.n	801181e <jpeg_idct_3x3+0x2e>
  }

  /* Pass 2: process 3 rows from work array, store into output array. */

  wsptr = workspace;
 80118d8:	f107 0314 	add.w	r3, r7, #20
 80118dc:	657b      	str	r3, [r7, #84]	; 0x54
  for (ctr = 0; ctr < 3; ctr++) {
 80118de:	2300      	movs	r3, #0
 80118e0:	653b      	str	r3, [r7, #80]	; 0x50
 80118e2:	e053      	b.n	801198c <jpeg_idct_3x3+0x19c>
    outptr = output_buf[ctr] + output_col;
 80118e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80118e6:	009b      	lsls	r3, r3, #2
 80118e8:	683a      	ldr	r2, [r7, #0]
 80118ea:	4413      	add	r3, r2
 80118ec:	681a      	ldr	r2, [r3, #0]
 80118ee:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80118f0:	4413      	add	r3, r2
 80118f2:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80118f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80118f6:	681b      	ldr	r3, [r3, #0]
 80118f8:	3310      	adds	r3, #16
 80118fa:	647b      	str	r3, [r7, #68]	; 0x44
    tmp0 <<= CONST_BITS;
 80118fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80118fe:	035b      	lsls	r3, r3, #13
 8011900:	647b      	str	r3, [r7, #68]	; 0x44
    tmp2 = (INT32) wsptr[2];
 8011902:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011904:	3308      	adds	r3, #8
 8011906:	681b      	ldr	r3, [r3, #0]
 8011908:	643b      	str	r3, [r7, #64]	; 0x40
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801190a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801190c:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8011910:	fb02 f303 	mul.w	r3, r2, r3
 8011914:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmp10 = tmp0 + tmp12;
 8011916:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801191a:	4413      	add	r3, r2
 801191c:	63bb      	str	r3, [r7, #56]	; 0x38
    tmp2 = tmp0 - tmp12 - tmp12;
 801191e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8011920:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011922:	1ad2      	subs	r2, r2, r3
 8011924:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011926:	1ad3      	subs	r3, r2, r3
 8011928:	643b      	str	r3, [r7, #64]	; 0x40

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
 801192a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801192c:	3304      	adds	r3, #4
 801192e:	681b      	ldr	r3, [r3, #0]
 8011930:	63fb      	str	r3, [r7, #60]	; 0x3c
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8011932:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011934:	f242 7231 	movw	r2, #10033	; 0x2731
 8011938:	fb02 f303 	mul.w	r3, r2, r3
 801193c:	647b      	str	r3, [r7, #68]	; 0x44

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801193e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011942:	4413      	add	r3, r2
 8011944:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011946:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801194a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801194c:	4413      	add	r3, r2
 801194e:	781a      	ldrb	r2, [r3, #0]
 8011950:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011952:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011954:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011956:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011958:	1ad3      	subs	r3, r2, r3
 801195a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801195c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8011960:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011962:	441a      	add	r2, r3
 8011964:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011966:	3302      	adds	r3, #2
 8011968:	7812      	ldrb	r2, [r2, #0]
 801196a:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801196c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801196e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8011970:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 8011974:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8011976:	441a      	add	r2, r3
 8011978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801197a:	3301      	adds	r3, #1
 801197c:	7812      	ldrb	r2, [r2, #0]
 801197e:	701a      	strb	r2, [r3, #0]

    wsptr += 3;		/* advance pointer to next row */
 8011980:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011982:	330c      	adds	r3, #12
 8011984:	657b      	str	r3, [r7, #84]	; 0x54
  for (ctr = 0; ctr < 3; ctr++) {
 8011986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011988:	3301      	adds	r3, #1
 801198a:	653b      	str	r3, [r7, #80]	; 0x50
 801198c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801198e:	2b02      	cmp	r3, #2
 8011990:	dda8      	ble.n	80118e4 <jpeg_idct_3x3+0xf4>
  }
}
 8011992:	bf00      	nop
 8011994:	bf00      	nop
 8011996:	3764      	adds	r7, #100	; 0x64
 8011998:	46bd      	mov	sp, r7
 801199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801199e:	4770      	bx	lr

080119a0 <jpeg_idct_2x2>:

GLOBAL(void)
jpeg_idct_2x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80119a0:	b480      	push	{r7}
 80119a2:	b08f      	sub	sp, #60	; 0x3c
 80119a4:	af00      	add	r7, sp, #0
 80119a6:	60f8      	str	r0, [r7, #12]
 80119a8:	60b9      	str	r1, [r7, #8]
 80119aa:	607a      	str	r2, [r7, #4]
 80119ac:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp1, tmp2, tmp3, tmp4, tmp5;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80119ae:	68fb      	ldr	r3, [r7, #12]
 80119b0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80119b4:	3380      	adds	r3, #128	; 0x80
 80119b6:	637b      	str	r3, [r7, #52]	; 0x34
  SHIFT_TEMPS

  /* Pass 1: process columns from input. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80119b8:	68bb      	ldr	r3, [r7, #8]
 80119ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80119bc:	633b      	str	r3, [r7, #48]	; 0x30

  /* Column 0 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80119be:	687b      	ldr	r3, [r7, #4]
 80119c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80119c4:	461a      	mov	r2, r3
 80119c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119c8:	681b      	ldr	r3, [r3, #0]
 80119ca:	fb03 f302 	mul.w	r3, r3, r2
 80119ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80119d0:	687b      	ldr	r3, [r7, #4]
 80119d2:	3310      	adds	r3, #16
 80119d4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80119d8:	461a      	mov	r2, r3
 80119da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80119dc:	3320      	adds	r3, #32
 80119de:	681b      	ldr	r3, [r3, #0]
 80119e0:	fb03 f302 	mul.w	r3, r3, r2
 80119e4:	62bb      	str	r3, [r7, #40]	; 0x28
  /* Add fudge factor here for final descale. */
  tmp4 += ONE << 2;
 80119e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119e8:	3304      	adds	r3, #4
 80119ea:	62fb      	str	r3, [r7, #44]	; 0x2c

  tmp0 = tmp4 + tmp5;
 80119ec:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f0:	4413      	add	r3, r2
 80119f2:	627b      	str	r3, [r7, #36]	; 0x24
  tmp2 = tmp4 - tmp5;
 80119f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80119f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80119f8:	1ad3      	subs	r3, r2, r3
 80119fa:	623b      	str	r3, [r7, #32]

  /* Column 1 */
  tmp4 = DEQUANTIZE(coef_block[DCTSIZE*0+1], quantptr[DCTSIZE*0+1]);
 80119fc:	687b      	ldr	r3, [r7, #4]
 80119fe:	3302      	adds	r3, #2
 8011a00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a04:	461a      	mov	r2, r3
 8011a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a08:	3304      	adds	r3, #4
 8011a0a:	681b      	ldr	r3, [r3, #0]
 8011a0c:	fb03 f302 	mul.w	r3, r3, r2
 8011a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  tmp5 = DEQUANTIZE(coef_block[DCTSIZE*1+1], quantptr[DCTSIZE*1+1]);
 8011a12:	687b      	ldr	r3, [r7, #4]
 8011a14:	3312      	adds	r3, #18
 8011a16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011a1a:	461a      	mov	r2, r3
 8011a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011a1e:	3324      	adds	r3, #36	; 0x24
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	fb03 f302 	mul.w	r3, r3, r2
 8011a26:	62bb      	str	r3, [r7, #40]	; 0x28

  tmp1 = tmp4 + tmp5;
 8011a28:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a2c:	4413      	add	r3, r2
 8011a2e:	61fb      	str	r3, [r7, #28]
  tmp3 = tmp4 - tmp5;
 8011a30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011a34:	1ad3      	subs	r3, r2, r3
 8011a36:	61bb      	str	r3, [r7, #24]

  /* Pass 2: process 2 rows, store into output array. */

  /* Row 0 */
  outptr = output_buf[0] + output_col;
 8011a38:	683b      	ldr	r3, [r7, #0]
 8011a3a:	681a      	ldr	r2, [r3, #0]
 8011a3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a3e:	4413      	add	r3, r2
 8011a40:	617b      	str	r3, [r7, #20]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp0 + tmp1, 3) & RANGE_MASK];
 8011a42:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a44:	69fb      	ldr	r3, [r7, #28]
 8011a46:	4413      	add	r3, r2
 8011a48:	10db      	asrs	r3, r3, #3
 8011a4a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a50:	4413      	add	r3, r2
 8011a52:	781a      	ldrb	r2, [r3, #0]
 8011a54:	697b      	ldr	r3, [r7, #20]
 8011a56:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp0 - tmp1, 3) & RANGE_MASK];
 8011a58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011a5a:	69fb      	ldr	r3, [r7, #28]
 8011a5c:	1ad3      	subs	r3, r2, r3
 8011a5e:	10db      	asrs	r3, r3, #3
 8011a60:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a64:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a66:	441a      	add	r2, r3
 8011a68:	697b      	ldr	r3, [r7, #20]
 8011a6a:	3301      	adds	r3, #1
 8011a6c:	7812      	ldrb	r2, [r2, #0]
 8011a6e:	701a      	strb	r2, [r3, #0]

  /* Row 1 */
  outptr = output_buf[1] + output_col;
 8011a70:	683b      	ldr	r3, [r7, #0]
 8011a72:	3304      	adds	r3, #4
 8011a74:	681a      	ldr	r2, [r3, #0]
 8011a76:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011a78:	4413      	add	r3, r2
 8011a7a:	617b      	str	r3, [r7, #20]

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp2 + tmp3, 3) & RANGE_MASK];
 8011a7c:	6a3a      	ldr	r2, [r7, #32]
 8011a7e:	69bb      	ldr	r3, [r7, #24]
 8011a80:	4413      	add	r3, r2
 8011a82:	10db      	asrs	r3, r3, #3
 8011a84:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a88:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011a8a:	4413      	add	r3, r2
 8011a8c:	781a      	ldrb	r2, [r3, #0]
 8011a8e:	697b      	ldr	r3, [r7, #20]
 8011a90:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2 - tmp3, 3) & RANGE_MASK];
 8011a92:	6a3a      	ldr	r2, [r7, #32]
 8011a94:	69bb      	ldr	r3, [r7, #24]
 8011a96:	1ad3      	subs	r3, r2, r3
 8011a98:	10db      	asrs	r3, r3, #3
 8011a9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011a9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011aa0:	441a      	add	r2, r3
 8011aa2:	697b      	ldr	r3, [r7, #20]
 8011aa4:	3301      	adds	r3, #1
 8011aa6:	7812      	ldrb	r2, [r2, #0]
 8011aa8:	701a      	strb	r2, [r3, #0]
}
 8011aaa:	bf00      	nop
 8011aac:	373c      	adds	r7, #60	; 0x3c
 8011aae:	46bd      	mov	sp, r7
 8011ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011ab4:	4770      	bx	lr

08011ab6 <jpeg_idct_1x1>:

GLOBAL(void)
jpeg_idct_1x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011ab6:	b480      	push	{r7}
 8011ab8:	b089      	sub	sp, #36	; 0x24
 8011aba:	af00      	add	r7, sp, #0
 8011abc:	60f8      	str	r0, [r7, #12]
 8011abe:	60b9      	str	r1, [r7, #8]
 8011ac0:	607a      	str	r2, [r7, #4]
 8011ac2:	603b      	str	r3, [r7, #0]
  int dcval;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011ac4:	68fb      	ldr	r3, [r7, #12]
 8011ac6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011aca:	3380      	adds	r3, #128	; 0x80
 8011acc:	61fb      	str	r3, [r7, #28]
  SHIFT_TEMPS

  /* 1x1 is trivial: just take the DC coefficient divided by 8. */
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011ace:	68bb      	ldr	r3, [r7, #8]
 8011ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011ad2:	61bb      	str	r3, [r7, #24]
  dcval = DEQUANTIZE(coef_block[0], quantptr[0]);
 8011ad4:	687b      	ldr	r3, [r7, #4]
 8011ad6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ada:	461a      	mov	r2, r3
 8011adc:	69bb      	ldr	r3, [r7, #24]
 8011ade:	681b      	ldr	r3, [r3, #0]
 8011ae0:	fb03 f302 	mul.w	r3, r3, r2
 8011ae4:	617b      	str	r3, [r7, #20]
  dcval = (int) DESCALE((INT32) dcval, 3);
 8011ae6:	697b      	ldr	r3, [r7, #20]
 8011ae8:	3304      	adds	r3, #4
 8011aea:	10db      	asrs	r3, r3, #3
 8011aec:	617b      	str	r3, [r7, #20]

  output_buf[0][output_col] = range_limit[dcval & RANGE_MASK];
 8011aee:	697b      	ldr	r3, [r7, #20]
 8011af0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011af4:	69fa      	ldr	r2, [r7, #28]
 8011af6:	441a      	add	r2, r3
 8011af8:	683b      	ldr	r3, [r7, #0]
 8011afa:	6819      	ldr	r1, [r3, #0]
 8011afc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011afe:	440b      	add	r3, r1
 8011b00:	7812      	ldrb	r2, [r2, #0]
 8011b02:	701a      	strb	r2, [r3, #0]
}
 8011b04:	bf00      	nop
 8011b06:	3724      	adds	r7, #36	; 0x24
 8011b08:	46bd      	mov	sp, r7
 8011b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b0e:	4770      	bx	lr

08011b10 <jpeg_idct_9x9>:

GLOBAL(void)
jpeg_idct_9x9 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8011b10:	b490      	push	{r4, r7}
 8011b12:	b0e0      	sub	sp, #384	; 0x180
 8011b14:	af00      	add	r7, sp, #0
 8011b16:	f107 040c 	add.w	r4, r7, #12
 8011b1a:	6020      	str	r0, [r4, #0]
 8011b1c:	f107 0008 	add.w	r0, r7, #8
 8011b20:	6001      	str	r1, [r0, #0]
 8011b22:	1d39      	adds	r1, r7, #4
 8011b24:	600a      	str	r2, [r1, #0]
 8011b26:	463a      	mov	r2, r7
 8011b28:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8011b2a:	f107 030c 	add.w	r3, r7, #12
 8011b2e:	681b      	ldr	r3, [r3, #0]
 8011b30:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8011b34:	3380      	adds	r3, #128	; 0x80
 8011b36:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
  int workspace[8*9];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8011b3a:	1d3b      	adds	r3, r7, #4
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8011b42:	f107 0308 	add.w	r3, r7, #8
 8011b46:	681b      	ldr	r3, [r3, #0]
 8011b48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011b4a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  wsptr = workspace;
 8011b4e:	f107 0314 	add.w	r3, r7, #20
 8011b52:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011b56:	2300      	movs	r3, #0
 8011b58:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8011b5c:	e1a5      	b.n	8011eaa <jpeg_idct_9x9+0x39a>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8011b5e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011b62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b66:	461a      	mov	r2, r3
 8011b68:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011b6c:	681b      	ldr	r3, [r3, #0]
 8011b6e:	fb03 f302 	mul.w	r3, r3, r2
 8011b72:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp0 <<= CONST_BITS;
 8011b76:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011b7a:	035b      	lsls	r3, r3, #13
 8011b7c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8011b80:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011b84:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8011b88:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8011b8c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011b90:	3320      	adds	r3, #32
 8011b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011b96:	461a      	mov	r2, r3
 8011b98:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011b9c:	3340      	adds	r3, #64	; 0x40
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	fb03 f302 	mul.w	r3, r3, r2
 8011ba4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8011ba8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011bac:	3340      	adds	r3, #64	; 0x40
 8011bae:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bb2:	461a      	mov	r2, r3
 8011bb4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011bb8:	3380      	adds	r3, #128	; 0x80
 8011bba:	681b      	ldr	r3, [r3, #0]
 8011bbc:	fb03 f302 	mul.w	r3, r3, r2
 8011bc0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8011bc4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011bc8:	3360      	adds	r3, #96	; 0x60
 8011bca:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011bce:	461a      	mov	r2, r3
 8011bd0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011bd4:	33c0      	adds	r3, #192	; 0xc0
 8011bd6:	681b      	ldr	r3, [r3, #0]
 8011bd8:	fb03 f302 	mul.w	r3, r3, r2
 8011bdc:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011be0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8011be4:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8011be8:	fb02 f303 	mul.w	r3, r2, r3
 8011bec:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp1 = tmp0 + tmp3;
 8011bf0:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8011bf4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011bf8:	4413      	add	r3, r2
 8011bfa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp2 = tmp0 - tmp3 - tmp3;
 8011bfe:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8011c02:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011c06:	1ad2      	subs	r2, r2, r3
 8011c08:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011c0c:	1ad3      	subs	r3, r2, r3
 8011c0e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011c12:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8011c16:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011c1a:	1ad3      	subs	r3, r2, r3
 8011c1c:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8011c20:	fb02 f303 	mul.w	r3, r2, r3
 8011c24:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp11 = tmp2 + tmp0;
 8011c28:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011c2c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011c30:	4413      	add	r3, r2
 8011c32:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp14 = tmp2 - tmp0 - tmp0;
 8011c36:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011c3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011c3e:	1ad2      	subs	r2, r2, r3
 8011c40:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011c44:	1ad3      	subs	r3, r2, r3
 8011c46:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011c4a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8011c4e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011c52:	4413      	add	r3, r2
 8011c54:	f642 2287 	movw	r2, #10887	; 0x2a87
 8011c58:	fb02 f303 	mul.w	r3, r2, r3
 8011c5c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011c60:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8011c64:	f242 22ab 	movw	r2, #8875	; 0x22ab
 8011c68:	fb02 f303 	mul.w	r3, r2, r3
 8011c6c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8011c70:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011c74:	f240 72dc 	movw	r2, #2012	; 0x7dc
 8011c78:	fb02 f303 	mul.w	r3, r2, r3
 8011c7c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    tmp10 = tmp1 + tmp0 - tmp3;
 8011c80:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011c84:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011c88:	441a      	add	r2, r3
 8011c8a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011c8e:	1ad3      	subs	r3, r2, r3
 8011c90:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp12 = tmp1 - tmp0 + tmp2;
 8011c94:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011c98:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011c9c:	1ad3      	subs	r3, r2, r3
 8011c9e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011ca2:	4413      	add	r3, r2
 8011ca4:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    tmp13 = tmp1 - tmp2 + tmp3;
 8011ca8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011cac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011cb0:	1ad3      	subs	r3, r2, r3
 8011cb2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8011cb6:	4413      	add	r3, r2
 8011cb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8011cbc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011cc0:	3310      	adds	r3, #16
 8011cc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cc6:	461a      	mov	r2, r3
 8011cc8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011ccc:	3320      	adds	r3, #32
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	fb03 f302 	mul.w	r3, r3, r2
 8011cd4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8011cd8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011cdc:	3330      	adds	r3, #48	; 0x30
 8011cde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011ce2:	461a      	mov	r2, r3
 8011ce4:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011ce8:	3360      	adds	r3, #96	; 0x60
 8011cea:	681b      	ldr	r3, [r3, #0]
 8011cec:	fb03 f302 	mul.w	r3, r3, r2
 8011cf0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8011cf4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011cf8:	3350      	adds	r3, #80	; 0x50
 8011cfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011cfe:	461a      	mov	r2, r3
 8011d00:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011d04:	33a0      	adds	r3, #160	; 0xa0
 8011d06:	681b      	ldr	r3, [r3, #0]
 8011d08:	fb03 f302 	mul.w	r3, r3, r2
 8011d0c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8011d10:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011d14:	3370      	adds	r3, #112	; 0x70
 8011d16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8011d1a:	461a      	mov	r2, r3
 8011d1c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011d20:	33e0      	adds	r3, #224	; 0xe0
 8011d22:	681b      	ldr	r3, [r3, #0]
 8011d24:	fb03 f302 	mul.w	r3, r3, r2
 8011d28:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8011d2c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011d30:	4a64      	ldr	r2, [pc, #400]	; (8011ec4 <jpeg_idct_9x9+0x3b4>)
 8011d32:	fb02 f303 	mul.w	r3, r2, r3
 8011d36:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8011d3a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8011d3e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8011d42:	4413      	add	r3, r2
 8011d44:	f641 5217 	movw	r2, #7447	; 0x1d17
 8011d48:	fb02 f303 	mul.w	r3, r2, r3
 8011d4c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 8011d50:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8011d54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d58:	4413      	add	r3, r2
 8011d5a:	f640 727a 	movw	r2, #3962	; 0xf7a
 8011d5e:	fb02 f303 	mul.w	r3, r2, r3
 8011d62:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp0 = tmp2 + tmp3 - z2;
 8011d66:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011d6a:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011d6e:	441a      	add	r2, r3
 8011d70:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8011d7a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8011d7e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	f642 4291 	movw	r2, #11409	; 0x2c91
 8011d88:	fb02 f303 	mul.w	r3, r2, r3
 8011d8c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp2 += z2 - tmp1;
 8011d90:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8011d94:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011d98:	1ad3      	subs	r3, r2, r3
 8011d9a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011d9e:	4413      	add	r3, r2
 8011da0:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 += z2 + tmp1;
 8011da4:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8011da8:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011dac:	4413      	add	r3, r2
 8011dae:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8011db2:	4413      	add	r3, r2
 8011db4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 8011db8:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8011dbc:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8011dc0:	1ad2      	subs	r2, r2, r3
 8011dc2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8011dc6:	1ad3      	subs	r3, r2, r3
 8011dc8:	f242 7231 	movw	r2, #10033	; 0x2731
 8011dcc:	fb02 f303 	mul.w	r3, r2, r3
 8011dd0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 8011dd4:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8011dd8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011ddc:	4413      	add	r3, r2
 8011dde:	12da      	asrs	r2, r3, #11
 8011de0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011de4:	601a      	str	r2, [r3, #0]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 8011de6:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8011dea:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011dee:	1ad2      	subs	r2, r2, r3
 8011df0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011df4:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8011df8:	12d2      	asrs	r2, r2, #11
 8011dfa:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp1, CONST_BITS-PASS1_BITS);
 8011dfc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011e00:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011e04:	441a      	add	r2, r3
 8011e06:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011e0a:	3320      	adds	r3, #32
 8011e0c:	12d2      	asrs	r2, r2, #11
 8011e0e:	601a      	str	r2, [r3, #0]
    wsptr[8*7] = (int) RIGHT_SHIFT(tmp11 - tmp1, CONST_BITS-PASS1_BITS);
 8011e10:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8011e14:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8011e18:	1ad2      	subs	r2, r2, r3
 8011e1a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011e1e:	33e0      	adds	r3, #224	; 0xe0
 8011e20:	12d2      	asrs	r2, r2, #11
 8011e22:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 8011e24:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8011e28:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011e2c:	441a      	add	r2, r3
 8011e2e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011e32:	3340      	adds	r3, #64	; 0x40
 8011e34:	12d2      	asrs	r2, r2, #11
 8011e36:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 8011e38:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8011e3c:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011e40:	1ad2      	subs	r2, r2, r3
 8011e42:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011e46:	33c0      	adds	r3, #192	; 0xc0
 8011e48:	12d2      	asrs	r2, r2, #11
 8011e4a:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp13 + tmp3, CONST_BITS-PASS1_BITS);
 8011e4c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011e50:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011e54:	441a      	add	r2, r3
 8011e56:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011e5a:	3360      	adds	r3, #96	; 0x60
 8011e5c:	12d2      	asrs	r2, r2, #11
 8011e5e:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp13 - tmp3, CONST_BITS-PASS1_BITS);
 8011e60:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8011e64:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011e68:	1ad2      	subs	r2, r2, r3
 8011e6a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011e6e:	33a0      	adds	r3, #160	; 0xa0
 8011e70:	12d2      	asrs	r2, r2, #11
 8011e72:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp14, CONST_BITS-PASS1_BITS);
 8011e74:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011e78:	3380      	adds	r3, #128	; 0x80
 8011e7a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8011e7e:	12d2      	asrs	r2, r2, #11
 8011e80:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8011e82:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8011e86:	3301      	adds	r3, #1
 8011e88:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8011e8c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8011e90:	3302      	adds	r3, #2
 8011e92:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8011e96:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8011e9a:	3304      	adds	r3, #4
 8011e9c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 8011ea0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011ea4:	3304      	adds	r3, #4
 8011ea6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
 8011eaa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8011eae:	2b07      	cmp	r3, #7
 8011eb0:	f77f ae55 	ble.w	8011b5e <jpeg_idct_9x9+0x4e>
  }

  /* Pass 2: process 9 rows from work array, store into output array. */

  wsptr = workspace;
 8011eb4:	f107 0314 	add.w	r3, r7, #20
 8011eb8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 9; ctr++) {
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8011ec2:	e19a      	b.n	80121fa <jpeg_idct_9x9+0x6ea>
 8011ec4:	ffffd8cf 	.word	0xffffd8cf
    outptr = output_buf[ctr] + output_col;
 8011ec8:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8011ecc:	009b      	lsls	r3, r3, #2
 8011ece:	463a      	mov	r2, r7
 8011ed0:	6812      	ldr	r2, [r2, #0]
 8011ed2:	4413      	add	r3, r2
 8011ed4:	681a      	ldr	r2, [r3, #0]
 8011ed6:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8011eda:	4413      	add	r3, r2
 8011edc:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8011ee0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011ee4:	681b      	ldr	r3, [r3, #0]
 8011ee6:	3310      	adds	r3, #16
 8011ee8:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp0 <<= CONST_BITS;
 8011eec:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011ef0:	035b      	lsls	r3, r3, #13
 8011ef2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    z1 = (INT32) wsptr[2];
 8011ef6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011efa:	3308      	adds	r3, #8
 8011efc:	681b      	ldr	r3, [r3, #0]
 8011efe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = (INT32) wsptr[4];
 8011f02:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011f06:	3310      	adds	r3, #16
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    z3 = (INT32) wsptr[6];
 8011f0e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011f12:	3318      	adds	r3, #24
 8011f14:	681b      	ldr	r3, [r3, #0]
 8011f16:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    tmp3 = MULTIPLY(z3, FIX(0.707106781));      /* c6 */
 8011f1a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8011f1e:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8011f22:	fb02 f303 	mul.w	r3, r2, r3
 8011f26:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp1 = tmp0 + tmp3;
 8011f2a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8011f2e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011f32:	4413      	add	r3, r2
 8011f34:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp2 = tmp0 - tmp3 - tmp3;
 8011f38:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8011f3c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011f40:	1ad2      	subs	r2, r2, r3
 8011f42:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011f46:	1ad3      	subs	r3, r2, r3
 8011f48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    tmp0 = MULTIPLY(z1 - z2, FIX(0.707106781)); /* c6 */
 8011f4c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8011f50:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011f54:	1ad3      	subs	r3, r2, r3
 8011f56:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8011f5a:	fb02 f303 	mul.w	r3, r2, r3
 8011f5e:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp11 = tmp2 + tmp0;
 8011f62:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011f66:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011f6a:	4413      	add	r3, r2
 8011f6c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp14 = tmp2 - tmp0 - tmp0;
 8011f70:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011f74:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011f78:	1ad2      	subs	r2, r2, r3
 8011f7a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011f7e:	1ad3      	subs	r3, r2, r3
 8011f80:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp0 = MULTIPLY(z1 + z2, FIX(1.328926049)); /* c2 */
 8011f84:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8011f88:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011f8c:	4413      	add	r3, r2
 8011f8e:	f642 2287 	movw	r2, #10887	; 0x2a87
 8011f92:	fb02 f303 	mul.w	r3, r2, r3
 8011f96:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp2 = MULTIPLY(z1, FIX(1.083350441));      /* c4 */
 8011f9a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8011f9e:	f242 22ab 	movw	r2, #8875	; 0x22ab
 8011fa2:	fb02 f303 	mul.w	r3, r2, r3
 8011fa6:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 = MULTIPLY(z2, FIX(0.245575608));      /* c8 */
 8011faa:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8011fae:	f240 72dc 	movw	r2, #2012	; 0x7dc
 8011fb2:	fb02 f303 	mul.w	r3, r2, r3
 8011fb6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    tmp10 = tmp1 + tmp0 - tmp3;
 8011fba:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011fbe:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011fc2:	441a      	add	r2, r3
 8011fc4:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8011fc8:	1ad3      	subs	r3, r2, r3
 8011fca:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    tmp12 = tmp1 - tmp0 + tmp2;
 8011fce:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011fd2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8011fd6:	1ad3      	subs	r3, r2, r3
 8011fd8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8011fdc:	4413      	add	r3, r2
 8011fde:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    tmp13 = tmp1 - tmp2 + tmp3;
 8011fe2:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8011fe6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8011fea:	1ad3      	subs	r3, r2, r3
 8011fec:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8011ff0:	4413      	add	r3, r2
 8011ff2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8011ff6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8011ffa:	3304      	adds	r3, #4
 8011ffc:	681b      	ldr	r3, [r3, #0]
 8011ffe:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = (INT32) wsptr[3];
 8012002:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8012006:	330c      	adds	r3, #12
 8012008:	681b      	ldr	r3, [r3, #0]
 801200a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    z3 = (INT32) wsptr[5];
 801200e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8012012:	3314      	adds	r3, #20
 8012014:	681b      	ldr	r3, [r3, #0]
 8012016:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    z4 = (INT32) wsptr[7];
 801201a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801201e:	331c      	adds	r3, #28
 8012020:	681b      	ldr	r3, [r3, #0]
 8012022:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    z2 = MULTIPLY(z2, - FIX(1.224744871));           /* -c3 */
 8012026:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801202a:	4a7a      	ldr	r2, [pc, #488]	; (8012214 <jpeg_idct_9x9+0x704>)
 801202c:	fb02 f303 	mul.w	r3, r2, r3
 8012030:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    tmp2 = MULTIPLY(z1 + z3, FIX(0.909038955));      /* c5 */
 8012034:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8012038:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801203c:	4413      	add	r3, r2
 801203e:	f641 5217 	movw	r2, #7447	; 0x1d17
 8012042:	fb02 f303 	mul.w	r3, r2, r3
 8012046:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 = MULTIPLY(z1 + z4, FIX(0.483689525));      /* c7 */
 801204a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801204e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8012052:	4413      	add	r3, r2
 8012054:	f640 727a 	movw	r2, #3962	; 0xf7a
 8012058:	fb02 f303 	mul.w	r3, r2, r3
 801205c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp0 = tmp2 + tmp3 - z2;
 8012060:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012064:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012068:	441a      	add	r2, r3
 801206a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 801206e:	1ad3      	subs	r3, r2, r3
 8012070:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = MULTIPLY(z3 - z4, FIX(1.392728481));      /* c1 */
 8012074:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8012078:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801207c:	1ad3      	subs	r3, r2, r3
 801207e:	f642 4291 	movw	r2, #11409	; 0x2c91
 8012082:	fb02 f303 	mul.w	r3, r2, r3
 8012086:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp2 += z2 - tmp1;
 801208a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801208e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8012092:	1ad3      	subs	r3, r2, r3
 8012094:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8012098:	4413      	add	r3, r2
 801209a:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp3 += z2 + tmp1;
 801209e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80120a2:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80120a6:	4413      	add	r3, r2
 80120a8:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80120ac:	4413      	add	r3, r2
 80120ae:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp1 = MULTIPLY(z1 - z3 - z4, FIX(1.224744871)); /* c3 */
 80120b2:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80120b6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80120ba:	1ad2      	subs	r2, r2, r3
 80120bc:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80120c0:	1ad3      	subs	r3, r2, r3
 80120c2:	f242 7231 	movw	r2, #10033	; 0x2731
 80120c6:	fb02 f303 	mul.w	r3, r2, r3
 80120ca:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80120ce:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80120d2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80120d6:	4413      	add	r3, r2
 80120d8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80120da:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 80120de:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80120e2:	4413      	add	r3, r2
 80120e4:	781a      	ldrb	r2, [r3, #0]
 80120e6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80120ea:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80120ec:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80120f0:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80120f4:	1ad3      	subs	r3, r2, r3
 80120f6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80120f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 80120fc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8012100:	441a      	add	r2, r3
 8012102:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012106:	3308      	adds	r3, #8
 8012108:	7812      	ldrb	r2, [r2, #0]
 801210a:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801210c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012110:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8012114:	4413      	add	r3, r2
 8012116:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012118:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 801211c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8012120:	441a      	add	r2, r3
 8012122:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012126:	3301      	adds	r3, #1
 8012128:	7812      	ldrb	r2, [r2, #0]
 801212a:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801212c:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8012130:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8012134:	1ad3      	subs	r3, r2, r3
 8012136:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012138:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 801213c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8012140:	441a      	add	r2, r3
 8012142:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012146:	3307      	adds	r3, #7
 8012148:	7812      	ldrb	r2, [r2, #0]
 801214a:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801214c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012150:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012154:	4413      	add	r3, r2
 8012156:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012158:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801215c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8012160:	441a      	add	r2, r3
 8012162:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012166:	3302      	adds	r3, #2
 8012168:	7812      	ldrb	r2, [r2, #0]
 801216a:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801216c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8012170:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8012174:	1ad3      	subs	r3, r2, r3
 8012176:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012178:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801217c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8012180:	441a      	add	r2, r3
 8012182:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8012186:	3306      	adds	r3, #6
 8012188:	7812      	ldrb	r2, [r2, #0]
 801218a:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 801218c:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8012190:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8012194:	4413      	add	r3, r2
 8012196:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012198:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp3,
 801219c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80121a0:	441a      	add	r2, r3
 80121a2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80121a6:	3303      	adds	r3, #3
 80121a8:	7812      	ldrb	r2, [r2, #0]
 80121aa:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80121ac:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80121b0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80121b4:	1ad3      	subs	r3, r2, r3
 80121b6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80121b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp3,
 80121bc:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80121c0:	441a      	add	r2, r3
 80121c2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80121c6:	3305      	adds	r3, #5
 80121c8:	7812      	ldrb	r2, [r2, #0]
 80121ca:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 80121cc:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80121d0:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80121d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp14,
 80121d6:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80121da:	441a      	add	r2, r3
 80121dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80121e0:	3304      	adds	r3, #4
 80121e2:	7812      	ldrb	r2, [r2, #0]
 80121e4:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80121e6:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80121ea:	3320      	adds	r3, #32
 80121ec:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 9; ctr++) {
 80121f0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80121f4:	3301      	adds	r3, #1
 80121f6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 80121fa:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80121fe:	2b08      	cmp	r3, #8
 8012200:	f77f ae62 	ble.w	8011ec8 <jpeg_idct_9x9+0x3b8>
  }
}
 8012204:	bf00      	nop
 8012206:	bf00      	nop
 8012208:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 801220c:	46bd      	mov	sp, r7
 801220e:	bc90      	pop	{r4, r7}
 8012210:	4770      	bx	lr
 8012212:	bf00      	nop
 8012214:	ffffd8cf 	.word	0xffffd8cf

08012218 <jpeg_idct_10x10>:

GLOBAL(void)
jpeg_idct_10x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8012218:	b490      	push	{r4, r7}
 801221a:	b0ea      	sub	sp, #424	; 0x1a8
 801221c:	af00      	add	r7, sp, #0
 801221e:	f107 040c 	add.w	r4, r7, #12
 8012222:	6020      	str	r0, [r4, #0]
 8012224:	f107 0008 	add.w	r0, r7, #8
 8012228:	6001      	str	r1, [r0, #0]
 801222a:	1d39      	adds	r1, r7, #4
 801222c:	600a      	str	r2, [r1, #0]
 801222e:	463a      	mov	r2, r7
 8012230:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012232:	f107 030c 	add.w	r3, r7, #12
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801223c:	3380      	adds	r3, #128	; 0x80
 801223e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
  int workspace[8*10];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8012242:	1d3b      	adds	r3, r7, #4
 8012244:	681b      	ldr	r3, [r3, #0]
 8012246:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801224a:	f107 0308 	add.w	r3, r7, #8
 801224e:	681b      	ldr	r3, [r3, #0]
 8012250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012252:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  wsptr = workspace;
 8012256:	f107 0314 	add.w	r3, r7, #20
 801225a:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801225e:	2300      	movs	r3, #0
 8012260:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 8012264:	e1d5      	b.n	8012612 <jpeg_idct_10x10+0x3fa>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012266:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801226a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801226e:	461a      	mov	r2, r3
 8012270:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012274:	681b      	ldr	r3, [r3, #0]
 8012276:	fb03 f302 	mul.w	r3, r3, r2
 801227a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z3 <<= CONST_BITS;
 801227e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012282:	035b      	lsls	r3, r3, #13
 8012284:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012288:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801228c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012290:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012294:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012298:	3340      	adds	r3, #64	; 0x40
 801229a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801229e:	461a      	mov	r2, r3
 80122a0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80122a4:	3380      	adds	r3, #128	; 0x80
 80122a6:	681b      	ldr	r3, [r3, #0]
 80122a8:	fb03 f302 	mul.w	r3, r3, r2
 80122ac:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80122b0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80122b4:	f242 429d 	movw	r2, #9373	; 0x249d
 80122b8:	fb02 f303 	mul.w	r3, r2, r3
 80122bc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80122c0:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 80122c4:	f640 52fc 	movw	r2, #3580	; 0xdfc
 80122c8:	fb02 f303 	mul.w	r3, r2, r3
 80122cc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp10 = z3 + z1;
 80122d0:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80122d4:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80122d8:	4413      	add	r3, r2
 80122da:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp11 = z3 - z2;
 80122de:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80122e2:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80122e6:	1ad3      	subs	r3, r2, r3
 80122e8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 80122ec:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80122f0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80122f4:	1ad3      	subs	r3, r2, r3
 80122f6:	005b      	lsls	r3, r3, #1
 80122f8:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80122fc:	1ad3      	subs	r3, r2, r3
 80122fe:	12db      	asrs	r3, r3, #11
 8012300:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012304:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012308:	3320      	adds	r3, #32
 801230a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801230e:	461a      	mov	r2, r3
 8012310:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012314:	3340      	adds	r3, #64	; 0x40
 8012316:	681b      	ldr	r3, [r3, #0]
 8012318:	fb03 f302 	mul.w	r3, r3, r2
 801231c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012320:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012324:	3360      	adds	r3, #96	; 0x60
 8012326:	f9b3 3000 	ldrsh.w	r3, [r3]
 801232a:	461a      	mov	r2, r3
 801232c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012330:	33c0      	adds	r3, #192	; 0xc0
 8012332:	681b      	ldr	r3, [r3, #0]
 8012334:	fb03 f302 	mul.w	r3, r3, r2
 8012338:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801233c:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8012340:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012344:	4413      	add	r3, r2
 8012346:	f641 229a 	movw	r2, #6810	; 0x1a9a
 801234a:	fb02 f303 	mul.w	r3, r2, r3
 801234e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 8012352:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012356:	f241 0271 	movw	r2, #4209	; 0x1071
 801235a:	fb02 f303 	mul.w	r3, r2, r3
 801235e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8012362:	4413      	add	r3, r2
 8012364:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8012368:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801236c:	4aaf      	ldr	r2, [pc, #700]	; (801262c <jpeg_idct_10x10+0x414>)
 801236e:	fb02 f303 	mul.w	r3, r2, r3
 8012372:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8012376:	4413      	add	r3, r2
 8012378:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    tmp20 = tmp10 + tmp12;
 801237c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8012380:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012384:	4413      	add	r3, r2
 8012386:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp24 = tmp10 - tmp12;
 801238a:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 801238e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012392:	1ad3      	subs	r3, r2, r3
 8012394:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp21 = tmp11 + tmp13;
 8012398:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 801239c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80123a0:	4413      	add	r3, r2
 80123a2:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp23 = tmp11 - tmp13;
 80123a6:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80123aa:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80123ae:	1ad3      	subs	r3, r2, r3
 80123b0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80123b4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80123b8:	3310      	adds	r3, #16
 80123ba:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123be:	461a      	mov	r2, r3
 80123c0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80123c4:	3320      	adds	r3, #32
 80123c6:	681b      	ldr	r3, [r3, #0]
 80123c8:	fb03 f302 	mul.w	r3, r3, r2
 80123cc:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80123d0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80123d4:	3330      	adds	r3, #48	; 0x30
 80123d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123da:	461a      	mov	r2, r3
 80123dc:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80123e0:	3360      	adds	r3, #96	; 0x60
 80123e2:	681b      	ldr	r3, [r3, #0]
 80123e4:	fb03 f302 	mul.w	r3, r3, r2
 80123e8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80123ec:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80123f0:	3350      	adds	r3, #80	; 0x50
 80123f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80123f6:	461a      	mov	r2, r3
 80123f8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80123fc:	33a0      	adds	r3, #160	; 0xa0
 80123fe:	681b      	ldr	r3, [r3, #0]
 8012400:	fb03 f302 	mul.w	r3, r3, r2
 8012404:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012408:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801240c:	3370      	adds	r3, #112	; 0x70
 801240e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012412:	461a      	mov	r2, r3
 8012414:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012418:	33e0      	adds	r3, #224	; 0xe0
 801241a:	681b      	ldr	r3, [r3, #0]
 801241c:	fb03 f302 	mul.w	r3, r3, r2
 8012420:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp11 = z2 + z4;
 8012424:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8012428:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801242c:	4413      	add	r3, r2
 801242e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = z2 - z4;
 8012432:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8012436:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801243a:	1ad3      	subs	r3, r2, r3
 801243c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8012440:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012444:	f640 12e3 	movw	r2, #2531	; 0x9e3
 8012448:	fb02 f303 	mul.w	r3, r2, r3
 801244c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    z5 = z3 << CONST_BITS;
 8012450:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012454:	035b      	lsls	r3, r3, #13
 8012456:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801245a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801245e:	f641 626f 	movw	r2, #7791	; 0x1e6f
 8012462:	fb02 f303 	mul.w	r3, r2, r3
 8012466:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z4 = z5 + tmp12;
 801246a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801246e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012472:	4413      	add	r3, r2
 8012474:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8012478:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801247c:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 8012480:	fb02 f203 	mul.w	r2, r2, r3
 8012484:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012488:	4413      	add	r3, r2
 801248a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801248e:	4413      	add	r3, r2
 8012490:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8012494:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8012498:	f240 7214 	movw	r2, #1812	; 0x714
 801249c:	fb02 f203 	mul.w	r2, r2, r3
 80124a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80124a4:	1ad3      	subs	r3, r2, r3
 80124a6:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80124aa:	4413      	add	r3, r2
 80124ac:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 80124b0:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80124b4:	f241 22cf 	movw	r2, #4815	; 0x12cf
 80124b8:	fb02 f303 	mul.w	r3, r2, r3
 80124bc:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 80124c0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80124c4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80124c8:	1ad2      	subs	r2, r2, r3
 80124ca:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80124ce:	031b      	lsls	r3, r3, #12
 80124d0:	1ad3      	subs	r3, r2, r3
 80124d2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 80124d6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80124da:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80124de:	1ad2      	subs	r2, r2, r3
 80124e0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80124e4:	1ad3      	subs	r3, r2, r3
 80124e6:	009b      	lsls	r3, r3, #2
 80124e8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80124ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80124f0:	f642 0253 	movw	r2, #10323	; 0x2853
 80124f4:	fb02 f203 	mul.w	r2, r2, r3
 80124f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80124fc:	1ad2      	subs	r2, r2, r3
 80124fe:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8012502:	1ad3      	subs	r3, r2, r3
 8012504:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012508:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801250c:	f241 428c 	movw	r2, #5260	; 0x148c
 8012510:	fb02 f203 	mul.w	r2, r2, r3
 8012514:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012518:	1ad3      	subs	r3, r2, r3
 801251a:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 801251e:	4413      	add	r3, r2
 8012520:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012524:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8012528:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801252c:	4413      	add	r3, r2
 801252e:	12da      	asrs	r2, r3, #11
 8012530:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8012534:	601a      	str	r2, [r3, #0]
    wsptr[8*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012536:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 801253a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801253e:	1ad2      	subs	r2, r2, r3
 8012540:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8012544:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012548:	12d2      	asrs	r2, r2, #11
 801254a:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801254c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8012550:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012554:	441a      	add	r2, r3
 8012556:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801255a:	3320      	adds	r3, #32
 801255c:	12d2      	asrs	r2, r2, #11
 801255e:	601a      	str	r2, [r3, #0]
    wsptr[8*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012560:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8012564:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012568:	1ad2      	subs	r2, r2, r3
 801256a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801256e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012572:	12d2      	asrs	r2, r2, #11
 8012574:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) (tmp22 + tmp12);
 8012576:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801257a:	3340      	adds	r3, #64	; 0x40
 801257c:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8012580:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8012584:	440a      	add	r2, r1
 8012586:	601a      	str	r2, [r3, #0]
    wsptr[8*7] = (int) (tmp22 - tmp12);
 8012588:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801258c:	33e0      	adds	r3, #224	; 0xe0
 801258e:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8012592:	f8d7 2170 	ldr.w	r2, [r7, #368]	; 0x170
 8012596:	1a8a      	subs	r2, r1, r2
 8012598:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801259a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801259e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80125a2:	441a      	add	r2, r3
 80125a4:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80125a8:	3360      	adds	r3, #96	; 0x60
 80125aa:	12d2      	asrs	r2, r2, #11
 80125ac:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80125ae:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 80125b2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80125b6:	1ad2      	subs	r2, r2, r3
 80125b8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80125bc:	33c0      	adds	r3, #192	; 0xc0
 80125be:	12d2      	asrs	r2, r2, #11
 80125c0:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80125c2:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80125c6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80125ca:	441a      	add	r2, r3
 80125cc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80125d0:	3380      	adds	r3, #128	; 0x80
 80125d2:	12d2      	asrs	r2, r2, #11
 80125d4:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80125d6:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 80125da:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80125de:	1ad2      	subs	r2, r2, r3
 80125e0:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80125e4:	33a0      	adds	r3, #160	; 0xa0
 80125e6:	12d2      	asrs	r2, r2, #11
 80125e8:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80125ea:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80125ee:	3301      	adds	r3, #1
 80125f0:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80125f4:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80125f8:	3302      	adds	r3, #2
 80125fa:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80125fe:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012602:	3304      	adds	r3, #4
 8012604:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8012608:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801260c:	3304      	adds	r3, #4
 801260e:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8012612:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8012616:	2b07      	cmp	r3, #7
 8012618:	f77f ae25 	ble.w	8012266 <jpeg_idct_10x10+0x4e>
  }

  /* Pass 2: process 10 rows from work array, store into output array. */

  wsptr = workspace;
 801261c:	f107 0314 	add.w	r3, r7, #20
 8012620:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  for (ctr = 0; ctr < 10; ctr++) {
 8012624:	2300      	movs	r3, #0
 8012626:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 801262a:	e1d0      	b.n	80129ce <jpeg_idct_10x10+0x7b6>
 801262c:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 8012630:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8012634:	009b      	lsls	r3, r3, #2
 8012636:	463a      	mov	r2, r7
 8012638:	6812      	ldr	r2, [r2, #0]
 801263a:	4413      	add	r3, r2
 801263c:	681a      	ldr	r2, [r3, #0]
 801263e:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8012642:	4413      	add	r3, r2
 8012644:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012648:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801264c:	681b      	ldr	r3, [r3, #0]
 801264e:	3310      	adds	r3, #16
 8012650:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z3 <<= CONST_BITS;
 8012654:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012658:	035b      	lsls	r3, r3, #13
 801265a:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z4 = (INT32) wsptr[4];
 801265e:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8012662:	3310      	adds	r3, #16
 8012664:	681b      	ldr	r3, [r3, #0]
 8012666:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801266a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801266e:	f242 429d 	movw	r2, #9373	; 0x249d
 8012672:	fb02 f303 	mul.w	r3, r2, r3
 8012676:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801267a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801267e:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8012682:	fb02 f303 	mul.w	r3, r2, r3
 8012686:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp10 = z3 + z1;
 801268a:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801268e:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8012692:	4413      	add	r3, r2
 8012694:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp11 = z3 - z2;
 8012698:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801269c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80126a0:	1ad3      	subs	r3, r2, r3
 80126a2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178

    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 80126a6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80126aa:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80126ae:	1ad3      	subs	r3, r2, r3
 80126b0:	005b      	lsls	r3, r3, #1
 80126b2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80126b6:	1ad3      	subs	r3, r2, r3
 80126b8:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174

    z2 = (INT32) wsptr[2];
 80126bc:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80126c0:	3308      	adds	r3, #8
 80126c2:	681b      	ldr	r3, [r3, #0]
 80126c4:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z3 = (INT32) wsptr[6];
 80126c8:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80126cc:	3318      	adds	r3, #24
 80126ce:	681b      	ldr	r3, [r3, #0]
 80126d0:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 80126d4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80126d8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80126dc:	4413      	add	r3, r2
 80126de:	f641 229a 	movw	r2, #6810	; 0x1a9a
 80126e2:	fb02 f303 	mul.w	r3, r2, r3
 80126e6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 80126ea:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80126ee:	f241 0271 	movw	r2, #4209	; 0x1071
 80126f2:	fb02 f303 	mul.w	r3, r2, r3
 80126f6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 80126fa:	4413      	add	r3, r2
 80126fc:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8012700:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012704:	4ab8      	ldr	r2, [pc, #736]	; (80129e8 <jpeg_idct_10x10+0x7d0>)
 8012706:	fb02 f303 	mul.w	r3, r2, r3
 801270a:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 801270e:	4413      	add	r3, r2
 8012710:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    tmp20 = tmp10 + tmp12;
 8012714:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8012718:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801271c:	4413      	add	r3, r2
 801271e:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp24 = tmp10 - tmp12;
 8012722:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8012726:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801272a:	1ad3      	subs	r3, r2, r3
 801272c:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp21 = tmp11 + tmp13;
 8012730:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8012734:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012738:	4413      	add	r3, r2
 801273a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp23 = tmp11 - tmp13;
 801273e:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8012742:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012746:	1ad3      	subs	r3, r2, r3
 8012748:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801274c:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8012750:	3304      	adds	r3, #4
 8012752:	681b      	ldr	r3, [r3, #0]
 8012754:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    z2 = (INT32) wsptr[3];
 8012758:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801275c:	330c      	adds	r3, #12
 801275e:	681b      	ldr	r3, [r3, #0]
 8012760:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z3 = (INT32) wsptr[5];
 8012764:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 8012768:	3314      	adds	r3, #20
 801276a:	681b      	ldr	r3, [r3, #0]
 801276c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z3 <<= CONST_BITS;
 8012770:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012774:	035b      	lsls	r3, r3, #13
 8012776:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    z4 = (INT32) wsptr[7];
 801277a:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 801277e:	331c      	adds	r3, #28
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp11 = z2 + z4;
 8012786:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 801278a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801278e:	4413      	add	r3, r2
 8012790:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = z2 - z4;
 8012794:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8012798:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801279c:	1ad3      	subs	r3, r2, r3
 801279e:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 80127a2:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80127a6:	f640 12e3 	movw	r2, #2531	; 0x9e3
 80127aa:	fb02 f303 	mul.w	r3, r2, r3
 80127ae:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 80127b2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80127b6:	f641 626f 	movw	r2, #7791	; 0x1e6f
 80127ba:	fb02 f303 	mul.w	r3, r2, r3
 80127be:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z4 = z3 + tmp12;
 80127c2:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 80127c6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80127ca:	4413      	add	r3, r2
 80127cc:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 80127d0:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80127d4:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 80127d8:	fb02 f203 	mul.w	r2, r2, r3
 80127dc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80127e0:	4413      	add	r3, r2
 80127e2:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 80127e6:	4413      	add	r3, r2
 80127e8:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 80127ec:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80127f0:	f240 7214 	movw	r2, #1812	; 0x714
 80127f4:	fb02 f203 	mul.w	r2, r2, r3
 80127f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80127fc:	1ad3      	subs	r3, r2, r3
 80127fe:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8012802:	4413      	add	r3, r2
 8012804:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 8012808:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801280c:	f241 22cf 	movw	r2, #4815	; 0x12cf
 8012810:	fb02 f303 	mul.w	r3, r2, r3
 8012814:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 8012818:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 801281c:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012820:	1ad2      	subs	r2, r2, r3
 8012822:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012826:	031b      	lsls	r3, r3, #12
 8012828:	1ad3      	subs	r3, r2, r3
 801282a:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188

    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 801282e:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8012832:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012836:	1ad3      	subs	r3, r2, r3
 8012838:	035a      	lsls	r2, r3, #13
 801283a:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 801283e:	1ad3      	subs	r3, r2, r3
 8012840:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 8012844:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8012848:	f642 0253 	movw	r2, #10323	; 0x2853
 801284c:	fb02 f203 	mul.w	r2, r2, r3
 8012850:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012854:	1ad2      	subs	r2, r2, r3
 8012856:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 801285a:	1ad3      	subs	r3, r2, r3
 801285c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 8012860:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8012864:	f241 428c 	movw	r2, #5260	; 0x148c
 8012868:	fb02 f203 	mul.w	r2, r2, r3
 801286c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012870:	1ad3      	subs	r3, r2, r3
 8012872:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8012876:	4413      	add	r3, r2
 8012878:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801287c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 8012880:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012884:	4413      	add	r3, r2
 8012886:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012888:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801288c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8012890:	4413      	add	r3, r2
 8012892:	781a      	ldrb	r2, [r3, #0]
 8012894:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012898:	701a      	strb	r2, [r3, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801289a:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 801289e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80128a2:	1ad3      	subs	r3, r2, r3
 80128a4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80128a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80128aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80128ae:	441a      	add	r2, r3
 80128b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80128b4:	3309      	adds	r3, #9
 80128b6:	7812      	ldrb	r2, [r2, #0]
 80128b8:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80128ba:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80128be:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80128c2:	4413      	add	r3, r2
 80128c4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80128c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80128ca:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80128ce:	441a      	add	r2, r3
 80128d0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80128d4:	3301      	adds	r3, #1
 80128d6:	7812      	ldrb	r2, [r2, #0]
 80128d8:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80128da:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80128de:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80128e2:	1ad3      	subs	r3, r2, r3
 80128e4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80128e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80128ea:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80128ee:	441a      	add	r2, r3
 80128f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80128f4:	3308      	adds	r3, #8
 80128f6:	7812      	ldrb	r2, [r2, #0]
 80128f8:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 80128fa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 80128fe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012902:	4413      	add	r3, r2
 8012904:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012906:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801290a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801290e:	441a      	add	r2, r3
 8012910:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012914:	3302      	adds	r3, #2
 8012916:	7812      	ldrb	r2, [r2, #0]
 8012918:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801291a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801291e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8012922:	1ad3      	subs	r3, r2, r3
 8012924:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012926:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801292a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801292e:	441a      	add	r2, r3
 8012930:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012934:	3307      	adds	r3, #7
 8012936:	7812      	ldrb	r2, [r2, #0]
 8012938:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801293a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801293e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012942:	4413      	add	r3, r2
 8012944:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012946:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801294a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801294e:	441a      	add	r2, r3
 8012950:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012954:	3303      	adds	r3, #3
 8012956:	7812      	ldrb	r2, [r2, #0]
 8012958:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801295a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801295e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8012962:	1ad3      	subs	r3, r2, r3
 8012964:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012966:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801296a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801296e:	441a      	add	r2, r3
 8012970:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012974:	3306      	adds	r3, #6
 8012976:	7812      	ldrb	r2, [r2, #0]
 8012978:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801297a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801297e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8012982:	4413      	add	r3, r2
 8012984:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8012986:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801298a:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 801298e:	441a      	add	r2, r3
 8012990:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8012994:	3304      	adds	r3, #4
 8012996:	7812      	ldrb	r2, [r2, #0]
 8012998:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 801299a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801299e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80129a2:	1ad3      	subs	r3, r2, r3
 80129a4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80129a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80129aa:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80129ae:	441a      	add	r2, r3
 80129b0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 80129b4:	3305      	adds	r3, #5
 80129b6:	7812      	ldrb	r2, [r2, #0]
 80129b8:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80129ba:	f8d7 319c 	ldr.w	r3, [r7, #412]	; 0x19c
 80129be:	3320      	adds	r3, #32
 80129c0:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  for (ctr = 0; ctr < 10; ctr++) {
 80129c4:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80129c8:	3301      	adds	r3, #1
 80129ca:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
 80129ce:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 80129d2:	2b09      	cmp	r3, #9
 80129d4:	f77f ae2c 	ble.w	8012630 <jpeg_idct_10x10+0x418>
  }
}
 80129d8:	bf00      	nop
 80129da:	bf00      	nop
 80129dc:	f507 77d4 	add.w	r7, r7, #424	; 0x1a8
 80129e0:	46bd      	mov	sp, r7
 80129e2:	bc90      	pop	{r4, r7}
 80129e4:	4770      	bx	lr
 80129e6:	bf00      	nop
 80129e8:	ffffba5c 	.word	0xffffba5c

080129ec <jpeg_idct_11x11>:

GLOBAL(void)
jpeg_idct_11x11 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80129ec:	b490      	push	{r4, r7}
 80129ee:	b0f2      	sub	sp, #456	; 0x1c8
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	f107 040c 	add.w	r4, r7, #12
 80129f6:	6020      	str	r0, [r4, #0]
 80129f8:	f107 0008 	add.w	r0, r7, #8
 80129fc:	6001      	str	r1, [r0, #0]
 80129fe:	1d39      	adds	r1, r7, #4
 8012a00:	600a      	str	r2, [r1, #0]
 8012a02:	463a      	mov	r2, r7
 8012a04:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8012a06:	f107 030c 	add.w	r3, r7, #12
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8012a10:	3380      	adds	r3, #128	; 0x80
 8012a12:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
  int workspace[8*11];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8012a16:	1d3b      	adds	r3, r7, #4
 8012a18:	681b      	ldr	r3, [r3, #0]
 8012a1a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8012a1e:	f107 0308 	add.w	r3, r7, #8
 8012a22:	681b      	ldr	r3, [r3, #0]
 8012a24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012a26:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
  wsptr = workspace;
 8012a2a:	f107 0314 	add.w	r3, r7, #20
 8012a2e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012a32:	2300      	movs	r3, #0
 8012a34:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8012a38:	e22b      	b.n	8012e92 <jpeg_idct_11x11+0x4a6>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8012a3a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012a3e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a42:	461a      	mov	r2, r3
 8012a44:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012a48:	681b      	ldr	r3, [r3, #0]
 8012a4a:	fb03 f302 	mul.w	r3, r3, r2
 8012a4e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp10 <<= CONST_BITS;
 8012a52:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8012a56:	035b      	lsls	r3, r3, #13
 8012a58:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    /* Add fudge factor here for final descale. */
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8012a5c:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8012a60:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8012a64:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8012a68:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012a6c:	3320      	adds	r3, #32
 8012a6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a72:	461a      	mov	r2, r3
 8012a74:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012a78:	3340      	adds	r3, #64	; 0x40
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	fb03 f302 	mul.w	r3, r3, r2
 8012a80:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8012a84:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012a88:	3340      	adds	r3, #64	; 0x40
 8012a8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012a8e:	461a      	mov	r2, r3
 8012a90:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012a94:	3380      	adds	r3, #128	; 0x80
 8012a96:	681b      	ldr	r3, [r3, #0]
 8012a98:	fb03 f302 	mul.w	r3, r3, r2
 8012a9c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8012aa0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012aa4:	3360      	adds	r3, #96	; 0x60
 8012aa6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012aaa:	461a      	mov	r2, r3
 8012aac:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012ab0:	33c0      	adds	r3, #192	; 0xc0
 8012ab2:	681b      	ldr	r3, [r3, #0]
 8012ab4:	fb03 f302 	mul.w	r3, r3, r2
 8012ab8:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012abc:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8012ac0:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012ac4:	1ad3      	subs	r3, r2, r3
 8012ac6:	f245 127e 	movw	r2, #20862	; 0x517e
 8012aca:	fb02 f303 	mul.w	r3, r2, r3
 8012ace:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012ad2:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8012ad6:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012ada:	1ad3      	subs	r3, r2, r3
 8012adc:	f640 52c9 	movw	r2, #3529	; 0xdc9
 8012ae0:	fb02 f303 	mul.w	r3, r2, r3
 8012ae4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    z4 = z1 + z3;
 8012ae8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8012aec:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012af0:	4413      	add	r3, r2
 8012af2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
 8012af6:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012afa:	4aec      	ldr	r2, [pc, #944]	; (8012eac <jpeg_idct_11x11+0x4c0>)
 8012afc:	fb02 f303 	mul.w	r3, r2, r3
 8012b00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    z4 -= z2;
 8012b04:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8012b08:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012b0c:	1ad3      	subs	r3, r2, r3
 8012b0e:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012b12:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012b16:	f642 326c 	movw	r2, #11116	; 0x2b6c
 8012b1a:	fb02 f303 	mul.w	r3, r2, r3
 8012b1e:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8012b22:	4413      	add	r3, r2
 8012b24:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012b28:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8012b2c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8012b30:	441a      	add	r2, r3
 8012b32:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012b36:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
 8012b38:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012b3c:	49dc      	ldr	r1, [pc, #880]	; (8012eb0 <jpeg_idct_11x11+0x4c4>)
 8012b3e:	fb01 f303 	mul.w	r3, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012b42:	4413      	add	r3, r2
 8012b44:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012b48:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012b4c:	f244 32b5 	movw	r2, #17333	; 0x43b5
 8012b50:	fb02 f203 	mul.w	r2, r2, r3
 8012b54:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012b58:	4413      	add	r3, r2
 8012b5a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8012b5e:	4413      	add	r3, r2
 8012b60:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8012b64:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012b68:	4ad2      	ldr	r2, [pc, #840]	; (8012eb4 <jpeg_idct_11x11+0x4c8>)
 8012b6a:	fb02 f203 	mul.w	r2, r2, r3
 8012b6e:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012b72:	4413      	add	r3, r2
 8012b74:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8012b78:	4413      	add	r3, r2
 8012b7a:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    tmp24 += tmp25;
 8012b7e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012b82:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012b86:	4413      	add	r3, r2
 8012b88:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012b8c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012b90:	4ac9      	ldr	r2, [pc, #804]	; (8012eb8 <jpeg_idct_11x11+0x4cc>)
 8012b92:	fb02 f303 	mul.w	r3, r2, r3
 8012b96:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012b9a:	4413      	add	r3, r2
 8012b9c:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012ba0:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012ba4:	f643 6239 	movw	r2, #15929	; 0x3e39
 8012ba8:	fb02 f203 	mul.w	r2, r2, r3
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 8012bac:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012bb0:	49c2      	ldr	r1, [pc, #776]	; (8012ebc <jpeg_idct_11x11+0x4d0>)
 8012bb2:	fb01 f303 	mul.w	r3, r1, r3
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8012bb6:	4413      	add	r3, r2
 8012bb8:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012bbc:	4413      	add	r3, r2
 8012bbe:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8012bc2:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012bc6:	f46f 5235 	mvn.w	r2, #11584	; 0x2d40
 8012bca:	fb02 f303 	mul.w	r3, r2, r3
 8012bce:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8012bd2:	4413      	add	r3, r2
 8012bd4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8012bd8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012bdc:	3310      	adds	r3, #16
 8012bde:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012be2:	461a      	mov	r2, r3
 8012be4:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012be8:	3320      	adds	r3, #32
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	fb03 f302 	mul.w	r3, r3, r2
 8012bf0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8012bf4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012bf8:	3330      	adds	r3, #48	; 0x30
 8012bfa:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012bfe:	461a      	mov	r2, r3
 8012c00:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012c04:	3360      	adds	r3, #96	; 0x60
 8012c06:	681b      	ldr	r3, [r3, #0]
 8012c08:	fb03 f302 	mul.w	r3, r3, r2
 8012c0c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8012c10:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012c14:	3350      	adds	r3, #80	; 0x50
 8012c16:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c1a:	461a      	mov	r2, r3
 8012c1c:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012c20:	33a0      	adds	r3, #160	; 0xa0
 8012c22:	681b      	ldr	r3, [r3, #0]
 8012c24:	fb03 f302 	mul.w	r3, r3, r2
 8012c28:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8012c2c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012c30:	3370      	adds	r3, #112	; 0x70
 8012c32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012c36:	461a      	mov	r2, r3
 8012c38:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012c3c:	33e0      	adds	r3, #224	; 0xe0
 8012c3e:	681b      	ldr	r3, [r3, #0]
 8012c40:	fb03 f302 	mul.w	r3, r3, r2
 8012c44:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    tmp11 = z1 + z2;
 8012c48:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8012c4c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012c50:	4413      	add	r3, r2
 8012c52:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8012c56:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8012c5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012c5e:	441a      	add	r2, r3
 8012c60:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012c64:	4413      	add	r3, r2
 8012c66:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8012c6a:	fb02 f303 	mul.w	r3, r2, r3
 8012c6e:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 8012c72:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012c76:	f641 426a 	movw	r2, #7274	; 0x1c6a
 8012c7a:	fb02 f303 	mul.w	r3, r2, r3
 8012c7e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 8012c82:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8012c86:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012c8a:	4413      	add	r3, r2
 8012c8c:	f241 5274 	movw	r2, #5492	; 0x1574
 8012c90:	fb02 f303 	mul.w	r3, r2, r3
 8012c94:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 8012c98:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8012c9c:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012ca0:	4413      	add	r3, r2
 8012ca2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8012ca6:	fb02 f303 	mul.w	r3, r2, r3
 8012caa:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8012cae:	4413      	add	r3, r2
 8012cb0:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012cb4:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8012cb8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012cbc:	441a      	add	r2, r3
 8012cbe:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8012cc2:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
 8012cc4:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012cc8:	497d      	ldr	r1, [pc, #500]	; (8012ec0 <jpeg_idct_11x11+0x4d4>)
 8012cca:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8012cce:	4413      	add	r3, r2
 8012cd0:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8012cd4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8012cd8:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012cdc:	4413      	add	r3, r2
 8012cde:	4a79      	ldr	r2, [pc, #484]	; (8012ec4 <jpeg_idct_11x11+0x4d8>)
 8012ce0:	fb02 f303 	mul.w	r3, r2, r3
 8012ce4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8012ce8:	4413      	add	r3, r2
 8012cea:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 8012cee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012cf2:	f244 2258 	movw	r2, #16984	; 0x4258
 8012cf6:	fb02 f203 	mul.w	r2, r2, r3
 8012cfa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012cfe:	4413      	add	r3, r2
 8012d00:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8012d04:	4413      	add	r3, r2
 8012d06:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8012d0a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012d0e:	4a6e      	ldr	r2, [pc, #440]	; (8012ec8 <jpeg_idct_11x11+0x4dc>)
 8012d10:	fb02 f203 	mul.w	r2, r2, r3
 8012d14:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012d18:	4413      	add	r3, r2
 8012d1a:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8012d1e:	4413      	add	r3, r2
 8012d20:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8012d24:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8012d28:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012d2c:	4413      	add	r3, r2
 8012d2e:	4a67      	ldr	r2, [pc, #412]	; (8012ecc <jpeg_idct_11x11+0x4e0>)
 8012d30:	fb02 f303 	mul.w	r3, r2, r3
 8012d34:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp11 += z1;
 8012d38:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8012d3c:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012d40:	4413      	add	r3, r2
 8012d42:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8012d46:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012d4a:	f244 3247 	movw	r2, #17223	; 0x4347
 8012d4e:	fb02 f203 	mul.w	r2, r2, r3
 8012d52:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012d56:	4413      	add	r3, r2
 8012d58:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8012d5c:	4413      	add	r3, r2
 8012d5e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012d62:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012d66:	4a5a      	ldr	r2, [pc, #360]	; (8012ed0 <jpeg_idct_11x11+0x4e4>)
 8012d68:	fb02 f203 	mul.w	r2, r2, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012d6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012d70:	f242 010b 	movw	r1, #8203	; 0x200b
 8012d74:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012d78:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
 8012d7a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012d7e:	4955      	ldr	r1, [pc, #340]	; (8012ed4 <jpeg_idct_11x11+0x4e8>)
 8012d80:	fb01 f303 	mul.w	r3, r1, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 8012d84:	4413      	add	r3, r2
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8012d86:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8012d8a:	4413      	add	r3, r2
 8012d8c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8012d90:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8012d94:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8012d98:	4413      	add	r3, r2
 8012d9a:	12da      	asrs	r2, r3, #11
 8012d9c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012da0:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8012da2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8012da6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8012daa:	1ad2      	subs	r2, r2, r3
 8012dac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012db0:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8012db4:	12d2      	asrs	r2, r2, #11
 8012db6:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8012db8:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8012dbc:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012dc0:	441a      	add	r2, r3
 8012dc2:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012dc6:	3320      	adds	r3, #32
 8012dc8:	12d2      	asrs	r2, r2, #11
 8012dca:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8012dcc:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8012dd0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8012dd4:	1ad2      	subs	r2, r2, r3
 8012dd6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012dda:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8012dde:	12d2      	asrs	r2, r2, #11
 8012de0:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8012de2:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8012de6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012dea:	441a      	add	r2, r3
 8012dec:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012df0:	3340      	adds	r3, #64	; 0x40
 8012df2:	12d2      	asrs	r2, r2, #11
 8012df4:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8012df6:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8012dfa:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8012dfe:	1ad2      	subs	r2, r2, r3
 8012e00:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012e04:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8012e08:	12d2      	asrs	r2, r2, #11
 8012e0a:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8012e0c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8012e10:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8012e14:	441a      	add	r2, r3
 8012e16:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012e1a:	3360      	adds	r3, #96	; 0x60
 8012e1c:	12d2      	asrs	r2, r2, #11
 8012e1e:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8012e20:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8012e24:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8012e28:	1ad2      	subs	r2, r2, r3
 8012e2a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012e2e:	33e0      	adds	r3, #224	; 0xe0
 8012e30:	12d2      	asrs	r2, r2, #11
 8012e32:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8012e34:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012e38:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012e3c:	441a      	add	r2, r3
 8012e3e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012e42:	3380      	adds	r3, #128	; 0x80
 8012e44:	12d2      	asrs	r2, r2, #11
 8012e46:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8012e48:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012e4c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8012e50:	1ad2      	subs	r2, r2, r3
 8012e52:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012e56:	33c0      	adds	r3, #192	; 0xc0
 8012e58:	12d2      	asrs	r2, r2, #11
 8012e5a:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25, CONST_BITS-PASS1_BITS);
 8012e5c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012e60:	33a0      	adds	r3, #160	; 0xa0
 8012e62:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8012e66:	12d2      	asrs	r2, r2, #11
 8012e68:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8012e6a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8012e6e:	3301      	adds	r3, #1
 8012e70:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8012e74:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8012e78:	3302      	adds	r3, #2
 8012e7a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8012e7e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8012e82:	3304      	adds	r3, #4
 8012e84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8012e88:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012e8c:	3304      	adds	r3, #4
 8012e8e:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8012e92:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8012e96:	2b07      	cmp	r3, #7
 8012e98:	f77f adcf 	ble.w	8012a3a <jpeg_idct_11x11+0x4e>
  }

  /* Pass 2: process 11 rows from work array, store into output array. */

  wsptr = workspace;
 8012e9c:	f107 0314 	add.w	r3, r7, #20
 8012ea0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  for (ctr = 0; ctr < 11; ctr++) {
 8012ea4:	2300      	movs	r3, #0
 8012ea6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 8012eaa:	e255      	b.n	8013358 <jpeg_idct_11x11+0x96c>
 8012eac:	ffffdb05 	.word	0xffffdb05
 8012eb0:	ffffc5b4 	.word	0xffffc5b4
 8012eb4:	ffffcf91 	.word	0xffffcf91
 8012eb8:	ffffe6c3 	.word	0xffffe6c3
 8012ebc:	ffffd37d 	.word	0xffffd37d
 8012ec0:	ffffe276 	.word	0xffffe276
 8012ec4:	ffffdac9 	.word	0xffffdac9
 8012ec8:	ffffd9da 	.word	0xffffd9da
 8012ecc:	ffffc675 	.word	0xffffc675
 8012ed0:	ffffd10d 	.word	0xffffd10d
 8012ed4:	ffffca16 	.word	0xffffca16
    outptr = output_buf[ctr] + output_col;
 8012ed8:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8012edc:	009b      	lsls	r3, r3, #2
 8012ede:	463a      	mov	r2, r7
 8012ee0:	6812      	ldr	r2, [r2, #0]
 8012ee2:	4413      	add	r3, r2
 8012ee4:	681a      	ldr	r2, [r3, #0]
 8012ee6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8012eea:	4413      	add	r3, r2
 8012eec:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8012ef0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012ef4:	681b      	ldr	r3, [r3, #0]
 8012ef6:	3310      	adds	r3, #16
 8012ef8:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp10 <<= CONST_BITS;
 8012efc:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8012f00:	035b      	lsls	r3, r3, #13
 8012f02:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    z1 = (INT32) wsptr[2];
 8012f06:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012f0a:	3308      	adds	r3, #8
 8012f0c:	681b      	ldr	r3, [r3, #0]
 8012f0e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    z2 = (INT32) wsptr[4];
 8012f12:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012f16:	3310      	adds	r3, #16
 8012f18:	681b      	ldr	r3, [r3, #0]
 8012f1a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    z3 = (INT32) wsptr[6];
 8012f1e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8012f22:	3318      	adds	r3, #24
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0

    tmp20 = MULTIPLY(z2 - z3, FIX(2.546640132));     /* c2+c4 */
 8012f2a:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8012f2e:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012f32:	1ad3      	subs	r3, r2, r3
 8012f34:	f245 127e 	movw	r2, #20862	; 0x517e
 8012f38:	fb02 f303 	mul.w	r3, r2, r3
 8012f3c:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    tmp23 = MULTIPLY(z2 - z1, FIX(0.430815045));     /* c2-c6 */
 8012f40:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8012f44:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012f48:	1ad3      	subs	r3, r2, r3
 8012f4a:	f640 52c9 	movw	r2, #3529	; 0xdc9
 8012f4e:	fb02 f303 	mul.w	r3, r2, r3
 8012f52:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    z4 = z1 + z3;
 8012f56:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8012f5a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012f5e:	4413      	add	r3, r2
 8012f60:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp24 = MULTIPLY(z4, - FIX(1.155664402));        /* -(c2-c10) */
 8012f64:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012f68:	4af0      	ldr	r2, [pc, #960]	; (801332c <jpeg_idct_11x11+0x940>)
 8012f6a:	fb02 f303 	mul.w	r3, r2, r3
 8012f6e:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    z4 -= z2;
 8012f72:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8012f76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012f7a:	1ad3      	subs	r3, r2, r3
 8012f7c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp25 = tmp10 + MULTIPLY(z4, FIX(1.356927976));  /* c2 */
 8012f80:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8012f84:	f642 326c 	movw	r2, #11116	; 0x2b6c
 8012f88:	fb02 f303 	mul.w	r3, r2, r3
 8012f8c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8012f90:	4413      	add	r3, r2
 8012f92:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012f96:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8012f9a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8012f9e:	441a      	add	r2, r3
 8012fa0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012fa4:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(1.821790775));          /* c2+c4+c10-c6 */
 8012fa6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8012faa:	49e1      	ldr	r1, [pc, #900]	; (8013330 <jpeg_idct_11x11+0x944>)
 8012fac:	fb01 f303 	mul.w	r3, r1, r3
    tmp21 = tmp20 + tmp23 + tmp25 -
 8012fb0:	4413      	add	r3, r2
 8012fb2:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
    tmp20 += tmp25 + MULTIPLY(z3, FIX(2.115825087)); /* c4+c6 */
 8012fb6:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012fba:	f244 32b5 	movw	r2, #17333	; 0x43b5
 8012fbe:	fb02 f203 	mul.w	r2, r2, r3
 8012fc2:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012fc6:	4413      	add	r3, r2
 8012fc8:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8012fcc:	4413      	add	r3, r2
 8012fce:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
    tmp23 += tmp25 - MULTIPLY(z1, FIX(1.513598477)); /* c6+c8 */
 8012fd2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8012fd6:	4ad7      	ldr	r2, [pc, #860]	; (8013334 <jpeg_idct_11x11+0x948>)
 8012fd8:	fb02 f203 	mul.w	r2, r2, r3
 8012fdc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012fe0:	4413      	add	r3, r2
 8012fe2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8012fe6:	4413      	add	r3, r2
 8012fe8:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    tmp24 += tmp25;
 8012fec:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8012ff0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8012ff4:	4413      	add	r3, r2
 8012ff6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp22 = tmp24 - MULTIPLY(z3, FIX(0.788749120));  /* c8+c10 */
 8012ffa:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8012ffe:	4ace      	ldr	r2, [pc, #824]	; (8013338 <jpeg_idct_11x11+0x94c>)
 8013000:	fb02 f303 	mul.w	r3, r2, r3
 8013004:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8013008:	4413      	add	r3, r2
 801300a:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 801300e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013012:	f643 6239 	movw	r2, #15929	; 0x3e39
 8013016:	fb02 f203 	mul.w	r2, r2, r3
	     MULTIPLY(z1, FIX(1.390975730));         /* c4+c10 */
 801301a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801301e:	49c7      	ldr	r1, [pc, #796]	; (801333c <jpeg_idct_11x11+0x950>)
 8013020:	fb01 f303 	mul.w	r3, r1, r3
    tmp24 += MULTIPLY(z2, FIX(1.944413522)) -        /* c2+c8 */
 8013024:	4413      	add	r3, r2
 8013026:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801302a:	4413      	add	r3, r2
 801302c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp25 = tmp10 - MULTIPLY(z4, FIX(1.414213562));  /* c0 */
 8013030:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013034:	f46f 5235 	mvn.w	r2, #11584	; 0x2d40
 8013038:	fb02 f303 	mul.w	r3, r2, r3
 801303c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8013040:	4413      	add	r3, r2
 8013042:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8013046:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801304a:	3304      	adds	r3, #4
 801304c:	681b      	ldr	r3, [r3, #0]
 801304e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    z2 = (INT32) wsptr[3];
 8013052:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013056:	330c      	adds	r3, #12
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    z3 = (INT32) wsptr[5];
 801305e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013062:	3314      	adds	r3, #20
 8013064:	681b      	ldr	r3, [r3, #0]
 8013066:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    z4 = (INT32) wsptr[7];
 801306a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801306e:	331c      	adds	r3, #28
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    tmp11 = z1 + z2;
 8013076:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801307a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 801307e:	4413      	add	r3, r2
 8013080:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp14 = MULTIPLY(tmp11 + z3 + z4, FIX(0.398430003)); /* c9 */
 8013084:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8013088:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801308c:	441a      	add	r2, r3
 801308e:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013092:	4413      	add	r3, r2
 8013094:	f44f 624c 	mov.w	r2, #3264	; 0xcc0
 8013098:	fb02 f303 	mul.w	r3, r2, r3
 801309c:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    tmp11 = MULTIPLY(tmp11, FIX(0.887983902));           /* c3-c9 */
 80130a0:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 80130a4:	f641 426a 	movw	r2, #7274	; 0x1c6a
 80130a8:	fb02 f303 	mul.w	r3, r2, r3
 80130ac:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp12 = MULTIPLY(z1 + z3, FIX(0.670361295));         /* c5-c9 */
 80130b0:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80130b4:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 80130b8:	4413      	add	r3, r2
 80130ba:	f241 5274 	movw	r2, #5492	; 0x1574
 80130be:	fb02 f303 	mul.w	r3, r2, r3
 80130c2:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    tmp13 = tmp14 + MULTIPLY(z1 + z4, FIX(0.366151574)); /* c7-c9 */
 80130c6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80130ca:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80130ce:	4413      	add	r3, r2
 80130d0:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80130d4:	fb02 f303 	mul.w	r3, r2, r3
 80130d8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80130dc:	4413      	add	r3, r2
 80130de:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    tmp10 = tmp11 + tmp12 + tmp13 -
 80130e2:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 80130e6:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 80130ea:	441a      	add	r2, r3
 80130ec:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80130f0:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(0.923107866));              /* c7+c5+c3-c1-2*c9 */
 80130f2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 80130f6:	4992      	ldr	r1, [pc, #584]	; (8013340 <jpeg_idct_11x11+0x954>)
 80130f8:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 80130fc:	4413      	add	r3, r2
 80130fe:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    z1    = tmp14 - MULTIPLY(z2 + z3, FIX(1.163011579)); /* c7+c9 */
 8013102:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8013106:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801310a:	4413      	add	r3, r2
 801310c:	4a8d      	ldr	r2, [pc, #564]	; (8013344 <jpeg_idct_11x11+0x958>)
 801310e:	fb02 f303 	mul.w	r3, r2, r3
 8013112:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8013116:	4413      	add	r3, r2
 8013118:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp11 += z1 + MULTIPLY(z2, FIX(2.073276588));        /* c1+c7+3*c9-c3 */
 801311c:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013120:	f244 2258 	movw	r2, #16984	; 0x4258
 8013124:	fb02 f203 	mul.w	r2, r2, r3
 8013128:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801312c:	4413      	add	r3, r2
 801312e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8013132:	4413      	add	r3, r2
 8013134:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp12 += z1 - MULTIPLY(z3, FIX(1.192193623));        /* c3+c5-c7-c9 */
 8013138:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801313c:	4a82      	ldr	r2, [pc, #520]	; (8013348 <jpeg_idct_11x11+0x95c>)
 801313e:	fb02 f203 	mul.w	r2, r2, r3
 8013142:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8013146:	4413      	add	r3, r2
 8013148:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 801314c:	4413      	add	r3, r2
 801314e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    z1    = MULTIPLY(z2 + z4, - FIX(1.798248910));       /* -(c1+c9) */
 8013152:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8013156:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801315a:	4413      	add	r3, r2
 801315c:	4a7b      	ldr	r2, [pc, #492]	; (801334c <jpeg_idct_11x11+0x960>)
 801315e:	fb02 f303 	mul.w	r3, r2, r3
 8013162:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp11 += z1;
 8013166:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 801316a:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801316e:	4413      	add	r3, r2
 8013170:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
    tmp13 += z1 + MULTIPLY(z4, FIX(2.102458632));        /* c1+c5+c9-c7 */
 8013174:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013178:	f244 3247 	movw	r2, #17223	; 0x4347
 801317c:	fb02 f203 	mul.w	r2, r2, r3
 8013180:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8013184:	4413      	add	r3, r2
 8013186:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801318a:	4413      	add	r3, r2
 801318c:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 8013190:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8013194:	4a6e      	ldr	r2, [pc, #440]	; (8013350 <jpeg_idct_11x11+0x964>)
 8013196:	fb02 f203 	mul.w	r2, r2, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 801319a:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 801319e:	f242 010b 	movw	r1, #8203	; 0x200b
 80131a2:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80131a6:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.684843907));             /* c3+c9 */
 80131a8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80131ac:	4969      	ldr	r1, [pc, #420]	; (8013354 <jpeg_idct_11x11+0x968>)
 80131ae:	fb01 f303 	mul.w	r3, r1, r3
	     MULTIPLY(z3, FIX(1.001388905)) -            /* c1-c9 */
 80131b2:	4413      	add	r3, r2
    tmp14 += MULTIPLY(z2, - FIX(1.467221301)) +          /* -(c5+c9) */
 80131b4:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80131b8:	4413      	add	r3, r2
 80131ba:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131be:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80131c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80131c6:	4413      	add	r3, r2
 80131c8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80131ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80131ce:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80131d2:	4413      	add	r3, r2
 80131d4:	781a      	ldrb	r2, [r3, #0]
 80131d6:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80131da:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80131dc:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80131e0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80131e4:	1ad3      	subs	r3, r2, r3
 80131e6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80131e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80131ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80131f0:	441a      	add	r2, r3
 80131f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80131f6:	330a      	adds	r3, #10
 80131f8:	7812      	ldrb	r2, [r2, #0]
 80131fa:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80131fc:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8013200:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8013204:	4413      	add	r3, r2
 8013206:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013208:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801320c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8013210:	441a      	add	r2, r3
 8013212:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013216:	3301      	adds	r3, #1
 8013218:	7812      	ldrb	r2, [r2, #0]
 801321a:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801321c:	f8d7 2188 	ldr.w	r2, [r7, #392]	; 0x188
 8013220:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8013224:	1ad3      	subs	r3, r2, r3
 8013226:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013228:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801322c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8013230:	441a      	add	r2, r3
 8013232:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013236:	3309      	adds	r3, #9
 8013238:	7812      	ldrb	r2, [r2, #0]
 801323a:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801323c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8013240:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013244:	4413      	add	r3, r2
 8013246:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013248:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801324c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8013250:	441a      	add	r2, r3
 8013252:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013256:	3302      	adds	r3, #2
 8013258:	7812      	ldrb	r2, [r2, #0]
 801325a:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801325c:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8013260:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8013264:	1ad3      	subs	r3, r2, r3
 8013266:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013268:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801326c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8013270:	441a      	add	r2, r3
 8013272:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013276:	3308      	adds	r3, #8
 8013278:	7812      	ldrb	r2, [r2, #0]
 801327a:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801327c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8013280:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8013284:	4413      	add	r3, r2
 8013286:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013288:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801328c:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8013290:	441a      	add	r2, r3
 8013292:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013296:	3303      	adds	r3, #3
 8013298:	7812      	ldrb	r2, [r2, #0]
 801329a:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801329c:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80132a0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80132a4:	1ad3      	subs	r3, r2, r3
 80132a6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80132a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80132ac:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80132b0:	441a      	add	r2, r3
 80132b2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80132b6:	3307      	adds	r3, #7
 80132b8:	7812      	ldrb	r2, [r2, #0]
 80132ba:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80132bc:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80132c0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80132c4:	4413      	add	r3, r2
 80132c6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80132c8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80132cc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80132d0:	441a      	add	r2, r3
 80132d2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80132d6:	3304      	adds	r3, #4
 80132d8:	7812      	ldrb	r2, [r2, #0]
 80132da:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80132dc:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 80132e0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 80132e4:	1ad3      	subs	r3, r2, r3
 80132e6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80132e8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80132ec:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80132f0:	441a      	add	r2, r3
 80132f2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 80132f6:	3306      	adds	r3, #6
 80132f8:	7812      	ldrb	r2, [r2, #0]
 80132fa:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 80132fc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8013300:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013302:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25,
 8013306:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 801330a:	441a      	add	r2, r3
 801330c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8013310:	3305      	adds	r3, #5
 8013312:	7812      	ldrb	r2, [r2, #0]
 8013314:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8013316:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801331a:	3320      	adds	r3, #32
 801331c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
  for (ctr = 0; ctr < 11; ctr++) {
 8013320:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013324:	3301      	adds	r3, #1
 8013326:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
 801332a:	e015      	b.n	8013358 <jpeg_idct_11x11+0x96c>
 801332c:	ffffdb05 	.word	0xffffdb05
 8013330:	ffffc5b4 	.word	0xffffc5b4
 8013334:	ffffcf91 	.word	0xffffcf91
 8013338:	ffffe6c3 	.word	0xffffe6c3
 801333c:	ffffd37d 	.word	0xffffd37d
 8013340:	ffffe276 	.word	0xffffe276
 8013344:	ffffdac9 	.word	0xffffdac9
 8013348:	ffffd9da 	.word	0xffffd9da
 801334c:	ffffc675 	.word	0xffffc675
 8013350:	ffffd10d 	.word	0xffffd10d
 8013354:	ffffca16 	.word	0xffffca16
 8013358:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801335c:	2b0a      	cmp	r3, #10
 801335e:	f77f adbb 	ble.w	8012ed8 <jpeg_idct_11x11+0x4ec>
  }
}
 8013362:	bf00      	nop
 8013364:	bf00      	nop
 8013366:	f507 77e4 	add.w	r7, r7, #456	; 0x1c8
 801336a:	46bd      	mov	sp, r7
 801336c:	bc90      	pop	{r4, r7}
 801336e:	4770      	bx	lr

08013370 <jpeg_idct_12x12>:

GLOBAL(void)
jpeg_idct_12x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013370:	b490      	push	{r4, r7}
 8013372:	b0fa      	sub	sp, #488	; 0x1e8
 8013374:	af00      	add	r7, sp, #0
 8013376:	f107 040c 	add.w	r4, r7, #12
 801337a:	6020      	str	r0, [r4, #0]
 801337c:	f107 0008 	add.w	r0, r7, #8
 8013380:	6001      	str	r1, [r0, #0]
 8013382:	1d39      	adds	r1, r7, #4
 8013384:	600a      	str	r2, [r1, #0]
 8013386:	463a      	mov	r2, r7
 8013388:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801338a:	f107 030c 	add.w	r3, r7, #12
 801338e:	681b      	ldr	r3, [r3, #0]
 8013390:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013394:	3380      	adds	r3, #128	; 0x80
 8013396:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
  int workspace[8*12];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801339a:	1d3b      	adds	r3, r7, #4
 801339c:	681b      	ldr	r3, [r3, #0]
 801339e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80133a2:	f107 0308 	add.w	r3, r7, #8
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80133aa:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
  wsptr = workspace;
 80133ae:	f107 0310 	add.w	r3, r7, #16
 80133b2:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80133b6:	2300      	movs	r3, #0
 80133b8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80133bc:	e218      	b.n	80137f0 <jpeg_idct_12x12+0x480>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80133be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80133c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133c6:	461a      	mov	r2, r3
 80133c8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80133cc:	681b      	ldr	r3, [r3, #0]
 80133ce:	fb03 f302 	mul.w	r3, r3, r2
 80133d2:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    z3 <<= CONST_BITS;
 80133d6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80133da:	035b      	lsls	r3, r3, #13
 80133dc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 80133e0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80133e4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80133e8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80133ec:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80133f0:	3340      	adds	r3, #64	; 0x40
 80133f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80133f6:	461a      	mov	r2, r3
 80133f8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80133fc:	3380      	adds	r3, #128	; 0x80
 80133fe:	681b      	ldr	r3, [r3, #0]
 8013400:	fb03 f302 	mul.w	r3, r3, r2
 8013404:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8013408:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801340c:	f242 7231 	movw	r2, #10033	; 0x2731
 8013410:	fb02 f303 	mul.w	r3, r2, r3
 8013414:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp10 = z3 + z4;
 8013418:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801341c:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013420:	4413      	add	r3, r2
 8013422:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp11 = z3 - z4;
 8013426:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801342a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801342e:	1ad3      	subs	r3, r2, r3
 8013430:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013434:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013438:	3320      	adds	r3, #32
 801343a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801343e:	461a      	mov	r2, r3
 8013440:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013444:	3340      	adds	r3, #64	; 0x40
 8013446:	681b      	ldr	r3, [r3, #0]
 8013448:	fb03 f302 	mul.w	r3, r3, r2
 801344c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013450:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013454:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 8013458:	fb02 f303 	mul.w	r3, r2, r3
 801345c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    z1 <<= CONST_BITS;
 8013460:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013464:	035b      	lsls	r3, r3, #13
 8013466:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801346a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801346e:	3360      	adds	r3, #96	; 0x60
 8013470:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013474:	461a      	mov	r2, r3
 8013476:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801347a:	33c0      	adds	r3, #192	; 0xc0
 801347c:	681b      	ldr	r3, [r3, #0]
 801347e:	fb03 f302 	mul.w	r3, r3, r2
 8013482:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z2 <<= CONST_BITS;
 8013486:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801348a:	035b      	lsls	r3, r3, #13
 801348c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    tmp12 = z1 - z2;
 8013490:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8013494:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013498:	1ad3      	subs	r3, r2, r3
 801349a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp21 = z3 + tmp12;
 801349e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80134a2:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80134a6:	4413      	add	r3, r2
 80134a8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    tmp24 = z3 - tmp12;
 80134ac:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80134b0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80134b4:	1ad3      	subs	r3, r2, r3
 80134b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    tmp12 = z4 + z2;
 80134ba:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80134be:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80134c2:	4413      	add	r3, r2
 80134c4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp20 = tmp10 + tmp12;
 80134c8:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80134cc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80134d0:	4413      	add	r3, r2
 80134d2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp25 = tmp10 - tmp12;
 80134d6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80134da:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80134de:	1ad3      	subs	r3, r2, r3
 80134e0:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

    tmp12 = z4 - z1 - z2;
 80134e4:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80134e8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80134ec:	1ad2      	subs	r2, r2, r3
 80134ee:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80134f2:	1ad3      	subs	r3, r2, r3
 80134f4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp22 = tmp11 + tmp12;
 80134f8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80134fc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013500:	4413      	add	r3, r2
 8013502:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    tmp23 = tmp11 - tmp12;
 8013506:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801350a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801350e:	1ad3      	subs	r3, r2, r3
 8013510:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013514:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013518:	3310      	adds	r3, #16
 801351a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801351e:	461a      	mov	r2, r3
 8013520:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013524:	3320      	adds	r3, #32
 8013526:	681b      	ldr	r3, [r3, #0]
 8013528:	fb03 f302 	mul.w	r3, r3, r2
 801352c:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013530:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013534:	3330      	adds	r3, #48	; 0x30
 8013536:	f9b3 3000 	ldrsh.w	r3, [r3]
 801353a:	461a      	mov	r2, r3
 801353c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013540:	3360      	adds	r3, #96	; 0x60
 8013542:	681b      	ldr	r3, [r3, #0]
 8013544:	fb03 f302 	mul.w	r3, r3, r2
 8013548:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801354c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013550:	3350      	adds	r3, #80	; 0x50
 8013552:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013556:	461a      	mov	r2, r3
 8013558:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801355c:	33a0      	adds	r3, #160	; 0xa0
 801355e:	681b      	ldr	r3, [r3, #0]
 8013560:	fb03 f302 	mul.w	r3, r3, r2
 8013564:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013568:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801356c:	3370      	adds	r3, #112	; 0x70
 801356e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013572:	461a      	mov	r2, r3
 8013574:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013578:	33e0      	adds	r3, #224	; 0xe0
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	fb03 f302 	mul.w	r3, r3, r2
 8013580:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8013584:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013588:	f642 12cf 	movw	r2, #10703	; 0x29cf
 801358c:	fb02 f303 	mul.w	r3, r2, r3
 8013590:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8013594:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013598:	4a9c      	ldr	r2, [pc, #624]	; (801380c <jpeg_idct_12x12+0x49c>)
 801359a:	fb02 f303 	mul.w	r3, r2, r3
 801359e:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    tmp10 = z1 + z3;
 80135a2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80135a6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80135aa:	4413      	add	r3, r2
 80135ac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80135b0:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80135b4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80135b8:	4413      	add	r3, r2
 80135ba:	f641 328d 	movw	r2, #7053	; 0x1b8d
 80135be:	fb02 f303 	mul.w	r3, r2, r3
 80135c2:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80135c6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80135ca:	f640 025b 	movw	r2, #2139	; 0x85b
 80135ce:	fb02 f303 	mul.w	r3, r2, r3
 80135d2:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80135d6:	4413      	add	r3, r2
 80135d8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80135dc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80135e0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80135e4:	18d1      	adds	r1, r2, r3
 80135e6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80135ea:	4613      	mov	r3, r2
 80135ec:	00db      	lsls	r3, r3, #3
 80135ee:	4413      	add	r3, r2
 80135f0:	021a      	lsls	r2, r3, #8
 80135f2:	1ad3      	subs	r3, r2, r3
 80135f4:	440b      	add	r3, r1
 80135f6:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80135fa:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80135fe:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013602:	4413      	add	r3, r2
 8013604:	4a82      	ldr	r2, [pc, #520]	; (8013810 <jpeg_idct_12x12+0x4a0>)
 8013606:	fb02 f303 	mul.w	r3, r2, r3
 801360a:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801360e:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8013612:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013616:	441a      	add	r2, r3
 8013618:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801361c:	497d      	ldr	r1, [pc, #500]	; (8013814 <jpeg_idct_12x12+0x4a4>)
 801361e:	fb01 f303 	mul.w	r3, r1, r3
 8013622:	4413      	add	r3, r2
 8013624:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8013628:	4413      	add	r3, r2
 801362a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801362e:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013632:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8013636:	1ad2      	subs	r2, r2, r3
 8013638:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801363c:	f243 21c6 	movw	r1, #12998	; 0x32c6
 8013640:	fb01 f303 	mul.w	r3, r1, r3
 8013644:	4413      	add	r3, r2
 8013646:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 801364a:	4413      	add	r3, r2
 801364c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013650:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013654:	4a70      	ldr	r2, [pc, #448]	; (8013818 <jpeg_idct_12x12+0x4a8>)
 8013656:	fb02 f203 	mul.w	r2, r2, r3
 801365a:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801365e:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 8013660:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013664:	496d      	ldr	r1, [pc, #436]	; (801381c <jpeg_idct_12x12+0x4ac>)
 8013666:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801366a:	4413      	add	r3, r2
 801366c:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013670:	4413      	add	r3, r2
 8013672:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    z1 -= z4;
 8013676:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801367a:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801367e:	1ad3      	subs	r3, r2, r3
 8013680:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 -= z3;
 8013684:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8013688:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801368c:	1ad3      	subs	r3, r2, r3
 801368e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013692:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8013696:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801369a:	4413      	add	r3, r2
 801369c:	f241 1251 	movw	r2, #4433	; 0x1151
 80136a0:	fb02 f303 	mul.w	r3, r2, r3
 80136a4:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80136a8:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80136ac:	f641 027e 	movw	r2, #6270	; 0x187e
 80136b0:	fb02 f303 	mul.w	r3, r2, r3
 80136b4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80136b8:	4413      	add	r3, r2
 80136ba:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80136be:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80136c2:	4a57      	ldr	r2, [pc, #348]	; (8013820 <jpeg_idct_12x12+0x4b0>)
 80136c4:	fb02 f303 	mul.w	r3, r2, r3
 80136c8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80136cc:	4413      	add	r3, r2
 80136ce:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80136d2:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80136d6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80136da:	4413      	add	r3, r2
 80136dc:	12da      	asrs	r2, r3, #11
 80136de:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80136e2:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80136e4:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 80136e8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80136ec:	1ad2      	subs	r2, r2, r3
 80136ee:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80136f2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80136f6:	12d2      	asrs	r2, r2, #11
 80136f8:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80136fa:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 80136fe:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8013702:	441a      	add	r2, r3
 8013704:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013708:	3320      	adds	r3, #32
 801370a:	12d2      	asrs	r2, r2, #11
 801370c:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801370e:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8013712:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8013716:	1ad2      	subs	r2, r2, r3
 8013718:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801371c:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8013720:	12d2      	asrs	r2, r2, #11
 8013722:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8013724:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8013728:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801372c:	441a      	add	r2, r3
 801372e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013732:	3340      	adds	r3, #64	; 0x40
 8013734:	12d2      	asrs	r2, r2, #11
 8013736:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8013738:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 801373c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013740:	1ad2      	subs	r2, r2, r3
 8013742:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013746:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801374a:	12d2      	asrs	r2, r2, #11
 801374c:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801374e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013752:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8013756:	441a      	add	r2, r3
 8013758:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801375c:	3360      	adds	r3, #96	; 0x60
 801375e:	12d2      	asrs	r2, r2, #11
 8013760:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 8013762:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013766:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801376a:	1ad2      	subs	r2, r2, r3
 801376c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013770:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8013774:	12d2      	asrs	r2, r2, #11
 8013776:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8013778:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 801377c:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013780:	441a      	add	r2, r3
 8013782:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013786:	3380      	adds	r3, #128	; 0x80
 8013788:	12d2      	asrs	r2, r2, #11
 801378a:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801378c:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8013790:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013794:	1ad2      	subs	r2, r2, r3
 8013796:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801379a:	33e0      	adds	r3, #224	; 0xe0
 801379c:	12d2      	asrs	r2, r2, #11
 801379e:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80137a0:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80137a4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80137a8:	441a      	add	r2, r3
 80137aa:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80137ae:	33a0      	adds	r3, #160	; 0xa0
 80137b0:	12d2      	asrs	r2, r2, #11
 80137b2:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80137b4:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 80137b8:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80137bc:	1ad2      	subs	r2, r2, r3
 80137be:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80137c2:	33c0      	adds	r3, #192	; 0xc0
 80137c4:	12d2      	asrs	r2, r2, #11
 80137c6:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80137c8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80137cc:	3301      	adds	r3, #1
 80137ce:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 80137d2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80137d6:	3302      	adds	r3, #2
 80137d8:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80137dc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80137e0:	3304      	adds	r3, #4
 80137e2:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80137e6:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80137ea:	3304      	adds	r3, #4
 80137ec:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 80137f0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80137f4:	2b07      	cmp	r3, #7
 80137f6:	f77f ade2 	ble.w	80133be <jpeg_idct_12x12+0x4e>
  }

  /* Pass 2: process 12 rows from work array, store into output array. */

  wsptr = workspace;
 80137fa:	f107 0310 	add.w	r3, r7, #16
 80137fe:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  for (ctr = 0; ctr < 12; ctr++) {
 8013802:	2300      	movs	r3, #0
 8013804:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8013808:	e227      	b.n	8013c5a <jpeg_idct_12x12+0x8ea>
 801380a:	bf00      	nop
 801380c:	ffffeeaf 	.word	0xffffeeaf
 8013810:	ffffde8b 	.word	0xffffde8b
 8013814:	ffffd0b0 	.word	0xffffd0b0
 8013818:	ffffea5c 	.word	0xffffea5c
 801381c:	ffffc08c 	.word	0xffffc08c
 8013820:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 8013824:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8013828:	009b      	lsls	r3, r3, #2
 801382a:	463a      	mov	r2, r7
 801382c:	6812      	ldr	r2, [r2, #0]
 801382e:	4413      	add	r3, r2
 8013830:	681a      	ldr	r2, [r3, #0]
 8013832:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013836:	4413      	add	r3, r2
 8013838:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801383c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	3310      	adds	r3, #16
 8013844:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    z3 <<= CONST_BITS;
 8013848:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 801384c:	035b      	lsls	r3, r3, #13
 801384e:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc

    z4 = (INT32) wsptr[4];
 8013852:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013856:	3310      	adds	r3, #16
 8013858:	681b      	ldr	r3, [r3, #0]
 801385a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801385e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013862:	f242 7231 	movw	r2, #10033	; 0x2731
 8013866:	fb02 f303 	mul.w	r3, r2, r3
 801386a:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp10 = z3 + z4;
 801386e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013872:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013876:	4413      	add	r3, r2
 8013878:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp11 = z3 - z4;
 801387c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013880:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013884:	1ad3      	subs	r3, r2, r3
 8013886:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    z1 = (INT32) wsptr[2];
 801388a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801388e:	3308      	adds	r3, #8
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 8013896:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801389a:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 801389e:	fb02 f303 	mul.w	r3, r2, r3
 80138a2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    z1 <<= CONST_BITS;
 80138a6:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 80138aa:	035b      	lsls	r3, r3, #13
 80138ac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = (INT32) wsptr[6];
 80138b0:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80138b4:	3318      	adds	r3, #24
 80138b6:	681b      	ldr	r3, [r3, #0]
 80138b8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z2 <<= CONST_BITS;
 80138bc:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80138c0:	035b      	lsls	r3, r3, #13
 80138c2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    tmp12 = z1 - z2;
 80138c6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80138ca:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80138ce:	1ad3      	subs	r3, r2, r3
 80138d0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp21 = z3 + tmp12;
 80138d4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80138d8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80138dc:	4413      	add	r3, r2
 80138de:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    tmp24 = z3 - tmp12;
 80138e2:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80138e6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80138ea:	1ad3      	subs	r3, r2, r3
 80138ec:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac

    tmp12 = z4 + z2;
 80138f0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80138f4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80138f8:	4413      	add	r3, r2
 80138fa:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp20 = tmp10 + tmp12;
 80138fe:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8013902:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013906:	4413      	add	r3, r2
 8013908:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp25 = tmp10 - tmp12;
 801390c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8013910:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013914:	1ad3      	subs	r3, r2, r3
 8013916:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4

    tmp12 = z4 - z1 - z2;
 801391a:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801391e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013922:	1ad2      	subs	r2, r2, r3
 8013924:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013928:	1ad3      	subs	r3, r2, r3
 801392a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp22 = tmp11 + tmp12;
 801392e:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8013932:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013936:	4413      	add	r3, r2
 8013938:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    tmp23 = tmp11 - tmp12;
 801393c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8013940:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013944:	1ad3      	subs	r3, r2, r3
 8013946:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801394a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801394e:	3304      	adds	r3, #4
 8013950:	681b      	ldr	r3, [r3, #0]
 8013952:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = (INT32) wsptr[3];
 8013956:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801395a:	330c      	adds	r3, #12
 801395c:	681b      	ldr	r3, [r3, #0]
 801395e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z3 = (INT32) wsptr[5];
 8013962:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013966:	3314      	adds	r3, #20
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    z4 = (INT32) wsptr[7];
 801396e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013972:	331c      	adds	r3, #28
 8013974:	681b      	ldr	r3, [r3, #0]
 8013976:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801397a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801397e:	f642 12cf 	movw	r2, #10703	; 0x29cf
 8013982:	fb02 f303 	mul.w	r3, r2, r3
 8013986:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801398a:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801398e:	4ab9      	ldr	r2, [pc, #740]	; (8013c74 <jpeg_idct_12x12+0x904>)
 8013990:	fb02 f303 	mul.w	r3, r2, r3
 8013994:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    tmp10 = z1 + z3;
 8013998:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801399c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80139a0:	4413      	add	r3, r2
 80139a2:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80139a6:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 80139aa:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80139ae:	4413      	add	r3, r2
 80139b0:	f641 328d 	movw	r2, #7053	; 0x1b8d
 80139b4:	fb02 f303 	mul.w	r3, r2, r3
 80139b8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80139bc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80139c0:	f640 025b 	movw	r2, #2139	; 0x85b
 80139c4:	fb02 f303 	mul.w	r3, r2, r3
 80139c8:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 80139cc:	4413      	add	r3, r2
 80139ce:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80139d2:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 80139d6:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 80139da:	18d1      	adds	r1, r2, r3
 80139dc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80139e0:	4613      	mov	r3, r2
 80139e2:	00db      	lsls	r3, r3, #3
 80139e4:	4413      	add	r3, r2
 80139e6:	021a      	lsls	r2, r3, #8
 80139e8:	1ad3      	subs	r3, r2, r3
 80139ea:	440b      	add	r3, r1
 80139ec:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80139f0:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80139f4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 80139f8:	4413      	add	r3, r2
 80139fa:	4a9f      	ldr	r2, [pc, #636]	; (8013c78 <jpeg_idct_12x12+0x908>)
 80139fc:	fb02 f303 	mul.w	r3, r2, r3
 8013a00:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 8013a04:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8013a08:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013a0c:	441a      	add	r2, r3
 8013a0e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8013a12:	499a      	ldr	r1, [pc, #616]	; (8013c7c <jpeg_idct_12x12+0x90c>)
 8013a14:	fb01 f303 	mul.w	r3, r1, r3
 8013a18:	4413      	add	r3, r2
 8013a1a:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8013a1e:	4413      	add	r3, r2
 8013a20:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 8013a24:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013a28:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8013a2c:	1ad2      	subs	r2, r2, r3
 8013a2e:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013a32:	f243 21c6 	movw	r1, #12998	; 0x32c6
 8013a36:	fb01 f303 	mul.w	r3, r1, r3
 8013a3a:	4413      	add	r3, r2
 8013a3c:	f8d7 2190 	ldr.w	r2, [r7, #400]	; 0x190
 8013a40:	4413      	add	r3, r2
 8013a42:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013a46:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013a4a:	4a8d      	ldr	r2, [pc, #564]	; (8013c80 <jpeg_idct_12x12+0x910>)
 8013a4c:	fb02 f203 	mul.w	r2, r2, r3
 8013a50:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013a54:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 8013a56:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013a5a:	498a      	ldr	r1, [pc, #552]	; (8013c84 <jpeg_idct_12x12+0x914>)
 8013a5c:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8013a60:	4413      	add	r3, r2
 8013a62:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8013a66:	4413      	add	r3, r2
 8013a68:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194

    z1 -= z4;
 8013a6c:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8013a70:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8013a74:	1ad3      	subs	r3, r2, r3
 8013a76:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 -= z3;
 8013a7a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8013a7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8013a82:	1ad3      	subs	r3, r2, r3
 8013a84:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8013a88:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8013a8c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013a90:	4413      	add	r3, r2
 8013a92:	f241 1251 	movw	r2, #4433	; 0x1151
 8013a96:	fb02 f303 	mul.w	r3, r2, r3
 8013a9a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 8013a9e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8013aa2:	f641 027e 	movw	r2, #6270	; 0x187e
 8013aa6:	fb02 f303 	mul.w	r3, r2, r3
 8013aaa:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013aae:	4413      	add	r3, r2
 8013ab0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 8013ab4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013ab8:	4a73      	ldr	r2, [pc, #460]	; (8013c88 <jpeg_idct_12x12+0x918>)
 8013aba:	fb02 f303 	mul.w	r3, r2, r3
 8013abe:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 8013ac2:	4413      	add	r3, r2
 8013ac4:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ac8:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8013acc:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8013ad0:	4413      	add	r3, r2
 8013ad2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013ad4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8013ad8:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013adc:	4413      	add	r3, r2
 8013ade:	781a      	ldrb	r2, [r3, #0]
 8013ae0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013ae4:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013ae6:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 8013aea:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8013aee:	1ad3      	subs	r3, r2, r3
 8013af0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013af2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8013af6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013afa:	441a      	add	r2, r3
 8013afc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013b00:	330b      	adds	r3, #11
 8013b02:	7812      	ldrb	r2, [r2, #0]
 8013b04:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013b06:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8013b0a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8013b0e:	4413      	add	r3, r2
 8013b10:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b12:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8013b16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013b1a:	441a      	add	r2, r3
 8013b1c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013b20:	3301      	adds	r3, #1
 8013b22:	7812      	ldrb	r2, [r2, #0]
 8013b24:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b26:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 8013b2a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8013b2e:	1ad3      	subs	r3, r2, r3
 8013b30:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b32:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8013b36:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013b3a:	441a      	add	r2, r3
 8013b3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013b40:	330a      	adds	r3, #10
 8013b42:	7812      	ldrb	r2, [r2, #0]
 8013b44:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b46:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8013b4a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013b4e:	4413      	add	r3, r2
 8013b50:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b52:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8013b56:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013b5a:	441a      	add	r2, r3
 8013b5c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013b60:	3302      	adds	r3, #2
 8013b62:	7812      	ldrb	r2, [r2, #0]
 8013b64:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b66:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 8013b6a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013b6e:	1ad3      	subs	r3, r2, r3
 8013b70:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b72:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8013b76:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013b7a:	441a      	add	r2, r3
 8013b7c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013b80:	3309      	adds	r3, #9
 8013b82:	7812      	ldrb	r2, [r2, #0]
 8013b84:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013b86:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013b8a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8013b8e:	4413      	add	r3, r2
 8013b90:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013b92:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8013b96:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013b9a:	441a      	add	r2, r3
 8013b9c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013ba0:	3303      	adds	r3, #3
 8013ba2:	7812      	ldrb	r2, [r2, #0]
 8013ba4:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013ba6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8013baa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8013bae:	1ad3      	subs	r3, r2, r3
 8013bb0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013bb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8013bb6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013bba:	441a      	add	r2, r3
 8013bbc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013bc0:	3308      	adds	r3, #8
 8013bc2:	7812      	ldrb	r2, [r2, #0]
 8013bc4:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013bc6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8013bca:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013bce:	4413      	add	r3, r2
 8013bd0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013bd2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8013bd6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013bda:	441a      	add	r2, r3
 8013bdc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013be0:	3304      	adds	r3, #4
 8013be2:	7812      	ldrb	r2, [r2, #0]
 8013be4:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013be6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 8013bea:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 8013bee:	1ad3      	subs	r3, r2, r3
 8013bf0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013bf2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8013bf6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013bfa:	441a      	add	r2, r3
 8013bfc:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013c00:	3307      	adds	r3, #7
 8013c02:	7812      	ldrb	r2, [r2, #0]
 8013c04:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013c06:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8013c0a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013c0e:	4413      	add	r3, r2
 8013c10:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013c12:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8013c16:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013c1a:	441a      	add	r2, r3
 8013c1c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013c20:	3305      	adds	r3, #5
 8013c22:	7812      	ldrb	r2, [r2, #0]
 8013c24:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013c26:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 8013c2a:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8013c2e:	1ad3      	subs	r3, r2, r3
 8013c30:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8013c32:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8013c36:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8013c3a:	441a      	add	r2, r3
 8013c3c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8013c40:	3306      	adds	r3, #6
 8013c42:	7812      	ldrb	r2, [r2, #0]
 8013c44:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8013c46:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013c4a:	3320      	adds	r3, #32
 8013c4c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
  for (ctr = 0; ctr < 12; ctr++) {
 8013c50:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8013c54:	3301      	adds	r3, #1
 8013c56:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
 8013c5a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8013c5e:	2b0b      	cmp	r3, #11
 8013c60:	f77f ade0 	ble.w	8013824 <jpeg_idct_12x12+0x4b4>
  }
}
 8013c64:	bf00      	nop
 8013c66:	bf00      	nop
 8013c68:	f507 77f4 	add.w	r7, r7, #488	; 0x1e8
 8013c6c:	46bd      	mov	sp, r7
 8013c6e:	bc90      	pop	{r4, r7}
 8013c70:	4770      	bx	lr
 8013c72:	bf00      	nop
 8013c74:	ffffeeaf 	.word	0xffffeeaf
 8013c78:	ffffde8b 	.word	0xffffde8b
 8013c7c:	ffffd0b0 	.word	0xffffd0b0
 8013c80:	ffffea5c 	.word	0xffffea5c
 8013c84:	ffffc08c 	.word	0xffffc08c
 8013c88:	ffffc4df 	.word	0xffffc4df

08013c8c <jpeg_idct_13x13>:

GLOBAL(void)
jpeg_idct_13x13 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8013c8c:	b490      	push	{r4, r7}
 8013c8e:	f5ad 7d04 	sub.w	sp, sp, #528	; 0x210
 8013c92:	af00      	add	r7, sp, #0
 8013c94:	f107 040c 	add.w	r4, r7, #12
 8013c98:	6020      	str	r0, [r4, #0]
 8013c9a:	f107 0008 	add.w	r0, r7, #8
 8013c9e:	6001      	str	r1, [r0, #0]
 8013ca0:	1d39      	adds	r1, r7, #4
 8013ca2:	600a      	str	r2, [r1, #0]
 8013ca4:	463a      	mov	r2, r7
 8013ca6:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8013ca8:	f107 030c 	add.w	r3, r7, #12
 8013cac:	681b      	ldr	r3, [r3, #0]
 8013cae:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8013cb2:	3380      	adds	r3, #128	; 0x80
 8013cb4:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
  int workspace[8*13];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8013cb8:	1d3b      	adds	r3, r7, #4
 8013cba:	681b      	ldr	r3, [r3, #0]
 8013cbc:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8013cc0:	f107 0308 	add.w	r3, r7, #8
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013cc8:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
  wsptr = workspace;
 8013ccc:	f107 0314 	add.w	r3, r7, #20
 8013cd0:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8013cd4:	2300      	movs	r3, #0
 8013cd6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 8013cda:	e29a      	b.n	8014212 <jpeg_idct_13x13+0x586>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8013cdc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013ce0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ce4:	461a      	mov	r2, r3
 8013ce6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013cea:	681b      	ldr	r3, [r3, #0]
 8013cec:	fb03 f302 	mul.w	r3, r3, r2
 8013cf0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    z1 <<= CONST_BITS;
 8013cf4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013cf8:	035b      	lsls	r3, r3, #13
 8013cfa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8013cfe:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013d02:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8013d06:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8013d0a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013d0e:	3320      	adds	r3, #32
 8013d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d14:	461a      	mov	r2, r3
 8013d16:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013d1a:	3340      	adds	r3, #64	; 0x40
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	fb03 f302 	mul.w	r3, r3, r2
 8013d22:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8013d26:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013d2a:	3340      	adds	r3, #64	; 0x40
 8013d2c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d30:	461a      	mov	r2, r3
 8013d32:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013d36:	3380      	adds	r3, #128	; 0x80
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	fb03 f302 	mul.w	r3, r3, r2
 8013d3e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8013d42:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013d46:	3360      	adds	r3, #96	; 0x60
 8013d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013d4c:	461a      	mov	r2, r3
 8013d4e:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013d52:	33c0      	adds	r3, #192	; 0xc0
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	fb03 f302 	mul.w	r3, r3, r2
 8013d5a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

    tmp10 = z3 + z4;
 8013d5e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8013d62:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8013d66:	4413      	add	r3, r2
 8013d68:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp11 = z3 - z4;
 8013d6c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8013d70:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8013d74:	1ad3      	subs	r3, r2, r3
 8013d76:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 8013d7a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013d7e:	f242 42f9 	movw	r2, #9465	; 0x24f9
 8013d82:	fb02 f303 	mul.w	r3, r2, r3
 8013d86:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 8013d8a:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013d8e:	f240 3219 	movw	r2, #793	; 0x319
 8013d92:	fb02 f303 	mul.w	r3, r2, r3
 8013d96:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013d9a:	4413      	add	r3, r2
 8013d9c:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 8013da0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013da4:	f642 32f1 	movw	r2, #11249	; 0x2bf1
 8013da8:	fb02 f203 	mul.w	r2, r2, r3
 8013dac:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013db0:	4413      	add	r3, r2
 8013db2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8013db6:	4413      	add	r3, r2
 8013db8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 8013dbc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013dc0:	f241 020c 	movw	r2, #4108	; 0x100c
 8013dc4:	fb02 f203 	mul.w	r2, r2, r3
 8013dc8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013dcc:	1ad3      	subs	r3, r2, r3
 8013dce:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8013dd2:	4413      	add	r3, r2
 8013dd4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 8013dd8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013ddc:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 8013de0:	fb02 f303 	mul.w	r3, r2, r3
 8013de4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8013de8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013dec:	f640 7295 	movw	r2, #3989	; 0xf95
 8013df0:	fb02 f303 	mul.w	r3, r2, r3
 8013df4:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013df8:	4413      	add	r3, r2
 8013dfa:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 8013dfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013e02:	f242 12e0 	movw	r2, #8672	; 0x21e0
 8013e06:	fb02 f203 	mul.w	r2, r2, r3
 8013e0a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013e0e:	1ad3      	subs	r3, r2, r3
 8013e10:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8013e14:	4413      	add	r3, r2
 8013e16:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 8013e1a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013e1e:	4af1      	ldr	r2, [pc, #964]	; (80141e4 <jpeg_idct_13x13+0x558>)
 8013e20:	fb02 f203 	mul.w	r2, r2, r3
 8013e24:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013e28:	4413      	add	r3, r2
 8013e2a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8013e2e:	4413      	add	r3, r2
 8013e30:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8013e34:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8013e38:	f640 52f2 	movw	r2, #3570	; 0xdf2
 8013e3c:	fb02 f303 	mul.w	r3, r2, r3
 8013e40:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8013e44:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8013e48:	f641 52fe 	movw	r2, #7678	; 0x1dfe
 8013e4c:	fb02 f203 	mul.w	r2, r2, r3
 8013e50:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013e54:	1ad3      	subs	r3, r2, r3
 8013e56:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 8013e5a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013e5e:	4ae2      	ldr	r2, [pc, #904]	; (80141e8 <jpeg_idct_13x13+0x55c>)
 8013e60:	fb02 f203 	mul.w	r2, r2, r3
 8013e64:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013e68:	1ad2      	subs	r2, r2, r3
 8013e6a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8013e6e:	1ad3      	subs	r3, r2, r3
 8013e70:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8013e74:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013e78:	4adc      	ldr	r2, [pc, #880]	; (80141ec <jpeg_idct_13x13+0x560>)
 8013e7a:	fb02 f203 	mul.w	r2, r2, r3
 8013e7e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013e82:	441a      	add	r2, r3
 8013e84:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8013e88:	1ad3      	subs	r3, r2, r3
 8013e8a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 8013e8e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8013e92:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013e96:	1ad3      	subs	r3, r2, r3
 8013e98:	f642 5241 	movw	r2, #11585	; 0x2d41
 8013e9c:	fb02 f303 	mul.w	r3, r2, r3
 8013ea0:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013ea4:	4413      	add	r3, r2
 8013ea6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8013eaa:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013eae:	3310      	adds	r3, #16
 8013eb0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013eb4:	461a      	mov	r2, r3
 8013eb6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013eba:	3320      	adds	r3, #32
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	fb03 f302 	mul.w	r3, r3, r2
 8013ec2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8013ec6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013eca:	3330      	adds	r3, #48	; 0x30
 8013ecc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ed0:	461a      	mov	r2, r3
 8013ed2:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013ed6:	3360      	adds	r3, #96	; 0x60
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	fb03 f302 	mul.w	r3, r3, r2
 8013ede:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8013ee2:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013ee6:	3350      	adds	r3, #80	; 0x50
 8013ee8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013eec:	461a      	mov	r2, r3
 8013eee:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013ef2:	33a0      	adds	r3, #160	; 0xa0
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	fb03 f302 	mul.w	r3, r3, r2
 8013efa:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8013efe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8013f02:	3370      	adds	r3, #112	; 0x70
 8013f04:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013f08:	461a      	mov	r2, r3
 8013f0a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8013f0e:	33e0      	adds	r3, #224	; 0xe0
 8013f10:	681b      	ldr	r3, [r3, #0]
 8013f12:	fb03 f302 	mul.w	r3, r3, r2
 8013f16:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 8013f1a:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013f1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013f22:	4413      	add	r3, r2
 8013f24:	f642 2250 	movw	r2, #10832	; 0x2a50
 8013f28:	fb02 f303 	mul.w	r3, r2, r3
 8013f2c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8013f30:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013f34:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013f38:	4413      	add	r3, r2
 8013f3a:	f242 523e 	movw	r2, #9534	; 0x253e
 8013f3e:	fb02 f303 	mul.w	r3, r2, r3
 8013f42:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp15 = z1 + z4;
 8013f46:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8013f4a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8013f4e:	4413      	add	r3, r2
 8013f50:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8013f54:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8013f58:	f641 6202 	movw	r2, #7682	; 0x1e02
 8013f5c:	fb02 f303 	mul.w	r3, r2, r3
 8013f60:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8013f64:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8013f68:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8013f6c:	441a      	add	r2, r3
 8013f6e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8013f72:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
 8013f74:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8013f78:	499d      	ldr	r1, [pc, #628]	; (80141f0 <jpeg_idct_13x13+0x564>)
 8013f7a:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 8013f7e:	4413      	add	r3, r2
 8013f80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8013f84:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8013f88:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013f8c:	4413      	add	r3, r2
 8013f8e:	4a99      	ldr	r2, [pc, #612]	; (80141f4 <jpeg_idct_13x13+0x568>)
 8013f90:	fb02 f303 	mul.w	r3, r2, r3
 8013f94:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8013f98:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8013f9c:	f641 22cb 	movw	r2, #6859	; 0x1acb
 8013fa0:	fb02 f203 	mul.w	r2, r2, r3
 8013fa4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013fa8:	4413      	add	r3, r2
 8013faa:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8013fae:	4413      	add	r3, r2
 8013fb0:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8013fb4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8013fb8:	4a8f      	ldr	r2, [pc, #572]	; (80141f8 <jpeg_idct_13x13+0x56c>)
 8013fba:	fb02 f203 	mul.w	r2, r2, r3
 8013fbe:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013fc2:	4413      	add	r3, r2
 8013fc4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8013fc8:	4413      	add	r3, r2
 8013fca:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 8013fce:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8013fd2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8013fd6:	4413      	add	r3, r2
 8013fd8:	4a88      	ldr	r2, [pc, #544]	; (80141fc <jpeg_idct_13x13+0x570>)
 8013fda:	fb02 f303 	mul.w	r3, r2, r3
 8013fde:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += tmp14;
 8013fe2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8013fe6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8013fea:	4413      	add	r3, r2
 8013fec:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 8013ff0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8013ff4:	f244 6294 	movw	r2, #18068	; 0x4694
 8013ff8:	fb02 f203 	mul.w	r2, r2, r3
 8013ffc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8014000:	4413      	add	r3, r2
 8014002:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8014006:	4413      	add	r3, r2
 8014008:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 801400c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8014010:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014014:	4413      	add	r3, r2
 8014016:	4a7a      	ldr	r2, [pc, #488]	; (8014200 <jpeg_idct_13x13+0x574>)
 8014018:	fb02 f303 	mul.w	r3, r2, r3
 801401c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp12 += tmp14;
 8014020:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8014024:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8014028:	4413      	add	r3, r2
 801402a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 += tmp14;
 801402e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8014032:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8014036:	4413      	add	r3, r2
 8014038:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 801403c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014040:	f640 22d5 	movw	r2, #2773	; 0xad5
 8014044:	fb02 f303 	mul.w	r3, r2, r3
 8014048:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801404c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014050:	f640 2233 	movw	r2, #2611	; 0xa33
 8014054:	fb02 f203 	mul.w	r2, r2, r3
 8014058:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801405c:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
 801405e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014062:	4968      	ldr	r1, [pc, #416]	; (8014204 <jpeg_idct_13x13+0x578>)
 8014064:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8014068:	4413      	add	r3, r2
 801406a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801406e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8014072:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014076:	1ad3      	subs	r3, r2, r3
 8014078:	f641 6202 	movw	r2, #7682	; 0x1e02
 801407c:	fb02 f303 	mul.w	r3, r2, r3
 8014080:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 += z1;
 8014084:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8014088:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801408c:	4413      	add	r3, r2
 801408e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8014092:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014096:	f640 424e 	movw	r2, #3150	; 0xc4e
 801409a:	fb02 f203 	mul.w	r2, r2, r3
 801409e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80140a2:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
 80140a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80140a8:	f46f 515f 	mvn.w	r1, #14272	; 0x37c0
 80140ac:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 80140b0:	4413      	add	r3, r2
 80140b2:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80140b6:	4413      	add	r3, r2
 80140b8:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80140bc:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80140c0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80140c4:	4413      	add	r3, r2
 80140c6:	12da      	asrs	r2, r3, #11
 80140c8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80140cc:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80140ce:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80140d2:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80140d6:	1ad2      	subs	r2, r2, r3
 80140d8:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80140dc:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80140e0:	12d2      	asrs	r2, r2, #11
 80140e2:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80140e4:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80140e8:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80140ec:	441a      	add	r2, r3
 80140ee:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80140f2:	3320      	adds	r3, #32
 80140f4:	12d2      	asrs	r2, r2, #11
 80140f6:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 80140f8:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80140fc:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8014100:	1ad2      	subs	r2, r2, r3
 8014102:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014106:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 801410a:	12d2      	asrs	r2, r2, #11
 801410c:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801410e:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014112:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8014116:	441a      	add	r2, r3
 8014118:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801411c:	3340      	adds	r3, #64	; 0x40
 801411e:	12d2      	asrs	r2, r2, #11
 8014120:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014122:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014126:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801412a:	1ad2      	subs	r2, r2, r3
 801412c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014130:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014134:	12d2      	asrs	r2, r2, #11
 8014136:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 8014138:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801413c:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8014140:	441a      	add	r2, r3
 8014142:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014146:	3360      	adds	r3, #96	; 0x60
 8014148:	12d2      	asrs	r2, r2, #11
 801414a:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801414c:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 8014150:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8014154:	1ad2      	subs	r2, r2, r3
 8014156:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801415a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801415e:	12d2      	asrs	r2, r2, #11
 8014160:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014162:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8014166:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801416a:	441a      	add	r2, r3
 801416c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014170:	3380      	adds	r3, #128	; 0x80
 8014172:	12d2      	asrs	r2, r2, #11
 8014174:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014176:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801417a:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801417e:	1ad2      	subs	r2, r2, r3
 8014180:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014184:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014188:	12d2      	asrs	r2, r2, #11
 801418a:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801418c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 8014190:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014194:	441a      	add	r2, r3
 8014196:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801419a:	33a0      	adds	r3, #160	; 0xa0
 801419c:	12d2      	asrs	r2, r2, #11
 801419e:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80141a0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80141a4:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80141a8:	1ad2      	subs	r2, r2, r3
 80141aa:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80141ae:	33e0      	adds	r3, #224	; 0xe0
 80141b0:	12d2      	asrs	r2, r2, #11
 80141b2:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26, CONST_BITS-PASS1_BITS);
 80141b4:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80141b8:	33c0      	adds	r3, #192	; 0xc0
 80141ba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80141be:	12d2      	asrs	r2, r2, #11
 80141c0:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80141c2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80141c6:	3301      	adds	r3, #1
 80141c8:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 80141cc:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80141d0:	3302      	adds	r3, #2
 80141d2:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
 80141d6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 80141da:	3304      	adds	r3, #4
 80141dc:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
 80141e0:	e012      	b.n	8014208 <jpeg_idct_13x13+0x57c>
 80141e2:	bf00      	nop
 80141e4:	ffffd7ee 	.word	0xffffd7ee
 80141e8:	fffffa8c 	.word	0xfffffa8c
 80141ec:	ffffe64b 	.word	0xffffe64b
 80141f0:	ffffbf5b 	.word	0xffffbf5b
 80141f4:	fffff52b 	.word	0xfffff52b
 80141f8:	ffffcdb1 	.word	0xffffcdb1
 80141fc:	ffffdac2 	.word	0xffffdac2
 8014200:	ffffeaf8 	.word	0xffffeaf8
 8014204:	fffff116 	.word	0xfffff116
 8014208:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801420c:	3304      	adds	r3, #4
 801420e:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
 8014212:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014216:	2b07      	cmp	r3, #7
 8014218:	f77f ad60 	ble.w	8013cdc <jpeg_idct_13x13+0x50>
  }

  /* Pass 2: process 13 rows from work array, store into output array. */

  wsptr = workspace;
 801421c:	f107 0314 	add.w	r3, r7, #20
 8014220:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  for (ctr = 0; ctr < 13; ctr++) {
 8014224:	2300      	movs	r3, #0
 8014226:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801422a:	e2a0      	b.n	801476e <jpeg_idct_13x13+0xae2>
    outptr = output_buf[ctr] + output_col;
 801422c:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014230:	009b      	lsls	r3, r3, #2
 8014232:	463a      	mov	r2, r7
 8014234:	6812      	ldr	r2, [r2, #0]
 8014236:	4413      	add	r3, r2
 8014238:	681a      	ldr	r2, [r3, #0]
 801423a:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801423e:	4413      	add	r3, r2
 8014240:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014244:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014248:	681b      	ldr	r3, [r3, #0]
 801424a:	3310      	adds	r3, #16
 801424c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    z1 <<= CONST_BITS;
 8014250:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014254:	035b      	lsls	r3, r3, #13
 8014256:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    z2 = (INT32) wsptr[2];
 801425a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801425e:	3308      	adds	r3, #8
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    z3 = (INT32) wsptr[4];
 8014266:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801426a:	3310      	adds	r3, #16
 801426c:	681b      	ldr	r3, [r3, #0]
 801426e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    z4 = (INT32) wsptr[6];
 8014272:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014276:	3318      	adds	r3, #24
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

    tmp10 = z3 + z4;
 801427e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8014282:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014286:	4413      	add	r3, r2
 8014288:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp11 = z3 - z4;
 801428c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8014290:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014294:	1ad3      	subs	r3, r2, r3
 8014296:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

    tmp12 = MULTIPLY(tmp10, FIX(1.155388986));                /* (c4+c6)/2 */
 801429a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 801429e:	f242 42f9 	movw	r2, #9465	; 0x24f9
 80142a2:	fb02 f303 	mul.w	r3, r2, r3
 80142a6:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.096834934)) + z1;           /* (c4-c6)/2 */
 80142aa:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80142ae:	f240 3219 	movw	r2, #793	; 0x319
 80142b2:	fb02 f303 	mul.w	r3, r2, r3
 80142b6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80142ba:	4413      	add	r3, r2
 80142bc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp20 = MULTIPLY(z2, FIX(1.373119086)) + tmp12 + tmp13;   /* c2 */
 80142c0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80142c4:	f642 32f1 	movw	r2, #11249	; 0x2bf1
 80142c8:	fb02 f203 	mul.w	r2, r2, r3
 80142cc:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80142d0:	4413      	add	r3, r2
 80142d2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80142d6:	4413      	add	r3, r2
 80142d8:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    tmp22 = MULTIPLY(z2, FIX(0.501487041)) - tmp12 + tmp13;   /* c10 */
 80142dc:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80142e0:	f241 020c 	movw	r2, #4108	; 0x100c
 80142e4:	fb02 f203 	mul.w	r2, r2, r3
 80142e8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80142ec:	1ad3      	subs	r3, r2, r3
 80142ee:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80142f2:	4413      	add	r3, r2
 80142f4:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp12 = MULTIPLY(tmp10, FIX(0.316450131));                /* (c8-c12)/2 */
 80142f8:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80142fc:	f44f 6222 	mov.w	r2, #2592	; 0xa20
 8014300:	fb02 f303 	mul.w	r3, r2, r3
 8014304:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.486914739)) + z1;           /* (c8+c12)/2 */
 8014308:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801430c:	f640 7295 	movw	r2, #3989	; 0xf95
 8014310:	fb02 f303 	mul.w	r3, r2, r3
 8014314:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8014318:	4413      	add	r3, r2
 801431a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp21 = MULTIPLY(z2, FIX(1.058554052)) - tmp12 + tmp13;   /* c6 */
 801431e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014322:	f242 12e0 	movw	r2, #8672	; 0x21e0
 8014326:	fb02 f203 	mul.w	r2, r2, r3
 801432a:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801432e:	1ad3      	subs	r3, r2, r3
 8014330:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8014334:	4413      	add	r3, r2
 8014336:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp25 = MULTIPLY(z2, - FIX(1.252223920)) + tmp12 + tmp13; /* c4 */
 801433a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801433e:	4af2      	ldr	r2, [pc, #968]	; (8014708 <jpeg_idct_13x13+0xa7c>)
 8014340:	fb02 f203 	mul.w	r2, r2, r3
 8014344:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8014348:	4413      	add	r3, r2
 801434a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801434e:	4413      	add	r3, r2
 8014350:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8

    tmp12 = MULTIPLY(tmp10, FIX(0.435816023));                /* (c2-c10)/2 */
 8014354:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8014358:	f640 52f2 	movw	r2, #3570	; 0xdf2
 801435c:	fb02 f303 	mul.w	r3, r2, r3
 8014360:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 = MULTIPLY(tmp11, FIX(0.937303064)) - z1;           /* (c2+c10)/2 */
 8014364:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8014368:	f641 52fe 	movw	r2, #7678	; 0x1dfe
 801436c:	fb02 f203 	mul.w	r2, r2, r3
 8014370:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014374:	1ad3      	subs	r3, r2, r3
 8014376:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8

    tmp23 = MULTIPLY(z2, - FIX(0.170464608)) - tmp12 - tmp13; /* c12 */
 801437a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801437e:	4ae3      	ldr	r2, [pc, #908]	; (801470c <jpeg_idct_13x13+0xa80>)
 8014380:	fb02 f203 	mul.w	r2, r2, r3
 8014384:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8014388:	1ad2      	subs	r2, r2, r3
 801438a:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801438e:	1ad3      	subs	r3, r2, r3
 8014390:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp24 = MULTIPLY(z2, - FIX(0.803364869)) + tmp12 - tmp13; /* c8 */
 8014394:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014398:	4add      	ldr	r2, [pc, #884]	; (8014710 <jpeg_idct_13x13+0xa84>)
 801439a:	fb02 f203 	mul.w	r2, r2, r3
 801439e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 80143a2:	441a      	add	r2, r3
 80143a4:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 80143a8:	1ad3      	subs	r3, r2, r3
 80143aa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0

    tmp26 = MULTIPLY(tmp11 - z2, FIX(1.414213562)) + z1;      /* c0 */
 80143ae:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80143b2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80143b6:	1ad3      	subs	r3, r2, r3
 80143b8:	f642 5241 	movw	r2, #11585	; 0x2d41
 80143bc:	fb02 f303 	mul.w	r3, r2, r3
 80143c0:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80143c4:	4413      	add	r3, r2
 80143c6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 80143ca:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80143ce:	3304      	adds	r3, #4
 80143d0:	681b      	ldr	r3, [r3, #0]
 80143d2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    z2 = (INT32) wsptr[3];
 80143d6:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80143da:	330c      	adds	r3, #12
 80143dc:	681b      	ldr	r3, [r3, #0]
 80143de:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    z3 = (INT32) wsptr[5];
 80143e2:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80143e6:	3314      	adds	r3, #20
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    z4 = (INT32) wsptr[7];
 80143ee:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 80143f2:	331c      	adds	r3, #28
 80143f4:	681b      	ldr	r3, [r3, #0]
 80143f6:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8

    tmp11 = MULTIPLY(z1 + z2, FIX(1.322312651));     /* c3 */
 80143fa:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 80143fe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014402:	4413      	add	r3, r2
 8014404:	f642 2250 	movw	r2, #10832	; 0x2a50
 8014408:	fb02 f303 	mul.w	r3, r2, r3
 801440c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp12 = MULTIPLY(z1 + z3, FIX(1.163874945));     /* c5 */
 8014410:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8014414:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014418:	4413      	add	r3, r2
 801441a:	f242 523e 	movw	r2, #9534	; 0x253e
 801441e:	fb02 f303 	mul.w	r3, r2, r3
 8014422:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp15 = z1 + z4;
 8014426:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 801442a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801442e:	4413      	add	r3, r2
 8014430:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp13 = MULTIPLY(tmp15, FIX(0.937797057));       /* c7 */
 8014434:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014438:	f641 6202 	movw	r2, #7682	; 0x1e02
 801443c:	fb02 f303 	mul.w	r3, r2, r3
 8014440:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp10 = tmp11 + tmp12 + tmp13 -
 8014444:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8014448:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801444c:	441a      	add	r2, r3
 801444e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8014452:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.020082300));          /* c7+c5+c3-c1 */
 8014454:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014458:	49ae      	ldr	r1, [pc, #696]	; (8014714 <jpeg_idct_13x13+0xa88>)
 801445a:	fb01 f303 	mul.w	r3, r1, r3
    tmp10 = tmp11 + tmp12 + tmp13 -
 801445e:	4413      	add	r3, r2
 8014460:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp14 = MULTIPLY(z2 + z3, - FIX(0.338443458));   /* -c11 */
 8014464:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8014468:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801446c:	4413      	add	r3, r2
 801446e:	4aaa      	ldr	r2, [pc, #680]	; (8014718 <jpeg_idct_13x13+0xa8c>)
 8014470:	fb02 f303 	mul.w	r3, r2, r3
 8014474:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += tmp14 + MULTIPLY(z2, FIX(0.837223564)); /* c5+c9+c11-c3 */
 8014478:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801447c:	f641 22cb 	movw	r2, #6859	; 0x1acb
 8014480:	fb02 f203 	mul.w	r2, r2, r3
 8014484:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8014488:	4413      	add	r3, r2
 801448a:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801448e:	4413      	add	r3, r2
 8014490:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp12 += tmp14 - MULTIPLY(z3, FIX(1.572116027)); /* c1+c5-c9-c11 */
 8014494:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014498:	4aa0      	ldr	r2, [pc, #640]	; (801471c <jpeg_idct_13x13+0xa90>)
 801449a:	fb02 f203 	mul.w	r2, r2, r3
 801449e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80144a2:	4413      	add	r3, r2
 80144a4:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80144a8:	4413      	add	r3, r2
 80144aa:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp14 = MULTIPLY(z2 + z4, - FIX(1.163874945));   /* -c5 */
 80144ae:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 80144b2:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80144b6:	4413      	add	r3, r2
 80144b8:	4a99      	ldr	r2, [pc, #612]	; (8014720 <jpeg_idct_13x13+0xa94>)
 80144ba:	fb02 f303 	mul.w	r3, r2, r3
 80144be:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += tmp14;
 80144c2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 80144c6:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80144ca:	4413      	add	r3, r2
 80144cc:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp13 += tmp14 + MULTIPLY(z4, FIX(2.205608352)); /* c3+c5+c9-c7 */
 80144d0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80144d4:	f244 6294 	movw	r2, #18068	; 0x4694
 80144d8:	fb02 f203 	mul.w	r2, r2, r3
 80144dc:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80144e0:	4413      	add	r3, r2
 80144e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80144e6:	4413      	add	r3, r2
 80144e8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp14 = MULTIPLY(z3 + z4, - FIX(0.657217813));   /* -c9 */
 80144ec:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 80144f0:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 80144f4:	4413      	add	r3, r2
 80144f6:	4a8b      	ldr	r2, [pc, #556]	; (8014724 <jpeg_idct_13x13+0xa98>)
 80144f8:	fb02 f303 	mul.w	r3, r2, r3
 80144fc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp12 += tmp14;
 8014500:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8014504:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8014508:	4413      	add	r3, r2
 801450a:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp13 += tmp14;
 801450e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8014512:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8014516:	4413      	add	r3, r2
 8014518:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp15 = MULTIPLY(tmp15, FIX(0.338443458));       /* c11 */
 801451c:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014520:	f640 22d5 	movw	r2, #2773	; 0xad5
 8014524:	fb02 f303 	mul.w	r3, r2, r3
 8014528:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 801452c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014530:	f640 2233 	movw	r2, #2611	; 0xa33
 8014534:	fb02 f203 	mul.w	r2, r2, r3
 8014538:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801453c:	441a      	add	r2, r3
	    MULTIPLY(z2, FIX(0.466105296));          /* c1-c7 */
 801453e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014542:	4979      	ldr	r1, [pc, #484]	; (8014728 <jpeg_idct_13x13+0xa9c>)
 8014544:	fb01 f303 	mul.w	r3, r1, r3
    tmp14 = tmp15 + MULTIPLY(z1, FIX(0.318774355)) - /* c9-c11 */
 8014548:	4413      	add	r3, r2
 801454a:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    z1    = MULTIPLY(z3 - z2, FIX(0.937797057));     /* c7 */
 801454e:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8014552:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014556:	1ad3      	subs	r3, r2, r3
 8014558:	f641 6202 	movw	r2, #7682	; 0x1e02
 801455c:	fb02 f303 	mul.w	r3, r2, r3
 8014560:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 += z1;
 8014564:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8014568:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801456c:	4413      	add	r3, r2
 801456e:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8014572:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014576:	f640 424e 	movw	r2, #3150	; 0xc4e
 801457a:	fb02 f203 	mul.w	r2, r2, r3
 801457e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014582:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.742345811));         /* c1+c11 */
 8014584:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8014588:	f46f 515f 	mvn.w	r1, #14272	; 0x37c0
 801458c:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += z1 + MULTIPLY(z3, FIX(0.384515595)) -   /* c3-c7 */
 8014590:	4413      	add	r3, r2
 8014592:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8014596:	4413      	add	r3, r2
 8014598:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801459c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80145a0:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80145a4:	4413      	add	r3, r2
 80145a6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80145a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80145ac:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80145b0:	4413      	add	r3, r2
 80145b2:	781a      	ldrb	r2, [r3, #0]
 80145b4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80145b8:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80145ba:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80145be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80145c2:	1ad3      	subs	r3, r2, r3
 80145c4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80145c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80145ca:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80145ce:	441a      	add	r2, r3
 80145d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80145d4:	330c      	adds	r3, #12
 80145d6:	7812      	ldrb	r2, [r2, #0]
 80145d8:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80145da:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80145de:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 80145e2:	4413      	add	r3, r2
 80145e4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80145e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 80145ea:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80145ee:	441a      	add	r2, r3
 80145f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80145f4:	3301      	adds	r3, #1
 80145f6:	7812      	ldrb	r2, [r2, #0]
 80145f8:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 80145fa:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 80145fe:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8014602:	1ad3      	subs	r3, r2, r3
 8014604:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014606:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801460a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801460e:	441a      	add	r2, r3
 8014610:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8014614:	330b      	adds	r3, #11
 8014616:	7812      	ldrb	r2, [r2, #0]
 8014618:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801461a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801461e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8014622:	4413      	add	r3, r2
 8014624:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014626:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801462a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801462e:	441a      	add	r2, r3
 8014630:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8014634:	3302      	adds	r3, #2
 8014636:	7812      	ldrb	r2, [r2, #0]
 8014638:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801463a:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801463e:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 8014642:	1ad3      	subs	r3, r2, r3
 8014644:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014646:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801464a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801464e:	441a      	add	r2, r3
 8014650:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8014654:	330a      	adds	r3, #10
 8014656:	7812      	ldrb	r2, [r2, #0]
 8014658:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801465a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801465e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8014662:	4413      	add	r3, r2
 8014664:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014666:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801466a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801466e:	441a      	add	r2, r3
 8014670:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8014674:	3303      	adds	r3, #3
 8014676:	7812      	ldrb	r2, [r2, #0]
 8014678:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801467a:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801467e:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8014682:	1ad3      	subs	r3, r2, r3
 8014684:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014686:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 801468a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801468e:	441a      	add	r2, r3
 8014690:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8014694:	3309      	adds	r3, #9
 8014696:	7812      	ldrb	r2, [r2, #0]
 8014698:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 801469a:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801469e:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80146a2:	4413      	add	r3, r2
 80146a4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80146a6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80146aa:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80146ae:	441a      	add	r2, r3
 80146b0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80146b4:	3304      	adds	r3, #4
 80146b6:	7812      	ldrb	r2, [r2, #0]
 80146b8:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80146ba:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 80146be:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 80146c2:	1ad3      	subs	r3, r2, r3
 80146c4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80146c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80146ca:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80146ce:	441a      	add	r2, r3
 80146d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80146d4:	3308      	adds	r3, #8
 80146d6:	7812      	ldrb	r2, [r2, #0]
 80146d8:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80146da:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80146de:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 80146e2:	4413      	add	r3, r2
 80146e4:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80146e6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 80146ea:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80146ee:	441a      	add	r2, r3
 80146f0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80146f4:	3305      	adds	r3, #5
 80146f6:	7812      	ldrb	r2, [r2, #0]
 80146f8:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 80146fa:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 80146fe:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 8014702:	1ad3      	subs	r3, r2, r3
 8014704:	149b      	asrs	r3, r3, #18
 8014706:	e011      	b.n	801472c <jpeg_idct_13x13+0xaa0>
 8014708:	ffffd7ee 	.word	0xffffd7ee
 801470c:	fffffa8c 	.word	0xfffffa8c
 8014710:	ffffe64b 	.word	0xffffe64b
 8014714:	ffffbf5b 	.word	0xffffbf5b
 8014718:	fffff52b 	.word	0xfffff52b
 801471c:	ffffcdb1 	.word	0xffffcdb1
 8014720:	ffffdac2 	.word	0xffffdac2
 8014724:	ffffeaf8 	.word	0xffffeaf8
 8014728:	fffff116 	.word	0xfffff116
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801472c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8014730:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8014734:	441a      	add	r2, r3
 8014736:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 801473a:	3307      	adds	r3, #7
 801473c:	7812      	ldrb	r2, [r2, #0]
 801473e:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 8014740:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 8014744:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8014746:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26,
 801474a:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801474e:	441a      	add	r2, r3
 8014750:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8014754:	3306      	adds	r3, #6
 8014756:	7812      	ldrb	r2, [r2, #0]
 8014758:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801475a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801475e:	3320      	adds	r3, #32
 8014760:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
  for (ctr = 0; ctr < 13; ctr++) {
 8014764:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014768:	3301      	adds	r3, #1
 801476a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
 801476e:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014772:	2b0c      	cmp	r3, #12
 8014774:	f77f ad5a 	ble.w	801422c <jpeg_idct_13x13+0x5a0>
  }
}
 8014778:	bf00      	nop
 801477a:	bf00      	nop
 801477c:	f507 7704 	add.w	r7, r7, #528	; 0x210
 8014780:	46bd      	mov	sp, r7
 8014782:	bc90      	pop	{r4, r7}
 8014784:	4770      	bx	lr
 8014786:	bf00      	nop

08014788 <jpeg_idct_14x14>:

GLOBAL(void)
jpeg_idct_14x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8014788:	b490      	push	{r4, r7}
 801478a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 801478e:	af00      	add	r7, sp, #0
 8014790:	f107 040c 	add.w	r4, r7, #12
 8014794:	6020      	str	r0, [r4, #0]
 8014796:	f107 0008 	add.w	r0, r7, #8
 801479a:	6001      	str	r1, [r0, #0]
 801479c:	1d39      	adds	r1, r7, #4
 801479e:	600a      	str	r2, [r1, #0]
 80147a0:	463a      	mov	r2, r7
 80147a2:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80147a4:	f107 030c 	add.w	r3, r7, #12
 80147a8:	681b      	ldr	r3, [r3, #0]
 80147aa:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80147ae:	3380      	adds	r3, #128	; 0x80
 80147b0:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
  int workspace[8*14];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 80147b4:	1d3b      	adds	r3, r7, #4
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80147bc:	f107 0308 	add.w	r3, r7, #8
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80147c4:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
  wsptr = workspace;
 80147c8:	f107 0310 	add.w	r3, r7, #16
 80147cc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80147d0:	2300      	movs	r3, #0
 80147d2:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80147d6:	e269      	b.n	8014cac <jpeg_idct_14x14+0x524>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80147d8:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80147dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80147e0:	461a      	mov	r2, r3
 80147e2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	fb03 f302 	mul.w	r3, r3, r2
 80147ec:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z1 <<= CONST_BITS;
 80147f0:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80147f4:	035b      	lsls	r3, r3, #13
 80147f6:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 80147fa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80147fe:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8014802:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8014806:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801480a:	3340      	adds	r3, #64	; 0x40
 801480c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8014810:	461a      	mov	r2, r3
 8014812:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8014816:	3380      	adds	r3, #128	; 0x80
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	fb03 f302 	mul.w	r3, r3, r2
 801481e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014822:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014826:	f642 02c6 	movw	r2, #10438	; 0x28c6
 801482a:	fb02 f303 	mul.w	r3, r2, r3
 801482e:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014832:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014836:	f640 2212 	movw	r2, #2578	; 0xa12
 801483a:	fb02 f303 	mul.w	r3, r2, r3
 801483e:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014842:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014846:	f641 4237 	movw	r2, #7223	; 0x1c37
 801484a:	fb02 f303 	mul.w	r3, r2, r3
 801484e:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp10 = z1 + z2;
 8014852:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014856:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 801485a:	4413      	add	r3, r2
 801485c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp11 = z1 + z3;
 8014860:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014864:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014868:	4413      	add	r3, r2
 801486a:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 = z1 - z4;
 801486e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014872:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014876:	1ad3      	subs	r3, r2, r3
 8014878:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 801487c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8014880:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014884:	441a      	add	r2, r3
 8014886:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 801488a:	1ad3      	subs	r3, r2, r3
 801488c:	005b      	lsls	r3, r3, #1
 801488e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014892:	1ad3      	subs	r3, r2, r3
 8014894:	12db      	asrs	r3, r3, #11
 8014896:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801489a:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801489e:	3320      	adds	r3, #32
 80148a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148a4:	461a      	mov	r2, r3
 80148a6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80148aa:	3340      	adds	r3, #64	; 0x40
 80148ac:	681b      	ldr	r3, [r3, #0]
 80148ae:	fb03 f302 	mul.w	r3, r3, r2
 80148b2:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80148b6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80148ba:	3360      	adds	r3, #96	; 0x60
 80148bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80148c0:	461a      	mov	r2, r3
 80148c2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80148c6:	33c0      	adds	r3, #192	; 0xc0
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	fb03 f302 	mul.w	r3, r3, r2
 80148ce:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 80148d2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80148d6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 80148da:	4413      	add	r3, r2
 80148dc:	f242 3262 	movw	r2, #9058	; 0x2362
 80148e0:	fb02 f303 	mul.w	r3, r2, r3
 80148e4:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 80148e8:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 80148ec:	f640 02bd 	movw	r2, #2237	; 0x8bd
 80148f0:	fb02 f303 	mul.w	r3, r2, r3
 80148f4:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80148f8:	4413      	add	r3, r2
 80148fa:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 80148fe:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014902:	4af1      	ldr	r2, [pc, #964]	; (8014cc8 <jpeg_idct_14x14+0x540>)
 8014904:	fb02 f303 	mul.w	r3, r2, r3
 8014908:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 801490c:	4413      	add	r3, r2
 801490e:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014912:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014916:	f241 32a3 	movw	r2, #5027	; 0x13a3
 801491a:	fb02 f203 	mul.w	r2, r2, r3
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 801491e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014922:	49ea      	ldr	r1, [pc, #936]	; (8014ccc <jpeg_idct_14x14+0x544>)
 8014924:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014928:	4413      	add	r3, r2
 801492a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    tmp20 = tmp10 + tmp13;
 801492e:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8014932:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014936:	4413      	add	r3, r2
 8014938:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    tmp26 = tmp10 - tmp13;
 801493c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8014940:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014944:	1ad3      	subs	r3, r2, r3
 8014946:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp21 = tmp11 + tmp14;
 801494a:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801494e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014952:	4413      	add	r3, r2
 8014954:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp25 = tmp11 - tmp14;
 8014958:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 801495c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014960:	1ad3      	subs	r3, r2, r3
 8014962:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp22 = tmp12 + tmp15;
 8014966:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801496a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801496e:	4413      	add	r3, r2
 8014970:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp24 = tmp12 - tmp15;
 8014974:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8014978:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801497c:	1ad3      	subs	r3, r2, r3
 801497e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8014982:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8014986:	3310      	adds	r3, #16
 8014988:	f9b3 3000 	ldrsh.w	r3, [r3]
 801498c:	461a      	mov	r2, r3
 801498e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8014992:	3320      	adds	r3, #32
 8014994:	681b      	ldr	r3, [r3, #0]
 8014996:	fb03 f302 	mul.w	r3, r3, r2
 801499a:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801499e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80149a2:	3330      	adds	r3, #48	; 0x30
 80149a4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149a8:	461a      	mov	r2, r3
 80149aa:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80149ae:	3360      	adds	r3, #96	; 0x60
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	fb03 f302 	mul.w	r3, r3, r2
 80149b6:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80149ba:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80149be:	3350      	adds	r3, #80	; 0x50
 80149c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149c4:	461a      	mov	r2, r3
 80149c6:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80149ca:	33a0      	adds	r3, #160	; 0xa0
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	fb03 f302 	mul.w	r3, r3, r2
 80149d2:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80149d6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80149da:	3370      	adds	r3, #112	; 0x70
 80149dc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80149e0:	461a      	mov	r2, r3
 80149e2:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80149e6:	33e0      	adds	r3, #224	; 0xe0
 80149e8:	681b      	ldr	r3, [r3, #0]
 80149ea:	fb03 f302 	mul.w	r3, r3, r2
 80149ee:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    tmp13 = z4 << CONST_BITS;
 80149f2:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 80149f6:	035b      	lsls	r3, r3, #13
 80149f8:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    tmp14 = z1 + z3;
 80149fc:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014a00:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014a04:	4413      	add	r3, r2
 8014a06:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014a0a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014a0e:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014a12:	4413      	add	r3, r2
 8014a14:	f642 22b7 	movw	r2, #10935	; 0x2ab7
 8014a18:	fb02 f303 	mul.w	r3, r2, r3
 8014a1c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8014a20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014a24:	f242 6252 	movw	r2, #9810	; 0x2652
 8014a28:	fb02 f303 	mul.w	r3, r2, r3
 8014a2c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8014a30:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8014a34:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014a38:	441a      	add	r2, r3
 8014a3a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014a3e:	441a      	add	r2, r3
 8014a40:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014a44:	49a2      	ldr	r1, [pc, #648]	; (8014cd0 <jpeg_idct_14x14+0x548>)
 8014a46:	fb01 f303 	mul.w	r3, r1, r3
 8014a4a:	4413      	add	r3, r2
 8014a4c:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8014a50:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014a54:	f641 0214 	movw	r2, #6164	; 0x1814
 8014a58:	fb02 f303 	mul.w	r3, r2, r3
 8014a5c:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8014a60:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014a64:	4a9b      	ldr	r2, [pc, #620]	; (8014cd4 <jpeg_idct_14x14+0x54c>)
 8014a66:	fb02 f303 	mul.w	r3, r2, r3
 8014a6a:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8014a6e:	4413      	add	r3, r2
 8014a70:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z1    -= z2;
 8014a74:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014a78:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014a7c:	1ad3      	subs	r3, r2, r3
 8014a7e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 8014a82:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014a86:	f640 62f2 	movw	r2, #3826	; 0xef2
 8014a8a:	fb02 f203 	mul.w	r2, r2, r3
 8014a8e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014a92:	1ad3      	subs	r3, r2, r3
 8014a94:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    tmp16 += tmp15;
 8014a98:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014a9c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014aa0:	4413      	add	r3, r2
 8014aa2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z1    += z4;
 8014aa6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014aaa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014aae:	4413      	add	r3, r2
 8014ab0:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 8014ab4:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8014ab8:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014abc:	4413      	add	r3, r2
 8014abe:	f46f 62a2 	mvn.w	r2, #1296	; 0x510
 8014ac2:	fb02 f203 	mul.w	r2, r2, r3
 8014ac6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014aca:	1ad3      	subs	r3, r2, r3
 8014acc:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 8014ad0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014ad4:	4a80      	ldr	r2, [pc, #512]	; (8014cd8 <jpeg_idct_14x14+0x550>)
 8014ad6:	fb02 f203 	mul.w	r2, r2, r3
 8014ada:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014ade:	4413      	add	r3, r2
 8014ae0:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8014ae4:	4413      	add	r3, r2
 8014ae6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 8014aea:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014aee:	4a7b      	ldr	r2, [pc, #492]	; (8014cdc <jpeg_idct_14x14+0x554>)
 8014af0:	fb02 f203 	mul.w	r2, r2, r3
 8014af4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014af8:	4413      	add	r3, r2
 8014afa:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8014afe:	4413      	add	r3, r2
 8014b00:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014b04:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8014b08:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014b0c:	1ad3      	subs	r3, r2, r3
 8014b0e:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 8014b12:	fb02 f303 	mul.w	r3, r2, r3
 8014b16:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014b1a:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8014b1e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014b22:	441a      	add	r2, r3
 8014b24:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014b28:	496d      	ldr	r1, [pc, #436]	; (8014ce0 <jpeg_idct_14x14+0x558>)
 8014b2a:	fb01 f303 	mul.w	r3, r1, r3
 8014b2e:	4413      	add	r3, r2
 8014b30:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8014b34:	4413      	add	r3, r2
 8014b36:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 8014b3a:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014b3e:	f241 5299 	movw	r2, #5529	; 0x1599
 8014b42:	fb02 f203 	mul.w	r2, r2, r3
 8014b46:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014b4a:	4413      	add	r3, r2
 8014b4c:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8014b50:	4413      	add	r3, r2
 8014b52:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    tmp13 = (z1 - z3) << PASS1_BITS;
 8014b56:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014b5a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014b5e:	1ad3      	subs	r3, r2, r3
 8014b60:	009b      	lsls	r3, r3, #2
 8014b62:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8014b66:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8014b6a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014b6e:	4413      	add	r3, r2
 8014b70:	12da      	asrs	r2, r3, #11
 8014b72:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014b76:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8014b78:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8014b7c:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8014b80:	1ad2      	subs	r2, r2, r3
 8014b82:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014b86:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8014b8a:	12d2      	asrs	r2, r2, #11
 8014b8c:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 8014b8e:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8014b92:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014b96:	441a      	add	r2, r3
 8014b98:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014b9c:	3320      	adds	r3, #32
 8014b9e:	12d2      	asrs	r2, r2, #11
 8014ba0:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8014ba2:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 8014ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8014baa:	1ad2      	subs	r2, r2, r3
 8014bac:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014bb0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8014bb4:	12d2      	asrs	r2, r2, #11
 8014bb6:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8014bb8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8014bbc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014bc0:	441a      	add	r2, r3
 8014bc2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014bc6:	3340      	adds	r3, #64	; 0x40
 8014bc8:	12d2      	asrs	r2, r2, #11
 8014bca:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8014bcc:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8014bd0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014bd4:	1ad2      	subs	r2, r2, r3
 8014bd6:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014bda:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014bde:	12d2      	asrs	r2, r2, #11
 8014be0:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) (tmp23 + tmp13);
 8014be2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014be6:	3360      	adds	r3, #96	; 0x60
 8014be8:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8014bec:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8014bf0:	440a      	add	r2, r1
 8014bf2:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) (tmp23 - tmp13);
 8014bf4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014bf8:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8014bfc:	f8d7 11f8 	ldr.w	r1, [r7, #504]	; 0x1f8
 8014c00:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8014c04:	1a8a      	subs	r2, r1, r2
 8014c06:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 8014c08:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8014c0c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014c10:	441a      	add	r2, r3
 8014c12:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014c16:	3380      	adds	r3, #128	; 0x80
 8014c18:	12d2      	asrs	r2, r2, #11
 8014c1a:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 8014c1c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8014c20:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014c24:	1ad2      	subs	r2, r2, r3
 8014c26:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014c2a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8014c2e:	12d2      	asrs	r2, r2, #11
 8014c30:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 8014c32:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8014c36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014c3a:	441a      	add	r2, r3
 8014c3c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014c40:	33a0      	adds	r3, #160	; 0xa0
 8014c42:	12d2      	asrs	r2, r2, #11
 8014c44:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 8014c46:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8014c4a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014c4e:	1ad2      	subs	r2, r2, r3
 8014c50:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014c54:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8014c58:	12d2      	asrs	r2, r2, #11
 8014c5a:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 8014c5c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8014c60:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014c64:	441a      	add	r2, r3
 8014c66:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014c6a:	33c0      	adds	r3, #192	; 0xc0
 8014c6c:	12d2      	asrs	r2, r2, #11
 8014c6e:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8014c70:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 8014c74:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8014c78:	1ad2      	subs	r2, r2, r3
 8014c7a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014c7e:	33e0      	adds	r3, #224	; 0xe0
 8014c80:	12d2      	asrs	r2, r2, #11
 8014c82:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8014c84:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8014c88:	3301      	adds	r3, #1
 8014c8a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8014c8e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8014c92:	3302      	adds	r3, #2
 8014c94:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
 8014c98:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8014c9c:	3304      	adds	r3, #4
 8014c9e:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
 8014ca2:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014ca6:	3304      	adds	r3, #4
 8014ca8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
 8014cac:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8014cb0:	2b07      	cmp	r3, #7
 8014cb2:	f77f ad91 	ble.w	80147d8 <jpeg_idct_14x14+0x50>
  }

  /* Pass 2: process 14 rows from work array, store into output array. */

  wsptr = workspace;
 8014cb6:	f107 0310 	add.w	r3, r7, #16
 8014cba:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  for (ctr = 0; ctr < 14; ctr++) {
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 8014cc4:	e290      	b.n	80151e8 <jpeg_idct_14x14+0xa60>
 8014cc6:	bf00      	nop
 8014cc8:	ffffc8fc 	.word	0xffffc8fc
 8014ccc:	ffffd3e1 	.word	0xffffd3e1
 8014cd0:	ffffdbf0 	.word	0xffffdbf0
 8014cd4:	ffffde0b 	.word	0xffffde0b
 8014cd8:	fffff26e 	.word	0xfffff26e
 8014cdc:	ffffb409 	.word	0xffffb409
 8014ce0:	ffffc9e6 	.word	0xffffc9e6
    outptr = output_buf[ctr] + output_col;
 8014ce4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8014ce8:	009b      	lsls	r3, r3, #2
 8014cea:	463a      	mov	r2, r7
 8014cec:	6812      	ldr	r2, [r2, #0]
 8014cee:	4413      	add	r3, r2
 8014cf0:	681a      	ldr	r2, [r3, #0]
 8014cf2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8014cf6:	4413      	add	r3, r2
 8014cf8:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8014cfc:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014d00:	681b      	ldr	r3, [r3, #0]
 8014d02:	3310      	adds	r3, #16
 8014d04:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z1 <<= CONST_BITS;
 8014d08:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014d0c:	035b      	lsls	r3, r3, #13
 8014d0e:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z4 = (INT32) wsptr[4];
 8014d12:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014d16:	3310      	adds	r3, #16
 8014d18:	681b      	ldr	r3, [r3, #0]
 8014d1a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8014d1e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d22:	f642 02c6 	movw	r2, #10438	; 0x28c6
 8014d26:	fb02 f303 	mul.w	r3, r2, r3
 8014d2a:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8014d2e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d32:	f640 2212 	movw	r2, #2578	; 0xa12
 8014d36:	fb02 f303 	mul.w	r3, r2, r3
 8014d3a:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8014d3e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d42:	f641 4237 	movw	r2, #7223	; 0x1c37
 8014d46:	fb02 f303 	mul.w	r3, r2, r3
 8014d4a:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp10 = z1 + z2;
 8014d4e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014d52:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014d56:	4413      	add	r3, r2
 8014d58:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp11 = z1 + z3;
 8014d5c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014d60:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014d64:	4413      	add	r3, r2
 8014d66:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 = z1 - z4;
 8014d6a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014d6e:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d72:	1ad3      	subs	r3, r2, r3
 8014d74:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8014d78:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8014d7c:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014d80:	441a      	add	r2, r3
 8014d82:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014d86:	1ad3      	subs	r3, r2, r3
 8014d88:	005b      	lsls	r3, r3, #1
 8014d8a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014d8e:	1ad3      	subs	r3, r2, r3
 8014d90:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

    z1 = (INT32) wsptr[2];
 8014d94:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014d98:	3308      	adds	r3, #8
 8014d9a:	681b      	ldr	r3, [r3, #0]
 8014d9c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z2 = (INT32) wsptr[6];
 8014da0:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014da4:	3318      	adds	r3, #24
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8014dac:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014db0:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014db4:	4413      	add	r3, r2
 8014db6:	f242 3262 	movw	r2, #9058	; 0x2362
 8014dba:	fb02 f303 	mul.w	r3, r2, r3
 8014dbe:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8014dc2:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014dc6:	f640 02bd 	movw	r2, #2237	; 0x8bd
 8014dca:	fb02 f303 	mul.w	r3, r2, r3
 8014dce:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8014dd2:	4413      	add	r3, r2
 8014dd4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8014dd8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014ddc:	4af1      	ldr	r2, [pc, #964]	; (80151a4 <jpeg_idct_14x14+0xa1c>)
 8014dde:	fb02 f303 	mul.w	r3, r2, r3
 8014de2:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8014de6:	4413      	add	r3, r2
 8014de8:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014dec:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014df0:	f241 32a3 	movw	r2, #5027	; 0x13a3
 8014df4:	fb02 f203 	mul.w	r2, r2, r3
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8014df8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014dfc:	49ea      	ldr	r1, [pc, #936]	; (80151a8 <jpeg_idct_14x14+0xa20>)
 8014dfe:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8014e02:	4413      	add	r3, r2
 8014e04:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    tmp20 = tmp10 + tmp13;
 8014e08:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8014e0c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014e10:	4413      	add	r3, r2
 8014e12:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
    tmp26 = tmp10 - tmp13;
 8014e16:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8014e1a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014e1e:	1ad3      	subs	r3, r2, r3
 8014e20:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
    tmp21 = tmp11 + tmp14;
 8014e24:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8014e28:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014e2c:	4413      	add	r3, r2
 8014e2e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
    tmp25 = tmp11 - tmp14;
 8014e32:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8014e36:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014e3a:	1ad3      	subs	r3, r2, r3
 8014e3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp22 = tmp12 + tmp15;
 8014e40:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8014e44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014e48:	4413      	add	r3, r2
 8014e4a:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp24 = tmp12 - tmp15;
 8014e4e:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8014e52:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014e56:	1ad3      	subs	r3, r2, r3
 8014e58:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8014e5c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014e60:	3304      	adds	r3, #4
 8014e62:	681b      	ldr	r3, [r3, #0]
 8014e64:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    z2 = (INT32) wsptr[3];
 8014e68:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014e6c:	330c      	adds	r3, #12
 8014e6e:	681b      	ldr	r3, [r3, #0]
 8014e70:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    z3 = (INT32) wsptr[5];
 8014e74:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014e78:	3314      	adds	r3, #20
 8014e7a:	681b      	ldr	r3, [r3, #0]
 8014e7c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    z4 = (INT32) wsptr[7];
 8014e80:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8014e84:	331c      	adds	r3, #28
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210
    z4 <<= CONST_BITS;
 8014e8c:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014e90:	035b      	lsls	r3, r3, #13
 8014e92:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp14 = z1 + z3;
 8014e96:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014e9a:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014e9e:	4413      	add	r3, r2
 8014ea0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8014ea4:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014ea8:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014eac:	4413      	add	r3, r2
 8014eae:	f642 22b7 	movw	r2, #10935	; 0x2ab7
 8014eb2:	fb02 f303 	mul.w	r3, r2, r3
 8014eb6:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8014eba:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014ebe:	f242 6252 	movw	r2, #9810	; 0x2652
 8014ec2:	fb02 f303 	mul.w	r3, r2, r3
 8014ec6:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8014eca:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8014ece:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8014ed2:	441a      	add	r2, r3
 8014ed4:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014ed8:	441a      	add	r2, r3
 8014eda:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014ede:	49b3      	ldr	r1, [pc, #716]	; (80151ac <jpeg_idct_14x14+0xa24>)
 8014ee0:	fb01 f303 	mul.w	r3, r1, r3
 8014ee4:	4413      	add	r3, r2
 8014ee6:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8014eea:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8014eee:	f641 0214 	movw	r2, #6164	; 0x1814
 8014ef2:	fb02 f303 	mul.w	r3, r2, r3
 8014ef6:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8014efa:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014efe:	4aac      	ldr	r2, [pc, #688]	; (80151b0 <jpeg_idct_14x14+0xa28>)
 8014f00:	fb02 f303 	mul.w	r3, r2, r3
 8014f04:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8014f08:	4413      	add	r3, r2
 8014f0a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z1    -= z2;
 8014f0e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014f12:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014f16:	1ad3      	subs	r3, r2, r3
 8014f18:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8014f1c:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 8014f20:	f640 62f2 	movw	r2, #3826	; 0xef2
 8014f24:	fb02 f203 	mul.w	r2, r2, r3
 8014f28:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014f2c:	1ad3      	subs	r3, r2, r3
 8014f2e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    tmp16 += tmp15;
 8014f32:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8014f36:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8014f3a:	4413      	add	r3, r2
 8014f3c:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8014f40:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8014f44:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014f48:	4413      	add	r3, r2
 8014f4a:	f46f 62a2 	mvn.w	r2, #1296	; 0x510
 8014f4e:	fb02 f203 	mul.w	r2, r2, r3
 8014f52:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014f56:	1ad3      	subs	r3, r2, r3
 8014f58:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8014f5c:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014f60:	4a94      	ldr	r2, [pc, #592]	; (80151b4 <jpeg_idct_14x14+0xa2c>)
 8014f62:	fb02 f203 	mul.w	r2, r2, r3
 8014f66:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014f6a:	4413      	add	r3, r2
 8014f6c:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8014f70:	4413      	add	r3, r2
 8014f72:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8014f76:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014f7a:	4a8f      	ldr	r2, [pc, #572]	; (80151b8 <jpeg_idct_14x14+0xa30>)
 8014f7c:	fb02 f203 	mul.w	r2, r2, r3
 8014f80:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014f84:	4413      	add	r3, r2
 8014f86:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8014f8a:	4413      	add	r3, r2
 8014f8c:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8014f90:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8014f94:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014f98:	1ad3      	subs	r3, r2, r3
 8014f9a:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 8014f9e:	fb02 f303 	mul.w	r3, r2, r3
 8014fa2:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8014fa6:	f8d7 21f4 	ldr.w	r2, [r7, #500]	; 0x1f4
 8014faa:	f8d7 3210 	ldr.w	r3, [r7, #528]	; 0x210
 8014fae:	441a      	add	r2, r3
 8014fb0:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014fb4:	4981      	ldr	r1, [pc, #516]	; (80151bc <jpeg_idct_14x14+0xa34>)
 8014fb6:	fb01 f303 	mul.w	r3, r1, r3
 8014fba:	4413      	add	r3, r2
 8014fbc:	f8d7 21f0 	ldr.w	r2, [r7, #496]	; 0x1f0
 8014fc0:	4413      	add	r3, r2
 8014fc2:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8014fc6:	f8d7 320c 	ldr.w	r3, [r7, #524]	; 0x20c
 8014fca:	f241 5299 	movw	r2, #5529	; 0x1599
 8014fce:	fb02 f203 	mul.w	r2, r2, r3
 8014fd2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8014fd6:	4413      	add	r3, r2
 8014fd8:	f8d7 21ec 	ldr.w	r2, [r7, #492]	; 0x1ec
 8014fdc:	4413      	add	r3, r2
 8014fde:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8014fe2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8014fe6:	f8d7 3208 	ldr.w	r3, [r7, #520]	; 0x208
 8014fea:	1ad3      	subs	r3, r2, r3
 8014fec:	035b      	lsls	r3, r3, #13
 8014fee:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8014ff2:	4413      	add	r3, r2
 8014ff4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8014ff8:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 8014ffc:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 8015000:	4413      	add	r3, r2
 8015002:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015004:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015008:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801500c:	4413      	add	r3, r2
 801500e:	781a      	ldrb	r2, [r3, #0]
 8015010:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015014:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015016:	f8d7 21e8 	ldr.w	r2, [r7, #488]	; 0x1e8
 801501a:	f8d7 3204 	ldr.w	r3, [r7, #516]	; 0x204
 801501e:	1ad3      	subs	r3, r2, r3
 8015020:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015022:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015026:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801502a:	441a      	add	r2, r3
 801502c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015030:	330d      	adds	r3, #13
 8015032:	7812      	ldrb	r2, [r2, #0]
 8015034:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015036:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801503a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801503e:	4413      	add	r3, r2
 8015040:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015042:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015046:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801504a:	441a      	add	r2, r3
 801504c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015050:	3301      	adds	r3, #1
 8015052:	7812      	ldrb	r2, [r2, #0]
 8015054:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015056:	f8d7 21e0 	ldr.w	r2, [r7, #480]	; 0x1e0
 801505a:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801505e:	1ad3      	subs	r3, r2, r3
 8015060:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015062:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015066:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801506a:	441a      	add	r2, r3
 801506c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015070:	330c      	adds	r3, #12
 8015072:	7812      	ldrb	r2, [r2, #0]
 8015074:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015076:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801507a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801507e:	4413      	add	r3, r2
 8015080:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015082:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015086:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801508a:	441a      	add	r2, r3
 801508c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015090:	3302      	adds	r3, #2
 8015092:	7812      	ldrb	r2, [r2, #0]
 8015094:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015096:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801509a:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 801509e:	1ad3      	subs	r3, r2, r3
 80150a0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80150a2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80150a6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80150aa:	441a      	add	r2, r3
 80150ac:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80150b0:	330b      	adds	r3, #11
 80150b2:	7812      	ldrb	r2, [r2, #0]
 80150b4:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80150b6:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80150ba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80150be:	4413      	add	r3, r2
 80150c0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80150c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80150c6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80150ca:	441a      	add	r2, r3
 80150cc:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80150d0:	3303      	adds	r3, #3
 80150d2:	7812      	ldrb	r2, [r2, #0]
 80150d4:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80150d6:	f8d7 21f8 	ldr.w	r2, [r7, #504]	; 0x1f8
 80150da:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80150de:	1ad3      	subs	r3, r2, r3
 80150e0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80150e2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80150e6:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80150ea:	441a      	add	r2, r3
 80150ec:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80150f0:	330a      	adds	r3, #10
 80150f2:	7812      	ldrb	r2, [r2, #0]
 80150f4:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80150f6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 80150fa:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 80150fe:	4413      	add	r3, r2
 8015100:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015102:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015106:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801510a:	441a      	add	r2, r3
 801510c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015110:	3304      	adds	r3, #4
 8015112:	7812      	ldrb	r2, [r2, #0]
 8015114:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8015116:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801511a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801511e:	1ad3      	subs	r3, r2, r3
 8015120:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015122:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8015126:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801512a:	441a      	add	r2, r3
 801512c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015130:	3309      	adds	r3, #9
 8015132:	7812      	ldrb	r2, [r2, #0]
 8015134:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8015136:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801513a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801513e:	4413      	add	r3, r2
 8015140:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015142:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8015146:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801514a:	441a      	add	r2, r3
 801514c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015150:	3305      	adds	r3, #5
 8015152:	7812      	ldrb	r2, [r2, #0]
 8015154:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8015156:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801515a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801515e:	1ad3      	subs	r3, r2, r3
 8015160:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015162:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8015166:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801516a:	441a      	add	r2, r3
 801516c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015170:	3308      	adds	r3, #8
 8015172:	7812      	ldrb	r2, [r2, #0]
 8015174:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8015176:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801517a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801517e:	4413      	add	r3, r2
 8015180:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015182:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8015186:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801518a:	441a      	add	r2, r3
 801518c:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 8015190:	3306      	adds	r3, #6
 8015192:	7812      	ldrb	r2, [r2, #0]
 8015194:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8015196:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801519a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801519e:	1ad3      	subs	r3, r2, r3
 80151a0:	149b      	asrs	r3, r3, #18
 80151a2:	e00d      	b.n	80151c0 <jpeg_idct_14x14+0xa38>
 80151a4:	ffffc8fc 	.word	0xffffc8fc
 80151a8:	ffffd3e1 	.word	0xffffd3e1
 80151ac:	ffffdbf0 	.word	0xffffdbf0
 80151b0:	ffffde0b 	.word	0xffffde0b
 80151b4:	fffff26e 	.word	0xfffff26e
 80151b8:	ffffb409 	.word	0xffffb409
 80151bc:	ffffc9e6 	.word	0xffffc9e6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80151c0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 80151c4:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 80151c8:	441a      	add	r2, r3
 80151ca:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 80151ce:	3307      	adds	r3, #7
 80151d0:	7812      	ldrb	r2, [r2, #0]
 80151d2:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80151d4:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 80151d8:	3320      	adds	r3, #32
 80151da:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
  for (ctr = 0; ctr < 14; ctr++) {
 80151de:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80151e2:	3301      	adds	r3, #1
 80151e4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
 80151e8:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80151ec:	2b0d      	cmp	r3, #13
 80151ee:	f77f ad79 	ble.w	8014ce4 <jpeg_idct_14x14+0x55c>
  }
}
 80151f2:	bf00      	nop
 80151f4:	bf00      	nop
 80151f6:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80151fa:	46bd      	mov	sp, r7
 80151fc:	bc90      	pop	{r4, r7}
 80151fe:	4770      	bx	lr

08015200 <jpeg_idct_15x15>:

GLOBAL(void)
jpeg_idct_15x15 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015200:	b490      	push	{r4, r7}
 8015202:	f5ad 7d16 	sub.w	sp, sp, #600	; 0x258
 8015206:	af00      	add	r7, sp, #0
 8015208:	f107 040c 	add.w	r4, r7, #12
 801520c:	6020      	str	r0, [r4, #0]
 801520e:	f107 0008 	add.w	r0, r7, #8
 8015212:	6001      	str	r1, [r0, #0]
 8015214:	1d39      	adds	r1, r7, #4
 8015216:	600a      	str	r2, [r1, #0]
 8015218:	463a      	mov	r2, r7
 801521a:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801521c:	f107 030c 	add.w	r3, r7, #12
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8015226:	3380      	adds	r3, #128	; 0x80
 8015228:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
  int workspace[8*15];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 801522c:	1d3b      	adds	r3, r7, #4
 801522e:	681b      	ldr	r3, [r3, #0]
 8015230:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015234:	f107 0308 	add.w	r3, r7, #8
 8015238:	681b      	ldr	r3, [r3, #0]
 801523a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801523c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
  wsptr = workspace;
 8015240:	f107 0314 	add.w	r3, r7, #20
 8015244:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015248:	2300      	movs	r3, #0
 801524a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 801524e:	e28d      	b.n	801576c <jpeg_idct_15x15+0x56c>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015250:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015254:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015258:	461a      	mov	r2, r3
 801525a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801525e:	681b      	ldr	r3, [r3, #0]
 8015260:	fb03 f302 	mul.w	r3, r3, r2
 8015264:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1 <<= CONST_BITS;
 8015268:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801526c:	035b      	lsls	r3, r3, #13
 801526e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8015272:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015276:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801527a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801527e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015282:	3320      	adds	r3, #32
 8015284:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015288:	461a      	mov	r2, r3
 801528a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801528e:	3340      	adds	r3, #64	; 0x40
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	fb03 f302 	mul.w	r3, r3, r2
 8015296:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801529a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801529e:	3340      	adds	r3, #64	; 0x40
 80152a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152a4:	461a      	mov	r2, r3
 80152a6:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80152aa:	3380      	adds	r3, #128	; 0x80
 80152ac:	681b      	ldr	r3, [r3, #0]
 80152ae:	fb03 f302 	mul.w	r3, r3, r2
 80152b2:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z4 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80152b6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80152ba:	3360      	adds	r3, #96	; 0x60
 80152bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80152c0:	461a      	mov	r2, r3
 80152c2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80152c6:	33c0      	adds	r3, #192	; 0xc0
 80152c8:	681b      	ldr	r3, [r3, #0]
 80152ca:	fb03 f302 	mul.w	r3, r3, r2
 80152ce:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80152d2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80152d6:	f640 52fc 	movw	r2, #3580	; 0xdfc
 80152da:	fb02 f303 	mul.w	r3, r2, r3
 80152de:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 80152e2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80152e6:	f242 429d 	movw	r2, #9373	; 0x249d
 80152ea:	fb02 f303 	mul.w	r3, r2, r3
 80152ee:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp12 = z1 - tmp10;
 80152f2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80152f6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80152fa:	1ad3      	subs	r3, r2, r3
 80152fc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp13 = z1 + tmp11;
 8015300:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015304:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015308:	4413      	add	r3, r2
 801530a:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801530e:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8015312:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015316:	1ad3      	subs	r3, r2, r3
 8015318:	005b      	lsls	r3, r3, #1
 801531a:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801531e:	1ad3      	subs	r3, r2, r3
 8015320:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z4 = z2 - z3;
 8015324:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8015328:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801532c:	1ad3      	subs	r3, r2, r3
 801532e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 += z2;
 8015332:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8015336:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801533a:	4413      	add	r3, r2
 801533c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 8015340:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015344:	f642 22ce 	movw	r2, #10958	; 0x2ace
 8015348:	fb02 f303 	mul.w	r3, r2, r3
 801534c:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 8015350:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015354:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8015358:	fb02 f303 	mul.w	r3, r2, r3
 801535c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 8015360:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015364:	f642 6213 	movw	r2, #11795	; 0x2e13
 8015368:	fb02 f303 	mul.w	r3, r2, r3
 801536c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp20 = tmp13 + tmp10 + tmp11;
 8015370:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015374:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015378:	4413      	add	r3, r2
 801537a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801537e:	4413      	add	r3, r2
 8015380:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 8015384:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8015388:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801538c:	1ad2      	subs	r2, r2, r3
 801538e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015392:	4413      	add	r3, r2
 8015394:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8015398:	4413      	add	r3, r2
 801539a:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 801539e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80153a2:	f241 1282 	movw	r2, #4482	; 0x1182
 80153a6:	fb02 f303 	mul.w	r3, r2, r3
 80153aa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80153ae:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80153b2:	f640 42c7 	movw	r2, #3271	; 0xcc7
 80153b6:	fb02 f303 	mul.w	r3, r2, r3
 80153ba:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp25 = tmp13 - tmp10 - tmp11;
 80153be:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80153c2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80153c6:	1ad2      	subs	r2, r2, r3
 80153c8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80153cc:	1ad3      	subs	r3, r2, r3
 80153ce:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80153d2:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80153d6:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80153da:	441a      	add	r2, r3
 80153dc:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80153e0:	1ad2      	subs	r2, r2, r3
 80153e2:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80153e6:	1ad3      	subs	r3, r2, r3
 80153e8:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 80153ec:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80153f0:	f641 124c 	movw	r2, #6476	; 0x194c
 80153f4:	fb02 f303 	mul.w	r3, r2, r3
 80153f8:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 80153fc:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015400:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8015404:	fb02 f303 	mul.w	r3, r2, r3
 8015408:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp21 = tmp12 + tmp10 + tmp11;
 801540c:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8015410:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015414:	4413      	add	r3, r2
 8015416:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801541a:	4413      	add	r3, r2
 801541c:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    tmp24 = tmp13 - tmp10 + tmp11;
 8015420:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015424:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015428:	1ad3      	subs	r3, r2, r3
 801542a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801542e:	4413      	add	r3, r2
 8015430:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    tmp11 += tmp11;
 8015434:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015438:	005b      	lsls	r3, r3, #1
 801543a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801543e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015442:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015446:	4413      	add	r3, r2
 8015448:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 801544c:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015450:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015454:	1ad2      	subs	r2, r2, r3
 8015456:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801545a:	1ad3      	subs	r3, r2, r3
 801545c:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015460:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015464:	3310      	adds	r3, #16
 8015466:	f9b3 3000 	ldrsh.w	r3, [r3]
 801546a:	461a      	mov	r2, r3
 801546c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015470:	3320      	adds	r3, #32
 8015472:	681b      	ldr	r3, [r3, #0]
 8015474:	fb03 f302 	mul.w	r3, r3, r2
 8015478:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801547c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015480:	3330      	adds	r3, #48	; 0x30
 8015482:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015486:	461a      	mov	r2, r3
 8015488:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801548c:	3360      	adds	r3, #96	; 0x60
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	fb03 f302 	mul.w	r3, r3, r2
 8015494:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015498:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801549c:	3350      	adds	r3, #80	; 0x50
 801549e:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154a2:	461a      	mov	r2, r3
 80154a4:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80154a8:	33a0      	adds	r3, #160	; 0xa0
 80154aa:	681b      	ldr	r3, [r3, #0]
 80154ac:	fb03 f302 	mul.w	r3, r3, r2
 80154b0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80154b4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80154b8:	f242 7231 	movw	r2, #10033	; 0x2731
 80154bc:	fb02 f303 	mul.w	r3, r2, r3
 80154c0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80154c4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80154c8:	3370      	adds	r3, #112	; 0x70
 80154ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80154ce:	461a      	mov	r2, r3
 80154d0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80154d4:	33e0      	adds	r3, #224	; 0xe0
 80154d6:	681b      	ldr	r3, [r3, #0]
 80154d8:	fb03 f302 	mul.w	r3, r3, r2
 80154dc:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp13 = z2 - z4;
 80154e0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80154e4:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80154e8:	1ad3      	subs	r3, r2, r3
 80154ea:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80154ee:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80154f2:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80154f6:	4413      	add	r3, r2
 80154f8:	f641 229a 	movw	r2, #6810	; 0x1a9a
 80154fc:	fb02 f303 	mul.w	r3, r2, r3
 8015500:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 8015504:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015508:	f241 0271 	movw	r2, #4209	; 0x1071
 801550c:	fb02 f303 	mul.w	r3, r2, r3
 8015510:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8015514:	4413      	add	r3, r2
 8015516:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 801551a:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801551e:	4a9a      	ldr	r2, [pc, #616]	; (8015788 <jpeg_idct_15x15+0x588>)
 8015520:	fb02 f303 	mul.w	r3, r2, r3
 8015524:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8015528:	4413      	add	r3, r2
 801552a:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 801552e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015532:	4a96      	ldr	r2, [pc, #600]	; (801578c <jpeg_idct_15x15+0x58c>)
 8015534:	fb02 f303 	mul.w	r3, r2, r3
 8015538:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 801553c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015540:	4a93      	ldr	r2, [pc, #588]	; (8015790 <jpeg_idct_15x15+0x590>)
 8015542:	fb02 f303 	mul.w	r3, r2, r3
 8015546:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    z2 = z1 - z4;
 801554a:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801554e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015552:	1ad3      	subs	r3, r2, r3
 8015554:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8015558:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801555c:	f642 5202 	movw	r2, #11522	; 0x2d02
 8015560:	fb02 f303 	mul.w	r3, r2, r3
 8015564:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8015568:	4413      	add	r3, r2
 801556a:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 801556e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015572:	f644 62a3 	movw	r2, #20131	; 0x4ea3
 8015576:	fb02 f203 	mul.w	r2, r2, r3
 801557a:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801557e:	441a      	add	r2, r3
 8015580:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8015584:	1ad3      	subs	r3, r2, r3
 8015586:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 801558a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801558e:	4a81      	ldr	r2, [pc, #516]	; (8015794 <jpeg_idct_15x15+0x594>)
 8015590:	fb02 f203 	mul.w	r2, r2, r3
 8015594:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015598:	4413      	add	r3, r2
 801559a:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801559e:	4413      	add	r3, r2
 80155a0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 80155a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80155a8:	f242 7231 	movw	r2, #10033	; 0x2731
 80155ac:	fb02 f203 	mul.w	r2, r2, r3
 80155b0:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80155b4:	1ad3      	subs	r3, r2, r3
 80155b6:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 80155ba:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80155be:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80155c2:	4413      	add	r3, r2
 80155c4:	f241 2268 	movw	r2, #4712	; 0x1268
 80155c8:	fb02 f303 	mul.w	r3, r2, r3
 80155cc:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 80155d0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80155d4:	f640 7239 	movw	r2, #3897	; 0xf39
 80155d8:	fb02 f203 	mul.w	r2, r2, r3
 80155dc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80155e0:	441a      	add	r2, r3
 80155e2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80155e6:	1ad3      	subs	r3, r2, r3
 80155e8:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80155ec:	4413      	add	r3, r2
 80155ee:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 80155f2:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80155f6:	4a68      	ldr	r2, [pc, #416]	; (8015798 <jpeg_idct_15x15+0x598>)
 80155f8:	fb02 f203 	mul.w	r2, r2, r3
 80155fc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015600:	441a      	add	r2, r3
 8015602:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015606:	4413      	add	r3, r2
 8015608:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 801560c:	4413      	add	r3, r2
 801560e:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8015612:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8015616:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801561a:	4413      	add	r3, r2
 801561c:	12da      	asrs	r2, r3, #11
 801561e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015622:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8015624:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8015628:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 801562c:	1ad2      	subs	r2, r2, r3
 801562e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015632:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8015636:	12d2      	asrs	r2, r2, #11
 8015638:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801563a:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 801563e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015642:	441a      	add	r2, r3
 8015644:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015648:	3320      	adds	r3, #32
 801564a:	12d2      	asrs	r2, r2, #11
 801564c:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801564e:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8015652:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015656:	1ad2      	subs	r2, r2, r3
 8015658:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801565c:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 8015660:	12d2      	asrs	r2, r2, #11
 8015662:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8015664:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8015668:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801566c:	441a      	add	r2, r3
 801566e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015672:	3340      	adds	r3, #64	; 0x40
 8015674:	12d2      	asrs	r2, r2, #11
 8015676:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8015678:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 801567c:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015680:	1ad2      	subs	r2, r2, r3
 8015682:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015686:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801568a:	12d2      	asrs	r2, r2, #11
 801568c:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801568e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8015692:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8015696:	441a      	add	r2, r3
 8015698:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801569c:	3360      	adds	r3, #96	; 0x60
 801569e:	12d2      	asrs	r2, r2, #11
 80156a0:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 80156a2:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80156a6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80156aa:	1ad2      	subs	r2, r2, r3
 80156ac:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80156b0:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80156b4:	12d2      	asrs	r2, r2, #11
 80156b6:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 80156b8:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80156bc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80156c0:	441a      	add	r2, r3
 80156c2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80156c6:	3380      	adds	r3, #128	; 0x80
 80156c8:	12d2      	asrs	r2, r2, #11
 80156ca:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 80156cc:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 80156d0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80156d4:	1ad2      	subs	r2, r2, r3
 80156d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80156da:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80156de:	12d2      	asrs	r2, r2, #11
 80156e0:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 80156e2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80156e6:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80156ea:	441a      	add	r2, r3
 80156ec:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80156f0:	33a0      	adds	r3, #160	; 0xa0
 80156f2:	12d2      	asrs	r2, r2, #11
 80156f4:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 80156f6:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80156fa:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 80156fe:	1ad2      	subs	r2, r2, r3
 8015700:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015704:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8015708:	12d2      	asrs	r2, r2, #11
 801570a:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801570c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8015710:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8015714:	441a      	add	r2, r3
 8015716:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801571a:	33c0      	adds	r3, #192	; 0xc0
 801571c:	12d2      	asrs	r2, r2, #11
 801571e:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 8015720:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8015724:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8015728:	1ad2      	subs	r2, r2, r3
 801572a:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801572e:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8015732:	12d2      	asrs	r2, r2, #11
 8015734:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27, CONST_BITS-PASS1_BITS);
 8015736:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801573a:	33e0      	adds	r3, #224	; 0xe0
 801573c:	f8d7 2200 	ldr.w	r2, [r7, #512]	; 0x200
 8015740:	12d2      	asrs	r2, r2, #11
 8015742:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015744:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8015748:	3301      	adds	r3, #1
 801574a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 801574e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015752:	3302      	adds	r3, #2
 8015754:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
 8015758:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801575c:	3304      	adds	r3, #4
 801575e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
 8015762:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015766:	3304      	adds	r3, #4
 8015768:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
 801576c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8015770:	2b07      	cmp	r3, #7
 8015772:	f77f ad6d 	ble.w	8015250 <jpeg_idct_15x15+0x50>
  }

  /* Pass 2: process 15 rows from work array, store into output array. */

  wsptr = workspace;
 8015776:	f107 0314 	add.w	r3, r7, #20
 801577a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  for (ctr = 0; ctr < 15; ctr++) {
 801577e:	2300      	movs	r3, #0
 8015780:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8015784:	e2a9      	b.n	8015cda <jpeg_idct_15x15+0xada>
 8015786:	bf00      	nop
 8015788:	ffffba5c 	.word	0xffffba5c
 801578c:	ffffe566 	.word	0xffffe566
 8015790:	ffffd4f6 	.word	0xffffd4f6
 8015794:	ffffdc67 	.word	0xffffdc67
 8015798:	ffffe42f 	.word	0xffffe42f
    outptr = output_buf[ctr] + output_col;
 801579c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80157a0:	009b      	lsls	r3, r3, #2
 80157a2:	463a      	mov	r2, r7
 80157a4:	6812      	ldr	r2, [r2, #0]
 80157a6:	4413      	add	r3, r2
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80157ae:	4413      	add	r3, r2
 80157b0:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80157b4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80157b8:	681b      	ldr	r3, [r3, #0]
 80157ba:	3310      	adds	r3, #16
 80157bc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1 <<= CONST_BITS;
 80157c0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80157c4:	035b      	lsls	r3, r3, #13
 80157c6:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z2 = (INT32) wsptr[2];
 80157ca:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80157ce:	3308      	adds	r3, #8
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z3 = (INT32) wsptr[4];
 80157d6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80157da:	3310      	adds	r3, #16
 80157dc:	681b      	ldr	r3, [r3, #0]
 80157de:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z4 = (INT32) wsptr[6];
 80157e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80157e6:	3318      	adds	r3, #24
 80157e8:	681b      	ldr	r3, [r3, #0]
 80157ea:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp10 = MULTIPLY(z4, FIX(0.437016024)); /* c12 */
 80157ee:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80157f2:	f640 52fc 	movw	r2, #3580	; 0xdfc
 80157f6:	fb02 f303 	mul.w	r3, r2, r3
 80157fa:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(1.144122806)); /* c6 */
 80157fe:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015802:	f242 429d 	movw	r2, #9373	; 0x249d
 8015806:	fb02 f303 	mul.w	r3, r2, r3
 801580a:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp12 = z1 - tmp10;
 801580e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015812:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015816:	1ad3      	subs	r3, r2, r3
 8015818:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp13 = z1 + tmp11;
 801581c:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015820:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015824:	4413      	add	r3, r2
 8015826:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    z1 -= (tmp11 - tmp10) << 1;             /* c0 = (c6-c12)*2 */
 801582a:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801582e:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015832:	1ad3      	subs	r3, r2, r3
 8015834:	005b      	lsls	r3, r3, #1
 8015836:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801583a:	1ad3      	subs	r3, r2, r3
 801583c:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z4 = z2 - z3;
 8015840:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8015844:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015848:	1ad3      	subs	r3, r2, r3
 801584a:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 += z2;
 801584e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8015852:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015856:	4413      	add	r3, r2
 8015858:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    tmp10 = MULTIPLY(z3, FIX(1.337628990)); /* (c2+c4)/2 */
 801585c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015860:	f642 22ce 	movw	r2, #10958	; 0x2ace
 8015864:	fb02 f303 	mul.w	r3, r2, r3
 8015868:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.045680613)); /* (c2-c4)/2 */
 801586c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015870:	f44f 72bb 	mov.w	r2, #374	; 0x176
 8015874:	fb02 f303 	mul.w	r3, r2, r3
 8015878:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    z2 = MULTIPLY(z2, FIX(1.439773946));    /* c4+c14 */
 801587c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015880:	f642 6213 	movw	r2, #11795	; 0x2e13
 8015884:	fb02 f303 	mul.w	r3, r2, r3
 8015888:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp20 = tmp13 + tmp10 + tmp11;
 801588c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015890:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015894:	4413      	add	r3, r2
 8015896:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801589a:	4413      	add	r3, r2
 801589c:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp23 = tmp12 - tmp10 + tmp11 + z2;
 80158a0:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80158a4:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80158a8:	1ad2      	subs	r2, r2, r3
 80158aa:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80158ae:	4413      	add	r3, r2
 80158b0:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80158b4:	4413      	add	r3, r2
 80158b6:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218

    tmp10 = MULTIPLY(z3, FIX(0.547059574)); /* (c8+c14)/2 */
 80158ba:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80158be:	f241 1282 	movw	r2, #4482	; 0x1182
 80158c2:	fb02 f303 	mul.w	r3, r2, r3
 80158c6:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.399234004)); /* (c8-c14)/2 */
 80158ca:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80158ce:	f640 42c7 	movw	r2, #3271	; 0xcc7
 80158d2:	fb02 f303 	mul.w	r3, r2, r3
 80158d6:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp25 = tmp13 - tmp10 - tmp11;
 80158da:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80158de:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80158e2:	1ad2      	subs	r2, r2, r3
 80158e4:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80158e8:	1ad3      	subs	r3, r2, r3
 80158ea:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp26 = tmp12 + tmp10 - tmp11 - z2;
 80158ee:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80158f2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 80158f6:	441a      	add	r2, r3
 80158f8:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 80158fc:	1ad2      	subs	r2, r2, r3
 80158fe:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015902:	1ad3      	subs	r3, r2, r3
 8015904:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    tmp10 = MULTIPLY(z3, FIX(0.790569415)); /* (c6+c12)/2 */
 8015908:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801590c:	f641 124c 	movw	r2, #6476	; 0x194c
 8015910:	fb02 f303 	mul.w	r3, r2, r3
 8015914:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp11 = MULTIPLY(z4, FIX(0.353553391)); /* (c6-c12)/2 */
 8015918:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801591c:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8015920:	fb02 f303 	mul.w	r3, r2, r3
 8015924:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228

    tmp21 = tmp12 + tmp10 + tmp11;
 8015928:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 801592c:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015930:	4413      	add	r3, r2
 8015932:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8015936:	4413      	add	r3, r2
 8015938:	f8c7 320c 	str.w	r3, [r7, #524]	; 0x20c
    tmp24 = tmp13 - tmp10 + tmp11;
 801593c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015940:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015944:	1ad3      	subs	r3, r2, r3
 8015946:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801594a:	4413      	add	r3, r2
 801594c:	f8c7 3208 	str.w	r3, [r7, #520]	; 0x208
    tmp11 += tmp11;
 8015950:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015954:	005b      	lsls	r3, r3, #1
 8015956:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp22 = z1 + tmp11;                     /* c10 = c6-c12 */
 801595a:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801595e:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015962:	4413      	add	r3, r2
 8015964:	f8c7 3204 	str.w	r3, [r7, #516]	; 0x204
    tmp27 = z1 - tmp11 - tmp11;             /* c0 = (c6-c12)*2 */
 8015968:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801596c:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015970:	1ad2      	subs	r2, r2, r3
 8015972:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015976:	1ad3      	subs	r3, r2, r3
 8015978:	f8c7 3200 	str.w	r3, [r7, #512]	; 0x200

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801597c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015980:	3304      	adds	r3, #4
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z2 = (INT32) wsptr[3];
 8015988:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801598c:	330c      	adds	r3, #12
 801598e:	681b      	ldr	r3, [r3, #0]
 8015990:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = (INT32) wsptr[5];
 8015994:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015998:	3314      	adds	r3, #20
 801599a:	681b      	ldr	r3, [r3, #0]
 801599c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 = MULTIPLY(z4, FIX(1.224744871));                    /* c5 */
 80159a0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80159a4:	f242 7231 	movw	r2, #10033	; 0x2731
 80159a8:	fb02 f303 	mul.w	r3, r2, r3
 80159ac:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z4 = (INT32) wsptr[7];
 80159b0:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80159b4:	331c      	adds	r3, #28
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp13 = z2 - z4;
 80159bc:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80159c0:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80159c4:	1ad3      	subs	r3, r2, r3
 80159c6:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 = MULTIPLY(z1 + tmp13, FIX(0.831253876));         /* c9 */
 80159ca:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80159ce:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80159d2:	4413      	add	r3, r2
 80159d4:	f641 229a 	movw	r2, #6810	; 0x1a9a
 80159d8:	fb02 f303 	mul.w	r3, r2, r3
 80159dc:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    tmp11 = tmp15 + MULTIPLY(z1, FIX(0.513743148));         /* c3-c9 */
 80159e0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80159e4:	f241 0271 	movw	r2, #4209	; 0x1071
 80159e8:	fb02 f303 	mul.w	r3, r2, r3
 80159ec:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 80159f0:	4413      	add	r3, r2
 80159f2:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp14 = tmp15 - MULTIPLY(tmp13, FIX(2.176250899));      /* c3+c9 */
 80159f6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 80159fa:	4abe      	ldr	r2, [pc, #760]	; (8015cf4 <jpeg_idct_15x15+0xaf4>)
 80159fc:	fb02 f303 	mul.w	r3, r2, r3
 8015a00:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8015a04:	4413      	add	r3, r2
 8015a06:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8

    tmp13 = MULTIPLY(z2, - FIX(0.831253876));               /* -c9 */
 8015a0a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015a0e:	4aba      	ldr	r2, [pc, #744]	; (8015cf8 <jpeg_idct_15x15+0xaf8>)
 8015a10:	fb02 f303 	mul.w	r3, r2, r3
 8015a14:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 = MULTIPLY(z2, - FIX(1.344997024));               /* -c3 */
 8015a18:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015a1c:	4ab7      	ldr	r2, [pc, #732]	; (8015cfc <jpeg_idct_15x15+0xafc>)
 8015a1e:	fb02 f303 	mul.w	r3, r2, r3
 8015a22:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
    z2 = z1 - z4;
 8015a26:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015a2a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015a2e:	1ad3      	subs	r3, r2, r3
 8015a30:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = z3 + MULTIPLY(z2, FIX(1.406466353));            /* c1 */
 8015a34:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015a38:	f642 5202 	movw	r2, #11522	; 0x2d02
 8015a3c:	fb02 f303 	mul.w	r3, r2, r3
 8015a40:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8015a44:	4413      	add	r3, r2
 8015a46:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224

    tmp10 = tmp12 + MULTIPLY(z4, FIX(2.457431844)) - tmp15; /* c1+c7 */
 8015a4a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015a4e:	f644 62a3 	movw	r2, #20131	; 0x4ea3
 8015a52:	fb02 f203 	mul.w	r2, r2, r3
 8015a56:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015a5a:	441a      	add	r2, r3
 8015a5c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8015a60:	1ad3      	subs	r3, r2, r3
 8015a62:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp16 = tmp12 - MULTIPLY(z1, FIX(1.112434820)) + tmp13; /* c1-c13 */
 8015a66:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015a6a:	4aa5      	ldr	r2, [pc, #660]	; (8015d00 <jpeg_idct_15x15+0xb00>)
 8015a6c:	fb02 f203 	mul.w	r2, r2, r3
 8015a70:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015a74:	4413      	add	r3, r2
 8015a76:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015a7a:	4413      	add	r3, r2
 8015a7c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
    tmp12 = MULTIPLY(z2, FIX(1.224744871)) - z3;            /* c5 */
 8015a80:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015a84:	f242 7231 	movw	r2, #10033	; 0x2731
 8015a88:	fb02 f203 	mul.w	r2, r2, r3
 8015a8c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015a90:	1ad3      	subs	r3, r2, r3
 8015a92:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    z2 = MULTIPLY(z1 + z4, FIX(0.575212477));               /* c11 */
 8015a96:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8015a9a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015a9e:	4413      	add	r3, r2
 8015aa0:	f241 2268 	movw	r2, #4712	; 0x1268
 8015aa4:	fb02 f303 	mul.w	r3, r2, r3
 8015aa8:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp13 += z2 + MULTIPLY(z1, FIX(0.475753014)) - z3;      /* c7-c11 */
 8015aac:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015ab0:	f640 7239 	movw	r2, #3897	; 0xf39
 8015ab4:	fb02 f203 	mul.w	r2, r2, r3
 8015ab8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015abc:	441a      	add	r2, r3
 8015abe:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015ac2:	1ad3      	subs	r3, r2, r3
 8015ac4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8015ac8:	4413      	add	r3, r2
 8015aca:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp15 += z2 - MULTIPLY(z4, FIX(0.869244010)) + z3;      /* c11+c13 */
 8015ace:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015ad2:	4a8c      	ldr	r2, [pc, #560]	; (8015d04 <jpeg_idct_15x15+0xb04>)
 8015ad4:	fb02 f203 	mul.w	r2, r2, r3
 8015ad8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015adc:	441a      	add	r2, r3
 8015ade:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015ae2:	4413      	add	r3, r2
 8015ae4:	f8d7 21fc 	ldr.w	r2, [r7, #508]	; 0x1fc
 8015ae8:	4413      	add	r3, r2
 8015aea:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015aee:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8015af2:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015af6:	4413      	add	r3, r2
 8015af8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015afa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8015afe:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015b02:	4413      	add	r3, r2
 8015b04:	781a      	ldrb	r2, [r3, #0]
 8015b06:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015b0a:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015b0c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8015b10:	f8d7 322c 	ldr.w	r3, [r7, #556]	; 0x22c
 8015b14:	1ad3      	subs	r3, r2, r3
 8015b16:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015b18:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8015b1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015b20:	441a      	add	r2, r3
 8015b22:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015b26:	330e      	adds	r3, #14
 8015b28:	7812      	ldrb	r2, [r2, #0]
 8015b2a:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015b2c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8015b30:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015b34:	4413      	add	r3, r2
 8015b36:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015b38:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8015b3c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015b40:	441a      	add	r2, r3
 8015b42:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015b46:	3301      	adds	r3, #1
 8015b48:	7812      	ldrb	r2, [r2, #0]
 8015b4a:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015b4c:	f8d7 220c 	ldr.w	r2, [r7, #524]	; 0x20c
 8015b50:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 8015b54:	1ad3      	subs	r3, r2, r3
 8015b56:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015b58:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8015b5c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015b60:	441a      	add	r2, r3
 8015b62:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015b66:	330d      	adds	r3, #13
 8015b68:	7812      	ldrb	r2, [r2, #0]
 8015b6a:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015b6c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8015b70:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015b74:	4413      	add	r3, r2
 8015b76:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015b78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8015b7c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015b80:	441a      	add	r2, r3
 8015b82:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015b86:	3302      	adds	r3, #2
 8015b88:	7812      	ldrb	r2, [r2, #0]
 8015b8a:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015b8c:	f8d7 2204 	ldr.w	r2, [r7, #516]	; 0x204
 8015b90:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 8015b94:	1ad3      	subs	r3, r2, r3
 8015b96:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015b98:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8015b9c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015ba0:	441a      	add	r2, r3
 8015ba2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015ba6:	330c      	adds	r3, #12
 8015ba8:	7812      	ldrb	r2, [r2, #0]
 8015baa:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8015bac:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8015bb0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8015bb4:	4413      	add	r3, r2
 8015bb6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015bb8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8015bbc:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015bc0:	441a      	add	r2, r3
 8015bc2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015bc6:	3303      	adds	r3, #3
 8015bc8:	7812      	ldrb	r2, [r2, #0]
 8015bca:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015bcc:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8015bd0:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 8015bd4:	1ad3      	subs	r3, r2, r3
 8015bd6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015bd8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8015bdc:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015be0:	441a      	add	r2, r3
 8015be2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015be6:	330b      	adds	r3, #11
 8015be8:	7812      	ldrb	r2, [r2, #0]
 8015bea:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015bec:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8015bf0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015bf4:	4413      	add	r3, r2
 8015bf6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015bf8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8015bfc:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015c00:	441a      	add	r2, r3
 8015c02:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015c06:	3304      	adds	r3, #4
 8015c08:	7812      	ldrb	r2, [r2, #0]
 8015c0a:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8015c0c:	f8d7 2208 	ldr.w	r2, [r7, #520]	; 0x208
 8015c10:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8015c14:	1ad3      	subs	r3, r2, r3
 8015c16:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015c18:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8015c1c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015c20:	441a      	add	r2, r3
 8015c22:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015c26:	330a      	adds	r3, #10
 8015c28:	7812      	ldrb	r2, [r2, #0]
 8015c2a:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8015c2c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8015c30:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8015c34:	4413      	add	r3, r2
 8015c36:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015c38:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8015c3c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015c40:	441a      	add	r2, r3
 8015c42:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015c46:	3305      	adds	r3, #5
 8015c48:	7812      	ldrb	r2, [r2, #0]
 8015c4a:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8015c4c:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8015c50:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8015c54:	1ad3      	subs	r3, r2, r3
 8015c56:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015c58:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8015c5c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015c60:	441a      	add	r2, r3
 8015c62:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015c66:	3309      	adds	r3, #9
 8015c68:	7812      	ldrb	r2, [r2, #0]
 8015c6a:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8015c6c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8015c70:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8015c74:	4413      	add	r3, r2
 8015c76:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015c78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8015c7c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015c80:	441a      	add	r2, r3
 8015c82:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015c86:	3306      	adds	r3, #6
 8015c88:	7812      	ldrb	r2, [r2, #0]
 8015c8a:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8015c8c:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8015c90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8015c94:	1ad3      	subs	r3, r2, r3
 8015c96:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015c98:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8015c9c:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015ca0:	441a      	add	r2, r3
 8015ca2:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015ca6:	3308      	adds	r3, #8
 8015ca8:	7812      	ldrb	r2, [r2, #0]
 8015caa:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8015cac:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8015cb0:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8015cb2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27,
 8015cb6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015cba:	441a      	add	r2, r3
 8015cbc:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8015cc0:	3307      	adds	r3, #7
 8015cc2:	7812      	ldrb	r2, [r2, #0]
 8015cc4:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8015cc6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8015cca:	3320      	adds	r3, #32
 8015ccc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
  for (ctr = 0; ctr < 15; ctr++) {
 8015cd0:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8015cd4:	3301      	adds	r3, #1
 8015cd6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
 8015cda:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8015cde:	2b0e      	cmp	r3, #14
 8015ce0:	f77f ad5c 	ble.w	801579c <jpeg_idct_15x15+0x59c>
  }
}
 8015ce4:	bf00      	nop
 8015ce6:	bf00      	nop
 8015ce8:	f507 7716 	add.w	r7, r7, #600	; 0x258
 8015cec:	46bd      	mov	sp, r7
 8015cee:	bc90      	pop	{r4, r7}
 8015cf0:	4770      	bx	lr
 8015cf2:	bf00      	nop
 8015cf4:	ffffba5c 	.word	0xffffba5c
 8015cf8:	ffffe566 	.word	0xffffe566
 8015cfc:	ffffd4f6 	.word	0xffffd4f6
 8015d00:	ffffdc67 	.word	0xffffdc67
 8015d04:	ffffe42f 	.word	0xffffe42f

08015d08 <jpeg_idct_16x16>:

GLOBAL(void)
jpeg_idct_16x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		 JCOEFPTR coef_block,
		 JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8015d08:	b490      	push	{r4, r7}
 8015d0a:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 8015d0e:	af00      	add	r7, sp, #0
 8015d10:	f107 040c 	add.w	r4, r7, #12
 8015d14:	6020      	str	r0, [r4, #0]
 8015d16:	f107 0008 	add.w	r0, r7, #8
 8015d1a:	6001      	str	r1, [r0, #0]
 8015d1c:	1d39      	adds	r1, r7, #4
 8015d1e:	600a      	str	r2, [r1, #0]
 8015d20:	463a      	mov	r2, r7
 8015d22:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8015d24:	f107 030c 	add.w	r3, r7, #12
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8015d2e:	3380      	adds	r3, #128	; 0x80
 8015d30:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  int workspace[8*16];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8015d34:	1d3b      	adds	r3, r7, #4
 8015d36:	681b      	ldr	r3, [r3, #0]
 8015d38:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8015d3c:	f107 0308 	add.w	r3, r7, #8
 8015d40:	681b      	ldr	r3, [r3, #0]
 8015d42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8015d44:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  wsptr = workspace;
 8015d48:	f107 0310 	add.w	r3, r7, #16
 8015d4c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8015d50:	2300      	movs	r3, #0
 8015d52:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8015d56:	e30b      	b.n	8016370 <jpeg_idct_16x16+0x668>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8015d58:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015d5c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d60:	461a      	mov	r2, r3
 8015d62:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8015d66:	681b      	ldr	r3, [r3, #0]
 8015d68:	fb03 f302 	mul.w	r3, r3, r2
 8015d6c:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp0 <<= CONST_BITS;
 8015d70:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8015d74:	035b      	lsls	r3, r3, #13
 8015d76:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    /* Add fudge factor here for final descale. */
    tmp0 += 1 << (CONST_BITS-PASS1_BITS-1);
 8015d7a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8015d7e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8015d82:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8015d86:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015d8a:	3340      	adds	r3, #64	; 0x40
 8015d8c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015d90:	461a      	mov	r2, r3
 8015d92:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8015d96:	3380      	adds	r3, #128	; 0x80
 8015d98:	681b      	ldr	r3, [r3, #0]
 8015d9a:	fb03 f302 	mul.w	r3, r3, r2
 8015d9e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8015da2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8015da6:	f642 12cf 	movw	r2, #10703	; 0x29cf
 8015daa:	fb02 f303 	mul.w	r3, r2, r3
 8015dae:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8015db2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8015db6:	f241 1251 	movw	r2, #4433	; 0x1151
 8015dba:	fb02 f303 	mul.w	r3, r2, r3
 8015dbe:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

    tmp10 = tmp0 + tmp1;
 8015dc2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8015dc6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015dca:	4413      	add	r3, r2
 8015dcc:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 = tmp0 - tmp1;
 8015dd0:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8015dd4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015dd8:	1ad3      	subs	r3, r2, r3
 8015dda:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 = tmp0 + tmp2;
 8015dde:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8015de2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015de6:	4413      	add	r3, r2
 8015de8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp13 = tmp0 - tmp2;
 8015dec:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8015df0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015df4:	1ad3      	subs	r3, r2, r3
 8015df6:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8015dfa:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015dfe:	3320      	adds	r3, #32
 8015e00:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e04:	461a      	mov	r2, r3
 8015e06:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8015e0a:	3340      	adds	r3, #64	; 0x40
 8015e0c:	681b      	ldr	r3, [r3, #0]
 8015e0e:	fb03 f302 	mul.w	r3, r3, r2
 8015e12:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8015e16:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015e1a:	3360      	adds	r3, #96	; 0x60
 8015e1c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015e20:	461a      	mov	r2, r3
 8015e22:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8015e26:	33c0      	adds	r3, #192	; 0xc0
 8015e28:	681b      	ldr	r3, [r3, #0]
 8015e2a:	fb03 f302 	mul.w	r3, r3, r2
 8015e2e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z3 = z1 - z2;
 8015e32:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8015e36:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015e3a:	1ad3      	subs	r3, r2, r3
 8015e3c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8015e40:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015e44:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8015e48:	fb02 f303 	mul.w	r3, r2, r3
 8015e4c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8015e50:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015e54:	f642 4263 	movw	r2, #11363	; 0x2c63
 8015e58:	fb02 f303 	mul.w	r3, r2, r3
 8015e5c:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8015e60:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015e64:	f245 2203 	movw	r2, #20995	; 0x5203
 8015e68:	fb02 f303 	mul.w	r3, r2, r3
 8015e6c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8015e70:	4413      	add	r3, r2
 8015e72:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8015e76:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8015e7a:	f641 42cd 	movw	r2, #7373	; 0x1ccd
 8015e7e:	fb02 f303 	mul.w	r3, r2, r3
 8015e82:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8015e86:	4413      	add	r3, r2
 8015e88:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8015e8c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8015e90:	4af4      	ldr	r2, [pc, #976]	; (8016264 <jpeg_idct_16x16+0x55c>)
 8015e92:	fb02 f303 	mul.w	r3, r2, r3
 8015e96:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8015e9a:	4413      	add	r3, r2
 8015e9c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8015ea0:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015ea4:	4af0      	ldr	r2, [pc, #960]	; (8016268 <jpeg_idct_16x16+0x560>)
 8015ea6:	fb02 f303 	mul.w	r3, r2, r3
 8015eaa:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8015eae:	4413      	add	r3, r2
 8015eb0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp20 = tmp10 + tmp0;
 8015eb4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8015eb8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8015ebc:	4413      	add	r3, r2
 8015ebe:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp27 = tmp10 - tmp0;
 8015ec2:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8015ec6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8015eca:	1ad3      	subs	r3, r2, r3
 8015ecc:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp21 = tmp12 + tmp1;
 8015ed0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015ed4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015ed8:	4413      	add	r3, r2
 8015eda:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp26 = tmp12 - tmp1;
 8015ede:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8015ee2:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8015ee6:	1ad3      	subs	r3, r2, r3
 8015ee8:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp22 = tmp13 + tmp2;
 8015eec:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8015ef0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015ef4:	4413      	add	r3, r2
 8015ef6:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp25 = tmp13 - tmp2;
 8015efa:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8015efe:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8015f02:	1ad3      	subs	r3, r2, r3
 8015f04:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    tmp23 = tmp11 + tmp3;
 8015f08:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8015f0c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015f10:	4413      	add	r3, r2
 8015f12:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp24 = tmp11 - tmp3;
 8015f16:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8015f1a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8015f1e:	1ad3      	subs	r3, r2, r3
 8015f20:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8015f24:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015f28:	3310      	adds	r3, #16
 8015f2a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f2e:	461a      	mov	r2, r3
 8015f30:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8015f34:	3320      	adds	r3, #32
 8015f36:	681b      	ldr	r3, [r3, #0]
 8015f38:	fb03 f302 	mul.w	r3, r3, r2
 8015f3c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8015f40:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015f44:	3330      	adds	r3, #48	; 0x30
 8015f46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f4a:	461a      	mov	r2, r3
 8015f4c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8015f50:	3360      	adds	r3, #96	; 0x60
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	fb03 f302 	mul.w	r3, r3, r2
 8015f58:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8015f5c:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015f60:	3350      	adds	r3, #80	; 0x50
 8015f62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f66:	461a      	mov	r2, r3
 8015f68:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8015f6c:	33a0      	adds	r3, #160	; 0xa0
 8015f6e:	681b      	ldr	r3, [r3, #0]
 8015f70:	fb03 f302 	mul.w	r3, r3, r2
 8015f74:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8015f78:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8015f7c:	3370      	adds	r3, #112	; 0x70
 8015f7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015f82:	461a      	mov	r2, r3
 8015f84:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8015f88:	33e0      	adds	r3, #224	; 0xe0
 8015f8a:	681b      	ldr	r3, [r3, #0]
 8015f8c:	fb03 f302 	mul.w	r3, r3, r2
 8015f90:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

    tmp11 = z1 + z3;
 8015f94:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8015f98:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8015f9c:	4413      	add	r3, r2
 8015f9e:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8015fa2:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8015fa6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8015faa:	4413      	add	r3, r2
 8015fac:	f642 324e 	movw	r2, #11086	; 0x2b4e
 8015fb0:	fb02 f303 	mul.w	r3, r2, r3
 8015fb4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 8015fb8:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8015fbc:	f242 72e9 	movw	r2, #10217	; 0x27e9
 8015fc0:	fb02 f303 	mul.w	r3, r2, r3
 8015fc4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 8015fc8:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8015fcc:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015fd0:	4413      	add	r3, r2
 8015fd2:	f242 22fc 	movw	r2, #8956	; 0x22fc
 8015fd6:	fb02 f303 	mul.w	r3, r2, r3
 8015fda:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8015fde:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8015fe2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8015fe6:	1ad3      	subs	r3, r2, r3
 8015fe8:	f641 42b6 	movw	r2, #7350	; 0x1cb6
 8015fec:	fb02 f303 	mul.w	r3, r2, r3
 8015ff0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8015ff4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8015ff8:	f241 5255 	movw	r2, #5461	; 0x1555
 8015ffc:	fb02 f303 	mul.w	r3, r2, r3
 8016000:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8016004:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8016008:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801600c:	1ad3      	subs	r3, r2, r3
 801600e:	f640 5223 	movw	r2, #3363	; 0xd23
 8016012:	fb02 f303 	mul.w	r3, r2, r3
 8016016:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp0  = tmp1 + tmp2 + tmp3 -
 801601a:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801601e:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016022:	441a      	add	r2, r3
 8016024:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8016028:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801602a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801602e:	498f      	ldr	r1, [pc, #572]	; (801626c <jpeg_idct_16x16+0x564>)
 8016030:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8016034:	4413      	add	r3, r2
 8016036:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp13 = tmp10 + tmp11 + tmp12 -
 801603a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801603e:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8016042:	441a      	add	r2, r3
 8016044:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8016048:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801604a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801604e:	4988      	ldr	r1, [pc, #544]	; (8016270 <jpeg_idct_16x16+0x568>)
 8016050:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 8016054:	4413      	add	r3, r2
 8016056:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801605a:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 801605e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016062:	4413      	add	r3, r2
 8016064:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8016068:	fb02 f303 	mul.w	r3, r2, r3
 801606c:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8016070:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016074:	f240 224d 	movw	r2, #589	; 0x24d
 8016078:	fb02 f203 	mul.w	r2, r2, r3
 801607c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016080:	4413      	add	r3, r2
 8016082:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8016086:	4413      	add	r3, r2
 8016088:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801608c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016090:	4a78      	ldr	r2, [pc, #480]	; (8016274 <jpeg_idct_16x16+0x56c>)
 8016092:	fb02 f203 	mul.w	r2, r2, r3
 8016096:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801609a:	4413      	add	r3, r2
 801609c:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80160a0:	4413      	add	r3, r2
 80160a2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80160a6:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 80160aa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80160ae:	1ad3      	subs	r3, r2, r3
 80160b0:	f642 5209 	movw	r2, #11529	; 0x2d09
 80160b4:	fb02 f303 	mul.w	r3, r2, r3
 80160b8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80160bc:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80160c0:	4a6d      	ldr	r2, [pc, #436]	; (8016278 <jpeg_idct_16x16+0x570>)
 80160c2:	fb02 f203 	mul.w	r2, r2, r3
 80160c6:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80160ca:	4413      	add	r3, r2
 80160cc:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80160d0:	4413      	add	r3, r2
 80160d2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80160d6:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80160da:	f643 721a 	movw	r2, #16154	; 0x3f1a
 80160de:	fb02 f203 	mul.w	r2, r2, r3
 80160e2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80160e6:	4413      	add	r3, r2
 80160e8:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80160ec:	4413      	add	r3, r2
 80160ee:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    z2    += z4;
 80160f2:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80160f6:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80160fa:	4413      	add	r3, r2
 80160fc:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8016100:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016104:	4a5d      	ldr	r2, [pc, #372]	; (801627c <jpeg_idct_16x16+0x574>)
 8016106:	fb02 f303 	mul.w	r3, r2, r3
 801610a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1  += z1;
 801610e:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8016112:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016116:	4413      	add	r3, r2
 8016118:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 801611c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8016120:	f242 2218 	movw	r2, #8728	; 0x2218
 8016124:	fb02 f203 	mul.w	r2, r2, r3
 8016128:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801612c:	4413      	add	r3, r2
 801612e:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8016132:	4413      	add	r3, r2
 8016134:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8016138:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801613c:	4a50      	ldr	r2, [pc, #320]	; (8016280 <jpeg_idct_16x16+0x578>)
 801613e:	fb02 f303 	mul.w	r3, r2, r3
 8016142:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8016146:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801614a:	f246 4285 	movw	r2, #25733	; 0x6485
 801614e:	fb02 f203 	mul.w	r2, r2, r3
 8016152:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016156:	4413      	add	r3, r2
 8016158:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801615c:	4413      	add	r3, r2
 801615e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp12 += z2;
 8016162:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8016166:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801616a:	4413      	add	r3, r2
 801616c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8016170:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016174:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8016178:	4413      	add	r3, r2
 801617a:	4a42      	ldr	r2, [pc, #264]	; (8016284 <jpeg_idct_16x16+0x57c>)
 801617c:	fb02 f303 	mul.w	r3, r2, r3
 8016180:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp2  += z2;
 8016184:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8016188:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801618c:	4413      	add	r3, r2
 801618e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  += z2;
 8016192:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8016196:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801619a:	4413      	add	r3, r2
 801619c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80161a0:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80161a4:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 80161a8:	1ad3      	subs	r3, r2, r3
 80161aa:	f640 5223 	movw	r2, #3363	; 0xd23
 80161ae:	fb02 f303 	mul.w	r3, r2, r3
 80161b2:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp10 += z2;
 80161b6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80161ba:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80161be:	4413      	add	r3, r2
 80161c0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 += z2;
 80161c4:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 80161c8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80161cc:	4413      	add	r3, r2
 80161ce:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 80161d2:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 80161d6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80161da:	4413      	add	r3, r2
 80161dc:	12da      	asrs	r2, r3, #11
 80161de:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80161e2:	601a      	str	r2, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 80161e4:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 80161e8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80161ec:	1ad2      	subs	r2, r2, r3
 80161ee:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80161f2:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 80161f6:	12d2      	asrs	r2, r2, #11
 80161f8:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 80161fa:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80161fe:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016202:	441a      	add	r2, r3
 8016204:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016208:	3320      	adds	r3, #32
 801620a:	12d2      	asrs	r2, r2, #11
 801620c:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 801620e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8016212:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8016216:	1ad2      	subs	r2, r2, r3
 8016218:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801621c:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8016220:	12d2      	asrs	r2, r2, #11
 8016222:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8016224:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8016228:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801622c:	441a      	add	r2, r3
 801622e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016232:	3340      	adds	r3, #64	; 0x40
 8016234:	12d2      	asrs	r2, r2, #11
 8016236:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 8016238:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801623c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016240:	1ad2      	subs	r2, r2, r3
 8016242:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016246:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801624a:	12d2      	asrs	r2, r2, #11
 801624c:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 801624e:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8016252:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8016256:	441a      	add	r2, r3
 8016258:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801625c:	3360      	adds	r3, #96	; 0x60
 801625e:	12d2      	asrs	r2, r2, #11
 8016260:	e012      	b.n	8016288 <jpeg_idct_16x16+0x580>
 8016262:	bf00      	nop
 8016264:	ffffecc2 	.word	0xffffecc2
 8016268:	ffffefb0 	.word	0xffffefb0
 801626c:	ffffb6d6 	.word	0xffffb6d6
 8016270:	ffffc542 	.word	0xffffc542
 8016274:	ffffdbfa 	.word	0xffffdbfa
 8016278:	ffffe77a 	.word	0xffffe77a
 801627c:	ffffeaab 	.word	0xffffeaab
 8016280:	ffffd817 	.word	0xffffd817
 8016284:	ffffd4b2 	.word	0xffffd4b2
 8016288:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 801628a:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801628e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8016292:	1ad2      	subs	r2, r2, r3
 8016294:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016298:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 801629c:	12d2      	asrs	r2, r2, #11
 801629e:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 80162a0:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80162a4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80162a8:	441a      	add	r2, r3
 80162aa:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80162ae:	3380      	adds	r3, #128	; 0x80
 80162b0:	12d2      	asrs	r2, r2, #11
 80162b2:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 80162b4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80162b8:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80162bc:	1ad2      	subs	r2, r2, r3
 80162be:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80162c2:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 80162c6:	12d2      	asrs	r2, r2, #11
 80162c8:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 80162ca:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80162ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80162d2:	441a      	add	r2, r3
 80162d4:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80162d8:	33a0      	adds	r3, #160	; 0xa0
 80162da:	12d2      	asrs	r2, r2, #11
 80162dc:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 80162de:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80162e2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80162e6:	1ad2      	subs	r2, r2, r3
 80162e8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80162ec:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 80162f0:	12d2      	asrs	r2, r2, #11
 80162f2:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 80162f4:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 80162f8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 80162fc:	441a      	add	r2, r3
 80162fe:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016302:	33c0      	adds	r3, #192	; 0xc0
 8016304:	12d2      	asrs	r2, r2, #11
 8016306:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8016308:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801630c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8016310:	1ad2      	subs	r2, r2, r3
 8016312:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016316:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801631a:	12d2      	asrs	r2, r2, #11
 801631c:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 801631e:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8016322:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8016326:	441a      	add	r2, r3
 8016328:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801632c:	33e0      	adds	r3, #224	; 0xe0
 801632e:	12d2      	asrs	r2, r2, #11
 8016330:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8016332:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8016336:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801633a:	1ad2      	subs	r2, r2, r3
 801633c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016340:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8016344:	12d2      	asrs	r2, r2, #11
 8016346:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8016348:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801634c:	3301      	adds	r3, #1
 801634e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8016352:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8016356:	3302      	adds	r3, #2
 8016358:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 801635c:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8016360:	3304      	adds	r3, #4
 8016362:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8016366:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801636a:	3304      	adds	r3, #4
 801636c:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8016370:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8016374:	2b07      	cmp	r3, #7
 8016376:	f77f acef 	ble.w	8015d58 <jpeg_idct_16x16+0x50>
  }

  /* Pass 2: process 16 rows from work array, store into output array. */

  wsptr = workspace;
 801637a:	f107 0310 	add.w	r3, r7, #16
 801637e:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 8016382:	2300      	movs	r3, #0
 8016384:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8016388:	e320      	b.n	80169cc <jpeg_idct_16x16+0xcc4>
    outptr = output_buf[ctr] + output_col;
 801638a:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 801638e:	009b      	lsls	r3, r3, #2
 8016390:	463a      	mov	r2, r7
 8016392:	6812      	ldr	r2, [r2, #0]
 8016394:	4413      	add	r3, r2
 8016396:	681a      	ldr	r2, [r3, #0]
 8016398:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 801639c:	4413      	add	r3, r2
 801639e:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80163a2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80163a6:	681b      	ldr	r3, [r3, #0]
 80163a8:	3310      	adds	r3, #16
 80163aa:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp0 <<= CONST_BITS;
 80163ae:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80163b2:	035b      	lsls	r3, r3, #13
 80163b4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c

    z1 = (INT32) wsptr[4];
 80163b8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80163bc:	3310      	adds	r3, #16
 80163be:	681b      	ldr	r3, [r3, #0]
 80163c0:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80163c4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80163c8:	f642 12cf 	movw	r2, #10703	; 0x29cf
 80163cc:	fb02 f303 	mul.w	r3, r2, r3
 80163d0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 80163d4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80163d8:	f241 1251 	movw	r2, #4433	; 0x1151
 80163dc:	fb02 f303 	mul.w	r3, r2, r3
 80163e0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

    tmp10 = tmp0 + tmp1;
 80163e4:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80163e8:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80163ec:	4413      	add	r3, r2
 80163ee:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 = tmp0 - tmp1;
 80163f2:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80163f6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80163fa:	1ad3      	subs	r3, r2, r3
 80163fc:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 = tmp0 + tmp2;
 8016400:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8016404:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016408:	4413      	add	r3, r2
 801640a:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp13 = tmp0 - tmp2;
 801640e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8016412:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016416:	1ad3      	subs	r3, r2, r3
 8016418:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240

    z1 = (INT32) wsptr[2];
 801641c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016420:	3308      	adds	r3, #8
 8016422:	681b      	ldr	r3, [r3, #0]
 8016424:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 = (INT32) wsptr[6];
 8016428:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801642c:	3318      	adds	r3, #24
 801642e:	681b      	ldr	r3, [r3, #0]
 8016430:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z3 = z1 - z2;
 8016434:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8016438:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801643c:	1ad3      	subs	r3, r2, r3
 801643e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8016442:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016446:	f640 02d4 	movw	r2, #2260	; 0x8d4
 801644a:	fb02 f303 	mul.w	r3, r2, r3
 801644e:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8016452:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016456:	f642 4263 	movw	r2, #11363	; 0x2c63
 801645a:	fb02 f303 	mul.w	r3, r2, r3
 801645e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8016462:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016466:	f245 2203 	movw	r2, #20995	; 0x5203
 801646a:	fb02 f303 	mul.w	r3, r2, r3
 801646e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016472:	4413      	add	r3, r2
 8016474:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8016478:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801647c:	f641 42cd 	movw	r2, #7373	; 0x1ccd
 8016480:	fb02 f303 	mul.w	r3, r2, r3
 8016484:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8016488:	4413      	add	r3, r2
 801648a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 801648e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016492:	4af4      	ldr	r2, [pc, #976]	; (8016864 <jpeg_idct_16x16+0xb5c>)
 8016494:	fb02 f303 	mul.w	r3, r2, r3
 8016498:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801649c:	4413      	add	r3, r2
 801649e:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80164a2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80164a6:	4af0      	ldr	r2, [pc, #960]	; (8016868 <jpeg_idct_16x16+0xb60>)
 80164a8:	fb02 f303 	mul.w	r3, r2, r3
 80164ac:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80164b0:	4413      	add	r3, r2
 80164b2:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp20 = tmp10 + tmp0;
 80164b6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80164ba:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80164be:	4413      	add	r3, r2
 80164c0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp27 = tmp10 - tmp0;
 80164c4:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80164c8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80164cc:	1ad3      	subs	r3, r2, r3
 80164ce:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp21 = tmp12 + tmp1;
 80164d2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80164d6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80164da:	4413      	add	r3, r2
 80164dc:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp26 = tmp12 - tmp1;
 80164e0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80164e4:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80164e8:	1ad3      	subs	r3, r2, r3
 80164ea:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp22 = tmp13 + tmp2;
 80164ee:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80164f2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80164f6:	4413      	add	r3, r2
 80164f8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp25 = tmp13 - tmp2;
 80164fc:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8016500:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8016504:	1ad3      	subs	r3, r2, r3
 8016506:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    tmp23 = tmp11 + tmp3;
 801650a:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801650e:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8016512:	4413      	add	r3, r2
 8016514:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp24 = tmp11 - tmp3;
 8016518:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801651c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8016520:	1ad3      	subs	r3, r2, r3
 8016522:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8016526:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801652a:	3304      	adds	r3, #4
 801652c:	681b      	ldr	r3, [r3, #0]
 801652e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 = (INT32) wsptr[3];
 8016532:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016536:	330c      	adds	r3, #12
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z3 = (INT32) wsptr[5];
 801653e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8016542:	3314      	adds	r3, #20
 8016544:	681b      	ldr	r3, [r3, #0]
 8016546:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    z4 = (INT32) wsptr[7];
 801654a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801654e:	331c      	adds	r3, #28
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234

    tmp11 = z1 + z3;
 8016556:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801655a:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801655e:	4413      	add	r3, r2
 8016560:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 8016564:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8016568:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801656c:	4413      	add	r3, r2
 801656e:	f642 324e 	movw	r2, #11086	; 0x2b4e
 8016572:	fb02 f303 	mul.w	r3, r2, r3
 8016576:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801657a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801657e:	f242 72e9 	movw	r2, #10217	; 0x27e9
 8016582:	fb02 f303 	mul.w	r3, r2, r3
 8016586:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801658a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 801658e:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8016592:	4413      	add	r3, r2
 8016594:	f242 22fc 	movw	r2, #8956	; 0x22fc
 8016598:	fb02 f303 	mul.w	r3, r2, r3
 801659c:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80165a0:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 80165a4:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80165a8:	1ad3      	subs	r3, r2, r3
 80165aa:	f641 42b6 	movw	r2, #7350	; 0x1cb6
 80165ae:	fb02 f303 	mul.w	r3, r2, r3
 80165b2:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 80165b6:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80165ba:	f241 5255 	movw	r2, #5461	; 0x1555
 80165be:	fb02 f303 	mul.w	r3, r2, r3
 80165c2:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 80165c6:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 80165ca:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80165ce:	1ad3      	subs	r3, r2, r3
 80165d0:	f640 5223 	movw	r2, #3363	; 0xd23
 80165d4:	fb02 f303 	mul.w	r3, r2, r3
 80165d8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp0  = tmp1 + tmp2 + tmp3 -
 80165dc:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80165e0:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 80165e4:	441a      	add	r2, r3
 80165e6:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80165ea:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 80165ec:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80165f0:	499e      	ldr	r1, [pc, #632]	; (801686c <jpeg_idct_16x16+0xb64>)
 80165f2:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 80165f6:	4413      	add	r3, r2
 80165f8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp13 = tmp10 + tmp11 + tmp12 -
 80165fc:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8016600:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8016604:	441a      	add	r2, r3
 8016606:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801660a:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801660c:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016610:	4997      	ldr	r1, [pc, #604]	; (8016870 <jpeg_idct_16x16+0xb68>)
 8016612:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 8016616:	4413      	add	r3, r2
 8016618:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 801661c:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8016620:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016624:	4413      	add	r3, r2
 8016626:	f44f 628e 	mov.w	r2, #1136	; 0x470
 801662a:	fb02 f303 	mul.w	r3, r2, r3
 801662e:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 8016632:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016636:	f240 224d 	movw	r2, #589	; 0x24d
 801663a:	fb02 f203 	mul.w	r2, r2, r3
 801663e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8016642:	4413      	add	r3, r2
 8016644:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8016648:	4413      	add	r3, r2
 801664a:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 801664e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016652:	4a88      	ldr	r2, [pc, #544]	; (8016874 <jpeg_idct_16x16+0xb6c>)
 8016654:	fb02 f203 	mul.w	r2, r2, r3
 8016658:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801665c:	4413      	add	r3, r2
 801665e:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8016662:	4413      	add	r3, r2
 8016664:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 8016668:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801666c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016670:	1ad3      	subs	r3, r2, r3
 8016672:	f642 5209 	movw	r2, #11529	; 0x2d09
 8016676:	fb02 f303 	mul.w	r3, r2, r3
 801667a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 801667e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8016682:	4a7d      	ldr	r2, [pc, #500]	; (8016878 <jpeg_idct_16x16+0xb70>)
 8016684:	fb02 f203 	mul.w	r2, r2, r3
 8016688:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801668c:	4413      	add	r3, r2
 801668e:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8016692:	4413      	add	r3, r2
 8016694:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 8016698:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801669c:	f643 721a 	movw	r2, #16154	; 0x3f1a
 80166a0:	fb02 f203 	mul.w	r2, r2, r3
 80166a4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80166a8:	4413      	add	r3, r2
 80166aa:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80166ae:	4413      	add	r3, r2
 80166b0:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    z2    += z4;
 80166b4:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 80166b8:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80166bc:	4413      	add	r3, r2
 80166be:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 80166c2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80166c6:	4a6d      	ldr	r2, [pc, #436]	; (801687c <jpeg_idct_16x16+0xb74>)
 80166c8:	fb02 f303 	mul.w	r3, r2, r3
 80166cc:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    tmp1  += z1;
 80166d0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80166d4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80166d8:	4413      	add	r3, r2
 80166da:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 80166de:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 80166e2:	f242 2218 	movw	r2, #8728	; 0x2218
 80166e6:	fb02 f203 	mul.w	r2, r2, r3
 80166ea:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80166ee:	4413      	add	r3, r2
 80166f0:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80166f4:	4413      	add	r3, r2
 80166f6:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 80166fa:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 80166fe:	4a60      	ldr	r2, [pc, #384]	; (8016880 <jpeg_idct_16x16+0xb78>)
 8016700:	fb02 f303 	mul.w	r3, r2, r3
 8016704:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8016708:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801670c:	f246 4285 	movw	r2, #25733	; 0x6485
 8016710:	fb02 f203 	mul.w	r2, r2, r3
 8016714:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016718:	4413      	add	r3, r2
 801671a:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801671e:	4413      	add	r3, r2
 8016720:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp12 += z2;
 8016724:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8016728:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801672c:	4413      	add	r3, r2
 801672e:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 8016732:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8016736:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801673a:	4413      	add	r3, r2
 801673c:	4a51      	ldr	r2, [pc, #324]	; (8016884 <jpeg_idct_16x16+0xb7c>)
 801673e:	fb02 f303 	mul.w	r3, r2, r3
 8016742:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp2  += z2;
 8016746:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 801674a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801674e:	4413      	add	r3, r2
 8016750:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  += z2;
 8016754:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8016758:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801675c:	4413      	add	r3, r2
 801675e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 8016762:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8016766:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801676a:	1ad3      	subs	r3, r2, r3
 801676c:	f640 5223 	movw	r2, #3363	; 0xd23
 8016770:	fb02 f303 	mul.w	r3, r2, r3
 8016774:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp10 += z2;
 8016778:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 801677c:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8016780:	4413      	add	r3, r2
 8016782:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp11 += z2;
 8016786:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801678a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801678e:	4413      	add	r3, r2
 8016790:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 8016794:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 8016798:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801679c:	4413      	add	r3, r2
 801679e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80167a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80167a4:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80167a8:	4413      	add	r3, r2
 80167aa:	781a      	ldrb	r2, [r3, #0]
 80167ac:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80167b0:	701a      	strb	r2, [r3, #0]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80167b2:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 80167b6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80167ba:	1ad3      	subs	r3, r2, r3
 80167bc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80167be:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80167c2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80167c6:	441a      	add	r2, r3
 80167c8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80167cc:	330f      	adds	r3, #15
 80167ce:	7812      	ldrb	r2, [r2, #0]
 80167d0:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80167d2:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80167d6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80167da:	4413      	add	r3, r2
 80167dc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80167de:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 80167e2:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80167e6:	441a      	add	r2, r3
 80167e8:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80167ec:	3301      	adds	r3, #1
 80167ee:	7812      	ldrb	r2, [r2, #0]
 80167f0:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 80167f2:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 80167f6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80167fa:	1ad3      	subs	r3, r2, r3
 80167fc:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80167fe:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 8016802:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8016806:	441a      	add	r2, r3
 8016808:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801680c:	330e      	adds	r3, #14
 801680e:	7812      	ldrb	r2, [r2, #0]
 8016810:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8016812:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8016816:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801681a:	4413      	add	r3, r2
 801681c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801681e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 8016822:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8016826:	441a      	add	r2, r3
 8016828:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801682c:	3302      	adds	r3, #2
 801682e:	7812      	ldrb	r2, [r2, #0]
 8016830:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8016832:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8016836:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801683a:	1ad3      	subs	r3, r2, r3
 801683c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801683e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 8016842:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8016846:	441a      	add	r2, r3
 8016848:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801684c:	330d      	adds	r3, #13
 801684e:	7812      	ldrb	r2, [r2, #0]
 8016850:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8016852:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 8016856:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801685a:	4413      	add	r3, r2
 801685c:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801685e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8016862:	e011      	b.n	8016888 <jpeg_idct_16x16+0xb80>
 8016864:	ffffecc2 	.word	0xffffecc2
 8016868:	ffffefb0 	.word	0xffffefb0
 801686c:	ffffb6d6 	.word	0xffffb6d6
 8016870:	ffffc542 	.word	0xffffc542
 8016874:	ffffdbfa 	.word	0xffffdbfa
 8016878:	ffffe77a 	.word	0xffffe77a
 801687c:	ffffeaab 	.word	0xffffeaab
 8016880:	ffffd817 	.word	0xffffd817
 8016884:	ffffd4b2 	.word	0xffffd4b2
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 8016888:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801688c:	441a      	add	r2, r3
 801688e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016892:	3303      	adds	r3, #3
 8016894:	7812      	ldrb	r2, [r2, #0]
 8016896:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 8016898:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 801689c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80168a0:	1ad3      	subs	r3, r2, r3
 80168a2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80168a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80168a8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80168ac:	441a      	add	r2, r3
 80168ae:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80168b2:	330c      	adds	r3, #12
 80168b4:	7812      	ldrb	r2, [r2, #0]
 80168b6:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80168b8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80168bc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80168c0:	4413      	add	r3, r2
 80168c2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80168c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 80168c8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80168cc:	441a      	add	r2, r3
 80168ce:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80168d2:	3304      	adds	r3, #4
 80168d4:	7812      	ldrb	r2, [r2, #0]
 80168d6:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80168d8:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80168dc:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80168e0:	1ad3      	subs	r3, r2, r3
 80168e2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80168e4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 80168e8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80168ec:	441a      	add	r2, r3
 80168ee:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80168f2:	330b      	adds	r3, #11
 80168f4:	7812      	ldrb	r2, [r2, #0]
 80168f6:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 80168f8:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 80168fc:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8016900:	4413      	add	r3, r2
 8016902:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016904:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8016908:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801690c:	441a      	add	r2, r3
 801690e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016912:	3305      	adds	r3, #5
 8016914:	7812      	ldrb	r2, [r2, #0]
 8016916:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8016918:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801691c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8016920:	1ad3      	subs	r3, r2, r3
 8016922:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016924:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8016928:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801692c:	441a      	add	r2, r3
 801692e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016932:	330a      	adds	r3, #10
 8016934:	7812      	ldrb	r2, [r2, #0]
 8016936:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8016938:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801693c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8016940:	4413      	add	r3, r2
 8016942:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016944:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8016948:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801694c:	441a      	add	r2, r3
 801694e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016952:	3306      	adds	r3, #6
 8016954:	7812      	ldrb	r2, [r2, #0]
 8016956:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8016958:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 801695c:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8016960:	1ad3      	subs	r3, r2, r3
 8016962:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016964:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 8016968:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801696c:	441a      	add	r2, r3
 801696e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016972:	3309      	adds	r3, #9
 8016974:	7812      	ldrb	r2, [r2, #0]
 8016976:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8016978:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801697c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8016980:	4413      	add	r3, r2
 8016982:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8016984:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 8016988:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 801698c:	441a      	add	r2, r3
 801698e:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8016992:	3307      	adds	r3, #7
 8016994:	7812      	ldrb	r2, [r2, #0]
 8016996:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 8016998:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 801699c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80169a0:	1ad3      	subs	r3, r2, r3
 80169a2:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80169a4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80169a8:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 80169ac:	441a      	add	r2, r3
 80169ae:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 80169b2:	3308      	adds	r3, #8
 80169b4:	7812      	ldrb	r2, [r2, #0]
 80169b6:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 80169b8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80169bc:	3320      	adds	r3, #32
 80169be:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 80169c2:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80169c6:	3301      	adds	r3, #1
 80169c8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80169cc:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 80169d0:	2b0f      	cmp	r3, #15
 80169d2:	f77f acda 	ble.w	801638a <jpeg_idct_16x16+0x682>
  }
}
 80169d6:	bf00      	nop
 80169d8:	bf00      	nop
 80169da:	f507 771e 	add.w	r7, r7, #632	; 0x278
 80169de:	46bd      	mov	sp, r7
 80169e0:	bc90      	pop	{r4, r7}
 80169e2:	4770      	bx	lr

080169e4 <jpeg_idct_16x8>:

GLOBAL(void)
jpeg_idct_16x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80169e4:	b490      	push	{r4, r7}
 80169e6:	b0e0      	sub	sp, #384	; 0x180
 80169e8:	af00      	add	r7, sp, #0
 80169ea:	f107 040c 	add.w	r4, r7, #12
 80169ee:	6020      	str	r0, [r4, #0]
 80169f0:	f107 0008 	add.w	r0, r7, #8
 80169f4:	6001      	str	r1, [r0, #0]
 80169f6:	1d39      	adds	r1, r7, #4
 80169f8:	600a      	str	r2, [r1, #0]
 80169fa:	463a      	mov	r2, r7
 80169fc:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80169fe:	f107 030c 	add.w	r3, r7, #12
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8016a08:	3380      	adds	r3, #128	; 0x80
 8016a0a:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 8016a0e:	1d3b      	adds	r3, r7, #4
 8016a10:	681b      	ldr	r3, [r3, #0]
 8016a12:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8016a16:	f107 0308 	add.w	r3, r7, #8
 8016a1a:	681b      	ldr	r3, [r3, #0]
 8016a1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8016a1e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  wsptr = workspace;
 8016a22:	f107 0314 	add.w	r3, r7, #20
 8016a26:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8016a2a:	2308      	movs	r3, #8
 8016a2c:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8016a30:	e238      	b.n	8016ea4 <jpeg_idct_16x8+0x4c0>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */
    
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8016a32:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a36:	3310      	adds	r3, #16
 8016a38:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a3c:	2b00      	cmp	r3, #0
 8016a3e:	d175      	bne.n	8016b2c <jpeg_idct_16x8+0x148>
 8016a40:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a44:	3320      	adds	r3, #32
 8016a46:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	d16e      	bne.n	8016b2c <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8016a4e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a52:	3330      	adds	r3, #48	; 0x30
 8016a54:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 8016a58:	2b00      	cmp	r3, #0
 8016a5a:	d167      	bne.n	8016b2c <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8016a5c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a60:	3340      	adds	r3, #64	; 0x40
 8016a62:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a66:	2b00      	cmp	r3, #0
 8016a68:	d160      	bne.n	8016b2c <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8016a6a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a6e:	3350      	adds	r3, #80	; 0x50
 8016a70:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 8016a74:	2b00      	cmp	r3, #0
 8016a76:	d159      	bne.n	8016b2c <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8016a78:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a7c:	3360      	adds	r3, #96	; 0x60
 8016a7e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a82:	2b00      	cmp	r3, #0
 8016a84:	d152      	bne.n	8016b2c <jpeg_idct_16x8+0x148>
	inptr[DCTSIZE*7] == 0) {
 8016a86:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a8a:	3370      	adds	r3, #112	; 0x70
 8016a8c:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 8016a90:	2b00      	cmp	r3, #0
 8016a92:	d14b      	bne.n	8016b2c <jpeg_idct_16x8+0x148>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 8016a94:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016a98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a9c:	461a      	mov	r2, r3
 8016a9e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	fb03 f302 	mul.w	r3, r3, r2
 8016aa8:	009b      	lsls	r3, r3, #2
 8016aaa:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
      
      wsptr[DCTSIZE*0] = dcval;
 8016aae:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016ab2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016ab6:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*1] = dcval;
 8016ab8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016abc:	3320      	adds	r3, #32
 8016abe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016ac2:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*2] = dcval;
 8016ac4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016ac8:	3340      	adds	r3, #64	; 0x40
 8016aca:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016ace:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*3] = dcval;
 8016ad0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016ad4:	3360      	adds	r3, #96	; 0x60
 8016ad6:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016ada:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*4] = dcval;
 8016adc:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016ae0:	3380      	adds	r3, #128	; 0x80
 8016ae2:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016ae6:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*5] = dcval;
 8016ae8:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016aec:	33a0      	adds	r3, #160	; 0xa0
 8016aee:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016af2:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*6] = dcval;
 8016af4:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016af8:	33c0      	adds	r3, #192	; 0xc0
 8016afa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016afe:	601a      	str	r2, [r3, #0]
      wsptr[DCTSIZE*7] = dcval;
 8016b00:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016b04:	33e0      	adds	r3, #224	; 0xe0
 8016b06:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8016b0a:	601a      	str	r2, [r3, #0]
      
      inptr++;			/* advance pointers to next column */
 8016b0c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016b10:	3302      	adds	r3, #2
 8016b12:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
      quantptr++;
 8016b16:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016b1a:	3304      	adds	r3, #4
 8016b1c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
      wsptr++;
 8016b20:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016b24:	3304      	adds	r3, #4
 8016b26:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
      continue;
 8016b2a:	e1b6      	b.n	8016e9a <jpeg_idct_16x8+0x4b6>
    }
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8016b2c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016b30:	3320      	adds	r3, #32
 8016b32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b36:	461a      	mov	r2, r3
 8016b38:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016b3c:	3340      	adds	r3, #64	; 0x40
 8016b3e:	681b      	ldr	r3, [r3, #0]
 8016b40:	fb03 f302 	mul.w	r3, r3, r2
 8016b44:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8016b48:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016b4c:	3360      	adds	r3, #96	; 0x60
 8016b4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016b52:	461a      	mov	r2, r3
 8016b54:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016b58:	33c0      	adds	r3, #192	; 0xc0
 8016b5a:	681b      	ldr	r3, [r3, #0]
 8016b5c:	fb03 f302 	mul.w	r3, r3, r2
 8016b60:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8016b64:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8016b68:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016b6c:	4413      	add	r3, r2
 8016b6e:	f241 1251 	movw	r2, #4433	; 0x1151
 8016b72:	fb02 f303 	mul.w	r3, r2, r3
 8016b76:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8016b7a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016b7e:	f641 027e 	movw	r2, #6270	; 0x187e
 8016b82:	fb02 f303 	mul.w	r3, r2, r3
 8016b86:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016b8a:	4413      	add	r3, r2
 8016b8c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8016b90:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016b94:	4aca      	ldr	r2, [pc, #808]	; (8016ec0 <jpeg_idct_16x8+0x4dc>)
 8016b96:	fb02 f303 	mul.w	r3, r2, r3
 8016b9a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016b9e:	4413      	add	r3, r2
 8016ba0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8016ba4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016ba8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bac:	461a      	mov	r2, r3
 8016bae:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016bb2:	681b      	ldr	r3, [r3, #0]
 8016bb4:	fb03 f302 	mul.w	r3, r3, r2
 8016bb8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8016bbc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016bc0:	3340      	adds	r3, #64	; 0x40
 8016bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016bc6:	461a      	mov	r2, r3
 8016bc8:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016bcc:	3380      	adds	r3, #128	; 0x80
 8016bce:	681b      	ldr	r3, [r3, #0]
 8016bd0:	fb03 f302 	mul.w	r3, r3, r2
 8016bd4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z2 <<= CONST_BITS;
 8016bd8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016bdc:	035b      	lsls	r3, r3, #13
 8016bde:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 <<= CONST_BITS;
 8016be2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016be6:	035b      	lsls	r3, r3, #13
 8016be8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 8016bec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016bf0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8016bf4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp0 = z2 + z3;
 8016bf8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8016bfc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016c00:	4413      	add	r3, r2
 8016c02:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = z2 - z3;
 8016c06:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8016c0a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016c0e:	1ad3      	subs	r3, r2, r3
 8016c10:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    
    tmp10 = tmp0 + tmp2;
 8016c14:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016c18:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016c1c:	4413      	add	r3, r2
 8016c1e:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp13 = tmp0 - tmp2;
 8016c22:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016c26:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016c2a:	1ad3      	subs	r3, r2, r3
 8016c2c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    tmp11 = tmp1 + tmp3;
 8016c30:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8016c34:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016c38:	4413      	add	r3, r2
 8016c3a:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = tmp1 - tmp3;
 8016c3e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8016c42:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016c46:	1ad3      	subs	r3, r2, r3
 8016c48:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 8016c4c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016c50:	3370      	adds	r3, #112	; 0x70
 8016c52:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c56:	461a      	mov	r2, r3
 8016c58:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016c5c:	33e0      	adds	r3, #224	; 0xe0
 8016c5e:	681b      	ldr	r3, [r3, #0]
 8016c60:	fb03 f302 	mul.w	r3, r3, r2
 8016c64:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8016c68:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016c6c:	3350      	adds	r3, #80	; 0x50
 8016c6e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c72:	461a      	mov	r2, r3
 8016c74:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016c78:	33a0      	adds	r3, #160	; 0xa0
 8016c7a:	681b      	ldr	r3, [r3, #0]
 8016c7c:	fb03 f302 	mul.w	r3, r3, r2
 8016c80:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8016c84:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016c88:	3330      	adds	r3, #48	; 0x30
 8016c8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016c8e:	461a      	mov	r2, r3
 8016c90:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016c94:	3360      	adds	r3, #96	; 0x60
 8016c96:	681b      	ldr	r3, [r3, #0]
 8016c98:	fb03 f302 	mul.w	r3, r3, r2
 8016c9c:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8016ca0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016ca4:	3310      	adds	r3, #16
 8016ca6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016caa:	461a      	mov	r2, r3
 8016cac:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016cb0:	3320      	adds	r3, #32
 8016cb2:	681b      	ldr	r3, [r3, #0]
 8016cb4:	fb03 f302 	mul.w	r3, r3, r2
 8016cb8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    
    z2 = tmp0 + tmp2;
 8016cbc:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016cc0:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016cc4:	4413      	add	r3, r2
 8016cc6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = tmp1 + tmp3;
 8016cca:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8016cce:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016cd2:	4413      	add	r3, r2
 8016cd4:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8016cd8:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8016cdc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016ce0:	4413      	add	r3, r2
 8016ce2:	f242 52a1 	movw	r2, #9633	; 0x25a1
 8016ce6:	fb02 f303 	mul.w	r3, r2, r3
 8016cea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8016cee:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016cf2:	4a74      	ldr	r2, [pc, #464]	; (8016ec4 <jpeg_idct_16x8+0x4e0>)
 8016cf4:	fb02 f303 	mul.w	r3, r2, r3
 8016cf8:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8016cfc:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016d00:	4a71      	ldr	r2, [pc, #452]	; (8016ec8 <jpeg_idct_16x8+0x4e4>)
 8016d02:	fb02 f303 	mul.w	r3, r2, r3
 8016d06:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z2 += z1;
 8016d0a:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8016d0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8016d12:	4413      	add	r3, r2
 8016d14:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 += z1;
 8016d18:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016d1c:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8016d20:	4413      	add	r3, r2
 8016d22:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8016d26:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016d2a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016d2e:	4413      	add	r3, r2
 8016d30:	4a66      	ldr	r2, [pc, #408]	; (8016ecc <jpeg_idct_16x8+0x4e8>)
 8016d32:	fb02 f303 	mul.w	r3, r2, r3
 8016d36:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8016d3a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8016d3e:	f640 128e 	movw	r2, #2446	; 0x98e
 8016d42:	fb02 f303 	mul.w	r3, r2, r3
 8016d46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8016d4a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016d4e:	f243 020b 	movw	r2, #12299	; 0x300b
 8016d52:	fb02 f303 	mul.w	r3, r2, r3
 8016d56:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp0 += z1 + z2;
 8016d5a:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016d5e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016d62:	4413      	add	r3, r2
 8016d64:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016d68:	4413      	add	r3, r2
 8016d6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp3 += z1 + z3;
 8016d6e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016d72:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016d76:	4413      	add	r3, r2
 8016d78:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 8016d7c:	4413      	add	r3, r2
 8016d7e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8016d82:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8016d86:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016d8a:	4413      	add	r3, r2
 8016d8c:	4a50      	ldr	r2, [pc, #320]	; (8016ed0 <jpeg_idct_16x8+0x4ec>)
 8016d8e:	fb02 f303 	mul.w	r3, r2, r3
 8016d92:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8016d96:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8016d9a:	f244 12b3 	movw	r2, #16819	; 0x41b3
 8016d9e:	fb02 f303 	mul.w	r3, r2, r3
 8016da2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8016da6:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016daa:	f246 2254 	movw	r2, #25172	; 0x6254
 8016dae:	fb02 f303 	mul.w	r3, r2, r3
 8016db2:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp1 += z1 + z3;
 8016db6:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016dba:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016dbe:	4413      	add	r3, r2
 8016dc0:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8016dc4:	4413      	add	r3, r2
 8016dc6:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 += z1 + z2;
 8016dca:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016dce:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016dd2:	4413      	add	r3, r2
 8016dd4:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8016dd8:	4413      	add	r3, r2
 8016dda:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    wsptr[DCTSIZE*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 8016dde:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8016de2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016de6:	4413      	add	r3, r2
 8016de8:	12da      	asrs	r2, r3, #11
 8016dea:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016dee:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 8016df0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8016df4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8016df8:	1ad2      	subs	r2, r2, r3
 8016dfa:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016dfe:	33e0      	adds	r3, #224	; 0xe0
 8016e00:	12d2      	asrs	r2, r2, #11
 8016e02:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 8016e04:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8016e08:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e0c:	441a      	add	r2, r3
 8016e0e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016e12:	3320      	adds	r3, #32
 8016e14:	12d2      	asrs	r2, r2, #11
 8016e16:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 8016e18:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8016e1c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016e20:	1ad2      	subs	r2, r2, r3
 8016e22:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016e26:	33c0      	adds	r3, #192	; 0xc0
 8016e28:	12d2      	asrs	r2, r2, #11
 8016e2a:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 8016e2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016e30:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8016e34:	441a      	add	r2, r3
 8016e36:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016e3a:	3340      	adds	r3, #64	; 0x40
 8016e3c:	12d2      	asrs	r2, r2, #11
 8016e3e:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 8016e40:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8016e44:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8016e48:	1ad2      	subs	r2, r2, r3
 8016e4a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016e4e:	33a0      	adds	r3, #160	; 0xa0
 8016e50:	12d2      	asrs	r2, r2, #11
 8016e52:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 8016e54:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8016e58:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8016e5c:	441a      	add	r2, r3
 8016e5e:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016e62:	3360      	adds	r3, #96	; 0x60
 8016e64:	12d2      	asrs	r2, r2, #11
 8016e66:	601a      	str	r2, [r3, #0]
    wsptr[DCTSIZE*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 8016e68:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8016e6c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8016e70:	1ad2      	subs	r2, r2, r3
 8016e72:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016e76:	3380      	adds	r3, #128	; 0x80
 8016e78:	12d2      	asrs	r2, r2, #11
 8016e7a:	601a      	str	r2, [r3, #0]
    
    inptr++;			/* advance pointers to next column */
 8016e7c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8016e80:	3302      	adds	r3, #2
 8016e82:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
    quantptr++;
 8016e86:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8016e8a:	3304      	adds	r3, #4
 8016e8c:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
    wsptr++;
 8016e90:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016e94:	3304      	adds	r3, #4
 8016e96:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = DCTSIZE; ctr > 0; ctr--) {
 8016e9a:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8016e9e:	3b01      	subs	r3, #1
 8016ea0:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8016ea4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	f73f adc2 	bgt.w	8016a32 <jpeg_idct_16x8+0x4e>
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  wsptr = workspace;
 8016eae:	f107 0314 	add.w	r3, r7, #20
 8016eb2:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 8; ctr++) {
 8016eb6:	2300      	movs	r3, #0
 8016eb8:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8016ebc:	e32c      	b.n	8017518 <jpeg_idct_16x8+0xb34>
 8016ebe:	bf00      	nop
 8016ec0:	ffffc4df 	.word	0xffffc4df
 8016ec4:	ffffc13b 	.word	0xffffc13b
 8016ec8:	fffff384 	.word	0xfffff384
 8016ecc:	ffffe333 	.word	0xffffe333
 8016ed0:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 8016ed4:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8016ed8:	009b      	lsls	r3, r3, #2
 8016eda:	463a      	mov	r2, r7
 8016edc:	6812      	ldr	r2, [r2, #0]
 8016ede:	4413      	add	r3, r2
 8016ee0:	681a      	ldr	r2, [r3, #0]
 8016ee2:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8016ee6:	4413      	add	r3, r2
 8016ee8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8016eec:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016ef0:	681b      	ldr	r3, [r3, #0]
 8016ef2:	3310      	adds	r3, #16
 8016ef4:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp0 <<= CONST_BITS;
 8016ef8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8016efc:	035b      	lsls	r3, r3, #13
 8016efe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164

    z1 = (INT32) wsptr[4];
 8016f02:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016f06:	3310      	adds	r3, #16
 8016f08:	681b      	ldr	r3, [r3, #0]
 8016f0a:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 8016f0e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8016f12:	f642 12cf 	movw	r2, #10703	; 0x29cf
 8016f16:	fb02 f303 	mul.w	r3, r2, r3
 8016f1a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8016f1e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8016f22:	f241 1251 	movw	r2, #4433	; 0x1151
 8016f26:	fb02 f303 	mul.w	r3, r2, r3
 8016f2a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    tmp10 = tmp0 + tmp1;
 8016f2e:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016f32:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8016f36:	4413      	add	r3, r2
 8016f38:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp11 = tmp0 - tmp1;
 8016f3c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016f40:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8016f44:	1ad3      	subs	r3, r2, r3
 8016f46:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = tmp0 + tmp2;
 8016f4a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016f4e:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016f52:	4413      	add	r3, r2
 8016f54:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp13 = tmp0 - tmp2;
 8016f58:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 8016f5c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8016f60:	1ad3      	subs	r3, r2, r3
 8016f62:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    z1 = (INT32) wsptr[2];
 8016f66:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016f6a:	3308      	adds	r3, #8
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = (INT32) wsptr[6];
 8016f72:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8016f76:	3318      	adds	r3, #24
 8016f78:	681b      	ldr	r3, [r3, #0]
 8016f7a:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = z1 - z2;
 8016f7e:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8016f82:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016f86:	1ad3      	subs	r3, r2, r3
 8016f88:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8016f8c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016f90:	f640 02d4 	movw	r2, #2260	; 0x8d4
 8016f94:	fb02 f303 	mul.w	r3, r2, r3
 8016f98:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 8016f9c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8016fa0:	f642 4263 	movw	r2, #11363	; 0x2c63
 8016fa4:	fb02 f303 	mul.w	r3, r2, r3
 8016fa8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 8016fac:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016fb0:	f245 2203 	movw	r2, #20995	; 0x5203
 8016fb4:	fb02 f303 	mul.w	r3, r2, r3
 8016fb8:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016fbc:	4413      	add	r3, r2
 8016fbe:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 8016fc2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8016fc6:	f641 42cd 	movw	r2, #7373	; 0x1ccd
 8016fca:	fb02 f303 	mul.w	r3, r2, r3
 8016fce:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016fd2:	4413      	add	r3, r2
 8016fd4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 8016fd8:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8016fdc:	4af4      	ldr	r2, [pc, #976]	; (80173b0 <jpeg_idct_16x8+0x9cc>)
 8016fde:	fb02 f303 	mul.w	r3, r2, r3
 8016fe2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8016fe6:	4413      	add	r3, r2
 8016fe8:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 8016fec:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8016ff0:	4af0      	ldr	r2, [pc, #960]	; (80173b4 <jpeg_idct_16x8+0x9d0>)
 8016ff2:	fb02 f303 	mul.w	r3, r2, r3
 8016ff6:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8016ffa:	4413      	add	r3, r2
 8016ffc:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    tmp20 = tmp10 + tmp0;
 8017000:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8017004:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017008:	4413      	add	r3, r2
 801700a:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp27 = tmp10 - tmp0;
 801700e:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8017012:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017016:	1ad3      	subs	r3, r2, r3
 8017018:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp21 = tmp12 + tmp1;
 801701c:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017020:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017024:	4413      	add	r3, r2
 8017026:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp26 = tmp12 - tmp1;
 801702a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801702e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017032:	1ad3      	subs	r3, r2, r3
 8017034:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    tmp22 = tmp13 + tmp2;
 8017038:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801703c:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017040:	4413      	add	r3, r2
 8017042:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp25 = tmp13 - tmp2;
 8017046:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801704a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801704e:	1ad3      	subs	r3, r2, r3
 8017050:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp23 = tmp11 + tmp3;
 8017054:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8017058:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801705c:	4413      	add	r3, r2
 801705e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp24 = tmp11 - tmp3;
 8017062:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 8017066:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801706a:	1ad3      	subs	r3, r2, r3
 801706c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8017070:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017074:	3304      	adds	r3, #4
 8017076:	681b      	ldr	r3, [r3, #0]
 8017078:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    z2 = (INT32) wsptr[3];
 801707c:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017080:	330c      	adds	r3, #12
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z3 = (INT32) wsptr[5];
 8017088:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 801708c:	3314      	adds	r3, #20
 801708e:	681b      	ldr	r3, [r3, #0]
 8017090:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
    z4 = (INT32) wsptr[7];
 8017094:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017098:	331c      	adds	r3, #28
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    tmp11 = z1 + z3;
 80170a0:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80170a4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80170a8:	4413      	add	r3, r2
 80170aa:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80170ae:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80170b2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80170b6:	4413      	add	r3, r2
 80170b8:	f642 324e 	movw	r2, #11086	; 0x2b4e
 80170bc:	fb02 f303 	mul.w	r3, r2, r3
 80170c0:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 80170c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 80170c8:	f242 72e9 	movw	r2, #10217	; 0x27e9
 80170cc:	fb02 f303 	mul.w	r3, r2, r3
 80170d0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 80170d4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80170d8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80170dc:	4413      	add	r3, r2
 80170de:	f242 22fc 	movw	r2, #8956	; 0x22fc
 80170e2:	fb02 f303 	mul.w	r3, r2, r3
 80170e6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 80170ea:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 80170ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80170f2:	1ad3      	subs	r3, r2, r3
 80170f4:	f641 42b6 	movw	r2, #7350	; 0x1cb6
 80170f8:	fb02 f303 	mul.w	r3, r2, r3
 80170fc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8017100:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8017104:	f241 5255 	movw	r2, #5461	; 0x1555
 8017108:	fb02 f303 	mul.w	r3, r2, r3
 801710c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8017110:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 8017114:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017118:	1ad3      	subs	r3, r2, r3
 801711a:	f640 5223 	movw	r2, #3363	; 0xd23
 801711e:	fb02 f303 	mul.w	r3, r2, r3
 8017122:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp0  = tmp1 + tmp2 + tmp3 -
 8017126:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801712a:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 801712e:	441a      	add	r2, r3
 8017130:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017134:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 8017136:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801713a:	499f      	ldr	r1, [pc, #636]	; (80173b8 <jpeg_idct_16x8+0x9d4>)
 801713c:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8017140:	4413      	add	r3, r2
 8017142:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp13 = tmp10 + tmp11 + tmp12 -
 8017146:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801714a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801714e:	441a      	add	r2, r3
 8017150:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017154:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 8017156:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801715a:	4998      	ldr	r1, [pc, #608]	; (80173bc <jpeg_idct_16x8+0x9d8>)
 801715c:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 8017160:	4413      	add	r3, r2
 8017162:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 8017166:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801716a:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801716e:	4413      	add	r3, r2
 8017170:	f44f 628e 	mov.w	r2, #1136	; 0x470
 8017174:	fb02 f303 	mul.w	r3, r2, r3
 8017178:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 801717c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017180:	f240 224d 	movw	r2, #589	; 0x24d
 8017184:	fb02 f203 	mul.w	r2, r2, r3
 8017188:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801718c:	4413      	add	r3, r2
 801718e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 8017192:	4413      	add	r3, r2
 8017194:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 8017198:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 801719c:	4a88      	ldr	r2, [pc, #544]	; (80173c0 <jpeg_idct_16x8+0x9dc>)
 801719e:	fb02 f203 	mul.w	r2, r2, r3
 80171a2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80171a6:	4413      	add	r3, r2
 80171a8:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 80171ac:	4413      	add	r3, r2
 80171ae:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80171b2:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 80171b6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80171ba:	1ad3      	subs	r3, r2, r3
 80171bc:	f642 5209 	movw	r2, #11529	; 0x2d09
 80171c0:	fb02 f303 	mul.w	r3, r2, r3
 80171c4:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 80171c8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80171cc:	4a7d      	ldr	r2, [pc, #500]	; (80173c4 <jpeg_idct_16x8+0x9e0>)
 80171ce:	fb02 f203 	mul.w	r2, r2, r3
 80171d2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80171d6:	4413      	add	r3, r2
 80171d8:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80171dc:	4413      	add	r3, r2
 80171de:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 80171e2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80171e6:	f643 721a 	movw	r2, #16154	; 0x3f1a
 80171ea:	fb02 f203 	mul.w	r2, r2, r3
 80171ee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 80171f2:	4413      	add	r3, r2
 80171f4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80171f8:	4413      	add	r3, r2
 80171fa:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    z2    += z4;
 80171fe:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8017202:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8017206:	4413      	add	r3, r2
 8017208:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 801720c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017210:	4a6d      	ldr	r2, [pc, #436]	; (80173c8 <jpeg_idct_16x8+0x9e4>)
 8017212:	fb02 f303 	mul.w	r3, r2, r3
 8017216:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp1  += z1;
 801721a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801721e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8017222:	4413      	add	r3, r2
 8017224:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8017228:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 801722c:	f242 2218 	movw	r2, #8728	; 0x2218
 8017230:	fb02 f203 	mul.w	r2, r2, r3
 8017234:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8017238:	4413      	add	r3, r2
 801723a:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 801723e:	4413      	add	r3, r2
 8017240:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 8017244:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017248:	4a60      	ldr	r2, [pc, #384]	; (80173cc <jpeg_idct_16x8+0x9e8>)
 801724a:	fb02 f303 	mul.w	r3, r2, r3
 801724e:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 8017252:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8017256:	f246 4285 	movw	r2, #25733	; 0x6485
 801725a:	fb02 f203 	mul.w	r2, r2, r3
 801725e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017262:	4413      	add	r3, r2
 8017264:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 8017268:	4413      	add	r3, r2
 801726a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp12 += z2;
 801726e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8017272:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017276:	4413      	add	r3, r2
 8017278:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 801727c:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 8017280:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8017284:	4413      	add	r3, r2
 8017286:	4a52      	ldr	r2, [pc, #328]	; (80173d0 <jpeg_idct_16x8+0x9ec>)
 8017288:	fb02 f303 	mul.w	r3, r2, r3
 801728c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp2  += z2;
 8017290:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 8017294:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017298:	4413      	add	r3, r2
 801729a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp3  += z2;
 801729e:	f8d7 2138 	ldr.w	r2, [r7, #312]	; 0x138
 80172a2:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80172a6:	4413      	add	r3, r2
 80172a8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80172ac:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 80172b0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80172b4:	1ad3      	subs	r3, r2, r3
 80172b6:	f640 5223 	movw	r2, #3363	; 0xd23
 80172ba:	fb02 f303 	mul.w	r3, r2, r3
 80172be:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
    tmp10 += z2;
 80172c2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 80172c6:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80172ca:	4413      	add	r3, r2
 80172cc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    tmp11 += z2;
 80172d0:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 80172d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80172d8:	4413      	add	r3, r2
 80172da:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80172de:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 80172e2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80172e6:	4413      	add	r3, r2
 80172e8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80172ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp0,
 80172ee:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80172f2:	4413      	add	r3, r2
 80172f4:	781a      	ldrb	r2, [r3, #0]
 80172f6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80172fa:	701a      	strb	r2, [r3, #0]
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 80172fc:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017300:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8017304:	1ad3      	subs	r3, r2, r3
 8017306:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017308:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[15] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp0,
 801730c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017310:	441a      	add	r2, r3
 8017312:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017316:	330f      	adds	r3, #15
 8017318:	7812      	ldrb	r2, [r2, #0]
 801731a:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801731c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8017320:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017324:	4413      	add	r3, r2
 8017326:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017328:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp1,
 801732c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017330:	441a      	add	r2, r3
 8017332:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017336:	3301      	adds	r3, #1
 8017338:	7812      	ldrb	r2, [r2, #0]
 801733a:	701a      	strb	r2, [r3, #0]
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801733c:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8017340:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8017344:	1ad3      	subs	r3, r2, r3
 8017346:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017348:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[14] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp1,
 801734c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017350:	441a      	add	r2, r3
 8017352:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017356:	330e      	adds	r3, #14
 8017358:	7812      	ldrb	r2, [r2, #0]
 801735a:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801735c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8017360:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017364:	4413      	add	r3, r2
 8017366:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017368:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp2,
 801736c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017370:	441a      	add	r2, r3
 8017372:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017376:	3302      	adds	r3, #2
 8017378:	7812      	ldrb	r2, [r2, #0]
 801737a:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801737c:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8017380:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8017384:	1ad3      	subs	r3, r2, r3
 8017386:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017388:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp2,
 801738c:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017390:	441a      	add	r2, r3
 8017392:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8017396:	330d      	adds	r3, #13
 8017398:	7812      	ldrb	r2, [r2, #0]
 801739a:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 801739c:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80173a0:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80173a4:	4413      	add	r3, r2
 80173a6:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80173a8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80173ac:	e012      	b.n	80173d4 <jpeg_idct_16x8+0x9f0>
 80173ae:	bf00      	nop
 80173b0:	ffffecc2 	.word	0xffffecc2
 80173b4:	ffffefb0 	.word	0xffffefb0
 80173b8:	ffffb6d6 	.word	0xffffb6d6
 80173bc:	ffffc542 	.word	0xffffc542
 80173c0:	ffffdbfa 	.word	0xffffdbfa
 80173c4:	ffffe77a 	.word	0xffffe77a
 80173c8:	ffffeaab 	.word	0xffffeaab
 80173cc:	ffffd817 	.word	0xffffd817
 80173d0:	ffffd4b2 	.word	0xffffd4b2
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp3,
 80173d4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80173d8:	441a      	add	r2, r3
 80173da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80173de:	3303      	adds	r3, #3
 80173e0:	7812      	ldrb	r2, [r2, #0]
 80173e2:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80173e4:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80173e8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 80173ec:	1ad3      	subs	r3, r2, r3
 80173ee:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80173f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp3,
 80173f4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80173f8:	441a      	add	r2, r3
 80173fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80173fe:	330c      	adds	r3, #12
 8017400:	7812      	ldrb	r2, [r2, #0]
 8017402:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8017404:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8017408:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801740c:	4413      	add	r3, r2
 801740e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017410:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp10,
 8017414:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017418:	441a      	add	r2, r3
 801741a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801741e:	3304      	adds	r3, #4
 8017420:	7812      	ldrb	r2, [r2, #0]
 8017422:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8017424:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8017428:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801742c:	1ad3      	subs	r3, r2, r3
 801742e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017430:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp10,
 8017434:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017438:	441a      	add	r2, r3
 801743a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801743e:	330b      	adds	r3, #11
 8017440:	7812      	ldrb	r2, [r2, #0]
 8017442:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8017444:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8017448:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801744c:	4413      	add	r3, r2
 801744e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017450:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp11,
 8017454:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017458:	441a      	add	r2, r3
 801745a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801745e:	3305      	adds	r3, #5
 8017460:	7812      	ldrb	r2, [r2, #0]
 8017462:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8017464:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8017468:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801746c:	1ad3      	subs	r3, r2, r3
 801746e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017470:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp11,
 8017474:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017478:	441a      	add	r2, r3
 801747a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801747e:	330a      	adds	r3, #10
 8017480:	7812      	ldrb	r2, [r2, #0]
 8017482:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8017484:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017488:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801748c:	4413      	add	r3, r2
 801748e:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017490:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp12,
 8017494:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 8017498:	441a      	add	r2, r3
 801749a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801749e:	3306      	adds	r3, #6
 80174a0:	7812      	ldrb	r2, [r2, #0]
 80174a2:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80174a4:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80174a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80174ac:	1ad3      	subs	r3, r2, r3
 80174ae:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80174b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp12,
 80174b4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80174b8:	441a      	add	r2, r3
 80174ba:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80174be:	3309      	adds	r3, #9
 80174c0:	7812      	ldrb	r2, [r2, #0]
 80174c2:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80174c4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80174c8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80174cc:	4413      	add	r3, r2
 80174ce:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80174d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp27 + tmp13,
 80174d4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80174d8:	441a      	add	r2, r3
 80174da:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80174de:	3307      	adds	r3, #7
 80174e0:	7812      	ldrb	r2, [r2, #0]
 80174e2:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80174e4:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 80174e8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80174ec:	1ad3      	subs	r3, r2, r3
 80174ee:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80174f0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp27 - tmp13,
 80174f4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 80174f8:	441a      	add	r2, r3
 80174fa:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 80174fe:	3308      	adds	r3, #8
 8017500:	7812      	ldrb	r2, [r2, #0]
 8017502:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8017504:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8017508:	3320      	adds	r3, #32
 801750a:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  for (ctr = 0; ctr < 8; ctr++) {
 801750e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8017512:	3301      	adds	r3, #1
 8017514:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
 8017518:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801751c:	2b07      	cmp	r3, #7
 801751e:	f77f acd9 	ble.w	8016ed4 <jpeg_idct_16x8+0x4f0>
  }
}
 8017522:	bf00      	nop
 8017524:	bf00      	nop
 8017526:	f507 77c0 	add.w	r7, r7, #384	; 0x180
 801752a:	46bd      	mov	sp, r7
 801752c:	bc90      	pop	{r4, r7}
 801752e:	4770      	bx	lr

08017530 <jpeg_idct_14x7>:

GLOBAL(void)
jpeg_idct_14x7 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8017530:	b490      	push	{r4, r7}
 8017532:	b0d4      	sub	sp, #336	; 0x150
 8017534:	af00      	add	r7, sp, #0
 8017536:	f107 040c 	add.w	r4, r7, #12
 801753a:	6020      	str	r0, [r4, #0]
 801753c:	f107 0008 	add.w	r0, r7, #8
 8017540:	6001      	str	r1, [r0, #0]
 8017542:	1d39      	adds	r1, r7, #4
 8017544:	600a      	str	r2, [r1, #0]
 8017546:	463a      	mov	r2, r7
 8017548:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801754a:	f107 030c 	add.w	r3, r7, #12
 801754e:	681b      	ldr	r3, [r3, #0]
 8017550:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8017554:	3380      	adds	r3, #128	; 0x80
 8017556:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  inptr = coef_block;
 801755a:	1d3b      	adds	r3, r7, #4
 801755c:	681b      	ldr	r3, [r3, #0]
 801755e:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8017562:	f107 0308 	add.w	r3, r7, #8
 8017566:	681b      	ldr	r3, [r3, #0]
 8017568:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801756a:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
  wsptr = workspace;
 801756e:	f107 0310 	add.w	r3, r7, #16
 8017572:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017576:	2300      	movs	r3, #0
 8017578:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801757c:	e17a      	b.n	8017874 <jpeg_idct_14x7+0x344>
    /* Even part */

    tmp23 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801757e:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017582:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017586:	461a      	mov	r2, r3
 8017588:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	fb03 f302 	mul.w	r3, r3, r2
 8017592:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    tmp23 <<= CONST_BITS;
 8017596:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801759a:	035b      	lsls	r3, r3, #13
 801759c:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    /* Add fudge factor here for final descale. */
    tmp23 += ONE << (CONST_BITS-PASS1_BITS-1);
 80175a0:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 80175a4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80175a8:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80175ac:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80175b0:	3320      	adds	r3, #32
 80175b2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175b6:	461a      	mov	r2, r3
 80175b8:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80175bc:	3340      	adds	r3, #64	; 0x40
 80175be:	681b      	ldr	r3, [r3, #0]
 80175c0:	fb03 f302 	mul.w	r3, r3, r2
 80175c4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80175c8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80175cc:	3340      	adds	r3, #64	; 0x40
 80175ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175d2:	461a      	mov	r2, r3
 80175d4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80175d8:	3380      	adds	r3, #128	; 0x80
 80175da:	681b      	ldr	r3, [r3, #0]
 80175dc:	fb03 f302 	mul.w	r3, r3, r2
 80175e0:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 80175e4:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80175e8:	3360      	adds	r3, #96	; 0x60
 80175ea:	f9b3 3000 	ldrsh.w	r3, [r3]
 80175ee:	461a      	mov	r2, r3
 80175f0:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80175f4:	33c0      	adds	r3, #192	; 0xc0
 80175f6:	681b      	ldr	r3, [r3, #0]
 80175f8:	fb03 f302 	mul.w	r3, r3, r2
 80175fc:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 8017600:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8017604:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017608:	1ad3      	subs	r3, r2, r3
 801760a:	f641 4237 	movw	r2, #7223	; 0x1c37
 801760e:	fb02 f303 	mul.w	r3, r2, r3
 8017612:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 8017616:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801761a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801761e:	1ad3      	subs	r3, r2, r3
 8017620:	f640 2212 	movw	r2, #2578	; 0xa12
 8017624:	fb02 f303 	mul.w	r3, r2, r3
 8017628:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801762c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8017630:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017634:	441a      	add	r2, r3
 8017636:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801763a:	441a      	add	r2, r3
 801763c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017640:	4993      	ldr	r1, [pc, #588]	; (8017890 <jpeg_idct_14x7+0x360>)
 8017642:	fb01 f303 	mul.w	r3, r1, r3
 8017646:	4413      	add	r3, r2
 8017648:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp10 = z1 + z3;
 801764c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017650:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017654:	4413      	add	r3, r2
 8017656:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    z2 -= tmp10;
 801765a:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801765e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017662:	1ad3      	subs	r3, r2, r3
 8017664:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 8017668:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801766c:	f642 02c6 	movw	r2, #10438	; 0x28c6
 8017670:	fb02 f303 	mul.w	r3, r2, r3
 8017674:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8017678:	4413      	add	r3, r2
 801767a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801767e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017682:	f46f 721f 	mvn.w	r2, #636	; 0x27c
 8017686:	fb02 f203 	mul.w	r2, r2, r3
 801768a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801768e:	4413      	add	r3, r2
 8017690:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8017694:	4413      	add	r3, r2
 8017696:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801769a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801769e:	4a7d      	ldr	r2, [pc, #500]	; (8017894 <jpeg_idct_14x7+0x364>)
 80176a0:	fb02 f203 	mul.w	r2, r2, r3
 80176a4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80176a8:	4413      	add	r3, r2
 80176aa:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 80176ae:	4413      	add	r3, r2
 80176b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 80176b4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80176b8:	f642 5241 	movw	r2, #11585	; 0x2d41
 80176bc:	fb02 f303 	mul.w	r3, r2, r3
 80176c0:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80176c4:	4413      	add	r3, r2
 80176c6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 80176ca:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80176ce:	3310      	adds	r3, #16
 80176d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176d4:	461a      	mov	r2, r3
 80176d6:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80176da:	3320      	adds	r3, #32
 80176dc:	681b      	ldr	r3, [r3, #0]
 80176de:	fb03 f302 	mul.w	r3, r3, r2
 80176e2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80176e6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 80176ea:	3330      	adds	r3, #48	; 0x30
 80176ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176f0:	461a      	mov	r2, r3
 80176f2:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 80176f6:	3360      	adds	r3, #96	; 0x60
 80176f8:	681b      	ldr	r3, [r3, #0]
 80176fa:	fb03 f302 	mul.w	r3, r3, r2
 80176fe:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8017702:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 8017706:	3350      	adds	r3, #80	; 0x50
 8017708:	f9b3 3000 	ldrsh.w	r3, [r3]
 801770c:	461a      	mov	r2, r3
 801770e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017712:	33a0      	adds	r3, #160	; 0xa0
 8017714:	681b      	ldr	r3, [r3, #0]
 8017716:	fb03 f302 	mul.w	r3, r3, r2
 801771a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801771e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017722:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017726:	4413      	add	r3, r2
 8017728:	f641 52ef 	movw	r2, #7663	; 0x1def
 801772c:	fb02 f303 	mul.w	r3, r2, r3
 8017730:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 8017734:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017738:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801773c:	1ad3      	subs	r3, r2, r3
 801773e:	f240 5273 	movw	r2, #1395	; 0x573
 8017742:	fb02 f303 	mul.w	r3, r2, r3
 8017746:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp10 = tmp11 - tmp12;
 801774a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801774e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017752:	1ad3      	subs	r3, r2, r3
 8017754:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp11 += tmp12;
 8017758:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801775c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017760:	4413      	add	r3, r2
 8017762:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 8017766:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 801776a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801776e:	4413      	add	r3, r2
 8017770:	4a49      	ldr	r2, [pc, #292]	; (8017898 <jpeg_idct_14x7+0x368>)
 8017772:	fb02 f303 	mul.w	r3, r2, r3
 8017776:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp11 += tmp12;
 801777a:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 801777e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017782:	4413      	add	r3, r2
 8017784:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 8017788:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801778c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017790:	4413      	add	r3, r2
 8017792:	f241 32a3 	movw	r2, #5027	; 0x13a3
 8017796:	fb02 f303 	mul.w	r3, r2, r3
 801779a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    tmp10 += z2;
 801779e:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80177a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80177a6:	4413      	add	r3, r2
 80177a8:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 80177ac:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80177b0:	f643 32de 	movw	r2, #15326	; 0x3bde
 80177b4:	fb02 f203 	mul.w	r2, r2, r3
 80177b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80177bc:	4413      	add	r3, r2
 80177be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80177c2:	4413      	add	r3, r2
 80177c4:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 80177c8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80177cc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80177d0:	4413      	add	r3, r2
 80177d2:	12da      	asrs	r2, r3, #11
 80177d4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80177d8:	601a      	str	r2, [r3, #0]
    wsptr[8*6] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 80177da:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80177de:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80177e2:	1ad2      	subs	r2, r2, r3
 80177e4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80177e8:	33c0      	adds	r3, #192	; 0xc0
 80177ea:	12d2      	asrs	r2, r2, #11
 80177ec:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 80177ee:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 80177f2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80177f6:	441a      	add	r2, r3
 80177f8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80177fc:	3320      	adds	r3, #32
 80177fe:	12d2      	asrs	r2, r2, #11
 8017800:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 8017802:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017806:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801780a:	1ad2      	subs	r2, r2, r3
 801780c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017810:	33a0      	adds	r3, #160	; 0xa0
 8017812:	12d2      	asrs	r2, r2, #11
 8017814:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8017816:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801781a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801781e:	441a      	add	r2, r3
 8017820:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017824:	3340      	adds	r3, #64	; 0x40
 8017826:	12d2      	asrs	r2, r2, #11
 8017828:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801782a:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801782e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017832:	1ad2      	subs	r2, r2, r3
 8017834:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017838:	3380      	adds	r3, #128	; 0x80
 801783a:	12d2      	asrs	r2, r2, #11
 801783c:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp23, CONST_BITS-PASS1_BITS);
 801783e:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017842:	3360      	adds	r3, #96	; 0x60
 8017844:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8017848:	12d2      	asrs	r2, r2, #11
 801784a:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801784c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8017850:	3301      	adds	r3, #1
 8017852:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8017856:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801785a:	3302      	adds	r3, #2
 801785c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8017860:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 8017864:	3304      	adds	r3, #4
 8017866:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
 801786a:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801786e:	3304      	adds	r3, #4
 8017870:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
 8017874:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8017878:	2b07      	cmp	r3, #7
 801787a:	f77f ae80 	ble.w	801757e <jpeg_idct_14x7+0x4e>
  }

  /* Pass 2: process 7 rows from work array, store into output array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  wsptr = workspace;
 801787e:	f107 0310 	add.w	r3, r7, #16
 8017882:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  for (ctr = 0; ctr < 7; ctr++) {
 8017886:	2300      	movs	r3, #0
 8017888:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 801788c:	e288      	b.n	8017da0 <jpeg_idct_14x7+0x870>
 801788e:	bf00      	nop
 8017890:	ffffc515 	.word	0xffffc515
 8017894:	ffffb0f1 	.word	0xffffb0f1
 8017898:	ffffd3e1 	.word	0xffffd3e1
    outptr = output_buf[ctr] + output_col;
 801789c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80178a0:	009b      	lsls	r3, r3, #2
 80178a2:	463a      	mov	r2, r7
 80178a4:	6812      	ldr	r2, [r2, #0]
 80178a6:	4413      	add	r3, r2
 80178a8:	681a      	ldr	r2, [r3, #0]
 80178aa:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 80178ae:	4413      	add	r3, r2
 80178b0:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Even part */

    /* Add fudge factor here for final descale. */
    z1 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80178b4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80178b8:	681b      	ldr	r3, [r3, #0]
 80178ba:	3310      	adds	r3, #16
 80178bc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z1 <<= CONST_BITS;
 80178c0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80178c4:	035b      	lsls	r3, r3, #13
 80178c6:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z4 = (INT32) wsptr[4];
 80178ca:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80178ce:	3310      	adds	r3, #16
 80178d0:	681b      	ldr	r3, [r3, #0]
 80178d2:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 80178d6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80178da:	f642 02c6 	movw	r2, #10438	; 0x28c6
 80178de:	fb02 f303 	mul.w	r3, r2, r3
 80178e2:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 80178e6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80178ea:	f640 2212 	movw	r2, #2578	; 0xa12
 80178ee:	fb02 f303 	mul.w	r3, r2, r3
 80178f2:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 80178f6:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 80178fa:	f641 4237 	movw	r2, #7223	; 0x1c37
 80178fe:	fb02 f303 	mul.w	r3, r2, r3
 8017902:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    tmp10 = z1 + z2;
 8017906:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801790a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801790e:	4413      	add	r3, r2
 8017910:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp11 = z1 + z3;
 8017914:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017918:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801791c:	4413      	add	r3, r2
 801791e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 = z1 - z4;
 8017922:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017926:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801792a:	1ad3      	subs	r3, r2, r3
 801792c:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c

    tmp23 = z1 - ((z2 + z3 - z4) << 1);          /* c0 = (c4+c12-c8)*2 */
 8017930:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8017934:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017938:	441a      	add	r2, r3
 801793a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801793e:	1ad3      	subs	r3, r2, r3
 8017940:	005b      	lsls	r3, r3, #1
 8017942:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017946:	1ad3      	subs	r3, r2, r3
 8017948:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    z1 = (INT32) wsptr[2];
 801794c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017950:	3308      	adds	r3, #8
 8017952:	681b      	ldr	r3, [r3, #0]
 8017954:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z2 = (INT32) wsptr[6];
 8017958:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 801795c:	3318      	adds	r3, #24
 801795e:	681b      	ldr	r3, [r3, #0]
 8017960:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8017964:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017968:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801796c:	4413      	add	r3, r2
 801796e:	f242 3262 	movw	r2, #9058	; 0x2362
 8017972:	fb02 f303 	mul.w	r3, r2, r3
 8017976:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 801797a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801797e:	f640 02bd 	movw	r2, #2237	; 0x8bd
 8017982:	fb02 f303 	mul.w	r3, r2, r3
 8017986:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801798a:	4413      	add	r3, r2
 801798c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8017990:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017994:	4af1      	ldr	r2, [pc, #964]	; (8017d5c <jpeg_idct_14x7+0x82c>)
 8017996:	fb02 f303 	mul.w	r3, r2, r3
 801799a:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 801799e:	4413      	add	r3, r2
 80179a0:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80179a4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80179a8:	f241 32a3 	movw	r2, #5027	; 0x13a3
 80179ac:	fb02 f203 	mul.w	r2, r2, r3
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 80179b0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80179b4:	49ea      	ldr	r1, [pc, #936]	; (8017d60 <jpeg_idct_14x7+0x830>)
 80179b6:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 80179ba:	4413      	add	r3, r2
 80179bc:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    tmp20 = tmp10 + tmp13;
 80179c0:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80179c4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80179c8:	4413      	add	r3, r2
 80179ca:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp26 = tmp10 - tmp13;
 80179ce:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80179d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80179d6:	1ad3      	subs	r3, r2, r3
 80179d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp21 = tmp11 + tmp14;
 80179dc:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80179e0:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80179e4:	4413      	add	r3, r2
 80179e6:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp25 = tmp11 - tmp14;
 80179ea:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 80179ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80179f2:	1ad3      	subs	r3, r2, r3
 80179f4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp22 = tmp12 + tmp15;
 80179f8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80179fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017a00:	4413      	add	r3, r2
 8017a02:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp24 = tmp12 - tmp15;
 8017a06:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8017a0a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017a0e:	1ad3      	subs	r3, r2, r3
 8017a10:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8017a14:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017a18:	3304      	adds	r3, #4
 8017a1a:	681b      	ldr	r3, [r3, #0]
 8017a1c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    z2 = (INT32) wsptr[3];
 8017a20:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017a24:	330c      	adds	r3, #12
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
    z3 = (INT32) wsptr[5];
 8017a2c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017a30:	3314      	adds	r3, #20
 8017a32:	681b      	ldr	r3, [r3, #0]
 8017a34:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
    z4 = (INT32) wsptr[7];
 8017a38:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017a3c:	331c      	adds	r3, #28
 8017a3e:	681b      	ldr	r3, [r3, #0]
 8017a40:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    z4 <<= CONST_BITS;
 8017a44:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017a48:	035b      	lsls	r3, r3, #13
 8017a4a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130

    tmp14 = z1 + z3;
 8017a4e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017a52:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017a56:	4413      	add	r3, r2
 8017a58:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 8017a5c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017a60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017a64:	4413      	add	r3, r2
 8017a66:	f642 22b7 	movw	r2, #10935	; 0x2ab7
 8017a6a:	fb02 f303 	mul.w	r3, r2, r3
 8017a6e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 8017a72:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8017a76:	f242 6252 	movw	r2, #9810	; 0x2652
 8017a7a:	fb02 f303 	mul.w	r3, r2, r3
 8017a7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp10 = tmp11 + tmp12 + z4 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 8017a82:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8017a86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017a8a:	441a      	add	r2, r3
 8017a8c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017a90:	441a      	add	r2, r3
 8017a92:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017a96:	49b3      	ldr	r1, [pc, #716]	; (8017d64 <jpeg_idct_14x7+0x834>)
 8017a98:	fb01 f303 	mul.w	r3, r1, r3
 8017a9c:	4413      	add	r3, r2
 8017a9e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 8017aa2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8017aa6:	f641 0214 	movw	r2, #6164	; 0x1814
 8017aaa:	fb02 f303 	mul.w	r3, r2, r3
 8017aae:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 8017ab2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017ab6:	4aac      	ldr	r2, [pc, #688]	; (8017d68 <jpeg_idct_14x7+0x838>)
 8017ab8:	fb02 f303 	mul.w	r3, r2, r3
 8017abc:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8017ac0:	4413      	add	r3, r2
 8017ac2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    z1    -= z2;
 8017ac6:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017aca:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017ace:	1ad3      	subs	r3, r2, r3
 8017ad0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - z4;           /* c11 */
 8017ad4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8017ad8:	f640 62f2 	movw	r2, #3826	; 0xef2
 8017adc:	fb02 f203 	mul.w	r2, r2, r3
 8017ae0:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017ae4:	1ad3      	subs	r3, r2, r3
 8017ae6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    tmp16 += tmp15;
 8017aea:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8017aee:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017af2:	4413      	add	r3, r2
 8017af4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    tmp13 = MULTIPLY(z2 + z3, - FIX(0.158341681)) - z4;    /* -c13 */
 8017af8:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8017afc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017b00:	4413      	add	r3, r2
 8017b02:	f46f 62a2 	mvn.w	r2, #1296	; 0x510
 8017b06:	fb02 f203 	mul.w	r2, r2, r3
 8017b0a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017b0e:	1ad3      	subs	r3, r2, r3
 8017b10:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp11 += tmp13 - MULTIPLY(z2, FIX(0.424103948));       /* c3-c9-c13 */
 8017b14:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017b18:	4a94      	ldr	r2, [pc, #592]	; (8017d6c <jpeg_idct_14x7+0x83c>)
 8017b1a:	fb02 f203 	mul.w	r2, r2, r3
 8017b1e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8017b22:	4413      	add	r3, r2
 8017b24:	f8d7 2120 	ldr.w	r2, [r7, #288]	; 0x120
 8017b28:	4413      	add	r3, r2
 8017b2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    tmp12 += tmp13 - MULTIPLY(z3, FIX(2.373959773));       /* c3+c5-c13 */
 8017b2e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017b32:	4a8f      	ldr	r2, [pc, #572]	; (8017d70 <jpeg_idct_14x7+0x840>)
 8017b34:	fb02 f203 	mul.w	r2, r2, r3
 8017b38:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8017b3c:	4413      	add	r3, r2
 8017b3e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8017b42:	4413      	add	r3, r2
 8017b44:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    tmp13 = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 8017b48:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 8017b4c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017b50:	1ad3      	subs	r3, r2, r3
 8017b52:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 8017b56:	fb02 f303 	mul.w	r3, r2, r3
 8017b5a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp14 += tmp13 + z4 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 8017b5e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8017b62:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8017b66:	441a      	add	r2, r3
 8017b68:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017b6c:	4981      	ldr	r1, [pc, #516]	; (8017d74 <jpeg_idct_14x7+0x844>)
 8017b6e:	fb01 f303 	mul.w	r3, r1, r3
 8017b72:	4413      	add	r3, r2
 8017b74:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 8017b78:	4413      	add	r3, r2
 8017b7a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp15 += tmp13 + MULTIPLY(z2, FIX(0.674957567));       /* c1+c11-c5 */
 8017b7e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8017b82:	f241 5299 	movw	r2, #5529	; 0x1599
 8017b86:	fb02 f203 	mul.w	r2, r2, r3
 8017b8a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8017b8e:	4413      	add	r3, r2
 8017b90:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8017b94:	4413      	add	r3, r2
 8017b96:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    tmp13 = ((z1 - z3) << CONST_BITS) + z4;
 8017b9a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8017b9e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8017ba2:	1ad3      	subs	r3, r2, r3
 8017ba4:	035b      	lsls	r3, r3, #13
 8017ba6:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 8017baa:	4413      	add	r3, r2
 8017bac:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8017bb0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8017bb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017bb8:	4413      	add	r3, r2
 8017bba:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017bbc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8017bc0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017bc4:	4413      	add	r3, r2
 8017bc6:	781a      	ldrb	r2, [r3, #0]
 8017bc8:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017bcc:	701a      	strb	r2, [r3, #0]
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8017bce:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8017bd2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017bd6:	1ad3      	subs	r3, r2, r3
 8017bd8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017bda:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[13] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 8017bde:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017be2:	441a      	add	r2, r3
 8017be4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017be8:	330d      	adds	r3, #13
 8017bea:	7812      	ldrb	r2, [r2, #0]
 8017bec:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8017bee:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017bf2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8017bf6:	4413      	add	r3, r2
 8017bf8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017bfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 8017bfe:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017c02:	441a      	add	r2, r3
 8017c04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017c08:	3301      	adds	r3, #1
 8017c0a:	7812      	ldrb	r2, [r2, #0]
 8017c0c:	701a      	strb	r2, [r3, #0]
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8017c0e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017c12:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8017c16:	1ad3      	subs	r3, r2, r3
 8017c18:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017c1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[12] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 8017c1e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017c22:	441a      	add	r2, r3
 8017c24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017c28:	330c      	adds	r3, #12
 8017c2a:	7812      	ldrb	r2, [r2, #0]
 8017c2c:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8017c2e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8017c32:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017c36:	4413      	add	r3, r2
 8017c38:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017c3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 8017c3e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017c42:	441a      	add	r2, r3
 8017c44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017c48:	3302      	adds	r3, #2
 8017c4a:	7812      	ldrb	r2, [r2, #0]
 8017c4c:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8017c4e:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8017c52:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017c56:	1ad3      	subs	r3, r2, r3
 8017c58:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017c5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 8017c5e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017c62:	441a      	add	r2, r3
 8017c64:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017c68:	330b      	adds	r3, #11
 8017c6a:	7812      	ldrb	r2, [r2, #0]
 8017c6c:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8017c6e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8017c72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8017c76:	4413      	add	r3, r2
 8017c78:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017c7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 8017c7e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017c82:	441a      	add	r2, r3
 8017c84:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017c88:	3303      	adds	r3, #3
 8017c8a:	7812      	ldrb	r2, [r2, #0]
 8017c8c:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8017c8e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8017c92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8017c96:	1ad3      	subs	r3, r2, r3
 8017c98:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017c9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 8017c9e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017ca2:	441a      	add	r2, r3
 8017ca4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017ca8:	330a      	adds	r3, #10
 8017caa:	7812      	ldrb	r2, [r2, #0]
 8017cac:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8017cae:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8017cb2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8017cb6:	4413      	add	r3, r2
 8017cb8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017cba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8017cbe:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017cc2:	441a      	add	r2, r3
 8017cc4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017cc8:	3304      	adds	r3, #4
 8017cca:	7812      	ldrb	r2, [r2, #0]
 8017ccc:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8017cce:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8017cd2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8017cd6:	1ad3      	subs	r3, r2, r3
 8017cd8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017cda:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8017cde:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017ce2:	441a      	add	r2, r3
 8017ce4:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017ce8:	3309      	adds	r3, #9
 8017cea:	7812      	ldrb	r2, [r2, #0]
 8017cec:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8017cee:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8017cf2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017cf6:	4413      	add	r3, r2
 8017cf8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017cfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 8017cfe:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017d02:	441a      	add	r2, r3
 8017d04:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017d08:	3305      	adds	r3, #5
 8017d0a:	7812      	ldrb	r2, [r2, #0]
 8017d0c:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8017d0e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8017d12:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017d16:	1ad3      	subs	r3, r2, r3
 8017d18:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017d1a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 8017d1e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017d22:	441a      	add	r2, r3
 8017d24:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017d28:	3308      	adds	r3, #8
 8017d2a:	7812      	ldrb	r2, [r2, #0]
 8017d2c:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8017d2e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8017d32:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8017d36:	4413      	add	r3, r2
 8017d38:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp26 + tmp16,
 8017d3e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017d42:	441a      	add	r2, r3
 8017d44:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017d48:	3306      	adds	r3, #6
 8017d4a:	7812      	ldrb	r2, [r2, #0]
 8017d4c:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8017d4e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8017d52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8017d56:	1ad3      	subs	r3, r2, r3
 8017d58:	149b      	asrs	r3, r3, #18
 8017d5a:	e00d      	b.n	8017d78 <jpeg_idct_14x7+0x848>
 8017d5c:	ffffc8fc 	.word	0xffffc8fc
 8017d60:	ffffd3e1 	.word	0xffffd3e1
 8017d64:	ffffdbf0 	.word	0xffffdbf0
 8017d68:	ffffde0b 	.word	0xffffde0b
 8017d6c:	fffff26e 	.word	0xfffff26e
 8017d70:	ffffb409 	.word	0xffffb409
 8017d74:	ffffc9e6 	.word	0xffffc9e6
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 8017d78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp26 - tmp16,
 8017d7c:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 8017d80:	441a      	add	r2, r3
 8017d82:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8017d86:	3307      	adds	r3, #7
 8017d88:	7812      	ldrb	r2, [r2, #0]
 8017d8a:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8017d8c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8017d90:	3320      	adds	r3, #32
 8017d92:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
  for (ctr = 0; ctr < 7; ctr++) {
 8017d96:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8017d9a:	3301      	adds	r3, #1
 8017d9c:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
 8017da0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8017da4:	2b06      	cmp	r3, #6
 8017da6:	f77f ad79 	ble.w	801789c <jpeg_idct_14x7+0x36c>
  }
}
 8017daa:	bf00      	nop
 8017dac:	bf00      	nop
 8017dae:	f507 77a8 	add.w	r7, r7, #336	; 0x150
 8017db2:	46bd      	mov	sp, r7
 8017db4:	bc90      	pop	{r4, r7}
 8017db6:	4770      	bx	lr

08017db8 <jpeg_idct_12x6>:

GLOBAL(void)
jpeg_idct_12x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8017db8:	b490      	push	{r4, r7}
 8017dba:	b0ca      	sub	sp, #296	; 0x128
 8017dbc:	af00      	add	r7, sp, #0
 8017dbe:	f107 040c 	add.w	r4, r7, #12
 8017dc2:	6020      	str	r0, [r4, #0]
 8017dc4:	f107 0008 	add.w	r0, r7, #8
 8017dc8:	6001      	str	r1, [r0, #0]
 8017dca:	1d39      	adds	r1, r7, #4
 8017dcc:	600a      	str	r2, [r1, #0]
 8017dce:	463a      	mov	r2, r7
 8017dd0:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8017dd2:	f107 030c 	add.w	r3, r7, #12
 8017dd6:	681b      	ldr	r3, [r3, #0]
 8017dd8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8017ddc:	3380      	adds	r3, #128	; 0x80
 8017dde:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
 8017de2:	1d3b      	adds	r3, r7, #4
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8017dea:	f107 0308 	add.w	r3, r7, #8
 8017dee:	681b      	ldr	r3, [r3, #0]
 8017df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8017df2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  wsptr = workspace;
 8017df6:	f107 0310 	add.w	r3, r7, #16
 8017dfa:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017dfe:	2300      	movs	r3, #0
 8017e00:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8017e04:	e105      	b.n	8018012 <jpeg_idct_12x6+0x25a>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8017e06:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017e0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017e0e:	461a      	mov	r2, r3
 8017e10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8017e14:	681b      	ldr	r3, [r3, #0]
 8017e16:	fb03 f302 	mul.w	r3, r3, r2
 8017e1a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp10 <<= CONST_BITS;
 8017e1e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017e22:	035b      	lsls	r3, r3, #13
 8017e24:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    /* Add fudge factor here for final descale. */
    tmp10 += ONE << (CONST_BITS-PASS1_BITS-1);
 8017e28:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017e2c:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8017e30:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp12 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8017e34:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017e38:	3340      	adds	r3, #64	; 0x40
 8017e3a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017e3e:	461a      	mov	r2, r3
 8017e40:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8017e44:	3380      	adds	r3, #128	; 0x80
 8017e46:	681b      	ldr	r3, [r3, #0]
 8017e48:	fb03 f302 	mul.w	r3, r3, r2
 8017e4c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 8017e50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017e54:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8017e58:	fb02 f303 	mul.w	r3, r2, r3
 8017e5c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp11 = tmp10 + tmp20;
 8017e60:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8017e64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017e68:	4413      	add	r3, r2
 8017e6a:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp21 = RIGHT_SHIFT(tmp10 - tmp20 - tmp20, CONST_BITS-PASS1_BITS);
 8017e6e:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8017e72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017e76:	1ad2      	subs	r2, r2, r3
 8017e78:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017e7c:	1ad3      	subs	r3, r2, r3
 8017e7e:	12db      	asrs	r3, r3, #11
 8017e80:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    tmp20 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8017e84:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017e88:	3320      	adds	r3, #32
 8017e8a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017e8e:	461a      	mov	r2, r3
 8017e90:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8017e94:	3340      	adds	r3, #64	; 0x40
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	fb03 f302 	mul.w	r3, r3, r2
 8017e9c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 8017ea0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8017ea4:	f242 7231 	movw	r2, #10033	; 0x2731
 8017ea8:	fb02 f303 	mul.w	r3, r2, r3
 8017eac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp20 = tmp11 + tmp10;
 8017eb0:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017eb4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017eb8:	4413      	add	r3, r2
 8017eba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp22 = tmp11 - tmp10;
 8017ebe:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017ec2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017ec6:	1ad3      	subs	r3, r2, r3
 8017ec8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8017ecc:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017ed0:	3310      	adds	r3, #16
 8017ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ed6:	461a      	mov	r2, r3
 8017ed8:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8017edc:	3320      	adds	r3, #32
 8017ede:	681b      	ldr	r3, [r3, #0]
 8017ee0:	fb03 f302 	mul.w	r3, r3, r2
 8017ee4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8017ee8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017eec:	3330      	adds	r3, #48	; 0x30
 8017eee:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017ef2:	461a      	mov	r2, r3
 8017ef4:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8017ef8:	3360      	adds	r3, #96	; 0x60
 8017efa:	681b      	ldr	r3, [r3, #0]
 8017efc:	fb03 f302 	mul.w	r3, r3, r2
 8017f00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 8017f04:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017f08:	3350      	adds	r3, #80	; 0x50
 8017f0a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017f0e:	461a      	mov	r2, r3
 8017f10:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8017f14:	33a0      	adds	r3, #160	; 0xa0
 8017f16:	681b      	ldr	r3, [r3, #0]
 8017f18:	fb03 f302 	mul.w	r3, r3, r2
 8017f1c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 8017f20:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8017f24:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017f28:	4413      	add	r3, r2
 8017f2a:	f640 32b6 	movw	r2, #2998	; 0xbb6
 8017f2e:	fb02 f303 	mul.w	r3, r2, r3
 8017f32:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 8017f36:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8017f3a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017f3e:	4413      	add	r3, r2
 8017f40:	035b      	lsls	r3, r3, #13
 8017f42:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017f46:	4413      	add	r3, r2
 8017f48:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 8017f4c:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8017f50:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017f54:	1ad3      	subs	r3, r2, r3
 8017f56:	035b      	lsls	r3, r3, #13
 8017f58:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017f5c:	4413      	add	r3, r2
 8017f5e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp11 = (z1 - z2 - z3) << PASS1_BITS;
 8017f62:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8017f66:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8017f6a:	1ad2      	subs	r2, r2, r3
 8017f6c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8017f70:	1ad3      	subs	r3, r2, r3
 8017f72:	009b      	lsls	r3, r3, #2
 8017f74:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 8017f78:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8017f7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017f80:	4413      	add	r3, r2
 8017f82:	12da      	asrs	r2, r3, #11
 8017f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017f88:	601a      	str	r2, [r3, #0]
    wsptr[8*5] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 8017f8a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 8017f8e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8017f92:	1ad2      	subs	r2, r2, r3
 8017f94:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017f98:	33a0      	adds	r3, #160	; 0xa0
 8017f9a:	12d2      	asrs	r2, r2, #11
 8017f9c:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) (tmp21 + tmp11);
 8017f9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017fa2:	3320      	adds	r3, #32
 8017fa4:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8017fa8:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017fac:	440a      	add	r2, r1
 8017fae:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) (tmp21 - tmp11);
 8017fb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017fb4:	3380      	adds	r3, #128	; 0x80
 8017fb6:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8017fba:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8017fbe:	1a8a      	subs	r2, r1, r2
 8017fc0:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 8017fc2:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017fc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017fca:	441a      	add	r2, r3
 8017fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017fd0:	3340      	adds	r3, #64	; 0x40
 8017fd2:	12d2      	asrs	r2, r2, #11
 8017fd4:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 8017fd6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8017fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8017fde:	1ad2      	subs	r2, r2, r3
 8017fe0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8017fe4:	3360      	adds	r3, #96	; 0x60
 8017fe6:	12d2      	asrs	r2, r2, #11
 8017fe8:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8017fea:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8017fee:	3301      	adds	r3, #1
 8017ff0:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8017ff4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8017ff8:	3302      	adds	r3, #2
 8017ffa:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8017ffe:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8018002:	3304      	adds	r3, #4
 8018004:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8018008:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801800c:	3304      	adds	r3, #4
 801800e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8018012:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018016:	2b07      	cmp	r3, #7
 8018018:	f77f aef5 	ble.w	8017e06 <jpeg_idct_12x6+0x4e>
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  wsptr = workspace;
 801801c:	f107 0310 	add.w	r3, r7, #16
 8018020:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  for (ctr = 0; ctr < 6; ctr++) {
 8018024:	2300      	movs	r3, #0
 8018026:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 801802a:	e21a      	b.n	8018462 <jpeg_idct_12x6+0x6aa>
    outptr = output_buf[ctr] + output_col;
 801802c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018030:	009b      	lsls	r3, r3, #2
 8018032:	463a      	mov	r2, r7
 8018034:	6812      	ldr	r2, [r2, #0]
 8018036:	4413      	add	r3, r2
 8018038:	681a      	ldr	r2, [r3, #0]
 801803a:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801803e:	4413      	add	r3, r2
 8018040:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8018044:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018048:	681b      	ldr	r3, [r3, #0]
 801804a:	3310      	adds	r3, #16
 801804c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    z3 <<= CONST_BITS;
 8018050:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8018054:	035b      	lsls	r3, r3, #13
 8018056:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    z4 = (INT32) wsptr[4];
 801805a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801805e:	3310      	adds	r3, #16
 8018060:	681b      	ldr	r3, [r3, #0]
 8018062:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 8018066:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801806a:	f242 7231 	movw	r2, #10033	; 0x2731
 801806e:	fb02 f303 	mul.w	r3, r2, r3
 8018072:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    tmp10 = z3 + z4;
 8018076:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 801807a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801807e:	4413      	add	r3, r2
 8018080:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp11 = z3 - z4;
 8018084:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 8018088:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801808c:	1ad3      	subs	r3, r2, r3
 801808e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    z1 = (INT32) wsptr[2];
 8018092:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018096:	3308      	adds	r3, #8
 8018098:	681b      	ldr	r3, [r3, #0]
 801809a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801809e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80180a2:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 80180a6:	fb02 f303 	mul.w	r3, r2, r3
 80180aa:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z1 <<= CONST_BITS;
 80180ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80180b2:	035b      	lsls	r3, r3, #13
 80180b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z2 = (INT32) wsptr[6];
 80180b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80180bc:	3318      	adds	r3, #24
 80180be:	681b      	ldr	r3, [r3, #0]
 80180c0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z2 <<= CONST_BITS;
 80180c4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80180c8:	035b      	lsls	r3, r3, #13
 80180ca:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    tmp12 = z1 - z2;
 80180ce:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80180d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80180d6:	1ad3      	subs	r3, r2, r3
 80180d8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp21 = z3 + tmp12;
 80180dc:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80180e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180e4:	4413      	add	r3, r2
 80180e6:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
    tmp24 = z3 - tmp12;
 80180ea:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80180ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80180f2:	1ad3      	subs	r3, r2, r3
 80180f4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec

    tmp12 = z4 + z2;
 80180f8:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 80180fc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018100:	4413      	add	r3, r2
 8018102:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp20 = tmp10 + tmp12;
 8018106:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801810a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801810e:	4413      	add	r3, r2
 8018110:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp25 = tmp10 - tmp12;
 8018114:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 8018118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801811c:	1ad3      	subs	r3, r2, r3
 801811e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    tmp12 = z4 - z1 - z2;
 8018122:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8018126:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801812a:	1ad2      	subs	r2, r2, r3
 801812c:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018130:	1ad3      	subs	r3, r2, r3
 8018132:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp22 = tmp11 + tmp12;
 8018136:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801813a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801813e:	4413      	add	r3, r2
 8018140:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    tmp23 = tmp11 - tmp12;
 8018144:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8018148:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801814c:	1ad3      	subs	r3, r2, r3
 801814e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 8018152:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018156:	3304      	adds	r3, #4
 8018158:	681b      	ldr	r3, [r3, #0]
 801815a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z2 = (INT32) wsptr[3];
 801815e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018162:	330c      	adds	r3, #12
 8018164:	681b      	ldr	r3, [r3, #0]
 8018166:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z3 = (INT32) wsptr[5];
 801816a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801816e:	3314      	adds	r3, #20
 8018170:	681b      	ldr	r3, [r3, #0]
 8018172:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    z4 = (INT32) wsptr[7];
 8018176:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 801817a:	331c      	adds	r3, #28
 801817c:	681b      	ldr	r3, [r3, #0]
 801817e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 8018182:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018186:	f642 12cf 	movw	r2, #10703	; 0x29cf
 801818a:	fb02 f303 	mul.w	r3, r2, r3
 801818e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 8018192:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018196:	4ab9      	ldr	r2, [pc, #740]	; (801847c <jpeg_idct_12x6+0x6c4>)
 8018198:	fb02 f303 	mul.w	r3, r2, r3
 801819c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    tmp10 = z1 + z3;
 80181a0:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80181a4:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80181a8:	4413      	add	r3, r2
 80181aa:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 80181ae:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 80181b2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80181b6:	4413      	add	r3, r2
 80181b8:	f641 328d 	movw	r2, #7053	; 0x1b8d
 80181bc:	fb02 f303 	mul.w	r3, r2, r3
 80181c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 80181c4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80181c8:	f640 025b 	movw	r2, #2139	; 0x85b
 80181cc:	fb02 f303 	mul.w	r3, r2, r3
 80181d0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80181d4:	4413      	add	r3, r2
 80181d6:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 80181da:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 80181de:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 80181e2:	18d1      	adds	r1, r2, r3
 80181e4:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 80181e8:	4613      	mov	r3, r2
 80181ea:	00db      	lsls	r3, r3, #3
 80181ec:	4413      	add	r3, r2
 80181ee:	021a      	lsls	r2, r3, #8
 80181f0:	1ad3      	subs	r3, r2, r3
 80181f2:	440b      	add	r3, r1
 80181f4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 80181f8:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80181fc:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018200:	4413      	add	r3, r2
 8018202:	4a9f      	ldr	r2, [pc, #636]	; (8018480 <jpeg_idct_12x6+0x6c8>)
 8018204:	fb02 f303 	mul.w	r3, r2, r3
 8018208:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801820c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8018210:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018214:	441a      	add	r2, r3
 8018216:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801821a:	499a      	ldr	r1, [pc, #616]	; (8018484 <jpeg_idct_12x6+0x6cc>)
 801821c:	fb01 f303 	mul.w	r3, r1, r3
 8018220:	4413      	add	r3, r2
 8018222:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8018226:	4413      	add	r3, r2
 8018228:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801822c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8018230:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8018234:	1ad2      	subs	r2, r2, r3
 8018236:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801823a:	f243 21c6 	movw	r1, #12998	; 0x32c6
 801823e:	fb01 f303 	mul.w	r3, r1, r3
 8018242:	4413      	add	r3, r2
 8018244:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8018248:	4413      	add	r3, r2
 801824a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801824e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018252:	4a8d      	ldr	r2, [pc, #564]	; (8018488 <jpeg_idct_12x6+0x6d0>)
 8018254:	fb02 f203 	mul.w	r2, r2, r3
 8018258:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801825c:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 801825e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8018262:	498a      	ldr	r1, [pc, #552]	; (801848c <jpeg_idct_12x6+0x6d4>)
 8018264:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 8018268:	4413      	add	r3, r2
 801826a:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801826e:	4413      	add	r3, r2
 8018270:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

    z1 -= z4;
 8018274:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8018278:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801827c:	1ad3      	subs	r3, r2, r3
 801827e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    z2 -= z3;
 8018282:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 8018286:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801828a:	1ad3      	subs	r3, r2, r3
 801828c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 8018290:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 8018294:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018298:	4413      	add	r3, r2
 801829a:	f241 1251 	movw	r2, #4433	; 0x1151
 801829e:	fb02 f303 	mul.w	r3, r2, r3
 80182a2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 80182a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80182aa:	f641 027e 	movw	r2, #6270	; 0x187e
 80182ae:	fb02 f303 	mul.w	r3, r2, r3
 80182b2:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80182b6:	4413      	add	r3, r2
 80182b8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 80182bc:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80182c0:	4a73      	ldr	r2, [pc, #460]	; (8018490 <jpeg_idct_12x6+0x6d8>)
 80182c2:	fb02 f303 	mul.w	r3, r2, r3
 80182c6:	f8d7 210c 	ldr.w	r2, [r7, #268]	; 0x10c
 80182ca:	4413      	add	r3, r2
 80182cc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8

    /* Final output stage */

    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80182d0:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80182d4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80182d8:	4413      	add	r3, r2
 80182da:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80182dc:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0]  = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 80182e0:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80182e4:	4413      	add	r3, r2
 80182e6:	781a      	ldrb	r2, [r3, #0]
 80182e8:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80182ec:	701a      	strb	r2, [r3, #0]
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80182ee:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 80182f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80182f6:	1ad3      	subs	r3, r2, r3
 80182f8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80182fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[11] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 80182fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8018302:	441a      	add	r2, r3
 8018304:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018308:	330b      	adds	r3, #11
 801830a:	7812      	ldrb	r2, [r2, #0]
 801830c:	701a      	strb	r2, [r3, #0]
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801830e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8018312:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8018316:	4413      	add	r3, r2
 8018318:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801831a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1]  = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801831e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8018322:	441a      	add	r2, r3
 8018324:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018328:	3301      	adds	r3, #1
 801832a:	7812      	ldrb	r2, [r2, #0]
 801832c:	701a      	strb	r2, [r3, #0]
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801832e:	f8d7 20f0 	ldr.w	r2, [r7, #240]	; 0xf0
 8018332:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8018336:	1ad3      	subs	r3, r2, r3
 8018338:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801833a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[10] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801833e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8018342:	441a      	add	r2, r3
 8018344:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018348:	330a      	adds	r3, #10
 801834a:	7812      	ldrb	r2, [r2, #0]
 801834c:	701a      	strb	r2, [r3, #0]
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801834e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8018352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018356:	4413      	add	r3, r2
 8018358:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801835a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2]  = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801835e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8018362:	441a      	add	r2, r3
 8018364:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018368:	3302      	adds	r3, #2
 801836a:	7812      	ldrb	r2, [r2, #0]
 801836c:	701a      	strb	r2, [r3, #0]
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801836e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8018372:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018376:	1ad3      	subs	r3, r2, r3
 8018378:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801837a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9]  = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801837e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8018382:	441a      	add	r2, r3
 8018384:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018388:	3309      	adds	r3, #9
 801838a:	7812      	ldrb	r2, [r2, #0]
 801838c:	701a      	strb	r2, [r3, #0]
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801838e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8018392:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018396:	4413      	add	r3, r2
 8018398:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801839a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3]  = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 801839e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80183a2:	441a      	add	r2, r3
 80183a4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80183a8:	3303      	adds	r3, #3
 80183aa:	7812      	ldrb	r2, [r2, #0]
 80183ac:	701a      	strb	r2, [r3, #0]
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80183ae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80183b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80183b6:	1ad3      	subs	r3, r2, r3
 80183b8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80183ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8]  = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80183be:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80183c2:	441a      	add	r2, r3
 80183c4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80183c8:	3308      	adds	r3, #8
 80183ca:	7812      	ldrb	r2, [r2, #0]
 80183cc:	701a      	strb	r2, [r3, #0]
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80183ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80183d2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80183d6:	4413      	add	r3, r2
 80183d8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80183da:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4]  = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80183de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80183e2:	441a      	add	r2, r3
 80183e4:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80183e8:	3304      	adds	r3, #4
 80183ea:	7812      	ldrb	r2, [r2, #0]
 80183ec:	701a      	strb	r2, [r3, #0]
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80183ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80183f2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80183f6:	1ad3      	subs	r3, r2, r3
 80183f8:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 80183fa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7]  = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 80183fe:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8018402:	441a      	add	r2, r3
 8018404:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018408:	3307      	adds	r3, #7
 801840a:	7812      	ldrb	r2, [r2, #0]
 801840c:	701a      	strb	r2, [r3, #0]
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801840e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8018412:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018416:	4413      	add	r3, r2
 8018418:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801841a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5]  = range_limit[(int) RIGHT_SHIFT(tmp25 + tmp15,
 801841e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8018422:	441a      	add	r2, r3
 8018424:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018428:	3305      	adds	r3, #5
 801842a:	7812      	ldrb	r2, [r2, #0]
 801842c:	701a      	strb	r2, [r3, #0]
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801842e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8018432:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018436:	1ad3      	subs	r3, r2, r3
 8018438:	149b      	asrs	r3, r3, #18
					       CONST_BITS+PASS1_BITS+3)
			     & RANGE_MASK];
 801843a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6]  = range_limit[(int) RIGHT_SHIFT(tmp25 - tmp15,
 801843e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 8018442:	441a      	add	r2, r3
 8018444:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 8018448:	3306      	adds	r3, #6
 801844a:	7812      	ldrb	r2, [r2, #0]
 801844c:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 801844e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8018452:	3320      	adds	r3, #32
 8018454:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  for (ctr = 0; ctr < 6; ctr++) {
 8018458:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801845c:	3301      	adds	r3, #1
 801845e:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
 8018462:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8018466:	2b05      	cmp	r3, #5
 8018468:	f77f ade0 	ble.w	801802c <jpeg_idct_12x6+0x274>
  }
}
 801846c:	bf00      	nop
 801846e:	bf00      	nop
 8018470:	f507 7794 	add.w	r7, r7, #296	; 0x128
 8018474:	46bd      	mov	sp, r7
 8018476:	bc90      	pop	{r4, r7}
 8018478:	4770      	bx	lr
 801847a:	bf00      	nop
 801847c:	ffffeeaf 	.word	0xffffeeaf
 8018480:	ffffde8b 	.word	0xffffde8b
 8018484:	ffffd0b0 	.word	0xffffd0b0
 8018488:	ffffea5c 	.word	0xffffea5c
 801848c:	ffffc08c 	.word	0xffffc08c
 8018490:	ffffc4df 	.word	0xffffc4df

08018494 <jpeg_idct_10x5>:

GLOBAL(void)
jpeg_idct_10x5 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8018494:	b480      	push	{r7}
 8018496:	b0c1      	sub	sp, #260	; 0x104
 8018498:	af00      	add	r7, sp, #0
 801849a:	60f8      	str	r0, [r7, #12]
 801849c:	60b9      	str	r1, [r7, #8]
 801849e:	607a      	str	r2, [r7, #4]
 80184a0:	463a      	mov	r2, r7
 80184a2:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80184a4:	68fb      	ldr	r3, [r7, #12]
 80184a6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80184aa:	3380      	adds	r3, #128	; 0x80
 80184ac:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  inptr = coef_block;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80184b6:	68bb      	ldr	r3, [r7, #8]
 80184b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80184ba:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  wsptr = workspace;
 80184be:	f107 0310 	add.w	r3, r7, #16
 80184c2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80184c6:	2300      	movs	r3, #0
 80184c8:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80184cc:	e0e3      	b.n	8018696 <jpeg_idct_10x5+0x202>
    /* Even part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80184ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80184d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80184d6:	461a      	mov	r2, r3
 80184d8:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80184dc:	681b      	ldr	r3, [r3, #0]
 80184de:	fb03 f302 	mul.w	r3, r3, r2
 80184e2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    tmp12 <<= CONST_BITS;
 80184e6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80184ea:	035b      	lsls	r3, r3, #13
 80184ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    /* Add fudge factor here for final descale. */
    tmp12 += ONE << (CONST_BITS-PASS1_BITS-1);
 80184f0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80184f4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80184f8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    tmp13 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 80184fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8018500:	3320      	adds	r3, #32
 8018502:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018506:	461a      	mov	r2, r3
 8018508:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801850c:	3340      	adds	r3, #64	; 0x40
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	fb03 f302 	mul.w	r3, r3, r2
 8018514:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp14 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8018518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801851c:	3340      	adds	r3, #64	; 0x40
 801851e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018522:	461a      	mov	r2, r3
 8018524:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018528:	3380      	adds	r3, #128	; 0x80
 801852a:	681b      	ldr	r3, [r3, #0]
 801852c:	fb03 f302 	mul.w	r3, r3, r2
 8018530:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 8018534:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801853c:	4413      	add	r3, r2
 801853e:	f641 124c 	movw	r2, #6476	; 0x194c
 8018542:	fb02 f303 	mul.w	r3, r2, r3
 8018546:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801854a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801854e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018552:	1ad3      	subs	r3, r2, r3
 8018554:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 8018558:	fb02 f303 	mul.w	r3, r2, r3
 801855c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z3 = tmp12 + z2;
 8018560:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8018564:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018568:	4413      	add	r3, r2
 801856a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    tmp10 = z3 + z1;
 801856e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8018572:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018576:	4413      	add	r3, r2
 8018578:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    tmp11 = z3 - z1;
 801857c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8018580:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018584:	1ad3      	subs	r3, r2, r3
 8018586:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp12 -= z2 << 2;
 801858a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 801858e:	009b      	lsls	r3, r3, #2
 8018590:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8018594:	1ad3      	subs	r3, r2, r3
 8018596:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    /* Odd part */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801859a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801859e:	3310      	adds	r3, #16
 80185a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185a4:	461a      	mov	r2, r3
 80185a6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80185aa:	3320      	adds	r3, #32
 80185ac:	681b      	ldr	r3, [r3, #0]
 80185ae:	fb03 f302 	mul.w	r3, r3, r2
 80185b2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 80185b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80185ba:	3330      	adds	r3, #48	; 0x30
 80185bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 80185c0:	461a      	mov	r2, r3
 80185c2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80185c6:	3360      	adds	r3, #96	; 0x60
 80185c8:	681b      	ldr	r3, [r3, #0]
 80185ca:	fb03 f302 	mul.w	r3, r3, r2
 80185ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 80185d2:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 80185d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80185da:	4413      	add	r3, r2
 80185dc:	f641 229a 	movw	r2, #6810	; 0x1a9a
 80185e0:	fb02 f303 	mul.w	r3, r2, r3
 80185e4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 80185e8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80185ec:	f241 0271 	movw	r2, #4209	; 0x1071
 80185f0:	fb02 f303 	mul.w	r3, r2, r3
 80185f4:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80185f8:	4413      	add	r3, r2
 80185fa:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 80185fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018602:	4a2b      	ldr	r2, [pc, #172]	; (80186b0 <jpeg_idct_10x5+0x21c>)
 8018604:	fb02 f303 	mul.w	r3, r2, r3
 8018608:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801860c:	4413      	add	r3, r2
 801860e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Final output stage */

    wsptr[8*0] = (int) RIGHT_SHIFT(tmp10 + tmp13, CONST_BITS-PASS1_BITS);
 8018612:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8018616:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801861a:	4413      	add	r3, r2
 801861c:	12da      	asrs	r2, r3, #11
 801861e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018622:	601a      	str	r2, [r3, #0]
    wsptr[8*4] = (int) RIGHT_SHIFT(tmp10 - tmp13, CONST_BITS-PASS1_BITS);
 8018624:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 8018628:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801862c:	1ad2      	subs	r2, r2, r3
 801862e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018632:	3380      	adds	r3, #128	; 0x80
 8018634:	12d2      	asrs	r2, r2, #11
 8018636:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) RIGHT_SHIFT(tmp11 + tmp14, CONST_BITS-PASS1_BITS);
 8018638:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 801863c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018640:	441a      	add	r2, r3
 8018642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018646:	3320      	adds	r3, #32
 8018648:	12d2      	asrs	r2, r2, #11
 801864a:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) RIGHT_SHIFT(tmp11 - tmp14, CONST_BITS-PASS1_BITS);
 801864c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8018650:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018654:	1ad2      	subs	r2, r2, r3
 8018656:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801865a:	3360      	adds	r3, #96	; 0x60
 801865c:	12d2      	asrs	r2, r2, #11
 801865e:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) RIGHT_SHIFT(tmp12, CONST_BITS-PASS1_BITS);
 8018660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018664:	3340      	adds	r3, #64	; 0x40
 8018666:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 801866a:	12d2      	asrs	r2, r2, #11
 801866c:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 801866e:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8018672:	3301      	adds	r3, #1
 8018674:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8018678:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801867c:	3302      	adds	r3, #2
 801867e:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8018682:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8018686:	3304      	adds	r3, #4
 8018688:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 801868c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018690:	3304      	adds	r3, #4
 8018692:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8018696:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801869a:	2b07      	cmp	r3, #7
 801869c:	f77f af17 	ble.w	80184ce <jpeg_idct_10x5+0x3a>
  }

  /* Pass 2: process 5 rows from work array, store into output array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  wsptr = workspace;
 80186a0:	f107 0310 	add.w	r3, r7, #16
 80186a4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (ctr = 0; ctr < 5; ctr++) {
 80186a8:	2300      	movs	r3, #0
 80186aa:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 80186ae:	e1d0      	b.n	8018a52 <jpeg_idct_10x5+0x5be>
 80186b0:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 80186b4:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80186b8:	009b      	lsls	r3, r3, #2
 80186ba:	463a      	mov	r2, r7
 80186bc:	6812      	ldr	r2, [r2, #0]
 80186be:	4413      	add	r3, r2
 80186c0:	681a      	ldr	r2, [r3, #0]
 80186c2:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80186c6:	4413      	add	r3, r2
 80186c8:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

    /* Even part */

    /* Add fudge factor here for final descale. */
    z3 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80186cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80186d0:	681b      	ldr	r3, [r3, #0]
 80186d2:	3310      	adds	r3, #16
 80186d4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    z3 <<= CONST_BITS;
 80186d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80186dc:	035b      	lsls	r3, r3, #13
 80186de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    z4 = (INT32) wsptr[4];
 80186e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80186e6:	3310      	adds	r3, #16
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 80186ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80186f2:	f242 429d 	movw	r2, #9373	; 0x249d
 80186f6:	fb02 f303 	mul.w	r3, r2, r3
 80186fa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 80186fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018702:	f640 52fc 	movw	r2, #3580	; 0xdfc
 8018706:	fb02 f303 	mul.w	r3, r2, r3
 801870a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    tmp10 = z3 + z1;
 801870e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8018712:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018716:	4413      	add	r3, r2
 8018718:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    tmp11 = z3 - z2;
 801871c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8018720:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018724:	1ad3      	subs	r3, r2, r3
 8018726:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0

    tmp22 = z3 - ((z1 - z2) << 1);               /* c0 = (c4-c8)*2 */
 801872a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801872e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018732:	1ad3      	subs	r3, r2, r3
 8018734:	005b      	lsls	r3, r3, #1
 8018736:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801873a:	1ad3      	subs	r3, r2, r3
 801873c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

    z2 = (INT32) wsptr[2];
 8018740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018744:	3308      	adds	r3, #8
 8018746:	681b      	ldr	r3, [r3, #0]
 8018748:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z3 = (INT32) wsptr[6];
 801874c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018750:	3318      	adds	r3, #24
 8018752:	681b      	ldr	r3, [r3, #0]
 8018754:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 8018758:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801875c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018760:	4413      	add	r3, r2
 8018762:	f641 229a 	movw	r2, #6810	; 0x1a9a
 8018766:	fb02 f303 	mul.w	r3, r2, r3
 801876a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801876e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018772:	f241 0271 	movw	r2, #4209	; 0x1071
 8018776:	fb02 f303 	mul.w	r3, r2, r3
 801877a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801877e:	4413      	add	r3, r2
 8018780:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 8018784:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8018788:	4ab8      	ldr	r2, [pc, #736]	; (8018a6c <jpeg_idct_10x5+0x5d8>)
 801878a:	fb02 f303 	mul.w	r3, r2, r3
 801878e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8018792:	4413      	add	r3, r2
 8018794:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    tmp20 = tmp10 + tmp12;
 8018798:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 801879c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80187a0:	4413      	add	r3, r2
 80187a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    tmp24 = tmp10 - tmp12;
 80187a6:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 80187aa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80187ae:	1ad3      	subs	r3, r2, r3
 80187b0:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp21 = tmp11 + tmp13;
 80187b4:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80187b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80187bc:	4413      	add	r3, r2
 80187be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp23 = tmp11 - tmp13;
 80187c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80187c6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80187ca:	1ad3      	subs	r3, r2, r3
 80187cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

    /* Odd part */

    z1 = (INT32) wsptr[1];
 80187d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80187d4:	3304      	adds	r3, #4
 80187d6:	681b      	ldr	r3, [r3, #0]
 80187d8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    z2 = (INT32) wsptr[3];
 80187dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80187e0:	330c      	adds	r3, #12
 80187e2:	681b      	ldr	r3, [r3, #0]
 80187e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z3 = (INT32) wsptr[5];
 80187e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80187ec:	3314      	adds	r3, #20
 80187ee:	681b      	ldr	r3, [r3, #0]
 80187f0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    z3 <<= CONST_BITS;
 80187f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80187f8:	035b      	lsls	r3, r3, #13
 80187fa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    z4 = (INT32) wsptr[7];
 80187fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018802:	331c      	adds	r3, #28
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    tmp11 = z2 + z4;
 801880a:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801880e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018812:	4413      	add	r3, r2
 8018814:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp13 = z2 - z4;
 8018818:	f8d7 20d8 	ldr.w	r2, [r7, #216]	; 0xd8
 801881c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018820:	1ad3      	subs	r3, r2, r3
 8018822:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 8018826:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 801882a:	f640 12e3 	movw	r2, #2531	; 0x9e3
 801882e:	fb02 f303 	mul.w	r3, r2, r3
 8018832:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 8018836:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801883a:	f641 626f 	movw	r2, #7791	; 0x1e6f
 801883e:	fb02 f303 	mul.w	r3, r2, r3
 8018842:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z4 = z3 + tmp12;
 8018846:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801884a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801884e:	4413      	add	r3, r2
 8018850:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 8018854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018858:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 801885c:	fb02 f203 	mul.w	r2, r2, r3
 8018860:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018864:	4413      	add	r3, r2
 8018866:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801886a:	4413      	add	r3, r2
 801886c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 8018870:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8018874:	f240 7214 	movw	r2, #1812	; 0x714
 8018878:	fb02 f203 	mul.w	r2, r2, r3
 801887c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8018880:	1ad3      	subs	r3, r2, r3
 8018882:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8018886:	4413      	add	r3, r2
 8018888:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801888c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018890:	f241 22cf 	movw	r2, #4815	; 0x12cf
 8018894:	fb02 f303 	mul.w	r3, r2, r3
 8018898:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    z4 = z3 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801889c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80188a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80188a4:	1ad2      	subs	r2, r2, r3
 80188a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80188aa:	031b      	lsls	r3, r3, #12
 80188ac:	1ad3      	subs	r3, r2, r3
 80188ae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    tmp12 = ((z1 - tmp13) << CONST_BITS) - z3;
 80188b2:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 80188b6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80188ba:	1ad3      	subs	r3, r2, r3
 80188bc:	035a      	lsls	r2, r3, #13
 80188be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80188c2:	1ad3      	subs	r3, r2, r3
 80188c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 80188c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80188cc:	f642 0253 	movw	r2, #10323	; 0x2853
 80188d0:	fb02 f203 	mul.w	r2, r2, r3
 80188d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80188d8:	1ad2      	subs	r2, r2, r3
 80188da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80188de:	1ad3      	subs	r3, r2, r3
 80188e0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 80188e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80188e8:	f241 428c 	movw	r2, #5260	; 0x148c
 80188ec:	fb02 f203 	mul.w	r2, r2, r3
 80188f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80188f4:	1ad3      	subs	r3, r2, r3
 80188f6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80188fa:	4413      	add	r3, r2
 80188fc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8018900:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8018904:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018908:	4413      	add	r3, r2
 801890a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801890c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 8018910:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018914:	4413      	add	r3, r2
 8018916:	781a      	ldrb	r2, [r3, #0]
 8018918:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 801891c:	701a      	strb	r2, [r3, #0]
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801891e:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8018922:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018926:	1ad3      	subs	r3, r2, r3
 8018928:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801892a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[9] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801892e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018932:	441a      	add	r2, r3
 8018934:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018938:	3309      	adds	r3, #9
 801893a:	7812      	ldrb	r2, [r2, #0]
 801893c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801893e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018942:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018946:	4413      	add	r3, r2
 8018948:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801894a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801894e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018952:	441a      	add	r2, r3
 8018954:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018958:	3301      	adds	r3, #1
 801895a:	7812      	ldrb	r2, [r2, #0]
 801895c:	701a      	strb	r2, [r3, #0]
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801895e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018962:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018966:	1ad3      	subs	r3, r2, r3
 8018968:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801896a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[8] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801896e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018972:	441a      	add	r2, r3
 8018974:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018978:	3308      	adds	r3, #8
 801897a:	7812      	ldrb	r2, [r2, #0]
 801897c:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801897e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8018982:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018986:	4413      	add	r3, r2
 8018988:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801898a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801898e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018992:	441a      	add	r2, r3
 8018994:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018998:	3302      	adds	r3, #2
 801899a:	7812      	ldrb	r2, [r2, #0]
 801899c:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801899e:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80189a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80189a6:	1ad3      	subs	r3, r2, r3
 80189a8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80189aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 80189ae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80189b2:	441a      	add	r2, r3
 80189b4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80189b8:	3307      	adds	r3, #7
 80189ba:	7812      	ldrb	r2, [r2, #0]
 80189bc:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80189be:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80189c2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80189c6:	4413      	add	r3, r2
 80189c8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80189ca:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23 + tmp13,
 80189ce:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80189d2:	441a      	add	r2, r3
 80189d4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80189d8:	3303      	adds	r3, #3
 80189da:	7812      	ldrb	r2, [r2, #0]
 80189dc:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80189de:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80189e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80189e6:	1ad3      	subs	r3, r2, r3
 80189e8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80189ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp23 - tmp13,
 80189ee:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80189f2:	441a      	add	r2, r3
 80189f4:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80189f8:	3306      	adds	r3, #6
 80189fa:	7812      	ldrb	r2, [r2, #0]
 80189fc:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 80189fe:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018a02:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018a06:	4413      	add	r3, r2
 8018a08:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018a0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp24 + tmp14,
 8018a0e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018a12:	441a      	add	r2, r3
 8018a14:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018a18:	3304      	adds	r3, #4
 8018a1a:	7812      	ldrb	r2, [r2, #0]
 8018a1c:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8018a1e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018a22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018a26:	1ad3      	subs	r3, r2, r3
 8018a28:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018a2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp24 - tmp14,
 8018a2e:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 8018a32:	441a      	add	r2, r3
 8018a34:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8018a38:	3305      	adds	r3, #5
 8018a3a:	7812      	ldrb	r2, [r2, #0]
 8018a3c:	701a      	strb	r2, [r3, #0]

    wsptr += 8;		/* advance pointer to next row */
 8018a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8018a42:	3320      	adds	r3, #32
 8018a44:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  for (ctr = 0; ctr < 5; ctr++) {
 8018a48:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8018a4c:	3301      	adds	r3, #1
 8018a4e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8018a52:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8018a56:	2b04      	cmp	r3, #4
 8018a58:	f77f ae2c 	ble.w	80186b4 <jpeg_idct_10x5+0x220>
  }
}
 8018a5c:	bf00      	nop
 8018a5e:	bf00      	nop
 8018a60:	f507 7782 	add.w	r7, r7, #260	; 0x104
 8018a64:	46bd      	mov	sp, r7
 8018a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018a6a:	4770      	bx	lr
 8018a6c:	ffffba5c 	.word	0xffffba5c

08018a70 <jpeg_idct_8x4>:

GLOBAL(void)
jpeg_idct_8x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8018a70:	b480      	push	{r7}
 8018a72:	b0b7      	sub	sp, #220	; 0xdc
 8018a74:	af00      	add	r7, sp, #0
 8018a76:	60f8      	str	r0, [r7, #12]
 8018a78:	60b9      	str	r1, [r7, #8]
 8018a7a:	607a      	str	r2, [r7, #4]
 8018a7c:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8018a7e:	68fb      	ldr	r3, [r7, #12]
 8018a80:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8018a84:	3380      	adds	r3, #128	; 0x80
 8018a86:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  inptr = coef_block;
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8018a90:	68bb      	ldr	r3, [r7, #8]
 8018a92:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018a94:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  wsptr = workspace;
 8018a98:	f107 0314 	add.w	r3, r7, #20
 8018a9c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8018aa0:	2300      	movs	r3, #0
 8018aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018aa6:	e0a4      	b.n	8018bf2 <jpeg_idct_8x4+0x182>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8018aa8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018aac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018ab0:	461a      	mov	r2, r3
 8018ab2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	fb03 f302 	mul.w	r3, r3, r2
 8018abc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8018ac0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018ac4:	3320      	adds	r3, #32
 8018ac6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018aca:	461a      	mov	r2, r3
 8018acc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018ad0:	3340      	adds	r3, #64	; 0x40
 8018ad2:	681b      	ldr	r3, [r3, #0]
 8018ad4:	fb03 f302 	mul.w	r3, r3, r2
 8018ad8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    tmp10 = (tmp0 + tmp2) << PASS1_BITS;
 8018adc:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018ae0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018ae4:	4413      	add	r3, r2
 8018ae6:	009b      	lsls	r3, r3, #2
 8018ae8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    tmp12 = (tmp0 - tmp2) << PASS1_BITS;
 8018aec:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018af0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018af4:	1ad3      	subs	r3, r2, r3
 8018af6:	009b      	lsls	r3, r3, #2
 8018af8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8018afc:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b00:	3310      	adds	r3, #16
 8018b02:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b06:	461a      	mov	r2, r3
 8018b08:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018b0c:	3320      	adds	r3, #32
 8018b0e:	681b      	ldr	r3, [r3, #0]
 8018b10:	fb03 f302 	mul.w	r3, r3, r2
 8018b14:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8018b18:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018b1c:	3330      	adds	r3, #48	; 0x30
 8018b1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018b22:	461a      	mov	r2, r3
 8018b24:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018b28:	3360      	adds	r3, #96	; 0x60
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	fb03 f302 	mul.w	r3, r3, r2
 8018b30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);               /* c6 */
 8018b34:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018b38:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018b3c:	4413      	add	r3, r2
 8018b3e:	f241 1251 	movw	r2, #4433	; 0x1151
 8018b42:	fb02 f303 	mul.w	r3, r2, r3
 8018b46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8018b4a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018b4e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018b52:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp0 = RIGHT_SHIFT(z1 + MULTIPLY(z2, FIX_0_765366865), /* c2-c6 */
 8018b56:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018b5a:	f641 027e 	movw	r2, #6270	; 0x187e
 8018b5e:	fb02 f203 	mul.w	r2, r2, r3
 8018b62:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018b66:	4413      	add	r3, r2
 8018b68:	12db      	asrs	r3, r3, #11
 8018b6a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
		       CONST_BITS-PASS1_BITS);
    tmp2 = RIGHT_SHIFT(z1 - MULTIPLY(z3, FIX_1_847759065), /* c2+c6 */
 8018b6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018b72:	4a26      	ldr	r2, [pc, #152]	; (8018c0c <jpeg_idct_8x4+0x19c>)
 8018b74:	fb02 f203 	mul.w	r2, r2, r3
 8018b78:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018b7c:	4413      	add	r3, r2
 8018b7e:	12db      	asrs	r3, r3, #11
 8018b80:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
		       CONST_BITS-PASS1_BITS);

    /* Final output stage */

    wsptr[8*0] = (int) (tmp10 + tmp0);
 8018b84:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8018b88:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018b8c:	441a      	add	r2, r3
 8018b8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018b92:	601a      	str	r2, [r3, #0]
    wsptr[8*3] = (int) (tmp10 - tmp0);
 8018b94:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018b98:	3360      	adds	r3, #96	; 0x60
 8018b9a:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8018b9e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018ba2:	1a8a      	subs	r2, r1, r2
 8018ba4:	601a      	str	r2, [r3, #0]
    wsptr[8*1] = (int) (tmp12 + tmp2);
 8018ba6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018baa:	3320      	adds	r3, #32
 8018bac:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8018bb0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018bb4:	440a      	add	r2, r1
 8018bb6:	601a      	str	r2, [r3, #0]
    wsptr[8*2] = (int) (tmp12 - tmp2);
 8018bb8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018bbc:	3340      	adds	r3, #64	; 0x40
 8018bbe:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8018bc2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018bc6:	1a8a      	subs	r2, r1, r2
 8018bc8:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8018bca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018bce:	3301      	adds	r3, #1
 8018bd0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018bd4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8018bd8:	3302      	adds	r3, #2
 8018bda:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8018bde:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8018be2:	3304      	adds	r3, #4
 8018be4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8018be8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018bec:	3304      	adds	r3, #4
 8018bee:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8018bf2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018bf6:	2b07      	cmp	r3, #7
 8018bf8:	f77f af56 	ble.w	8018aa8 <jpeg_idct_8x4+0x38>

  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8018bfc:	f107 0314 	add.w	r3, r7, #20
 8018c00:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 4; ctr++) {
 8018c04:	2300      	movs	r3, #0
 8018c06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018c0a:	e1a2      	b.n	8018f52 <jpeg_idct_8x4+0x4e2>
 8018c0c:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 8018c10:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018c14:	009b      	lsls	r3, r3, #2
 8018c16:	683a      	ldr	r2, [r7, #0]
 8018c18:	4413      	add	r3, r2
 8018c1a:	681a      	ldr	r2, [r3, #0]
 8018c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8018c20:	4413      	add	r3, r2
 8018c22:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */

    z2 = (INT32) wsptr[2];
 8018c26:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018c2a:	3308      	adds	r3, #8
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = (INT32) wsptr[6];
 8018c32:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018c36:	3318      	adds	r3, #24
 8018c38:	681b      	ldr	r3, [r3, #0]
 8018c3a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8018c3e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018c42:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018c46:	4413      	add	r3, r2
 8018c48:	f241 1251 	movw	r2, #4433	; 0x1151
 8018c4c:	fb02 f303 	mul.w	r3, r2, r3
 8018c50:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8018c54:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018c58:	f641 027e 	movw	r2, #6270	; 0x187e
 8018c5c:	fb02 f303 	mul.w	r3, r2, r3
 8018c60:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018c64:	4413      	add	r3, r2
 8018c66:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8018c6a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018c6e:	4abf      	ldr	r2, [pc, #764]	; (8018f6c <jpeg_idct_8x4+0x4fc>)
 8018c70:	fb02 f303 	mul.w	r3, r2, r3
 8018c74:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018c78:	4413      	add	r3, r2
 8018c7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    
    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8018c7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	3310      	adds	r3, #16
 8018c86:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = (INT32) wsptr[4];
 8018c8a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018c8e:	3310      	adds	r3, #16
 8018c90:	681b      	ldr	r3, [r3, #0]
 8018c92:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    
    tmp0 = (z2 + z3) << CONST_BITS;
 8018c96:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018c9a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018c9e:	4413      	add	r3, r2
 8018ca0:	035b      	lsls	r3, r3, #13
 8018ca2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp1 = (z2 - z3) << CONST_BITS;
 8018ca6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018caa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018cae:	1ad3      	subs	r3, r2, r3
 8018cb0:	035b      	lsls	r3, r3, #13
 8018cb2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    
    tmp10 = tmp0 + tmp2;
 8018cb6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018cba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018cbe:	4413      	add	r3, r2
 8018cc0:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    tmp13 = tmp0 - tmp2;
 8018cc4:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018cc8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018ccc:	1ad3      	subs	r3, r2, r3
 8018cce:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tmp11 = tmp1 + tmp3;
 8018cd2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018cd6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018cda:	4413      	add	r3, r2
 8018cdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tmp12 = tmp1 - tmp3;
 8018ce0:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018ce4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018ce8:	1ad3      	subs	r3, r2, r3
 8018cea:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = (INT32) wsptr[7];
 8018cee:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018cf2:	331c      	adds	r3, #28
 8018cf4:	681b      	ldr	r3, [r3, #0]
 8018cf6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp1 = (INT32) wsptr[5];
 8018cfa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018cfe:	3314      	adds	r3, #20
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp2 = (INT32) wsptr[3];
 8018d06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018d0a:	330c      	adds	r3, #12
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    tmp3 = (INT32) wsptr[1];
 8018d12:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018d16:	3304      	adds	r3, #4
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    z2 = tmp0 + tmp2;
 8018d1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018d22:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018d26:	4413      	add	r3, r2
 8018d28:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = tmp1 + tmp3;
 8018d2c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018d30:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d34:	4413      	add	r3, r2
 8018d36:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8018d3a:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018d3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018d42:	4413      	add	r3, r2
 8018d44:	f242 52a1 	movw	r2, #9633	; 0x25a1
 8018d48:	fb02 f303 	mul.w	r3, r2, r3
 8018d4c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8018d50:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018d54:	4a86      	ldr	r2, [pc, #536]	; (8018f70 <jpeg_idct_8x4+0x500>)
 8018d56:	fb02 f303 	mul.w	r3, r2, r3
 8018d5a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8018d5e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018d62:	4a84      	ldr	r2, [pc, #528]	; (8018f74 <jpeg_idct_8x4+0x504>)
 8018d64:	fb02 f303 	mul.w	r3, r2, r3
 8018d68:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    z2 += z1;
 8018d6c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8018d70:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018d74:	4413      	add	r3, r2
 8018d76:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    z3 += z1;
 8018d7a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8018d7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8018d82:	4413      	add	r3, r2
 8018d84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8018d88:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018d8c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018d90:	4413      	add	r3, r2
 8018d92:	4a79      	ldr	r2, [pc, #484]	; (8018f78 <jpeg_idct_8x4+0x508>)
 8018d94:	fb02 f303 	mul.w	r3, r2, r3
 8018d98:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8018d9c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018da0:	f640 128e 	movw	r2, #2446	; 0x98e
 8018da4:	fb02 f303 	mul.w	r3, r2, r3
 8018da8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8018dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018db0:	f243 020b 	movw	r2, #12299	; 0x300b
 8018db4:	fb02 f303 	mul.w	r3, r2, r3
 8018db8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    tmp0 += z1 + z2;
 8018dbc:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018dc0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018dc4:	4413      	add	r3, r2
 8018dc6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8018dca:	4413      	add	r3, r2
 8018dcc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    tmp3 += z1 + z3;
 8018dd0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018dd4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018dd8:	4413      	add	r3, r2
 8018dda:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8018dde:	4413      	add	r3, r2
 8018de0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8018de4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018de8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018dec:	4413      	add	r3, r2
 8018dee:	4a63      	ldr	r2, [pc, #396]	; (8018f7c <jpeg_idct_8x4+0x50c>)
 8018df0:	fb02 f303 	mul.w	r3, r2, r3
 8018df4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8018df8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018dfc:	f244 12b3 	movw	r2, #16819	; 0x41b3
 8018e00:	fb02 f303 	mul.w	r3, r2, r3
 8018e04:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8018e08:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018e0c:	f246 2254 	movw	r2, #25172	; 0x6254
 8018e10:	fb02 f303 	mul.w	r3, r2, r3
 8018e14:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    tmp1 += z1 + z3;
 8018e18:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018e1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8018e20:	4413      	add	r3, r2
 8018e22:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8018e26:	4413      	add	r3, r2
 8018e28:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp2 += z1 + z2;
 8018e2c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8018e30:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8018e34:	4413      	add	r3, r2
 8018e36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8018e3a:	4413      	add	r3, r2
 8018e3c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8018e40:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8018e44:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018e48:	4413      	add	r3, r2
 8018e4a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018e4c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8018e50:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018e54:	4413      	add	r3, r2
 8018e56:	781a      	ldrb	r2, [r3, #0]
 8018e58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018e5c:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8018e5e:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8018e62:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8018e66:	1ad3      	subs	r3, r2, r3
 8018e68:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018e6a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8018e6e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018e72:	441a      	add	r2, r3
 8018e74:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018e78:	3307      	adds	r3, #7
 8018e7a:	7812      	ldrb	r2, [r2, #0]
 8018e7c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8018e7e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018e82:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018e86:	4413      	add	r3, r2
 8018e88:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018e8a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8018e8e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018e92:	441a      	add	r2, r3
 8018e94:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018e98:	3301      	adds	r3, #1
 8018e9a:	7812      	ldrb	r2, [r2, #0]
 8018e9c:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8018e9e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8018ea2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8018ea6:	1ad3      	subs	r3, r2, r3
 8018ea8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018eaa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8018eae:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018eb2:	441a      	add	r2, r3
 8018eb4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018eb8:	3306      	adds	r3, #6
 8018eba:	7812      	ldrb	r2, [r2, #0]
 8018ebc:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8018ebe:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018ec2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018ec6:	4413      	add	r3, r2
 8018ec8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018eca:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8018ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018ed2:	441a      	add	r2, r3
 8018ed4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018ed8:	3302      	adds	r3, #2
 8018eda:	7812      	ldrb	r2, [r2, #0]
 8018edc:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8018ede:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8018ee2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8018ee6:	1ad3      	subs	r3, r2, r3
 8018ee8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018eea:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8018eee:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018ef2:	441a      	add	r2, r3
 8018ef4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018ef8:	3305      	adds	r3, #5
 8018efa:	7812      	ldrb	r2, [r2, #0]
 8018efc:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8018efe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018f02:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018f06:	4413      	add	r3, r2
 8018f08:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018f0a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8018f0e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018f12:	441a      	add	r2, r3
 8018f14:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018f18:	3303      	adds	r3, #3
 8018f1a:	7812      	ldrb	r2, [r2, #0]
 8018f1c:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8018f1e:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8018f22:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8018f26:	1ad3      	subs	r3, r2, r3
 8018f28:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8018f2a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8018f2e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8018f32:	441a      	add	r2, r3
 8018f34:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8018f38:	3304      	adds	r3, #4
 8018f3a:	7812      	ldrb	r2, [r2, #0]
 8018f3c:	701a      	strb	r2, [r3, #0]

    wsptr += DCTSIZE;		/* advance pointer to next row */
 8018f3e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8018f42:	3320      	adds	r3, #32
 8018f44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 4; ctr++) {
 8018f48:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018f4c:	3301      	adds	r3, #1
 8018f4e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8018f52:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8018f56:	2b03      	cmp	r3, #3
 8018f58:	f77f ae5a 	ble.w	8018c10 <jpeg_idct_8x4+0x1a0>
  }
}
 8018f5c:	bf00      	nop
 8018f5e:	bf00      	nop
 8018f60:	37dc      	adds	r7, #220	; 0xdc
 8018f62:	46bd      	mov	sp, r7
 8018f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018f68:	4770      	bx	lr
 8018f6a:	bf00      	nop
 8018f6c:	ffffc4df 	.word	0xffffc4df
 8018f70:	ffffc13b 	.word	0xffffc13b
 8018f74:	fffff384 	.word	0xfffff384
 8018f78:	ffffe333 	.word	0xffffe333
 8018f7c:	ffffadfd 	.word	0xffffadfd

08018f80 <jpeg_idct_6x3>:

GLOBAL(void)
jpeg_idct_6x3 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8018f80:	b480      	push	{r7}
 8018f82:	b0a7      	sub	sp, #156	; 0x9c
 8018f84:	af00      	add	r7, sp, #0
 8018f86:	60f8      	str	r0, [r7, #12]
 8018f88:	60b9      	str	r1, [r7, #8]
 8018f8a:	607a      	str	r2, [r7, #4]
 8018f8c:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8018f8e:	68fb      	ldr	r3, [r7, #12]
 8018f90:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8018f94:	3380      	adds	r3, #128	; 0x80
 8018f96:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  inptr = coef_block;
 8018f9a:	687b      	ldr	r3, [r7, #4]
 8018f9c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8018fa0:	68bb      	ldr	r3, [r7, #8]
 8018fa2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8018fa4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  wsptr = workspace;
 8018fa8:	f107 0314 	add.w	r3, r7, #20
 8018fac:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8018fb0:	2300      	movs	r3, #0
 8018fb2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8018fb6:	e06a      	b.n	801908e <jpeg_idct_6x3+0x10e>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8018fb8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018fbc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fc0:	461a      	mov	r2, r3
 8018fc2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018fc6:	681b      	ldr	r3, [r3, #0]
 8018fc8:	fb03 f302 	mul.w	r3, r3, r2
 8018fcc:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp0 <<= CONST_BITS;
 8018fce:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018fd0:	035b      	lsls	r3, r3, #13
 8018fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 8018fd4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8018fd6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8018fda:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8018fdc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8018fe0:	3320      	adds	r3, #32
 8018fe2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018fe6:	461a      	mov	r2, r3
 8018fe8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8018fec:	3340      	adds	r3, #64	; 0x40
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	fb03 f302 	mul.w	r3, r3, r2
 8018ff4:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 8018ff6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8018ff8:	f241 62a1 	movw	r2, #5793	; 0x16a1
 8018ffc:	fb02 f303 	mul.w	r3, r2, r3
 8019000:	66bb      	str	r3, [r7, #104]	; 0x68
    tmp10 = tmp0 + tmp12;
 8019002:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8019004:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019006:	4413      	add	r3, r2
 8019008:	677b      	str	r3, [r7, #116]	; 0x74
    tmp2 = tmp0 - tmp12 - tmp12;
 801900a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801900c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801900e:	1ad2      	subs	r2, r2, r3
 8019010:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019012:	1ad3      	subs	r3, r2, r3
 8019014:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Odd part */

    tmp12 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8019016:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801901a:	3310      	adds	r3, #16
 801901c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019020:	461a      	mov	r2, r3
 8019022:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8019026:	3320      	adds	r3, #32
 8019028:	681b      	ldr	r3, [r3, #0]
 801902a:	fb03 f302 	mul.w	r3, r3, r2
 801902e:	66bb      	str	r3, [r7, #104]	; 0x68
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 8019030:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8019032:	f242 7231 	movw	r2, #10033	; 0x2731
 8019036:	fb02 f303 	mul.w	r3, r2, r3
 801903a:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Final output stage */

    wsptr[6*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801903c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801903e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019040:	4413      	add	r3, r2
 8019042:	12da      	asrs	r2, r3, #11
 8019044:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019048:	601a      	str	r2, [r3, #0]
    wsptr[6*2] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801904a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801904c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801904e:	1ad2      	subs	r2, r2, r3
 8019050:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019054:	3330      	adds	r3, #48	; 0x30
 8019056:	12d2      	asrs	r2, r2, #11
 8019058:	601a      	str	r2, [r3, #0]
    wsptr[6*1] = (int) RIGHT_SHIFT(tmp2, CONST_BITS-PASS1_BITS);
 801905a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801905e:	3318      	adds	r3, #24
 8019060:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8019062:	12d2      	asrs	r2, r2, #11
 8019064:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 8019066:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801906a:	3301      	adds	r3, #1
 801906c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8019070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8019074:	3302      	adds	r3, #2
 8019076:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801907a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801907e:	3304      	adds	r3, #4
 8019080:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8019084:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019088:	3304      	adds	r3, #4
 801908a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801908e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019092:	2b05      	cmp	r3, #5
 8019094:	dd90      	ble.n	8018fb8 <jpeg_idct_6x3+0x38>
  }
  
  /* Pass 2: process 3 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 8019096:	f107 0314 	add.w	r3, r7, #20
 801909a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 3; ctr++) {
 801909e:	2300      	movs	r3, #0
 80190a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80190a4:	e0c3      	b.n	801922e <jpeg_idct_6x3+0x2ae>
    outptr = output_buf[ctr] + output_col;
 80190a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80190aa:	009b      	lsls	r3, r3, #2
 80190ac:	683a      	ldr	r2, [r7, #0]
 80190ae:	4413      	add	r3, r2
 80190b0:	681a      	ldr	r2, [r3, #0]
 80190b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80190b6:	4413      	add	r3, r2
 80190b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 80190bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80190c0:	681b      	ldr	r3, [r3, #0]
 80190c2:	3310      	adds	r3, #16
 80190c4:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp0 <<= CONST_BITS;
 80190c6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80190c8:	035b      	lsls	r3, r3, #13
 80190ca:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = (INT32) wsptr[4];
 80190cc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80190d0:	3310      	adds	r3, #16
 80190d2:	681b      	ldr	r3, [r3, #0]
 80190d4:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 80190d6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80190d8:	f241 62a1 	movw	r2, #5793	; 0x16a1
 80190dc:	fb02 f303 	mul.w	r3, r2, r3
 80190e0:	677b      	str	r3, [r7, #116]	; 0x74
    tmp1 = tmp0 + tmp10;
 80190e2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80190e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80190e6:	4413      	add	r3, r2
 80190e8:	673b      	str	r3, [r7, #112]	; 0x70
    tmp11 = tmp0 - tmp10 - tmp10;
 80190ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80190ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80190ee:	1ad2      	subs	r2, r2, r3
 80190f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80190f2:	1ad3      	subs	r3, r2, r3
 80190f4:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp10 = (INT32) wsptr[2];
 80190f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80190fa:	3308      	adds	r3, #8
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	677b      	str	r3, [r7, #116]	; 0x74
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 8019100:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8019102:	f242 7231 	movw	r2, #10033	; 0x2731
 8019106:	fb02 f303 	mul.w	r3, r2, r3
 801910a:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp10 = tmp1 + tmp0;
 801910c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801910e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019110:	4413      	add	r3, r2
 8019112:	677b      	str	r3, [r7, #116]	; 0x74
    tmp12 = tmp1 - tmp0;
 8019114:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019116:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019118:	1ad3      	subs	r3, r2, r3
 801911a:	66bb      	str	r3, [r7, #104]	; 0x68

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801911c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019120:	3304      	adds	r3, #4
 8019122:	681b      	ldr	r3, [r3, #0]
 8019124:	667b      	str	r3, [r7, #100]	; 0x64
    z2 = (INT32) wsptr[3];
 8019126:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801912a:	330c      	adds	r3, #12
 801912c:	681b      	ldr	r3, [r3, #0]
 801912e:	663b      	str	r3, [r7, #96]	; 0x60
    z3 = (INT32) wsptr[5];
 8019130:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8019134:	3314      	adds	r3, #20
 8019136:	681b      	ldr	r3, [r3, #0]
 8019138:	65fb      	str	r3, [r7, #92]	; 0x5c
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801913a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801913c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801913e:	4413      	add	r3, r2
 8019140:	f640 32b6 	movw	r2, #2998	; 0xbb6
 8019144:	fb02 f303 	mul.w	r3, r2, r3
 8019148:	673b      	str	r3, [r7, #112]	; 0x70
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801914a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801914c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801914e:	4413      	add	r3, r2
 8019150:	035b      	lsls	r3, r3, #13
 8019152:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019154:	4413      	add	r3, r2
 8019156:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 8019158:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801915a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801915c:	1ad3      	subs	r3, r2, r3
 801915e:	035b      	lsls	r3, r3, #13
 8019160:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8019162:	4413      	add	r3, r2
 8019164:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp1 = (z1 - z2 - z3) << CONST_BITS;
 8019166:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8019168:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801916a:	1ad2      	subs	r2, r2, r3
 801916c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801916e:	1ad3      	subs	r3, r2, r3
 8019170:	035b      	lsls	r3, r3, #13
 8019172:	673b      	str	r3, [r7, #112]	; 0x70

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8019174:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019176:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019178:	4413      	add	r3, r2
 801917a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801917c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8019180:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8019184:	4413      	add	r3, r2
 8019186:	781a      	ldrb	r2, [r3, #0]
 8019188:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801918c:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801918e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8019190:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8019192:	1ad3      	subs	r3, r2, r3
 8019194:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019196:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801919a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801919e:	441a      	add	r2, r3
 80191a0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80191a4:	3305      	adds	r3, #5
 80191a6:	7812      	ldrb	r2, [r2, #0]
 80191a8:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80191aa:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80191ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80191ae:	4413      	add	r3, r2
 80191b0:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80191b2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp1,
 80191b6:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80191ba:	441a      	add	r2, r3
 80191bc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80191c0:	3301      	adds	r3, #1
 80191c2:	7812      	ldrb	r2, [r2, #0]
 80191c4:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80191c6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80191c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80191ca:	1ad3      	subs	r3, r2, r3
 80191cc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80191ce:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp1,
 80191d2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80191d6:	441a      	add	r2, r3
 80191d8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80191dc:	3304      	adds	r3, #4
 80191de:	7812      	ldrb	r2, [r2, #0]
 80191e0:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80191e2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80191e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80191e6:	4413      	add	r3, r2
 80191e8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 80191ea:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 80191ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80191f2:	441a      	add	r2, r3
 80191f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80191f8:	3302      	adds	r3, #2
 80191fa:	7812      	ldrb	r2, [r2, #0]
 80191fc:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 80191fe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8019200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8019202:	1ad3      	subs	r3, r2, r3
 8019204:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019206:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801920a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801920e:	441a      	add	r2, r3
 8019210:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8019214:	3303      	adds	r3, #3
 8019216:	7812      	ldrb	r2, [r2, #0]
 8019218:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 801921a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801921e:	3318      	adds	r3, #24
 8019220:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 3; ctr++) {
 8019224:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019228:	3301      	adds	r3, #1
 801922a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801922e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8019232:	2b02      	cmp	r3, #2
 8019234:	f77f af37 	ble.w	80190a6 <jpeg_idct_6x3+0x126>
  }
}
 8019238:	bf00      	nop
 801923a:	bf00      	nop
 801923c:	379c      	adds	r7, #156	; 0x9c
 801923e:	46bd      	mov	sp, r7
 8019240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019244:	4770      	bx	lr
	...

08019248 <jpeg_idct_4x2>:

GLOBAL(void)
jpeg_idct_4x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8019248:	b480      	push	{r7}
 801924a:	b09b      	sub	sp, #108	; 0x6c
 801924c:	af00      	add	r7, sp, #0
 801924e:	60f8      	str	r0, [r7, #12]
 8019250:	60b9      	str	r1, [r7, #8]
 8019252:	607a      	str	r2, [r7, #4]
 8019254:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801925c:	3380      	adds	r3, #128	; 0x80
 801925e:	657b      	str	r3, [r7, #84]	; 0x54
  INT32 workspace[4*2];	/* buffers data between passes */
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array. */

  inptr = coef_block;
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	667b      	str	r3, [r7, #100]	; 0x64
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8019264:	68bb      	ldr	r3, [r7, #8]
 8019266:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019268:	663b      	str	r3, [r7, #96]	; 0x60
  wsptr = workspace;
 801926a:	f107 0314 	add.w	r3, r7, #20
 801926e:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 8019270:	2300      	movs	r3, #0
 8019272:	65bb      	str	r3, [r7, #88]	; 0x58
 8019274:	e02a      	b.n	80192cc <jpeg_idct_4x2+0x84>
    /* Even part */

    tmp10 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8019276:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8019278:	f9b3 3000 	ldrsh.w	r3, [r3]
 801927c:	461a      	mov	r2, r3
 801927e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019280:	681b      	ldr	r3, [r3, #0]
 8019282:	fb03 f302 	mul.w	r3, r3, r2
 8019286:	647b      	str	r3, [r7, #68]	; 0x44

    /* Odd part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8019288:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801928a:	3310      	adds	r3, #16
 801928c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019290:	461a      	mov	r2, r3
 8019292:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8019294:	3320      	adds	r3, #32
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	fb03 f302 	mul.w	r3, r3, r2
 801929c:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Final output stage */

    wsptr[4*0] = tmp10 + tmp0;
 801929e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80192a0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80192a2:	441a      	add	r2, r3
 80192a4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192a6:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = tmp10 - tmp0;
 80192a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192aa:	3310      	adds	r3, #16
 80192ac:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80192ae:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80192b0:	1a8a      	subs	r2, r1, r2
 80192b2:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 4; ctr++, inptr++, quantptr++, wsptr++) {
 80192b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80192b6:	3301      	adds	r3, #1
 80192b8:	65bb      	str	r3, [r7, #88]	; 0x58
 80192ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80192bc:	3302      	adds	r3, #2
 80192be:	667b      	str	r3, [r7, #100]	; 0x64
 80192c0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80192c2:	3304      	adds	r3, #4
 80192c4:	663b      	str	r3, [r7, #96]	; 0x60
 80192c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192c8:	3304      	adds	r3, #4
 80192ca:	65fb      	str	r3, [r7, #92]	; 0x5c
 80192cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80192ce:	2b03      	cmp	r3, #3
 80192d0:	ddd1      	ble.n	8019276 <jpeg_idct_4x2+0x2e>

  /* Pass 2: process 2 rows from work array, store into output array.
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  wsptr = workspace;
 80192d2:	f107 0314 	add.w	r3, r7, #20
 80192d6:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 2; ctr++) {
 80192d8:	2300      	movs	r3, #0
 80192da:	65bb      	str	r3, [r7, #88]	; 0x58
 80192dc:	e06a      	b.n	80193b4 <jpeg_idct_4x2+0x16c>
    outptr = output_buf[ctr] + output_col;
 80192de:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80192e0:	009b      	lsls	r3, r3, #2
 80192e2:	683a      	ldr	r2, [r7, #0]
 80192e4:	4413      	add	r3, r2
 80192e6:	681a      	ldr	r2, [r3, #0]
 80192e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80192ea:	4413      	add	r3, r2
 80192ec:	653b      	str	r3, [r7, #80]	; 0x50

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = wsptr[0] + (ONE << 2);
 80192ee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	3304      	adds	r3, #4
 80192f4:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmp2 = wsptr[2];
 80192f6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80192f8:	689b      	ldr	r3, [r3, #8]
 80192fa:	64bb      	str	r3, [r7, #72]	; 0x48

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 80192fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80192fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019300:	4413      	add	r3, r2
 8019302:	035b      	lsls	r3, r3, #13
 8019304:	647b      	str	r3, [r7, #68]	; 0x44
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 8019306:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8019308:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801930a:	1ad3      	subs	r3, r2, r3
 801930c:	035b      	lsls	r3, r3, #13
 801930e:	643b      	str	r3, [r7, #64]	; 0x40

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = wsptr[1];
 8019310:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019312:	685b      	ldr	r3, [r3, #4]
 8019314:	63fb      	str	r3, [r7, #60]	; 0x3c
    z3 = wsptr[3];
 8019316:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8019318:	68db      	ldr	r3, [r3, #12]
 801931a:	63bb      	str	r3, [r7, #56]	; 0x38

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801931c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801931e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8019320:	4413      	add	r3, r2
 8019322:	f241 1251 	movw	r2, #4433	; 0x1151
 8019326:	fb02 f303 	mul.w	r3, r2, r3
 801932a:	637b      	str	r3, [r7, #52]	; 0x34
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801932c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801932e:	f641 027e 	movw	r2, #6270	; 0x187e
 8019332:	fb02 f303 	mul.w	r3, r2, r3
 8019336:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019338:	4413      	add	r3, r2
 801933a:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801933c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801933e:	4a22      	ldr	r2, [pc, #136]	; (80193c8 <jpeg_idct_4x2+0x180>)
 8019340:	fb02 f303 	mul.w	r3, r2, r3
 8019344:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8019346:	4413      	add	r3, r2
 8019348:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801934a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801934c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801934e:	4413      	add	r3, r2
 8019350:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 8019352:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 8019356:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019358:	4413      	add	r3, r2
 801935a:	781a      	ldrb	r2, [r3, #0]
 801935c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801935e:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 8019360:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8019362:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8019364:	1ad3      	subs	r3, r2, r3
 8019366:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 8019368:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801936c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801936e:	441a      	add	r2, r3
 8019370:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8019372:	3303      	adds	r3, #3
 8019374:	7812      	ldrb	r2, [r2, #0]
 8019376:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8019378:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801937a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801937c:	4413      	add	r3, r2
 801937e:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 8019380:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 8019384:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8019386:	441a      	add	r2, r3
 8019388:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801938a:	3301      	adds	r3, #1
 801938c:	7812      	ldrb	r2, [r2, #0]
 801938e:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 8019390:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8019392:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8019394:	1ad3      	subs	r3, r2, r3
 8019396:	141b      	asrs	r3, r3, #16
					      CONST_BITS+3)
			    & RANGE_MASK];
 8019398:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801939c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801939e:	441a      	add	r2, r3
 80193a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80193a2:	3302      	adds	r3, #2
 80193a4:	7812      	ldrb	r2, [r2, #0]
 80193a6:	701a      	strb	r2, [r3, #0]

    wsptr += 4;		/* advance pointer to next row */
 80193a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80193aa:	3310      	adds	r3, #16
 80193ac:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 2; ctr++) {
 80193ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80193b0:	3301      	adds	r3, #1
 80193b2:	65bb      	str	r3, [r7, #88]	; 0x58
 80193b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80193b6:	2b01      	cmp	r3, #1
 80193b8:	dd91      	ble.n	80192de <jpeg_idct_4x2+0x96>
  }
}
 80193ba:	bf00      	nop
 80193bc:	bf00      	nop
 80193be:	376c      	adds	r7, #108	; 0x6c
 80193c0:	46bd      	mov	sp, r7
 80193c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c6:	4770      	bx	lr
 80193c8:	ffffc4df 	.word	0xffffc4df

080193cc <jpeg_idct_2x1>:

GLOBAL(void)
jpeg_idct_2x1 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 80193cc:	b480      	push	{r7}
 80193ce:	b08b      	sub	sp, #44	; 0x2c
 80193d0:	af00      	add	r7, sp, #0
 80193d2:	60f8      	str	r0, [r7, #12]
 80193d4:	60b9      	str	r1, [r7, #8]
 80193d6:	607a      	str	r2, [r7, #4]
 80193d8:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp10;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 80193da:	68fb      	ldr	r3, [r7, #12]
 80193dc:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 80193e0:	3380      	adds	r3, #128	; 0x80
 80193e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Pass 1: empty. */

  /* Pass 2: process 1 row from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 80193e4:	68bb      	ldr	r3, [r7, #8]
 80193e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80193e8:	623b      	str	r3, [r7, #32]
  outptr = output_buf[0] + output_col;
 80193ea:	683b      	ldr	r3, [r7, #0]
 80193ec:	681a      	ldr	r2, [r3, #0]
 80193ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80193f0:	4413      	add	r3, r2
 80193f2:	61fb      	str	r3, [r7, #28]

  /* Even part */

  tmp10 = DEQUANTIZE(coef_block[0], quantptr[0]);
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80193fa:	461a      	mov	r2, r3
 80193fc:	6a3b      	ldr	r3, [r7, #32]
 80193fe:	681b      	ldr	r3, [r3, #0]
 8019400:	fb03 f302 	mul.w	r3, r3, r2
 8019404:	61bb      	str	r3, [r7, #24]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;
 8019406:	69bb      	ldr	r3, [r7, #24]
 8019408:	3304      	adds	r3, #4
 801940a:	61bb      	str	r3, [r7, #24]

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[1], quantptr[1]);
 801940c:	687b      	ldr	r3, [r7, #4]
 801940e:	3302      	adds	r3, #2
 8019410:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019414:	461a      	mov	r2, r3
 8019416:	6a3b      	ldr	r3, [r7, #32]
 8019418:	3304      	adds	r3, #4
 801941a:	681b      	ldr	r3, [r3, #0]
 801941c:	fb03 f302 	mul.w	r3, r3, r2
 8019420:	617b      	str	r3, [r7, #20]

  /* Final output stage */

  outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3) & RANGE_MASK];
 8019422:	69ba      	ldr	r2, [r7, #24]
 8019424:	697b      	ldr	r3, [r7, #20]
 8019426:	4413      	add	r3, r2
 8019428:	10db      	asrs	r3, r3, #3
 801942a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801942e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019430:	4413      	add	r3, r2
 8019432:	781a      	ldrb	r2, [r3, #0]
 8019434:	69fb      	ldr	r3, [r7, #28]
 8019436:	701a      	strb	r2, [r3, #0]
  outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3) & RANGE_MASK];
 8019438:	69ba      	ldr	r2, [r7, #24]
 801943a:	697b      	ldr	r3, [r7, #20]
 801943c:	1ad3      	subs	r3, r2, r3
 801943e:	10db      	asrs	r3, r3, #3
 8019440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8019444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8019446:	441a      	add	r2, r3
 8019448:	69fb      	ldr	r3, [r7, #28]
 801944a:	3301      	adds	r3, #1
 801944c:	7812      	ldrb	r2, [r2, #0]
 801944e:	701a      	strb	r2, [r3, #0]
}
 8019450:	bf00      	nop
 8019452:	372c      	adds	r7, #44	; 0x2c
 8019454:	46bd      	mov	sp, r7
 8019456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801945a:	4770      	bx	lr

0801945c <jpeg_idct_8x16>:

GLOBAL(void)
jpeg_idct_8x16 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801945c:	b490      	push	{r4, r7}
 801945e:	f5ad 7d1e 	sub.w	sp, sp, #632	; 0x278
 8019462:	af00      	add	r7, sp, #0
 8019464:	f107 040c 	add.w	r4, r7, #12
 8019468:	6020      	str	r0, [r4, #0]
 801946a:	f107 0008 	add.w	r0, r7, #8
 801946e:	6001      	str	r1, [r0, #0]
 8019470:	1d39      	adds	r1, r7, #4
 8019472:	600a      	str	r2, [r1, #0]
 8019474:	463a      	mov	r2, r7
 8019476:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8019478:	f107 030c 	add.w	r3, r7, #12
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8019482:	3380      	adds	r3, #128	; 0x80
 8019484:	f8c7 3264 	str.w	r3, [r7, #612]	; 0x264
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 16-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/32).
   */
  inptr = coef_block;
 8019488:	1d3b      	adds	r3, r7, #4
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8019490:	f107 0308 	add.w	r3, r7, #8
 8019494:	681b      	ldr	r3, [r3, #0]
 8019496:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019498:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
  wsptr = workspace;
 801949c:	f107 0310 	add.w	r3, r7, #16
 80194a0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 80194a4:	2300      	movs	r3, #0
 80194a6:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 80194aa:	e30b      	b.n	8019ac4 <jpeg_idct_8x16+0x668>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 80194ac:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80194b0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194b4:	461a      	mov	r2, r3
 80194b6:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	fb03 f302 	mul.w	r3, r3, r2
 80194c0:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp0 <<= CONST_BITS;
 80194c4:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80194c8:	035b      	lsls	r3, r3, #13
 80194ca:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 80194ce:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 80194d2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80194d6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248

    z1 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 80194da:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80194de:	3340      	adds	r3, #64	; 0x40
 80194e0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80194e4:	461a      	mov	r2, r3
 80194e6:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80194ea:	3380      	adds	r3, #128	; 0x80
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	fb03 f302 	mul.w	r3, r3, r2
 80194f2:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp1 = MULTIPLY(z1, FIX(1.306562965));      /* c4[16] = c2[8] */
 80194f6:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80194fa:	f642 12cf 	movw	r2, #10703	; 0x29cf
 80194fe:	fb02 f303 	mul.w	r3, r2, r3
 8019502:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 = MULTIPLY(z1, FIX_0_541196100);       /* c12[16] = c6[8] */
 8019506:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801950a:	f241 1251 	movw	r2, #4433	; 0x1151
 801950e:	fb02 f303 	mul.w	r3, r2, r3
 8019512:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250

    tmp10 = tmp0 + tmp1;
 8019516:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 801951a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801951e:	4413      	add	r3, r2
 8019520:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp11 = tmp0 - tmp1;
 8019524:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8019528:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801952c:	1ad3      	subs	r3, r2, r3
 801952e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = tmp0 + tmp2;
 8019532:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8019536:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 801953a:	4413      	add	r3, r2
 801953c:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    tmp13 = tmp0 - tmp2;
 8019540:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8019544:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019548:	1ad3      	subs	r3, r2, r3
 801954a:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801954e:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8019552:	3320      	adds	r3, #32
 8019554:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019558:	461a      	mov	r2, r3
 801955a:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801955e:	3340      	adds	r3, #64	; 0x40
 8019560:	681b      	ldr	r3, [r3, #0]
 8019562:	fb03 f302 	mul.w	r3, r3, r2
 8019566:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801956a:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801956e:	3360      	adds	r3, #96	; 0x60
 8019570:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019574:	461a      	mov	r2, r3
 8019576:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 801957a:	33c0      	adds	r3, #192	; 0xc0
 801957c:	681b      	ldr	r3, [r3, #0]
 801957e:	fb03 f302 	mul.w	r3, r3, r2
 8019582:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = z1 - z2;
 8019586:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801958a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801958e:	1ad3      	subs	r3, r2, r3
 8019590:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z4 = MULTIPLY(z3, FIX(0.275899379));        /* c14[16] = c7[8] */
 8019594:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019598:	f640 02d4 	movw	r2, #2260	; 0x8d4
 801959c:	fb02 f303 	mul.w	r3, r2, r3
 80195a0:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    z3 = MULTIPLY(z3, FIX(1.387039845));        /* c2[16] = c1[8] */
 80195a4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80195a8:	f642 4263 	movw	r2, #11363	; 0x2c63
 80195ac:	fb02 f303 	mul.w	r3, r2, r3
 80195b0:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

    tmp0 = z3 + MULTIPLY(z2, FIX_2_562915447);  /* (c6+c2)[16] = (c3+c1)[8] */
 80195b4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80195b8:	f245 2203 	movw	r2, #20995	; 0x5203
 80195bc:	fb02 f303 	mul.w	r3, r2, r3
 80195c0:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 80195c4:	4413      	add	r3, r2
 80195c6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp1 = z4 + MULTIPLY(z1, FIX_0_899976223);  /* (c6-c14)[16] = (c3-c7)[8] */
 80195ca:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80195ce:	f641 42cd 	movw	r2, #7373	; 0x1ccd
 80195d2:	fb02 f303 	mul.w	r3, r2, r3
 80195d6:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80195da:	4413      	add	r3, r2
 80195dc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 = z3 - MULTIPLY(z1, FIX(0.601344887)); /* (c2-c10)[16] = (c1-c5)[8] */
 80195e0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80195e4:	4af4      	ldr	r2, [pc, #976]	; (80199b8 <jpeg_idct_8x16+0x55c>)
 80195e6:	fb02 f303 	mul.w	r3, r2, r3
 80195ea:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 80195ee:	4413      	add	r3, r2
 80195f0:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = z4 - MULTIPLY(z2, FIX(0.509795579)); /* (c10-c14)[16] = (c5-c7)[8] */
 80195f4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80195f8:	4af0      	ldr	r2, [pc, #960]	; (80199bc <jpeg_idct_8x16+0x560>)
 80195fa:	fb02 f303 	mul.w	r3, r2, r3
 80195fe:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 8019602:	4413      	add	r3, r2
 8019604:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

    tmp20 = tmp10 + tmp0;
 8019608:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801960c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019610:	4413      	add	r3, r2
 8019612:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
    tmp27 = tmp10 - tmp0;
 8019616:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801961a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801961e:	1ad3      	subs	r3, r2, r3
 8019620:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    tmp21 = tmp12 + tmp1;
 8019624:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8019628:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801962c:	4413      	add	r3, r2
 801962e:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
    tmp26 = tmp12 - tmp1;
 8019632:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8019636:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801963a:	1ad3      	subs	r3, r2, r3
 801963c:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    tmp22 = tmp13 + tmp2;
 8019640:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8019644:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019648:	4413      	add	r3, r2
 801964a:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    tmp25 = tmp13 - tmp2;
 801964e:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8019652:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019656:	1ad3      	subs	r3, r2, r3
 8019658:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    tmp23 = tmp11 + tmp3;
 801965c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019660:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019664:	4413      	add	r3, r2
 8019666:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    tmp24 = tmp11 - tmp3;
 801966a:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801966e:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019672:	1ad3      	subs	r3, r2, r3
 8019674:	f8c7 3210 	str.w	r3, [r7, #528]	; 0x210

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 8019678:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 801967c:	3310      	adds	r3, #16
 801967e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019682:	461a      	mov	r2, r3
 8019684:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8019688:	3320      	adds	r3, #32
 801968a:	681b      	ldr	r3, [r3, #0]
 801968c:	fb03 f302 	mul.w	r3, r3, r2
 8019690:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 8019694:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8019698:	3330      	adds	r3, #48	; 0x30
 801969a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801969e:	461a      	mov	r2, r3
 80196a0:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80196a4:	3360      	adds	r3, #96	; 0x60
 80196a6:	681b      	ldr	r3, [r3, #0]
 80196a8:	fb03 f302 	mul.w	r3, r3, r2
 80196ac:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 80196b0:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80196b4:	3350      	adds	r3, #80	; 0x50
 80196b6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80196ba:	461a      	mov	r2, r3
 80196bc:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80196c0:	33a0      	adds	r3, #160	; 0xa0
 80196c2:	681b      	ldr	r3, [r3, #0]
 80196c4:	fb03 f302 	mul.w	r3, r3, r2
 80196c8:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 80196cc:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 80196d0:	3370      	adds	r3, #112	; 0x70
 80196d2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80196d6:	461a      	mov	r2, r3
 80196d8:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 80196dc:	33e0      	adds	r3, #224	; 0xe0
 80196de:	681b      	ldr	r3, [r3, #0]
 80196e0:	fb03 f302 	mul.w	r3, r3, r2
 80196e4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230

    tmp11 = z1 + z3;
 80196e8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80196ec:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80196f0:	4413      	add	r3, r2
 80196f2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    tmp1  = MULTIPLY(z1 + z2, FIX(1.353318001));   /* c3 */
 80196f6:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 80196fa:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80196fe:	4413      	add	r3, r2
 8019700:	f642 324e 	movw	r2, #11086	; 0x2b4e
 8019704:	fb02 f303 	mul.w	r3, r2, r3
 8019708:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2  = MULTIPLY(tmp11,   FIX(1.247225013));   /* c5 */
 801970c:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8019710:	f242 72e9 	movw	r2, #10217	; 0x27e9
 8019714:	fb02 f303 	mul.w	r3, r2, r3
 8019718:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  = MULTIPLY(z1 + z4, FIX(1.093201867));   /* c7 */
 801971c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8019720:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8019724:	4413      	add	r3, r2
 8019726:	f242 22fc 	movw	r2, #8956	; 0x22fc
 801972a:	fb02 f303 	mul.w	r3, r2, r3
 801972e:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp10 = MULTIPLY(z1 - z4, FIX(0.897167586));   /* c9 */
 8019732:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8019736:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801973a:	1ad3      	subs	r3, r2, r3
 801973c:	f641 42b6 	movw	r2, #7350	; 0x1cb6
 8019740:	fb02 f303 	mul.w	r3, r2, r3
 8019744:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp11 = MULTIPLY(tmp11,   FIX(0.666655658));   /* c11 */
 8019748:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801974c:	f241 5255 	movw	r2, #5461	; 0x1555
 8019750:	fb02 f303 	mul.w	r3, r2, r3
 8019754:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = MULTIPLY(z1 - z2, FIX(0.410524528));   /* c13 */
 8019758:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 801975c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019760:	1ad3      	subs	r3, r2, r3
 8019762:	f640 5223 	movw	r2, #3363	; 0xd23
 8019766:	fb02 f303 	mul.w	r3, r2, r3
 801976a:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    tmp0  = tmp1 + tmp2 + tmp3 -
 801976e:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8019772:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019776:	441a      	add	r2, r3
 8019778:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 801977c:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(2.286341144));        /* c7+c5+c3-c1 */
 801977e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8019782:	498f      	ldr	r1, [pc, #572]	; (80199c0 <jpeg_idct_8x16+0x564>)
 8019784:	fb01 f303 	mul.w	r3, r1, r3
    tmp0  = tmp1 + tmp2 + tmp3 -
 8019788:	4413      	add	r3, r2
 801978a:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp13 = tmp10 + tmp11 + tmp12 -
 801978e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019792:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8019796:	441a      	add	r2, r3
 8019798:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801979c:	441a      	add	r2, r3
	    MULTIPLY(z1, FIX(1.835730603));        /* c9+c11+c13-c15 */
 801979e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80197a2:	4988      	ldr	r1, [pc, #544]	; (80199c4 <jpeg_idct_8x16+0x568>)
 80197a4:	fb01 f303 	mul.w	r3, r1, r3
    tmp13 = tmp10 + tmp11 + tmp12 -
 80197a8:	4413      	add	r3, r2
 80197aa:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    z1    = MULTIPLY(z2 + z3, FIX(0.138617169));   /* c15 */
 80197ae:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 80197b2:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80197b6:	4413      	add	r3, r2
 80197b8:	f44f 628e 	mov.w	r2, #1136	; 0x470
 80197bc:	fb02 f303 	mul.w	r3, r2, r3
 80197c0:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp1  += z1 + MULTIPLY(z2, FIX(0.071888074));  /* c9+c11-c3-c15 */
 80197c4:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80197c8:	f240 224d 	movw	r2, #589	; 0x24d
 80197cc:	fb02 f203 	mul.w	r2, r2, r3
 80197d0:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80197d4:	4413      	add	r3, r2
 80197d6:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 80197da:	4413      	add	r3, r2
 80197dc:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2  += z1 - MULTIPLY(z3, FIX(1.125726048));  /* c5+c7+c15-c3 */
 80197e0:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80197e4:	4a78      	ldr	r2, [pc, #480]	; (80199c8 <jpeg_idct_8x16+0x56c>)
 80197e6:	fb02 f203 	mul.w	r2, r2, r3
 80197ea:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 80197ee:	4413      	add	r3, r2
 80197f0:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80197f4:	4413      	add	r3, r2
 80197f6:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    z1    = MULTIPLY(z3 - z2, FIX(1.407403738));   /* c1 */
 80197fa:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 80197fe:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019802:	1ad3      	subs	r3, r2, r3
 8019804:	f642 5209 	movw	r2, #11529	; 0x2d09
 8019808:	fb02 f303 	mul.w	r3, r2, r3
 801980c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp11 += z1 - MULTIPLY(z3, FIX(0.766367282));  /* c1+c11-c9-c13 */
 8019810:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019814:	4a6d      	ldr	r2, [pc, #436]	; (80199cc <jpeg_idct_8x16+0x570>)
 8019816:	fb02 f203 	mul.w	r2, r2, r3
 801981a:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801981e:	4413      	add	r3, r2
 8019820:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019824:	4413      	add	r3, r2
 8019826:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 += z1 + MULTIPLY(z2, FIX(1.971951411));  /* c1+c5+c13-c7 */
 801982a:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 801982e:	f643 721a 	movw	r2, #16154	; 0x3f1a
 8019832:	fb02 f203 	mul.w	r2, r2, r3
 8019836:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801983a:	4413      	add	r3, r2
 801983c:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8019840:	4413      	add	r3, r2
 8019842:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z2    += z4;
 8019846:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801984a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801984e:	4413      	add	r3, r2
 8019850:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z1    = MULTIPLY(z2, - FIX(0.666655658));      /* -c11 */
 8019854:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019858:	4a5d      	ldr	r2, [pc, #372]	; (80199d0 <jpeg_idct_8x16+0x574>)
 801985a:	fb02 f303 	mul.w	r3, r2, r3
 801985e:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp1  += z1;
 8019862:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8019866:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 801986a:	4413      	add	r3, r2
 801986c:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp3  += z1 + MULTIPLY(z4, FIX(1.065388962));  /* c3+c11+c15-c7 */
 8019870:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 8019874:	f242 2218 	movw	r2, #8728	; 0x2218
 8019878:	fb02 f203 	mul.w	r2, r2, r3
 801987c:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8019880:	4413      	add	r3, r2
 8019882:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8019886:	4413      	add	r3, r2
 8019888:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    z2    = MULTIPLY(z2, - FIX(1.247225013));      /* -c5 */
 801988c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019890:	4a50      	ldr	r2, [pc, #320]	; (80199d4 <jpeg_idct_8x16+0x578>)
 8019892:	fb02 f303 	mul.w	r3, r2, r3
 8019896:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp10 += z2 + MULTIPLY(z4, FIX(3.141271809));  /* c1+c5+c9-c13 */
 801989a:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801989e:	f246 4285 	movw	r2, #25733	; 0x6485
 80198a2:	fb02 f203 	mul.w	r2, r2, r3
 80198a6:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80198aa:	4413      	add	r3, r2
 80198ac:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 80198b0:	4413      	add	r3, r2
 80198b2:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp12 += z2;
 80198b6:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 80198ba:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80198be:	4413      	add	r3, r2
 80198c0:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    z2    = MULTIPLY(z3 + z4, - FIX(1.353318001)); /* -c3 */
 80198c4:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 80198c8:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 80198cc:	4413      	add	r3, r2
 80198ce:	4a42      	ldr	r2, [pc, #264]	; (80199d8 <jpeg_idct_8x16+0x57c>)
 80198d0:	fb02 f303 	mul.w	r3, r2, r3
 80198d4:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp2  += z2;
 80198d8:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 80198dc:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80198e0:	4413      	add	r3, r2
 80198e2:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3  += z2;
 80198e6:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 80198ea:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80198ee:	4413      	add	r3, r2
 80198f0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    z2    = MULTIPLY(z4 - z3, FIX(0.410524528));   /* c13 */
 80198f4:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 80198f8:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 80198fc:	1ad3      	subs	r3, r2, r3
 80198fe:	f640 5223 	movw	r2, #3363	; 0xd23
 8019902:	fb02 f303 	mul.w	r3, r2, r3
 8019906:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    tmp10 += z2;
 801990a:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 801990e:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019912:	4413      	add	r3, r2
 8019914:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp11 += z2;
 8019918:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801991c:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019920:	4413      	add	r3, r2
 8019922:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238

    /* Final output stage */

    wsptr[8*0]  = (int) RIGHT_SHIFT(tmp20 + tmp0,  CONST_BITS-PASS1_BITS);
 8019926:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801992a:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 801992e:	4413      	add	r3, r2
 8019930:	12da      	asrs	r2, r3, #11
 8019932:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019936:	601a      	str	r2, [r3, #0]
    wsptr[8*15] = (int) RIGHT_SHIFT(tmp20 - tmp0,  CONST_BITS-PASS1_BITS);
 8019938:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801993c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019940:	1ad2      	subs	r2, r2, r3
 8019942:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019946:	f503 73f0 	add.w	r3, r3, #480	; 0x1e0
 801994a:	12d2      	asrs	r2, r2, #11
 801994c:	601a      	str	r2, [r3, #0]
    wsptr[8*1]  = (int) RIGHT_SHIFT(tmp21 + tmp1,  CONST_BITS-PASS1_BITS);
 801994e:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8019952:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019956:	441a      	add	r2, r3
 8019958:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801995c:	3320      	adds	r3, #32
 801995e:	12d2      	asrs	r2, r2, #11
 8019960:	601a      	str	r2, [r3, #0]
    wsptr[8*14] = (int) RIGHT_SHIFT(tmp21 - tmp1,  CONST_BITS-PASS1_BITS);
 8019962:	f8d7 2224 	ldr.w	r2, [r7, #548]	; 0x224
 8019966:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801996a:	1ad2      	subs	r2, r2, r3
 801996c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019970:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
 8019974:	12d2      	asrs	r2, r2, #11
 8019976:	601a      	str	r2, [r3, #0]
    wsptr[8*2]  = (int) RIGHT_SHIFT(tmp22 + tmp2,  CONST_BITS-PASS1_BITS);
 8019978:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 801997c:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019980:	441a      	add	r2, r3
 8019982:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019986:	3340      	adds	r3, #64	; 0x40
 8019988:	12d2      	asrs	r2, r2, #11
 801998a:	601a      	str	r2, [r3, #0]
    wsptr[8*13] = (int) RIGHT_SHIFT(tmp22 - tmp2,  CONST_BITS-PASS1_BITS);
 801998c:	f8d7 221c 	ldr.w	r2, [r7, #540]	; 0x21c
 8019990:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019994:	1ad2      	subs	r2, r2, r3
 8019996:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 801999a:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
 801999e:	12d2      	asrs	r2, r2, #11
 80199a0:	601a      	str	r2, [r3, #0]
    wsptr[8*3]  = (int) RIGHT_SHIFT(tmp23 + tmp3,  CONST_BITS-PASS1_BITS);
 80199a2:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80199a6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80199aa:	441a      	add	r2, r3
 80199ac:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80199b0:	3360      	adds	r3, #96	; 0x60
 80199b2:	12d2      	asrs	r2, r2, #11
 80199b4:	e012      	b.n	80199dc <jpeg_idct_8x16+0x580>
 80199b6:	bf00      	nop
 80199b8:	ffffecc2 	.word	0xffffecc2
 80199bc:	ffffefb0 	.word	0xffffefb0
 80199c0:	ffffb6d6 	.word	0xffffb6d6
 80199c4:	ffffc542 	.word	0xffffc542
 80199c8:	ffffdbfa 	.word	0xffffdbfa
 80199cc:	ffffe77a 	.word	0xffffe77a
 80199d0:	ffffeaab 	.word	0xffffeaab
 80199d4:	ffffd817 	.word	0xffffd817
 80199d8:	ffffd4b2 	.word	0xffffd4b2
 80199dc:	601a      	str	r2, [r3, #0]
    wsptr[8*12] = (int) RIGHT_SHIFT(tmp23 - tmp3,  CONST_BITS-PASS1_BITS);
 80199de:	f8d7 2214 	ldr.w	r2, [r7, #532]	; 0x214
 80199e2:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 80199e6:	1ad2      	subs	r2, r2, r3
 80199e8:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 80199ec:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80199f0:	12d2      	asrs	r2, r2, #11
 80199f2:	601a      	str	r2, [r3, #0]
    wsptr[8*4]  = (int) RIGHT_SHIFT(tmp24 + tmp10, CONST_BITS-PASS1_BITS);
 80199f4:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 80199f8:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 80199fc:	441a      	add	r2, r3
 80199fe:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a02:	3380      	adds	r3, #128	; 0x80
 8019a04:	12d2      	asrs	r2, r2, #11
 8019a06:	601a      	str	r2, [r3, #0]
    wsptr[8*11] = (int) RIGHT_SHIFT(tmp24 - tmp10, CONST_BITS-PASS1_BITS);
 8019a08:	f8d7 2210 	ldr.w	r2, [r7, #528]	; 0x210
 8019a0c:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 8019a10:	1ad2      	subs	r2, r2, r3
 8019a12:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a16:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8019a1a:	12d2      	asrs	r2, r2, #11
 8019a1c:	601a      	str	r2, [r3, #0]
    wsptr[8*5]  = (int) RIGHT_SHIFT(tmp25 + tmp11, CONST_BITS-PASS1_BITS);
 8019a1e:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8019a22:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8019a26:	441a      	add	r2, r3
 8019a28:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a2c:	33a0      	adds	r3, #160	; 0xa0
 8019a2e:	12d2      	asrs	r2, r2, #11
 8019a30:	601a      	str	r2, [r3, #0]
    wsptr[8*10] = (int) RIGHT_SHIFT(tmp25 - tmp11, CONST_BITS-PASS1_BITS);
 8019a32:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 8019a36:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 8019a3a:	1ad2      	subs	r2, r2, r3
 8019a3c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a40:	f503 73a0 	add.w	r3, r3, #320	; 0x140
 8019a44:	12d2      	asrs	r2, r2, #11
 8019a46:	601a      	str	r2, [r3, #0]
    wsptr[8*6]  = (int) RIGHT_SHIFT(tmp26 + tmp12, CONST_BITS-PASS1_BITS);
 8019a48:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8019a4c:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8019a50:	441a      	add	r2, r3
 8019a52:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a56:	33c0      	adds	r3, #192	; 0xc0
 8019a58:	12d2      	asrs	r2, r2, #11
 8019a5a:	601a      	str	r2, [r3, #0]
    wsptr[8*9]  = (int) RIGHT_SHIFT(tmp26 - tmp12, CONST_BITS-PASS1_BITS);
 8019a5c:	f8d7 2220 	ldr.w	r2, [r7, #544]	; 0x220
 8019a60:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8019a64:	1ad2      	subs	r2, r2, r3
 8019a66:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a6a:	f503 7390 	add.w	r3, r3, #288	; 0x120
 8019a6e:	12d2      	asrs	r2, r2, #11
 8019a70:	601a      	str	r2, [r3, #0]
    wsptr[8*7]  = (int) RIGHT_SHIFT(tmp27 + tmp13, CONST_BITS-PASS1_BITS);
 8019a72:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8019a76:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8019a7a:	441a      	add	r2, r3
 8019a7c:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a80:	33e0      	adds	r3, #224	; 0xe0
 8019a82:	12d2      	asrs	r2, r2, #11
 8019a84:	601a      	str	r2, [r3, #0]
    wsptr[8*8]  = (int) RIGHT_SHIFT(tmp27 - tmp13, CONST_BITS-PASS1_BITS);
 8019a86:	f8d7 2228 	ldr.w	r2, [r7, #552]	; 0x228
 8019a8a:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 8019a8e:	1ad2      	subs	r2, r2, r3
 8019a90:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019a94:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8019a98:	12d2      	asrs	r2, r2, #11
 8019a9a:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 8; ctr++, inptr++, quantptr++, wsptr++) {
 8019a9c:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8019aa0:	3301      	adds	r3, #1
 8019aa2:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8019aa6:	f8d7 3274 	ldr.w	r3, [r7, #628]	; 0x274
 8019aaa:	3302      	adds	r3, #2
 8019aac:	f8c7 3274 	str.w	r3, [r7, #628]	; 0x274
 8019ab0:	f8d7 3270 	ldr.w	r3, [r7, #624]	; 0x270
 8019ab4:	3304      	adds	r3, #4
 8019ab6:	f8c7 3270 	str.w	r3, [r7, #624]	; 0x270
 8019aba:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019abe:	3304      	adds	r3, #4
 8019ac0:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
 8019ac4:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8019ac8:	2b07      	cmp	r3, #7
 8019aca:	f77f acef 	ble.w	80194ac <jpeg_idct_8x16+0x50>
  
  /* Pass 2: process rows from work array, store into output array. */
  /* Note that we must descale the results by a factor of 8 == 2**3, */
  /* and also undo the PASS1_BITS scaling. */

  wsptr = workspace;
 8019ace:	f107 0310 	add.w	r3, r7, #16
 8019ad2:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 8019ad6:	2300      	movs	r3, #0
 8019ad8:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8019adc:	e1a1      	b.n	8019e22 <jpeg_idct_8x16+0x9c6>
    outptr = output_buf[ctr] + output_col;
 8019ade:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8019ae2:	009b      	lsls	r3, r3, #2
 8019ae4:	463a      	mov	r2, r7
 8019ae6:	6812      	ldr	r2, [r2, #0]
 8019ae8:	4413      	add	r3, r2
 8019aea:	681a      	ldr	r2, [r3, #0]
 8019aec:	f8d7 3280 	ldr.w	r3, [r7, #640]	; 0x280
 8019af0:	4413      	add	r3, r2
 8019af2:	f8c7 3260 	str.w	r3, [r7, #608]	; 0x260
    
    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */
    
    z2 = (INT32) wsptr[2];
 8019af6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019afa:	3308      	adds	r3, #8
 8019afc:	681b      	ldr	r3, [r3, #0]
 8019afe:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = (INT32) wsptr[6];
 8019b02:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019b06:	3318      	adds	r3, #24
 8019b08:	681b      	ldr	r3, [r3, #0]
 8019b0a:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 8019b0e:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8019b12:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019b16:	4413      	add	r3, r2
 8019b18:	f241 1251 	movw	r2, #4433	; 0x1151
 8019b1c:	fb02 f303 	mul.w	r3, r2, r3
 8019b20:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 8019b24:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019b28:	f641 027e 	movw	r2, #6270	; 0x187e
 8019b2c:	fb02 f303 	mul.w	r3, r2, r3
 8019b30:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8019b34:	4413      	add	r3, r2
 8019b36:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 8019b3a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019b3e:	4abf      	ldr	r2, [pc, #764]	; (8019e3c <jpeg_idct_8x16+0x9e0>)
 8019b40:	fb02 f303 	mul.w	r3, r2, r3
 8019b44:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8019b48:	4413      	add	r3, r2
 8019b4a:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    
    /* Add fudge factor here for final descale. */
    z2 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 8019b4e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019b52:	681b      	ldr	r3, [r3, #0]
 8019b54:	3310      	adds	r3, #16
 8019b56:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = (INT32) wsptr[4];
 8019b5a:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019b5e:	3310      	adds	r3, #16
 8019b60:	681b      	ldr	r3, [r3, #0]
 8019b62:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    
    tmp0 = (z2 + z3) << CONST_BITS;
 8019b66:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8019b6a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019b6e:	4413      	add	r3, r2
 8019b70:	035b      	lsls	r3, r3, #13
 8019b72:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp1 = (z2 - z3) << CONST_BITS;
 8019b76:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8019b7a:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019b7e:	1ad3      	subs	r3, r2, r3
 8019b80:	035b      	lsls	r3, r3, #13
 8019b82:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    
    tmp10 = tmp0 + tmp2;
 8019b86:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8019b8a:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019b8e:	4413      	add	r3, r2
 8019b90:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
    tmp13 = tmp0 - tmp2;
 8019b94:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8019b98:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019b9c:	1ad3      	subs	r3, r2, r3
 8019b9e:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
    tmp11 = tmp1 + tmp3;
 8019ba2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8019ba6:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019baa:	4413      	add	r3, r2
 8019bac:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
    tmp12 = tmp1 - tmp3;
 8019bb0:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8019bb4:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019bb8:	1ad3      	subs	r3, r2, r3
 8019bba:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    
    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */
    
    tmp0 = (INT32) wsptr[7];
 8019bbe:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019bc2:	331c      	adds	r3, #28
 8019bc4:	681b      	ldr	r3, [r3, #0]
 8019bc6:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp1 = (INT32) wsptr[5];
 8019bca:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019bce:	3314      	adds	r3, #20
 8019bd0:	681b      	ldr	r3, [r3, #0]
 8019bd2:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 = (INT32) wsptr[3];
 8019bd6:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019bda:	330c      	adds	r3, #12
 8019bdc:	681b      	ldr	r3, [r3, #0]
 8019bde:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp3 = (INT32) wsptr[1];
 8019be2:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019be6:	3304      	adds	r3, #4
 8019be8:	681b      	ldr	r3, [r3, #0]
 8019bea:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    
    z2 = tmp0 + tmp2;
 8019bee:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8019bf2:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019bf6:	4413      	add	r3, r2
 8019bf8:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = tmp1 + tmp3;
 8019bfc:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8019c00:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019c04:	4413      	add	r3, r2
 8019c06:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 8019c0a:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8019c0e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019c12:	4413      	add	r3, r2
 8019c14:	f242 52a1 	movw	r2, #9633	; 0x25a1
 8019c18:	fb02 f303 	mul.w	r3, r2, r3
 8019c1c:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 8019c20:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019c24:	4a86      	ldr	r2, [pc, #536]	; (8019e40 <jpeg_idct_8x16+0x9e4>)
 8019c26:	fb02 f303 	mul.w	r3, r2, r3
 8019c2a:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 8019c2e:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019c32:	4a84      	ldr	r2, [pc, #528]	; (8019e44 <jpeg_idct_8x16+0x9e8>)
 8019c34:	fb02 f303 	mul.w	r3, r2, r3
 8019c38:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258
    z2 += z1;
 8019c3c:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 8019c40:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8019c44:	4413      	add	r3, r2
 8019c46:	f8c7 325c 	str.w	r3, [r7, #604]	; 0x25c
    z3 += z1;
 8019c4a:	f8d7 2258 	ldr.w	r2, [r7, #600]	; 0x258
 8019c4e:	f8d7 3254 	ldr.w	r3, [r7, #596]	; 0x254
 8019c52:	4413      	add	r3, r2
 8019c54:	f8c7 3258 	str.w	r3, [r7, #600]	; 0x258

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 8019c58:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8019c5c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019c60:	4413      	add	r3, r2
 8019c62:	4a79      	ldr	r2, [pc, #484]	; (8019e48 <jpeg_idct_8x16+0x9ec>)
 8019c64:	fb02 f303 	mul.w	r3, r2, r3
 8019c68:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 8019c6c:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019c70:	f640 128e 	movw	r2, #2446	; 0x98e
 8019c74:	fb02 f303 	mul.w	r3, r2, r3
 8019c78:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 8019c7c:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019c80:	f243 020b 	movw	r2, #12299	; 0x300b
 8019c84:	fb02 f303 	mul.w	r3, r2, r3
 8019c88:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c
    tmp0 += z1 + z2;
 8019c8c:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8019c90:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019c94:	4413      	add	r3, r2
 8019c96:	f8d7 2248 	ldr.w	r2, [r7, #584]	; 0x248
 8019c9a:	4413      	add	r3, r2
 8019c9c:	f8c7 3248 	str.w	r3, [r7, #584]	; 0x248
    tmp3 += z1 + z3;
 8019ca0:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8019ca4:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019ca8:	4413      	add	r3, r2
 8019caa:	f8d7 224c 	ldr.w	r2, [r7, #588]	; 0x24c
 8019cae:	4413      	add	r3, r2
 8019cb0:	f8c7 324c 	str.w	r3, [r7, #588]	; 0x24c

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 8019cb4:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8019cb8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019cbc:	4413      	add	r3, r2
 8019cbe:	4a63      	ldr	r2, [pc, #396]	; (8019e4c <jpeg_idct_8x16+0x9f0>)
 8019cc0:	fb02 f303 	mul.w	r3, r2, r3
 8019cc4:	f8c7 3254 	str.w	r3, [r7, #596]	; 0x254
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 8019cc8:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019ccc:	f244 12b3 	movw	r2, #16819	; 0x41b3
 8019cd0:	fb02 f303 	mul.w	r3, r2, r3
 8019cd4:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 8019cd8:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019cdc:	f246 2254 	movw	r2, #25172	; 0x6254
 8019ce0:	fb02 f303 	mul.w	r3, r2, r3
 8019ce4:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    tmp1 += z1 + z3;
 8019ce8:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8019cec:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 8019cf0:	4413      	add	r3, r2
 8019cf2:	f8d7 2244 	ldr.w	r2, [r7, #580]	; 0x244
 8019cf6:	4413      	add	r3, r2
 8019cf8:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
    tmp2 += z1 + z2;
 8019cfc:	f8d7 2254 	ldr.w	r2, [r7, #596]	; 0x254
 8019d00:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 8019d04:	4413      	add	r3, r2
 8019d06:	f8d7 2250 	ldr.w	r2, [r7, #592]	; 0x250
 8019d0a:	4413      	add	r3, r2
 8019d0c:	f8c7 3250 	str.w	r3, [r7, #592]	; 0x250
    
    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */
    
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8019d10:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019d14:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019d18:	4413      	add	r3, r2
 8019d1a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019d1c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp3,
 8019d20:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8019d24:	4413      	add	r3, r2
 8019d26:	781a      	ldrb	r2, [r3, #0]
 8019d28:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019d2c:	701a      	strb	r2, [r3, #0]
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8019d2e:	f8d7 2240 	ldr.w	r2, [r7, #576]	; 0x240
 8019d32:	f8d7 324c 	ldr.w	r3, [r7, #588]	; 0x24c
 8019d36:	1ad3      	subs	r3, r2, r3
 8019d38:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019d3a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[7] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp3,
 8019d3e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8019d42:	441a      	add	r2, r3
 8019d44:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019d48:	3307      	adds	r3, #7
 8019d4a:	7812      	ldrb	r2, [r2, #0]
 8019d4c:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8019d4e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019d52:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019d56:	4413      	add	r3, r2
 8019d58:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019d5a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp2,
 8019d5e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8019d62:	441a      	add	r2, r3
 8019d64:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019d68:	3301      	adds	r3, #1
 8019d6a:	7812      	ldrb	r2, [r2, #0]
 8019d6c:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8019d6e:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 8019d72:	f8d7 3250 	ldr.w	r3, [r7, #592]	; 0x250
 8019d76:	1ad3      	subs	r3, r2, r3
 8019d78:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019d7a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp2,
 8019d7e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8019d82:	441a      	add	r2, r3
 8019d84:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019d88:	3306      	adds	r3, #6
 8019d8a:	7812      	ldrb	r2, [r2, #0]
 8019d8c:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8019d8e:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8019d92:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019d96:	4413      	add	r3, r2
 8019d98:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019d9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp1,
 8019d9e:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8019da2:	441a      	add	r2, r3
 8019da4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019da8:	3302      	adds	r3, #2
 8019daa:	7812      	ldrb	r2, [r2, #0]
 8019dac:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8019dae:	f8d7 2234 	ldr.w	r2, [r7, #564]	; 0x234
 8019db2:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 8019db6:	1ad3      	subs	r3, r2, r3
 8019db8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019dba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp1,
 8019dbe:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8019dc2:	441a      	add	r2, r3
 8019dc4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019dc8:	3305      	adds	r3, #5
 8019dca:	7812      	ldrb	r2, [r2, #0]
 8019dcc:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8019dce:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8019dd2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019dd6:	4413      	add	r3, r2
 8019dd8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019dda:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp13 + tmp0,
 8019dde:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8019de2:	441a      	add	r2, r3
 8019de4:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019de8:	3303      	adds	r3, #3
 8019dea:	7812      	ldrb	r2, [r2, #0]
 8019dec:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8019dee:	f8d7 223c 	ldr.w	r2, [r7, #572]	; 0x23c
 8019df2:	f8d7 3248 	ldr.w	r3, [r7, #584]	; 0x248
 8019df6:	1ad3      	subs	r3, r2, r3
 8019df8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 8019dfa:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp13 - tmp0,
 8019dfe:	f8d7 2264 	ldr.w	r2, [r7, #612]	; 0x264
 8019e02:	441a      	add	r2, r3
 8019e04:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 8019e08:	3304      	adds	r3, #4
 8019e0a:	7812      	ldrb	r2, [r2, #0]
 8019e0c:	701a      	strb	r2, [r3, #0]
    
    wsptr += DCTSIZE;		/* advance pointer to next row */
 8019e0e:	f8d7 326c 	ldr.w	r3, [r7, #620]	; 0x26c
 8019e12:	3320      	adds	r3, #32
 8019e14:	f8c7 326c 	str.w	r3, [r7, #620]	; 0x26c
  for (ctr = 0; ctr < 16; ctr++) {
 8019e18:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8019e1c:	3301      	adds	r3, #1
 8019e1e:	f8c7 3268 	str.w	r3, [r7, #616]	; 0x268
 8019e22:	f8d7 3268 	ldr.w	r3, [r7, #616]	; 0x268
 8019e26:	2b0f      	cmp	r3, #15
 8019e28:	f77f ae59 	ble.w	8019ade <jpeg_idct_8x16+0x682>
  }
}
 8019e2c:	bf00      	nop
 8019e2e:	bf00      	nop
 8019e30:	f507 771e 	add.w	r7, r7, #632	; 0x278
 8019e34:	46bd      	mov	sp, r7
 8019e36:	bc90      	pop	{r4, r7}
 8019e38:	4770      	bx	lr
 8019e3a:	bf00      	nop
 8019e3c:	ffffc4df 	.word	0xffffc4df
 8019e40:	ffffc13b 	.word	0xffffc13b
 8019e44:	fffff384 	.word	0xfffff384
 8019e48:	ffffe333 	.word	0xffffe333
 8019e4c:	ffffadfd 	.word	0xffffadfd

08019e50 <jpeg_idct_7x14>:

GLOBAL(void)
jpeg_idct_7x14 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 8019e50:	b490      	push	{r4, r7}
 8019e52:	b0fe      	sub	sp, #504	; 0x1f8
 8019e54:	af00      	add	r7, sp, #0
 8019e56:	f107 040c 	add.w	r4, r7, #12
 8019e5a:	6020      	str	r0, [r4, #0]
 8019e5c:	f107 0008 	add.w	r0, r7, #8
 8019e60:	6001      	str	r1, [r0, #0]
 8019e62:	1d39      	adds	r1, r7, #4
 8019e64:	600a      	str	r2, [r1, #0]
 8019e66:	463a      	mov	r2, r7
 8019e68:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 8019e6a:	f107 030c 	add.w	r3, r7, #12
 8019e6e:	681b      	ldr	r3, [r3, #0]
 8019e70:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 8019e74:	3380      	adds	r3, #128	; 0x80
 8019e76:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 14-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/28).
   */
  inptr = coef_block;
 8019e7a:	1d3b      	adds	r3, r7, #4
 8019e7c:	681b      	ldr	r3, [r3, #0]
 8019e7e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 8019e82:	f107 0308 	add.w	r3, r7, #8
 8019e86:	681b      	ldr	r3, [r3, #0]
 8019e88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8019e8a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  wsptr = workspace;
 8019e8e:	f107 0310 	add.w	r3, r7, #16
 8019e92:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 8019e96:	2300      	movs	r3, #0
 8019e98:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8019e9c:	e267      	b.n	801a36e <jpeg_idct_7x14+0x51e>
    /* Even part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 8019e9e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019ea2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ea6:	461a      	mov	r2, r3
 8019ea8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	fb03 f302 	mul.w	r3, r3, r2
 8019eb2:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z1 <<= CONST_BITS;
 8019eb6:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019eba:	035b      	lsls	r3, r3, #13
 8019ebc:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    /* Add fudge factor here for final descale. */
    z1 += ONE << (CONST_BITS-PASS1_BITS-1);
 8019ec0:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019ec4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8019ec8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 8019ecc:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019ed0:	3340      	adds	r3, #64	; 0x40
 8019ed2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019ed6:	461a      	mov	r2, r3
 8019ed8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019edc:	3380      	adds	r3, #128	; 0x80
 8019ede:	681b      	ldr	r3, [r3, #0]
 8019ee0:	fb03 f302 	mul.w	r3, r3, r2
 8019ee4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    z2 = MULTIPLY(z4, FIX(1.274162392));         /* c4 */
 8019ee8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019eec:	f642 02c6 	movw	r2, #10438	; 0x28c6
 8019ef0:	fb02 f303 	mul.w	r3, r2, r3
 8019ef4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    z3 = MULTIPLY(z4, FIX(0.314692123));         /* c12 */
 8019ef8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019efc:	f640 2212 	movw	r2, #2578	; 0xa12
 8019f00:	fb02 f303 	mul.w	r3, r2, r3
 8019f04:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z4 = MULTIPLY(z4, FIX(0.881747734));         /* c8 */
 8019f08:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019f0c:	f641 4237 	movw	r2, #7223	; 0x1c37
 8019f10:	fb02 f303 	mul.w	r3, r2, r3
 8019f14:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4

    tmp10 = z1 + z2;
 8019f18:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019f1c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019f20:	4413      	add	r3, r2
 8019f22:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp11 = z1 + z3;
 8019f26:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019f2a:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019f2e:	4413      	add	r3, r2
 8019f30:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 = z1 - z4;
 8019f34:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019f38:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019f3c:	1ad3      	subs	r3, r2, r3
 8019f3e:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    tmp23 = RIGHT_SHIFT(z1 - ((z2 + z3 - z4) << 1), /* c0 = (c4+c12-c8)*2 */
 8019f42:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8019f46:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8019f4a:	441a      	add	r2, r3
 8019f4c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8019f50:	1ad3      	subs	r3, r2, r3
 8019f52:	005b      	lsls	r3, r3, #1
 8019f54:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019f58:	1ad3      	subs	r3, r2, r3
 8019f5a:	12db      	asrs	r3, r3, #11
 8019f5c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
			CONST_BITS-PASS1_BITS);

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 8019f60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019f64:	3320      	adds	r3, #32
 8019f66:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f6a:	461a      	mov	r2, r3
 8019f6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019f70:	3340      	adds	r3, #64	; 0x40
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	fb03 f302 	mul.w	r3, r3, r2
 8019f78:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 8019f7c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8019f80:	3360      	adds	r3, #96	; 0x60
 8019f82:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019f86:	461a      	mov	r2, r3
 8019f88:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8019f8c:	33c0      	adds	r3, #192	; 0xc0
 8019f8e:	681b      	ldr	r3, [r3, #0]
 8019f90:	fb03 f302 	mul.w	r3, r3, r2
 8019f94:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4

    z3 = MULTIPLY(z1 + z2, FIX(1.105676686));    /* c6 */
 8019f98:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8019f9c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019fa0:	4413      	add	r3, r2
 8019fa2:	f242 3262 	movw	r2, #9058	; 0x2362
 8019fa6:	fb02 f303 	mul.w	r3, r2, r3
 8019faa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp13 = z3 + MULTIPLY(z1, FIX(0.273079590)); /* c2-c6 */
 8019fae:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019fb2:	f640 02bd 	movw	r2, #2237	; 0x8bd
 8019fb6:	fb02 f303 	mul.w	r3, r2, r3
 8019fba:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8019fbe:	4413      	add	r3, r2
 8019fc0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
    tmp14 = z3 - MULTIPLY(z2, FIX(1.719280954)); /* c6+c10 */
 8019fc4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019fc8:	4aef      	ldr	r2, [pc, #956]	; (801a388 <jpeg_idct_7x14+0x538>)
 8019fca:	fb02 f303 	mul.w	r3, r2, r3
 8019fce:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 8019fd2:	4413      	add	r3, r2
 8019fd4:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8019fd8:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 8019fdc:	f241 32a3 	movw	r2, #5027	; 0x13a3
 8019fe0:	fb02 f203 	mul.w	r2, r2, r3
	    MULTIPLY(z2, FIX(1.378756276));      /* c2 */
 8019fe4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8019fe8:	49e8      	ldr	r1, [pc, #928]	; (801a38c <jpeg_idct_7x14+0x53c>)
 8019fea:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 = MULTIPLY(z1, FIX(0.613604268)) -     /* c10 */
 8019fee:	4413      	add	r3, r2
 8019ff0:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    tmp20 = tmp10 + tmp13;
 8019ff4:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 8019ff8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8019ffc:	4413      	add	r3, r2
 8019ffe:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp26 = tmp10 - tmp13;
 801a002:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a006:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801a00a:	1ad3      	subs	r3, r2, r3
 801a00c:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
    tmp21 = tmp11 + tmp14;
 801a010:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801a014:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a018:	4413      	add	r3, r2
 801a01a:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp25 = tmp11 - tmp14;
 801a01e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801a022:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a026:	1ad3      	subs	r3, r2, r3
 801a028:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
    tmp22 = tmp12 + tmp15;
 801a02c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801a030:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801a034:	4413      	add	r3, r2
 801a036:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    tmp24 = tmp12 - tmp15;
 801a03a:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801a03e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801a042:	1ad3      	subs	r3, r2, r3
 801a044:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801a048:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a04c:	3310      	adds	r3, #16
 801a04e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a052:	461a      	mov	r2, r3
 801a054:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a058:	3320      	adds	r3, #32
 801a05a:	681b      	ldr	r3, [r3, #0]
 801a05c:	fb03 f302 	mul.w	r3, r3, r2
 801a060:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801a064:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a068:	3330      	adds	r3, #48	; 0x30
 801a06a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a06e:	461a      	mov	r2, r3
 801a070:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a074:	3360      	adds	r3, #96	; 0x60
 801a076:	681b      	ldr	r3, [r3, #0]
 801a078:	fb03 f302 	mul.w	r3, r3, r2
 801a07c:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801a080:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a084:	3350      	adds	r3, #80	; 0x50
 801a086:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a08a:	461a      	mov	r2, r3
 801a08c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a090:	33a0      	adds	r3, #160	; 0xa0
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	fb03 f302 	mul.w	r3, r3, r2
 801a098:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801a09c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a0a0:	3370      	adds	r3, #112	; 0x70
 801a0a2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a0a6:	461a      	mov	r2, r3
 801a0a8:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a0ac:	33e0      	adds	r3, #224	; 0xe0
 801a0ae:	681b      	ldr	r3, [r3, #0]
 801a0b0:	fb03 f302 	mul.w	r3, r3, r2
 801a0b4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp13 = z4 << CONST_BITS;
 801a0b8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a0bc:	035b      	lsls	r3, r3, #13
 801a0be:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

    tmp14 = z1 + z3;
 801a0c2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a0c6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a0ca:	4413      	add	r3, r2
 801a0cc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp11 = MULTIPLY(z1 + z2, FIX(1.334852607));           /* c3 */
 801a0d0:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a0d4:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a0d8:	4413      	add	r3, r2
 801a0da:	f642 22b7 	movw	r2, #10935	; 0x2ab7
 801a0de:	fb02 f303 	mul.w	r3, r2, r3
 801a0e2:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 = MULTIPLY(tmp14, FIX(1.197448846));             /* c5 */
 801a0e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a0ea:	f242 6252 	movw	r2, #9810	; 0x2652
 801a0ee:	fb02 f303 	mul.w	r3, r2, r3
 801a0f2:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp10 = tmp11 + tmp12 + tmp13 - MULTIPLY(z1, FIX(1.126980169)); /* c3+c5-c1 */
 801a0f6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801a0fa:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a0fe:	441a      	add	r2, r3
 801a100:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801a104:	441a      	add	r2, r3
 801a106:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801a10a:	49a1      	ldr	r1, [pc, #644]	; (801a390 <jpeg_idct_7x14+0x540>)
 801a10c:	fb01 f303 	mul.w	r3, r1, r3
 801a110:	4413      	add	r3, r2
 801a112:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp14 = MULTIPLY(tmp14, FIX(0.752406978));             /* c9 */
 801a116:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a11a:	f641 0214 	movw	r2, #6164	; 0x1814
 801a11e:	fb02 f303 	mul.w	r3, r2, r3
 801a122:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp16 = tmp14 - MULTIPLY(z1, FIX(1.061150426));        /* c9+c11-c13 */
 801a126:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801a12a:	4a9a      	ldr	r2, [pc, #616]	; (801a394 <jpeg_idct_7x14+0x544>)
 801a12c:	fb02 f303 	mul.w	r3, r2, r3
 801a130:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 801a134:	4413      	add	r3, r2
 801a136:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    z1    -= z2;
 801a13a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a13e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a142:	1ad3      	subs	r3, r2, r3
 801a144:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    tmp15 = MULTIPLY(z1, FIX(0.467085129)) - tmp13;        /* c11 */
 801a148:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801a14c:	f640 62f2 	movw	r2, #3826	; 0xef2
 801a150:	fb02 f203 	mul.w	r2, r2, r3
 801a154:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801a158:	1ad3      	subs	r3, r2, r3
 801a15a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
    tmp16 += tmp15;
 801a15e:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 801a162:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801a166:	4413      	add	r3, r2
 801a168:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
    z1    += z4;
 801a16c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a170:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a174:	4413      	add	r3, r2
 801a176:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z4    = MULTIPLY(z2 + z3, - FIX(0.158341681)) - tmp13; /* -c13 */
 801a17a:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a17e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a182:	4413      	add	r3, r2
 801a184:	f46f 62a2 	mvn.w	r2, #1296	; 0x510
 801a188:	fb02 f203 	mul.w	r2, r2, r3
 801a18c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801a190:	1ad3      	subs	r3, r2, r3
 801a192:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp11 += z4 - MULTIPLY(z2, FIX(0.424103948));          /* c3-c9-c13 */
 801a196:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a19a:	4a7f      	ldr	r2, [pc, #508]	; (801a398 <jpeg_idct_7x14+0x548>)
 801a19c:	fb02 f203 	mul.w	r2, r2, r3
 801a1a0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a1a4:	4413      	add	r3, r2
 801a1a6:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801a1aa:	4413      	add	r3, r2
 801a1ac:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 += z4 - MULTIPLY(z3, FIX(2.373959773));          /* c3+c5-c13 */
 801a1b0:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a1b4:	4a79      	ldr	r2, [pc, #484]	; (801a39c <jpeg_idct_7x14+0x54c>)
 801a1b6:	fb02 f203 	mul.w	r2, r2, r3
 801a1ba:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a1be:	4413      	add	r3, r2
 801a1c0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801a1c4:	4413      	add	r3, r2
 801a1c6:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    z4    = MULTIPLY(z3 - z2, FIX(1.405321284));           /* c1 */
 801a1ca:	f8d7 21d0 	ldr.w	r2, [r7, #464]	; 0x1d0
 801a1ce:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a1d2:	1ad3      	subs	r3, r2, r3
 801a1d4:	f642 42f8 	movw	r2, #11512	; 0x2cf8
 801a1d8:	fb02 f303 	mul.w	r3, r2, r3
 801a1dc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
    tmp14 += z4 + tmp13 - MULTIPLY(z3, FIX(1.6906431334)); /* c1+c9-c11 */
 801a1e0:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 801a1e4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801a1e8:	441a      	add	r2, r3
 801a1ea:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a1ee:	496c      	ldr	r1, [pc, #432]	; (801a3a0 <jpeg_idct_7x14+0x550>)
 801a1f0:	fb01 f303 	mul.w	r3, r1, r3
 801a1f4:	4413      	add	r3, r2
 801a1f6:	f8d7 21ac 	ldr.w	r2, [r7, #428]	; 0x1ac
 801a1fa:	4413      	add	r3, r2
 801a1fc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
    tmp15 += z4 + MULTIPLY(z2, FIX(0.674957567));          /* c1+c11-c5 */
 801a200:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a204:	f241 5299 	movw	r2, #5529	; 0x1599
 801a208:	fb02 f203 	mul.w	r2, r2, r3
 801a20c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801a210:	4413      	add	r3, r2
 801a212:	f8d7 21a8 	ldr.w	r2, [r7, #424]	; 0x1a8
 801a216:	4413      	add	r3, r2
 801a218:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8

    tmp13 = (z1 - z3) << PASS1_BITS;
 801a21c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a220:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a224:	1ad3      	subs	r3, r2, r3
 801a226:	009b      	lsls	r3, r3, #2
 801a228:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0

    /* Final output stage */

    wsptr[7*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801a22c:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a230:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a234:	4413      	add	r3, r2
 801a236:	12da      	asrs	r2, r3, #11
 801a238:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a23c:	601a      	str	r2, [r3, #0]
    wsptr[7*13] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801a23e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a242:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a246:	1ad2      	subs	r2, r2, r3
 801a248:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a24c:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 801a250:	12d2      	asrs	r2, r2, #11
 801a252:	601a      	str	r2, [r3, #0]
    wsptr[7*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801a254:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a258:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a25c:	441a      	add	r2, r3
 801a25e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a262:	331c      	adds	r3, #28
 801a264:	12d2      	asrs	r2, r2, #11
 801a266:	601a      	str	r2, [r3, #0]
    wsptr[7*12] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801a268:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a26c:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a270:	1ad2      	subs	r2, r2, r3
 801a272:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a276:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801a27a:	12d2      	asrs	r2, r2, #11
 801a27c:	601a      	str	r2, [r3, #0]
    wsptr[7*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801a27e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a282:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a286:	441a      	add	r2, r3
 801a288:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a28c:	3338      	adds	r3, #56	; 0x38
 801a28e:	12d2      	asrs	r2, r2, #11
 801a290:	601a      	str	r2, [r3, #0]
    wsptr[7*11] = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801a292:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a296:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a29a:	1ad2      	subs	r2, r2, r3
 801a29c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a2a0:	f503 739a 	add.w	r3, r3, #308	; 0x134
 801a2a4:	12d2      	asrs	r2, r2, #11
 801a2a6:	601a      	str	r2, [r3, #0]
    wsptr[7*3]  = (int) (tmp23 + tmp13);
 801a2a8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a2ac:	3354      	adds	r3, #84	; 0x54
 801a2ae:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 801a2b2:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 801a2b6:	440a      	add	r2, r1
 801a2b8:	601a      	str	r2, [r3, #0]
    wsptr[7*10] = (int) (tmp23 - tmp13);
 801a2ba:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a2be:	f503 738c 	add.w	r3, r3, #280	; 0x118
 801a2c2:	f8d7 11dc 	ldr.w	r1, [r7, #476]	; 0x1dc
 801a2c6:	f8d7 21b0 	ldr.w	r2, [r7, #432]	; 0x1b0
 801a2ca:	1a8a      	subs	r2, r1, r2
 801a2cc:	601a      	str	r2, [r3, #0]
    wsptr[7*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801a2ce:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a2d2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a2d6:	441a      	add	r2, r3
 801a2d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a2dc:	3370      	adds	r3, #112	; 0x70
 801a2de:	12d2      	asrs	r2, r2, #11
 801a2e0:	601a      	str	r2, [r3, #0]
    wsptr[7*9]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801a2e2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801a2e6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801a2ea:	1ad2      	subs	r2, r2, r3
 801a2ec:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a2f0:	33fc      	adds	r3, #252	; 0xfc
 801a2f2:	12d2      	asrs	r2, r2, #11
 801a2f4:	601a      	str	r2, [r3, #0]
    wsptr[7*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801a2f6:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 801a2fa:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801a2fe:	441a      	add	r2, r3
 801a300:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a304:	338c      	adds	r3, #140	; 0x8c
 801a306:	12d2      	asrs	r2, r2, #11
 801a308:	601a      	str	r2, [r3, #0]
    wsptr[7*8]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801a30a:	f8d7 21a0 	ldr.w	r2, [r7, #416]	; 0x1a0
 801a30e:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801a312:	1ad2      	subs	r2, r2, r3
 801a314:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a318:	33e0      	adds	r3, #224	; 0xe0
 801a31a:	12d2      	asrs	r2, r2, #11
 801a31c:	601a      	str	r2, [r3, #0]
    wsptr[7*6]  = (int) RIGHT_SHIFT(tmp26 + tmp16, CONST_BITS-PASS1_BITS);
 801a31e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801a322:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801a326:	441a      	add	r2, r3
 801a328:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a32c:	33a8      	adds	r3, #168	; 0xa8
 801a32e:	12d2      	asrs	r2, r2, #11
 801a330:	601a      	str	r2, [r3, #0]
    wsptr[7*7]  = (int) RIGHT_SHIFT(tmp26 - tmp16, CONST_BITS-PASS1_BITS);
 801a332:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801a336:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801a33a:	1ad2      	subs	r2, r2, r3
 801a33c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a340:	33c4      	adds	r3, #196	; 0xc4
 801a342:	12d2      	asrs	r2, r2, #11
 801a344:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 7; ctr++, inptr++, quantptr++, wsptr++) {
 801a346:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a34a:	3301      	adds	r3, #1
 801a34c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801a350:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 801a354:	3302      	adds	r3, #2
 801a356:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
 801a35a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 801a35e:	3304      	adds	r3, #4
 801a360:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
 801a364:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a368:	3304      	adds	r3, #4
 801a36a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
 801a36e:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a372:	2b06      	cmp	r3, #6
 801a374:	f77f ad93 	ble.w	8019e9e <jpeg_idct_7x14+0x4e>
  }

  /* Pass 2: process 14 rows from work array, store into output array.
   * 7-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/14).
   */
  wsptr = workspace;
 801a378:	f107 0310 	add.w	r3, r7, #16
 801a37c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  for (ctr = 0; ctr < 14; ctr++) {
 801a380:	2300      	movs	r3, #0
 801a382:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801a386:	e178      	b.n	801a67a <jpeg_idct_7x14+0x82a>
 801a388:	ffffc8fc 	.word	0xffffc8fc
 801a38c:	ffffd3e1 	.word	0xffffd3e1
 801a390:	ffffdbf0 	.word	0xffffdbf0
 801a394:	ffffde0b 	.word	0xffffde0b
 801a398:	fffff26e 	.word	0xfffff26e
 801a39c:	ffffb409 	.word	0xffffb409
 801a3a0:	ffffc9e6 	.word	0xffffc9e6
    outptr = output_buf[ctr] + output_col;
 801a3a4:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a3a8:	009b      	lsls	r3, r3, #2
 801a3aa:	463a      	mov	r2, r7
 801a3ac:	6812      	ldr	r2, [r2, #0]
 801a3ae:	4413      	add	r3, r2
 801a3b0:	681a      	ldr	r2, [r3, #0]
 801a3b2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 801a3b6:	4413      	add	r3, r2
 801a3b8:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp23 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801a3bc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a3c0:	681b      	ldr	r3, [r3, #0]
 801a3c2:	3310      	adds	r3, #16
 801a3c4:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
    tmp23 <<= CONST_BITS;
 801a3c8:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801a3cc:	035b      	lsls	r3, r3, #13
 801a3ce:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

    z1 = (INT32) wsptr[2];
 801a3d2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a3d6:	3308      	adds	r3, #8
 801a3d8:	681b      	ldr	r3, [r3, #0]
 801a3da:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z2 = (INT32) wsptr[4];
 801a3de:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a3e2:	3310      	adds	r3, #16
 801a3e4:	681b      	ldr	r3, [r3, #0]
 801a3e6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    z3 = (INT32) wsptr[6];
 801a3ea:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a3ee:	3318      	adds	r3, #24
 801a3f0:	681b      	ldr	r3, [r3, #0]
 801a3f2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp20 = MULTIPLY(z2 - z3, FIX(0.881747734));       /* c4 */
 801a3f6:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a3fa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a3fe:	1ad3      	subs	r3, r2, r3
 801a400:	f641 4237 	movw	r2, #7223	; 0x1c37
 801a404:	fb02 f303 	mul.w	r3, r2, r3
 801a408:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp22 = MULTIPLY(z1 - z2, FIX(0.314692123));       /* c6 */
 801a40c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a410:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a414:	1ad3      	subs	r3, r2, r3
 801a416:	f640 2212 	movw	r2, #2578	; 0xa12
 801a41a:	fb02 f303 	mul.w	r3, r2, r3
 801a41e:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    tmp21 = tmp20 + tmp22 + tmp23 - MULTIPLY(z2, FIX(1.841218003)); /* c2+c4-c6 */
 801a422:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a426:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 801a42a:	441a      	add	r2, r3
 801a42c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801a430:	441a      	add	r2, r3
 801a432:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a436:	4997      	ldr	r1, [pc, #604]	; (801a694 <jpeg_idct_7x14+0x844>)
 801a438:	fb01 f303 	mul.w	r3, r1, r3
 801a43c:	4413      	add	r3, r2
 801a43e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
    tmp10 = z1 + z3;
 801a442:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a446:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a44a:	4413      	add	r3, r2
 801a44c:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    z2 -= tmp10;
 801a450:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a454:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a458:	1ad3      	subs	r3, r2, r3
 801a45a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    tmp10 = MULTIPLY(tmp10, FIX(1.274162392)) + tmp23; /* c2 */
 801a45e:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a462:	f642 02c6 	movw	r2, #10438	; 0x28c6
 801a466:	fb02 f303 	mul.w	r3, r2, r3
 801a46a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801a46e:	4413      	add	r3, r2
 801a470:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp20 += tmp10 - MULTIPLY(z3, FIX(0.077722536));   /* c2-c4-c6 */
 801a474:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a478:	f46f 721f 	mvn.w	r2, #636	; 0x27c
 801a47c:	fb02 f203 	mul.w	r2, r2, r3
 801a480:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a484:	4413      	add	r3, r2
 801a486:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a48a:	4413      	add	r3, r2
 801a48c:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
    tmp22 += tmp10 - MULTIPLY(z1, FIX(2.470602249));   /* c2+c4+c6 */
 801a490:	f8d7 31d8 	ldr.w	r3, [r7, #472]	; 0x1d8
 801a494:	4a80      	ldr	r2, [pc, #512]	; (801a698 <jpeg_idct_7x14+0x848>)
 801a496:	fb02 f203 	mul.w	r2, r2, r3
 801a49a:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a49e:	4413      	add	r3, r2
 801a4a0:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a4a4:	4413      	add	r3, r2
 801a4a6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
    tmp23 += MULTIPLY(z2, FIX(1.414213562));           /* c0 */
 801a4aa:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a4ae:	f642 5241 	movw	r2, #11585	; 0x2d41
 801a4b2:	fb02 f303 	mul.w	r3, r2, r3
 801a4b6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 801a4ba:	4413      	add	r3, r2
 801a4bc:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801a4c0:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a4c4:	3304      	adds	r3, #4
 801a4c6:	681b      	ldr	r3, [r3, #0]
 801a4c8:	f8c7 31d8 	str.w	r3, [r7, #472]	; 0x1d8
    z2 = (INT32) wsptr[3];
 801a4cc:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a4d0:	330c      	adds	r3, #12
 801a4d2:	681b      	ldr	r3, [r3, #0]
 801a4d4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    z3 = (INT32) wsptr[5];
 801a4d8:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a4dc:	3314      	adds	r3, #20
 801a4de:	681b      	ldr	r3, [r3, #0]
 801a4e0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0

    tmp11 = MULTIPLY(z1 + z2, FIX(0.935414347));       /* (c3+c1-c5)/2 */
 801a4e4:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a4e8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a4ec:	4413      	add	r3, r2
 801a4ee:	f641 52ef 	movw	r2, #7663	; 0x1def
 801a4f2:	fb02 f303 	mul.w	r3, r2, r3
 801a4f6:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 = MULTIPLY(z1 - z2, FIX(0.170262339));       /* (c3+c5-c1)/2 */
 801a4fa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a4fe:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a502:	1ad3      	subs	r3, r2, r3
 801a504:	f240 5273 	movw	r2, #1395	; 0x573
 801a508:	fb02 f303 	mul.w	r3, r2, r3
 801a50c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp10 = tmp11 - tmp12;
 801a510:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801a514:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a518:	1ad3      	subs	r3, r2, r3
 801a51a:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp11 += tmp12;
 801a51e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801a522:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a526:	4413      	add	r3, r2
 801a528:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    tmp12 = MULTIPLY(z2 + z3, - FIX(1.378756276));     /* -c1 */
 801a52c:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 801a530:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a534:	4413      	add	r3, r2
 801a536:	4a59      	ldr	r2, [pc, #356]	; (801a69c <jpeg_idct_7x14+0x84c>)
 801a538:	fb02 f303 	mul.w	r3, r2, r3
 801a53c:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8
    tmp11 += tmp12;
 801a540:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 801a544:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a548:	4413      	add	r3, r2
 801a54a:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
    z2 = MULTIPLY(z1 + z3, FIX(0.613604268));          /* c5 */
 801a54e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 801a552:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a556:	4413      	add	r3, r2
 801a558:	f241 32a3 	movw	r2, #5027	; 0x13a3
 801a55c:	fb02 f303 	mul.w	r3, r2, r3
 801a560:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
    tmp10 += z2;
 801a564:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
 801a568:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a56c:	4413      	add	r3, r2
 801a56e:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
    tmp12 += z2 + MULTIPLY(z3, FIX(1.870828693));      /* c3+c1-c5 */
 801a572:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 801a576:	f643 32de 	movw	r2, #15326	; 0x3bde
 801a57a:	fb02 f203 	mul.w	r2, r2, r3
 801a57e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 801a582:	4413      	add	r3, r2
 801a584:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 801a588:	4413      	add	r3, r2
 801a58a:	f8c7 31b8 	str.w	r3, [r7, #440]	; 0x1b8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801a58e:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a592:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a596:	4413      	add	r3, r2
 801a598:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801a59a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801a59e:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a5a2:	4413      	add	r3, r2
 801a5a4:	781a      	ldrb	r2, [r3, #0]
 801a5a6:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a5aa:	701a      	strb	r2, [r3, #0]
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801a5ac:	f8d7 21cc 	ldr.w	r2, [r7, #460]	; 0x1cc
 801a5b0:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 801a5b4:	1ad3      	subs	r3, r2, r3
 801a5b6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801a5b8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[6] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801a5bc:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a5c0:	441a      	add	r2, r3
 801a5c2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a5c6:	3306      	adds	r3, #6
 801a5c8:	7812      	ldrb	r2, [r2, #0]
 801a5ca:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801a5cc:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a5d0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a5d4:	4413      	add	r3, r2
 801a5d6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801a5d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801a5dc:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a5e0:	441a      	add	r2, r3
 801a5e2:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a5e6:	3301      	adds	r3, #1
 801a5e8:	7812      	ldrb	r2, [r2, #0]
 801a5ea:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801a5ec:	f8d7 21c4 	ldr.w	r2, [r7, #452]	; 0x1c4
 801a5f0:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
 801a5f4:	1ad3      	subs	r3, r2, r3
 801a5f6:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801a5f8:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801a5fc:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a600:	441a      	add	r2, r3
 801a602:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a606:	3305      	adds	r3, #5
 801a608:	7812      	ldrb	r2, [r2, #0]
 801a60a:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801a60c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a610:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a614:	4413      	add	r3, r2
 801a616:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801a618:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801a61c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a620:	441a      	add	r2, r3
 801a622:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a626:	3302      	adds	r3, #2
 801a628:	7812      	ldrb	r2, [r2, #0]
 801a62a:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801a62c:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
 801a630:	f8d7 31b8 	ldr.w	r3, [r7, #440]	; 0x1b8
 801a634:	1ad3      	subs	r3, r2, r3
 801a636:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801a638:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801a63c:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a640:	441a      	add	r2, r3
 801a642:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a646:	3304      	adds	r3, #4
 801a648:	7812      	ldrb	r2, [r2, #0]
 801a64a:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 801a64c:	f8d7 31dc 	ldr.w	r3, [r7, #476]	; 0x1dc
 801a650:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801a652:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp23,
 801a656:	f8d7 21e4 	ldr.w	r2, [r7, #484]	; 0x1e4
 801a65a:	441a      	add	r2, r3
 801a65c:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 801a660:	3303      	adds	r3, #3
 801a662:	7812      	ldrb	r2, [r2, #0]
 801a664:	701a      	strb	r2, [r3, #0]

    wsptr += 7;		/* advance pointer to next row */
 801a666:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 801a66a:	331c      	adds	r3, #28
 801a66c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
  for (ctr = 0; ctr < 14; ctr++) {
 801a670:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a674:	3301      	adds	r3, #1
 801a676:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 801a67a:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 801a67e:	2b0d      	cmp	r3, #13
 801a680:	f77f ae90 	ble.w	801a3a4 <jpeg_idct_7x14+0x554>
  }
}
 801a684:	bf00      	nop
 801a686:	bf00      	nop
 801a688:	f507 77fc 	add.w	r7, r7, #504	; 0x1f8
 801a68c:	46bd      	mov	sp, r7
 801a68e:	bc90      	pop	{r4, r7}
 801a690:	4770      	bx	lr
 801a692:	bf00      	nop
 801a694:	ffffc515 	.word	0xffffc515
 801a698:	ffffb0f1 	.word	0xffffb0f1
 801a69c:	ffffd3e1 	.word	0xffffd3e1

0801a6a0 <jpeg_idct_6x12>:

GLOBAL(void)
jpeg_idct_6x12 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801a6a0:	b490      	push	{r4, r7}
 801a6a2:	b0e2      	sub	sp, #392	; 0x188
 801a6a4:	af00      	add	r7, sp, #0
 801a6a6:	f107 040c 	add.w	r4, r7, #12
 801a6aa:	6020      	str	r0, [r4, #0]
 801a6ac:	f107 0008 	add.w	r0, r7, #8
 801a6b0:	6001      	str	r1, [r0, #0]
 801a6b2:	1d39      	adds	r1, r7, #4
 801a6b4:	600a      	str	r2, [r1, #0]
 801a6b6:	463a      	mov	r2, r7
 801a6b8:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801a6ba:	f107 030c 	add.w	r3, r7, #12
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801a6c4:	3380      	adds	r3, #128	; 0x80
 801a6c6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 12-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/24).
   */
  inptr = coef_block;
 801a6ca:	1d3b      	adds	r3, r7, #4
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801a6d2:	f107 0308 	add.w	r3, r7, #8
 801a6d6:	681b      	ldr	r3, [r3, #0]
 801a6d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801a6da:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
  wsptr = workspace;
 801a6de:	f107 0310 	add.w	r3, r7, #16
 801a6e2:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801a6e6:	2300      	movs	r3, #0
 801a6e8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801a6ec:	e215      	b.n	801ab1a <jpeg_idct_6x12+0x47a>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801a6ee:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a6f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a6f6:	461a      	mov	r2, r3
 801a6f8:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a6fc:	681b      	ldr	r3, [r3, #0]
 801a6fe:	fb03 f302 	mul.w	r3, r3, r2
 801a702:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    z3 <<= CONST_BITS;
 801a706:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a70a:	035b      	lsls	r3, r3, #13
 801a70c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801a710:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a714:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801a718:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c

    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801a71c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a720:	3340      	adds	r3, #64	; 0x40
 801a722:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a726:	461a      	mov	r2, r3
 801a728:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a72c:	3380      	adds	r3, #128	; 0x80
 801a72e:	681b      	ldr	r3, [r3, #0]
 801a730:	fb03 f302 	mul.w	r3, r3, r2
 801a734:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    z4 = MULTIPLY(z4, FIX(1.224744871)); /* c4 */
 801a738:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a73c:	f242 7231 	movw	r2, #10033	; 0x2731
 801a740:	fb02 f303 	mul.w	r3, r2, r3
 801a744:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    tmp10 = z3 + z4;
 801a748:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801a74c:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a750:	4413      	add	r3, r2
 801a752:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp11 = z3 - z4;
 801a756:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801a75a:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a75e:	1ad3      	subs	r3, r2, r3
 801a760:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

    z1 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801a764:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a768:	3320      	adds	r3, #32
 801a76a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a76e:	461a      	mov	r2, r3
 801a770:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a774:	3340      	adds	r3, #64	; 0x40
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	fb03 f302 	mul.w	r3, r3, r2
 801a77c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z4 = MULTIPLY(z1, FIX(1.366025404)); /* c2 */
 801a780:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a784:	f642 32b6 	movw	r2, #11190	; 0x2bb6
 801a788:	fb02 f303 	mul.w	r3, r2, r3
 801a78c:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148
    z1 <<= CONST_BITS;
 801a790:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a794:	035b      	lsls	r3, r3, #13
 801a796:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z2 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801a79a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a79e:	3360      	adds	r3, #96	; 0x60
 801a7a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a7a4:	461a      	mov	r2, r3
 801a7a6:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a7aa:	33c0      	adds	r3, #192	; 0xc0
 801a7ac:	681b      	ldr	r3, [r3, #0]
 801a7ae:	fb03 f302 	mul.w	r3, r3, r2
 801a7b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    z2 <<= CONST_BITS;
 801a7b6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a7ba:	035b      	lsls	r3, r3, #13
 801a7bc:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150

    tmp12 = z1 - z2;
 801a7c0:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a7c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a7c8:	1ad3      	subs	r3, r2, r3
 801a7ca:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    tmp21 = z3 + tmp12;
 801a7ce:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801a7d2:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801a7d6:	4413      	add	r3, r2
 801a7d8:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp24 = z3 - tmp12;
 801a7dc:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801a7e0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801a7e4:	1ad3      	subs	r3, r2, r3
 801a7e6:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144

    tmp12 = z4 + z2;
 801a7ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a7ee:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a7f2:	4413      	add	r3, r2
 801a7f4:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    tmp20 = tmp10 + tmp12;
 801a7f8:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801a7fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801a800:	4413      	add	r3, r2
 801a802:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp25 = tmp10 - tmp12;
 801a806:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801a80a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801a80e:	1ad3      	subs	r3, r2, r3
 801a810:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140

    tmp12 = z4 - z1 - z2;
 801a814:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 801a818:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a81c:	1ad2      	subs	r2, r2, r3
 801a81e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a822:	1ad3      	subs	r3, r2, r3
 801a824:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168

    tmp22 = tmp11 + tmp12;
 801a828:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801a82c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801a830:	4413      	add	r3, r2
 801a832:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
    tmp23 = tmp11 - tmp12;
 801a836:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801a83a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801a83e:	1ad3      	subs	r3, r2, r3
 801a840:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801a844:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a848:	3310      	adds	r3, #16
 801a84a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a84e:	461a      	mov	r2, r3
 801a850:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a854:	3320      	adds	r3, #32
 801a856:	681b      	ldr	r3, [r3, #0]
 801a858:	fb03 f302 	mul.w	r3, r3, r2
 801a85c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801a860:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a864:	3330      	adds	r3, #48	; 0x30
 801a866:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a86a:	461a      	mov	r2, r3
 801a86c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a870:	3360      	adds	r3, #96	; 0x60
 801a872:	681b      	ldr	r3, [r3, #0]
 801a874:	fb03 f302 	mul.w	r3, r3, r2
 801a878:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801a87c:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a880:	3350      	adds	r3, #80	; 0x50
 801a882:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a886:	461a      	mov	r2, r3
 801a888:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a88c:	33a0      	adds	r3, #160	; 0xa0
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	fb03 f302 	mul.w	r3, r3, r2
 801a894:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801a898:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801a89c:	3370      	adds	r3, #112	; 0x70
 801a89e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801a8a2:	461a      	mov	r2, r3
 801a8a4:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801a8a8:	33e0      	adds	r3, #224	; 0xe0
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	fb03 f302 	mul.w	r3, r3, r2
 801a8b0:	f8c7 3148 	str.w	r3, [r7, #328]	; 0x148

    tmp11 = MULTIPLY(z2, FIX(1.306562965));                  /* c3 */
 801a8b4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a8b8:	f642 12cf 	movw	r2, #10703	; 0x29cf
 801a8bc:	fb02 f303 	mul.w	r3, r2, r3
 801a8c0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp14 = MULTIPLY(z2, - FIX_0_541196100);                 /* -c9 */
 801a8c4:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a8c8:	4a9a      	ldr	r2, [pc, #616]	; (801ab34 <jpeg_idct_6x12+0x494>)
 801a8ca:	fb02 f303 	mul.w	r3, r2, r3
 801a8ce:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    tmp10 = z1 + z3;
 801a8d2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a8d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a8da:	4413      	add	r3, r2
 801a8dc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp15 = MULTIPLY(tmp10 + z4, FIX(0.860918669));          /* c7 */
 801a8e0:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801a8e4:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a8e8:	4413      	add	r3, r2
 801a8ea:	f641 328d 	movw	r2, #7053	; 0x1b8d
 801a8ee:	fb02 f303 	mul.w	r3, r2, r3
 801a8f2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
    tmp12 = tmp15 + MULTIPLY(tmp10, FIX(0.261052384));       /* c5-c7 */
 801a8f6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801a8fa:	f640 025b 	movw	r2, #2139	; 0x85b
 801a8fe:	fb02 f303 	mul.w	r3, r2, r3
 801a902:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a906:	4413      	add	r3, r2
 801a908:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp10 = tmp12 + tmp11 + MULTIPLY(z1, FIX(0.280143716));  /* c1-c5 */
 801a90c:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 801a910:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801a914:	18d1      	adds	r1, r2, r3
 801a916:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a91a:	4613      	mov	r3, r2
 801a91c:	00db      	lsls	r3, r3, #3
 801a91e:	4413      	add	r3, r2
 801a920:	021a      	lsls	r2, r3, #8
 801a922:	1ad3      	subs	r3, r2, r3
 801a924:	440b      	add	r3, r1
 801a926:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp13 = MULTIPLY(z3 + z4, - FIX(1.045510580));           /* -(c7+c11) */
 801a92a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801a92e:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a932:	4413      	add	r3, r2
 801a934:	4a80      	ldr	r2, [pc, #512]	; (801ab38 <jpeg_idct_6x12+0x498>)
 801a936:	fb02 f303 	mul.w	r3, r2, r3
 801a93a:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp12 += tmp13 + tmp14 - MULTIPLY(z3, FIX(1.478575242)); /* c1+c5-c7-c11 */
 801a93e:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a942:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a946:	441a      	add	r2, r3
 801a948:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a94c:	497b      	ldr	r1, [pc, #492]	; (801ab3c <jpeg_idct_6x12+0x49c>)
 801a94e:	fb01 f303 	mul.w	r3, r1, r3
 801a952:	4413      	add	r3, r2
 801a954:	f8d7 2168 	ldr.w	r2, [r7, #360]	; 0x168
 801a958:	4413      	add	r3, r2
 801a95a:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp13 += tmp15 - tmp11 + MULTIPLY(z4, FIX(1.586706681)); /* c1+c11 */
 801a95e:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a962:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801a966:	1ad2      	subs	r2, r2, r3
 801a968:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a96c:	f243 21c6 	movw	r1, #12998	; 0x32c6
 801a970:	fb01 f303 	mul.w	r3, r1, r3
 801a974:	4413      	add	r3, r2
 801a976:	f8d7 2130 	ldr.w	r2, [r7, #304]	; 0x130
 801a97a:	4413      	add	r3, r2
 801a97c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801a980:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a984:	4a6e      	ldr	r2, [pc, #440]	; (801ab40 <jpeg_idct_6x12+0x4a0>)
 801a986:	fb02 f203 	mul.w	r2, r2, r3
 801a98a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801a98e:	441a      	add	r2, r3
	     MULTIPLY(z4, FIX(1.982889723));                 /* c5+c7 */
 801a990:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a994:	496b      	ldr	r1, [pc, #428]	; (801ab44 <jpeg_idct_6x12+0x4a4>)
 801a996:	fb01 f303 	mul.w	r3, r1, r3
    tmp15 += tmp14 - MULTIPLY(z1, FIX(0.676326758)) -        /* c7-c11 */
 801a99a:	4413      	add	r3, r2
 801a99c:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 801a9a0:	4413      	add	r3, r2
 801a9a2:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134

    z1 -= z4;
 801a9a6:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a9aa:	f8d7 3148 	ldr.w	r3, [r7, #328]	; 0x148
 801a9ae:	1ad3      	subs	r3, r2, r3
 801a9b0:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z2 -= z3;
 801a9b4:	f8d7 2150 	ldr.w	r2, [r7, #336]	; 0x150
 801a9b8:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801a9bc:	1ad3      	subs	r3, r2, r3
 801a9be:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    z3 = MULTIPLY(z1 + z2, FIX_0_541196100);                 /* c9 */
 801a9c2:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801a9c6:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a9ca:	4413      	add	r3, r2
 801a9cc:	f241 1251 	movw	r2, #4433	; 0x1151
 801a9d0:	fb02 f303 	mul.w	r3, r2, r3
 801a9d4:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp11 = z3 + MULTIPLY(z1, FIX_0_765366865);              /* c3-c9 */
 801a9d8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 801a9dc:	f641 027e 	movw	r2, #6270	; 0x187e
 801a9e0:	fb02 f303 	mul.w	r3, r2, r3
 801a9e4:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801a9e8:	4413      	add	r3, r2
 801a9ea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp14 = z3 - MULTIPLY(z2, FIX_1_847759065);              /* c3+c9 */
 801a9ee:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801a9f2:	4a55      	ldr	r2, [pc, #340]	; (801ab48 <jpeg_idct_6x12+0x4a8>)
 801a9f4:	fb02 f303 	mul.w	r3, r2, r3
 801a9f8:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801a9fc:	4413      	add	r3, r2
 801a9fe:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138

    /* Final output stage */

    wsptr[6*0]  = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801aa02:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801aa06:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801aa0a:	4413      	add	r3, r2
 801aa0c:	12da      	asrs	r2, r3, #11
 801aa0e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aa12:	601a      	str	r2, [r3, #0]
    wsptr[6*11] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801aa14:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801aa18:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801aa1c:	1ad2      	subs	r2, r2, r3
 801aa1e:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aa22:	f503 7384 	add.w	r3, r3, #264	; 0x108
 801aa26:	12d2      	asrs	r2, r2, #11
 801aa28:	601a      	str	r2, [r3, #0]
    wsptr[6*1]  = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801aa2a:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801aa2e:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801aa32:	441a      	add	r2, r3
 801aa34:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aa38:	3318      	adds	r3, #24
 801aa3a:	12d2      	asrs	r2, r2, #11
 801aa3c:	601a      	str	r2, [r3, #0]
    wsptr[6*10] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801aa3e:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801aa42:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801aa46:	1ad2      	subs	r2, r2, r3
 801aa48:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aa4c:	33f0      	adds	r3, #240	; 0xf0
 801aa4e:	12d2      	asrs	r2, r2, #11
 801aa50:	601a      	str	r2, [r3, #0]
    wsptr[6*2]  = (int) RIGHT_SHIFT(tmp22 + tmp12, CONST_BITS-PASS1_BITS);
 801aa52:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801aa56:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801aa5a:	441a      	add	r2, r3
 801aa5c:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aa60:	3330      	adds	r3, #48	; 0x30
 801aa62:	12d2      	asrs	r2, r2, #11
 801aa64:	601a      	str	r2, [r3, #0]
    wsptr[6*9]  = (int) RIGHT_SHIFT(tmp22 - tmp12, CONST_BITS-PASS1_BITS);
 801aa66:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801aa6a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801aa6e:	1ad2      	subs	r2, r2, r3
 801aa70:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aa74:	33d8      	adds	r3, #216	; 0xd8
 801aa76:	12d2      	asrs	r2, r2, #11
 801aa78:	601a      	str	r2, [r3, #0]
    wsptr[6*3]  = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801aa7a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801aa7e:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801aa82:	441a      	add	r2, r3
 801aa84:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aa88:	3348      	adds	r3, #72	; 0x48
 801aa8a:	12d2      	asrs	r2, r2, #11
 801aa8c:	601a      	str	r2, [r3, #0]
    wsptr[6*8]  = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801aa8e:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 801aa92:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 801aa96:	1ad2      	subs	r2, r2, r3
 801aa98:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aa9c:	33c0      	adds	r3, #192	; 0xc0
 801aa9e:	12d2      	asrs	r2, r2, #11
 801aaa0:	601a      	str	r2, [r3, #0]
    wsptr[6*4]  = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801aaa2:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801aaa6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801aaaa:	441a      	add	r2, r3
 801aaac:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aab0:	3360      	adds	r3, #96	; 0x60
 801aab2:	12d2      	asrs	r2, r2, #11
 801aab4:	601a      	str	r2, [r3, #0]
    wsptr[6*7]  = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801aab6:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 801aaba:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801aabe:	1ad2      	subs	r2, r2, r3
 801aac0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aac4:	33a8      	adds	r3, #168	; 0xa8
 801aac6:	12d2      	asrs	r2, r2, #11
 801aac8:	601a      	str	r2, [r3, #0]
    wsptr[6*5]  = (int) RIGHT_SHIFT(tmp25 + tmp15, CONST_BITS-PASS1_BITS);
 801aaca:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801aace:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801aad2:	441a      	add	r2, r3
 801aad4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aad8:	3378      	adds	r3, #120	; 0x78
 801aada:	12d2      	asrs	r2, r2, #11
 801aadc:	601a      	str	r2, [r3, #0]
    wsptr[6*6]  = (int) RIGHT_SHIFT(tmp25 - tmp15, CONST_BITS-PASS1_BITS);
 801aade:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 801aae2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 801aae6:	1ad2      	subs	r2, r2, r3
 801aae8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801aaec:	3390      	adds	r3, #144	; 0x90
 801aaee:	12d2      	asrs	r2, r2, #11
 801aaf0:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 6; ctr++, inptr++, quantptr++, wsptr++) {
 801aaf2:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801aaf6:	3301      	adds	r3, #1
 801aaf8:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801aafc:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 801ab00:	3302      	adds	r3, #2
 801ab02:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 801ab06:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 801ab0a:	3304      	adds	r3, #4
 801ab0c:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 801ab10:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ab14:	3304      	adds	r3, #4
 801ab16:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 801ab1a:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801ab1e:	2b05      	cmp	r3, #5
 801ab20:	f77f ade5 	ble.w	801a6ee <jpeg_idct_6x12+0x4e>
  }

  /* Pass 2: process 12 rows from work array, store into output array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  wsptr = workspace;
 801ab24:	f107 0310 	add.w	r3, r7, #16
 801ab28:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  for (ctr = 0; ctr < 12; ctr++) {
 801ab2c:	2300      	movs	r3, #0
 801ab2e:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801ab32:	e104      	b.n	801ad3e <jpeg_idct_6x12+0x69e>
 801ab34:	ffffeeaf 	.word	0xffffeeaf
 801ab38:	ffffde8b 	.word	0xffffde8b
 801ab3c:	ffffd0b0 	.word	0xffffd0b0
 801ab40:	ffffea5c 	.word	0xffffea5c
 801ab44:	ffffc08c 	.word	0xffffc08c
 801ab48:	ffffc4df 	.word	0xffffc4df
    outptr = output_buf[ctr] + output_col;
 801ab4c:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801ab50:	009b      	lsls	r3, r3, #2
 801ab52:	463a      	mov	r2, r7
 801ab54:	6812      	ldr	r2, [r2, #0]
 801ab56:	4413      	add	r3, r2
 801ab58:	681a      	ldr	r2, [r3, #0]
 801ab5a:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 801ab5e:	4413      	add	r3, r2
 801ab60:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801ab64:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	3310      	adds	r3, #16
 801ab6c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp10 <<= CONST_BITS;
 801ab70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801ab74:	035b      	lsls	r3, r3, #13
 801ab76:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp12 = (INT32) wsptr[4];
 801ab7a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ab7e:	3310      	adds	r3, #16
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp20 = MULTIPLY(tmp12, FIX(0.707106781));   /* c4 */
 801ab86:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801ab8a:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801ab8e:	fb02 f303 	mul.w	r3, r2, r3
 801ab92:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp11 = tmp10 + tmp20;
 801ab96:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801ab9a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801ab9e:	4413      	add	r3, r2
 801aba0:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp21 = tmp10 - tmp20 - tmp20;
 801aba4:	f8d7 216c 	ldr.w	r2, [r7, #364]	; 0x16c
 801aba8:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801abac:	1ad2      	subs	r2, r2, r3
 801abae:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801abb2:	1ad3      	subs	r3, r2, r3
 801abb4:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
    tmp20 = (INT32) wsptr[2];
 801abb8:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801abbc:	3308      	adds	r3, #8
 801abbe:	681b      	ldr	r3, [r3, #0]
 801abc0:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp10 = MULTIPLY(tmp20, FIX(1.224744871));   /* c2 */
 801abc4:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 801abc8:	f242 7231 	movw	r2, #10033	; 0x2731
 801abcc:	fb02 f303 	mul.w	r3, r2, r3
 801abd0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp20 = tmp11 + tmp10;
 801abd4:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801abd8:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801abdc:	4413      	add	r3, r2
 801abde:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
    tmp22 = tmp11 - tmp10;
 801abe2:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801abe6:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801abea:	1ad3      	subs	r3, r2, r3
 801abec:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158

    /* Odd part */

    z1 = (INT32) wsptr[1];
 801abf0:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801abf4:	3304      	adds	r3, #4
 801abf6:	681b      	ldr	r3, [r3, #0]
 801abf8:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
    z2 = (INT32) wsptr[3];
 801abfc:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ac00:	330c      	adds	r3, #12
 801ac02:	681b      	ldr	r3, [r3, #0]
 801ac04:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
    z3 = (INT32) wsptr[5];
 801ac08:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ac0c:	3314      	adds	r3, #20
 801ac0e:	681b      	ldr	r3, [r3, #0]
 801ac10:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
    tmp11 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801ac14:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801ac18:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ac1c:	4413      	add	r3, r2
 801ac1e:	f640 32b6 	movw	r2, #2998	; 0xbb6
 801ac22:	fb02 f303 	mul.w	r3, r2, r3
 801ac26:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
    tmp10 = tmp11 + ((z1 + z2) << CONST_BITS);
 801ac2a:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801ac2e:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801ac32:	4413      	add	r3, r2
 801ac34:	035b      	lsls	r3, r3, #13
 801ac36:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801ac3a:	4413      	add	r3, r2
 801ac3c:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
    tmp12 = tmp11 + ((z3 - z2) << CONST_BITS);
 801ac40:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 801ac44:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801ac48:	1ad3      	subs	r3, r2, r3
 801ac4a:	035b      	lsls	r3, r3, #13
 801ac4c:	f8d7 2160 	ldr.w	r2, [r7, #352]	; 0x160
 801ac50:	4413      	add	r3, r2
 801ac52:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
    tmp11 = (z1 - z2 - z3) << CONST_BITS;
 801ac56:	f8d7 2154 	ldr.w	r2, [r7, #340]	; 0x154
 801ac5a:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 801ac5e:	1ad2      	subs	r2, r2, r3
 801ac60:	f8d7 314c 	ldr.w	r3, [r7, #332]	; 0x14c
 801ac64:	1ad3      	subs	r3, r2, r3
 801ac66:	035b      	lsls	r3, r3, #13
 801ac68:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ac6c:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801ac70:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801ac74:	4413      	add	r3, r2
 801ac76:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ac78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp20 + tmp10,
 801ac7c:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801ac80:	4413      	add	r3, r2
 801ac82:	781a      	ldrb	r2, [r3, #0]
 801ac84:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801ac88:	701a      	strb	r2, [r3, #0]
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801ac8a:	f8d7 2164 	ldr.w	r2, [r7, #356]	; 0x164
 801ac8e:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 801ac92:	1ad3      	subs	r3, r2, r3
 801ac94:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ac96:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[5] = range_limit[(int) RIGHT_SHIFT(tmp20 - tmp10,
 801ac9a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801ac9e:	441a      	add	r2, r3
 801aca0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801aca4:	3305      	adds	r3, #5
 801aca6:	7812      	ldrb	r2, [r2, #0]
 801aca8:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801acaa:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801acae:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801acb2:	4413      	add	r3, r2
 801acb4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801acb6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp21 + tmp11,
 801acba:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801acbe:	441a      	add	r2, r3
 801acc0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801acc4:	3301      	adds	r3, #1
 801acc6:	7812      	ldrb	r2, [r2, #0]
 801acc8:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801acca:	f8d7 215c 	ldr.w	r2, [r7, #348]	; 0x15c
 801acce:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 801acd2:	1ad3      	subs	r3, r2, r3
 801acd4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801acd6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp21 - tmp11,
 801acda:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801acde:	441a      	add	r2, r3
 801ace0:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801ace4:	3304      	adds	r3, #4
 801ace6:	7812      	ldrb	r2, [r2, #0]
 801ace8:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801acea:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801acee:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801acf2:	4413      	add	r3, r2
 801acf4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801acf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp22 + tmp12,
 801acfa:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801acfe:	441a      	add	r2, r3
 801ad00:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801ad04:	3302      	adds	r3, #2
 801ad06:	7812      	ldrb	r2, [r2, #0]
 801ad08:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801ad0a:	f8d7 2158 	ldr.w	r2, [r7, #344]	; 0x158
 801ad0e:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 801ad12:	1ad3      	subs	r3, r2, r3
 801ad14:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801ad16:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp22 - tmp12,
 801ad1a:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 801ad1e:	441a      	add	r2, r3
 801ad20:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 801ad24:	3303      	adds	r3, #3
 801ad26:	7812      	ldrb	r2, [r2, #0]
 801ad28:	701a      	strb	r2, [r3, #0]

    wsptr += 6;		/* advance pointer to next row */
 801ad2a:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 801ad2e:	3318      	adds	r3, #24
 801ad30:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  for (ctr = 0; ctr < 12; ctr++) {
 801ad34:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801ad38:	3301      	adds	r3, #1
 801ad3a:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
 801ad3e:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 801ad42:	2b0b      	cmp	r3, #11
 801ad44:	f77f af02 	ble.w	801ab4c <jpeg_idct_6x12+0x4ac>
  }
}
 801ad48:	bf00      	nop
 801ad4a:	bf00      	nop
 801ad4c:	f507 77c4 	add.w	r7, r7, #392	; 0x188
 801ad50:	46bd      	mov	sp, r7
 801ad52:	bc90      	pop	{r4, r7}
 801ad54:	4770      	bx	lr
 801ad56:	bf00      	nop

0801ad58 <jpeg_idct_5x10>:

GLOBAL(void)
jpeg_idct_5x10 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
		JCOEFPTR coef_block,
		JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801ad58:	b490      	push	{r4, r7}
 801ad5a:	b0cc      	sub	sp, #304	; 0x130
 801ad5c:	af00      	add	r7, sp, #0
 801ad5e:	f107 040c 	add.w	r4, r7, #12
 801ad62:	6020      	str	r0, [r4, #0]
 801ad64:	f107 0008 	add.w	r0, r7, #8
 801ad68:	6001      	str	r1, [r0, #0]
 801ad6a:	1d39      	adds	r1, r7, #4
 801ad6c:	600a      	str	r2, [r1, #0]
 801ad6e:	463a      	mov	r2, r7
 801ad70:	6013      	str	r3, [r2, #0]
  INT32 z1, z2, z3, z4, z5;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801ad72:	f107 030c 	add.w	r3, r7, #12
 801ad76:	681b      	ldr	r3, [r3, #0]
 801ad78:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801ad7c:	3380      	adds	r3, #128	; 0x80
 801ad7e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 10-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/20).
   */
  inptr = coef_block;
 801ad82:	1d3b      	adds	r3, r7, #4
 801ad84:	681b      	ldr	r3, [r3, #0]
 801ad86:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801ad8a:	f107 0308 	add.w	r3, r7, #8
 801ad8e:	681b      	ldr	r3, [r3, #0]
 801ad90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801ad92:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
  wsptr = workspace;
 801ad96:	f107 0314 	add.w	r3, r7, #20
 801ad9a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801ad9e:	2300      	movs	r3, #0
 801ada0:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801ada4:	e1d3      	b.n	801b14e <jpeg_idct_5x10+0x3f6>
    /* Even part */

    z3 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801ada6:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801adaa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801adae:	461a      	mov	r2, r3
 801adb0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801adb4:	681b      	ldr	r3, [r3, #0]
 801adb6:	fb03 f302 	mul.w	r3, r3, r2
 801adba:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    z3 <<= CONST_BITS;
 801adbe:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801adc2:	035b      	lsls	r3, r3, #13
 801adc4:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    /* Add fudge factor here for final descale. */
    z3 += ONE << (CONST_BITS-PASS1_BITS-1);
 801adc8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801adcc:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801add0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    z4 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801add4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801add8:	3340      	adds	r3, #64	; 0x40
 801adda:	f9b3 3000 	ldrsh.w	r3, [r3]
 801adde:	461a      	mov	r2, r3
 801ade0:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ade4:	3380      	adds	r3, #128	; 0x80
 801ade6:	681b      	ldr	r3, [r3, #0]
 801ade8:	fb03 f302 	mul.w	r3, r3, r2
 801adec:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
    z1 = MULTIPLY(z4, FIX(1.144122806));         /* c4 */
 801adf0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801adf4:	f242 429d 	movw	r2, #9373	; 0x249d
 801adf8:	fb02 f303 	mul.w	r3, r2, r3
 801adfc:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z2 = MULTIPLY(z4, FIX(0.437016024));         /* c8 */
 801ae00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801ae04:	f640 52fc 	movw	r2, #3580	; 0xdfc
 801ae08:	fb02 f303 	mul.w	r3, r2, r3
 801ae0c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    tmp10 = z3 + z1;
 801ae10:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801ae14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801ae18:	4413      	add	r3, r2
 801ae1a:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp11 = z3 - z2;
 801ae1e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801ae22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ae26:	1ad3      	subs	r3, r2, r3
 801ae28:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8

    tmp22 = RIGHT_SHIFT(z3 - ((z1 - z2) << 1),   /* c0 = (c4-c8)*2 */
 801ae2c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801ae30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ae34:	1ad3      	subs	r3, r2, r3
 801ae36:	005b      	lsls	r3, r3, #1
 801ae38:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801ae3c:	1ad3      	subs	r3, r2, r3
 801ae3e:	12db      	asrs	r3, r3, #11
 801ae40:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
			CONST_BITS-PASS1_BITS);

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801ae44:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ae48:	3320      	adds	r3, #32
 801ae4a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae4e:	461a      	mov	r2, r3
 801ae50:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ae54:	3340      	adds	r3, #64	; 0x40
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	fb03 f302 	mul.w	r3, r3, r2
 801ae5c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801ae60:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801ae64:	3360      	adds	r3, #96	; 0x60
 801ae66:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ae6a:	461a      	mov	r2, r3
 801ae6c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801ae70:	33c0      	adds	r3, #192	; 0xc0
 801ae72:	681b      	ldr	r3, [r3, #0]
 801ae74:	fb03 f302 	mul.w	r3, r3, r2
 801ae78:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));    /* c6 */
 801ae7c:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801ae80:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801ae84:	4413      	add	r3, r2
 801ae86:	f641 229a 	movw	r2, #6810	; 0x1a9a
 801ae8a:	fb02 f303 	mul.w	r3, r2, r3
 801ae8e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp12 = z1 + MULTIPLY(z2, FIX(0.513743148)); /* c2-c6 */
 801ae92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801ae96:	f241 0271 	movw	r2, #4209	; 0x1071
 801ae9a:	fb02 f303 	mul.w	r3, r2, r3
 801ae9e:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801aea2:	4413      	add	r3, r2
 801aea4:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp13 = z1 - MULTIPLY(z3, FIX(2.176250899)); /* c2+c6 */
 801aea8:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801aeac:	4aae      	ldr	r2, [pc, #696]	; (801b168 <jpeg_idct_5x10+0x410>)
 801aeae:	fb02 f303 	mul.w	r3, r2, r3
 801aeb2:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801aeb6:	4413      	add	r3, r2
 801aeb8:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    tmp20 = tmp10 + tmp12;
 801aebc:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801aec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801aec4:	4413      	add	r3, r2
 801aec6:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    tmp24 = tmp10 - tmp12;
 801aeca:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801aece:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801aed2:	1ad3      	subs	r3, r2, r3
 801aed4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    tmp21 = tmp11 + tmp13;
 801aed8:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801aedc:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aee0:	4413      	add	r3, r2
 801aee2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    tmp23 = tmp11 - tmp13;
 801aee6:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801aeea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801aeee:	1ad3      	subs	r3, r2, r3
 801aef0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801aef4:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801aef8:	3310      	adds	r3, #16
 801aefa:	f9b3 3000 	ldrsh.w	r3, [r3]
 801aefe:	461a      	mov	r2, r3
 801af00:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801af04:	3320      	adds	r3, #32
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	fb03 f302 	mul.w	r3, r3, r2
 801af0c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801af10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801af14:	3330      	adds	r3, #48	; 0x30
 801af16:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af1a:	461a      	mov	r2, r3
 801af1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801af20:	3360      	adds	r3, #96	; 0x60
 801af22:	681b      	ldr	r3, [r3, #0]
 801af24:	fb03 f302 	mul.w	r3, r3, r2
 801af28:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801af2c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801af30:	3350      	adds	r3, #80	; 0x50
 801af32:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af36:	461a      	mov	r2, r3
 801af38:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801af3c:	33a0      	adds	r3, #160	; 0xa0
 801af3e:	681b      	ldr	r3, [r3, #0]
 801af40:	fb03 f302 	mul.w	r3, r3, r2
 801af44:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    z4 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801af48:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801af4c:	3370      	adds	r3, #112	; 0x70
 801af4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 801af52:	461a      	mov	r2, r3
 801af54:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801af58:	33e0      	adds	r3, #224	; 0xe0
 801af5a:	681b      	ldr	r3, [r3, #0]
 801af5c:	fb03 f302 	mul.w	r3, r3, r2
 801af60:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp11 = z2 + z4;
 801af64:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801af68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801af6c:	4413      	add	r3, r2
 801af6e:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp13 = z2 - z4;
 801af72:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801af76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801af7a:	1ad3      	subs	r3, r2, r3
 801af7c:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    tmp12 = MULTIPLY(tmp13, FIX(0.309016994));        /* (c3-c7)/2 */
 801af80:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801af84:	f640 12e3 	movw	r2, #2531	; 0x9e3
 801af88:	fb02 f303 	mul.w	r3, r2, r3
 801af8c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    z5 = z3 << CONST_BITS;
 801af90:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801af94:	035b      	lsls	r3, r3, #13
 801af96:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

    z2 = MULTIPLY(tmp11, FIX(0.951056516));           /* (c3+c7)/2 */
 801af9a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801af9e:	f641 626f 	movw	r2, #7791	; 0x1e6f
 801afa2:	fb02 f303 	mul.w	r3, r2, r3
 801afa6:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z4 = z5 + tmp12;
 801afaa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801afae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801afb2:	4413      	add	r3, r2
 801afb4:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp10 = MULTIPLY(z1, FIX(1.396802247)) + z2 + z4; /* c1 */
 801afb8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801afbc:	f642 42b3 	movw	r2, #11443	; 0x2cb3
 801afc0:	fb02 f203 	mul.w	r2, r2, r3
 801afc4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801afc8:	4413      	add	r3, r2
 801afca:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801afce:	4413      	add	r3, r2
 801afd0:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp14 = MULTIPLY(z1, FIX(0.221231742)) - z2 + z4; /* c9 */
 801afd4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801afd8:	f240 7214 	movw	r2, #1812	; 0x714
 801afdc:	fb02 f203 	mul.w	r2, r2, r3
 801afe0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801afe4:	1ad3      	subs	r3, r2, r3
 801afe6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801afea:	4413      	add	r3, r2
 801afec:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    z2 = MULTIPLY(tmp11, FIX(0.587785252));           /* (c1-c9)/2 */
 801aff0:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801aff4:	f241 22cf 	movw	r2, #4815	; 0x12cf
 801aff8:	fb02 f303 	mul.w	r3, r2, r3
 801affc:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z4 = z5 - tmp12 - (tmp13 << (CONST_BITS - 1));
 801b000:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 801b004:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b008:	1ad2      	subs	r2, r2, r3
 801b00a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b00e:	031b      	lsls	r3, r3, #12
 801b010:	1ad3      	subs	r3, r2, r3
 801b012:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4

    tmp12 = (z1 - tmp13 - z3) << PASS1_BITS;
 801b016:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b01a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b01e:	1ad2      	subs	r2, r2, r3
 801b020:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b024:	1ad3      	subs	r3, r2, r3
 801b026:	009b      	lsls	r3, r3, #2
 801b028:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    tmp11 = MULTIPLY(z1, FIX(1.260073511)) - z2 - z4; /* c3 */
 801b02c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b030:	f642 0253 	movw	r2, #10323	; 0x2853
 801b034:	fb02 f203 	mul.w	r2, r2, r3
 801b038:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801b03c:	1ad2      	subs	r2, r2, r3
 801b03e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801b042:	1ad3      	subs	r3, r2, r3
 801b044:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp13 = MULTIPLY(z1, FIX(0.642039522)) - z2 + z4; /* c7 */
 801b048:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b04c:	f241 428c 	movw	r2, #5260	; 0x148c
 801b050:	fb02 f203 	mul.w	r2, r2, r3
 801b054:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801b058:	1ad3      	subs	r3, r2, r3
 801b05a:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 801b05e:	4413      	add	r3, r2
 801b060:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110

    /* Final output stage */

    wsptr[5*0] = (int) RIGHT_SHIFT(tmp20 + tmp10, CONST_BITS-PASS1_BITS);
 801b064:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801b068:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b06c:	4413      	add	r3, r2
 801b06e:	12da      	asrs	r2, r3, #11
 801b070:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b074:	601a      	str	r2, [r3, #0]
    wsptr[5*9] = (int) RIGHT_SHIFT(tmp20 - tmp10, CONST_BITS-PASS1_BITS);
 801b076:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 801b07a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801b07e:	1ad2      	subs	r2, r2, r3
 801b080:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b084:	33b4      	adds	r3, #180	; 0xb4
 801b086:	12d2      	asrs	r2, r2, #11
 801b088:	601a      	str	r2, [r3, #0]
    wsptr[5*1] = (int) RIGHT_SHIFT(tmp21 + tmp11, CONST_BITS-PASS1_BITS);
 801b08a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b08e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b092:	441a      	add	r2, r3
 801b094:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b098:	3314      	adds	r3, #20
 801b09a:	12d2      	asrs	r2, r2, #11
 801b09c:	601a      	str	r2, [r3, #0]
    wsptr[5*8] = (int) RIGHT_SHIFT(tmp21 - tmp11, CONST_BITS-PASS1_BITS);
 801b09e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 801b0a2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 801b0a6:	1ad2      	subs	r2, r2, r3
 801b0a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b0ac:	33a0      	adds	r3, #160	; 0xa0
 801b0ae:	12d2      	asrs	r2, r2, #11
 801b0b0:	601a      	str	r2, [r3, #0]
    wsptr[5*2] = (int) (tmp22 + tmp12);
 801b0b2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b0b6:	3328      	adds	r3, #40	; 0x28
 801b0b8:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801b0bc:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b0c0:	440a      	add	r2, r1
 801b0c2:	601a      	str	r2, [r3, #0]
    wsptr[5*7] = (int) (tmp22 - tmp12);
 801b0c4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b0c8:	338c      	adds	r3, #140	; 0x8c
 801b0ca:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801b0ce:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b0d2:	1a8a      	subs	r2, r1, r2
 801b0d4:	601a      	str	r2, [r3, #0]
    wsptr[5*3] = (int) RIGHT_SHIFT(tmp23 + tmp13, CONST_BITS-PASS1_BITS);
 801b0d6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b0da:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b0de:	441a      	add	r2, r3
 801b0e0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b0e4:	333c      	adds	r3, #60	; 0x3c
 801b0e6:	12d2      	asrs	r2, r2, #11
 801b0e8:	601a      	str	r2, [r3, #0]
    wsptr[5*6] = (int) RIGHT_SHIFT(tmp23 - tmp13, CONST_BITS-PASS1_BITS);
 801b0ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 801b0ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b0f2:	1ad2      	subs	r2, r2, r3
 801b0f4:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b0f8:	3378      	adds	r3, #120	; 0x78
 801b0fa:	12d2      	asrs	r2, r2, #11
 801b0fc:	601a      	str	r2, [r3, #0]
    wsptr[5*4] = (int) RIGHT_SHIFT(tmp24 + tmp14, CONST_BITS-PASS1_BITS);
 801b0fe:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801b102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b106:	441a      	add	r2, r3
 801b108:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b10c:	3350      	adds	r3, #80	; 0x50
 801b10e:	12d2      	asrs	r2, r2, #11
 801b110:	601a      	str	r2, [r3, #0]
    wsptr[5*5] = (int) RIGHT_SHIFT(tmp24 - tmp14, CONST_BITS-PASS1_BITS);
 801b112:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 801b116:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b11a:	1ad2      	subs	r2, r2, r3
 801b11c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b120:	3364      	adds	r3, #100	; 0x64
 801b122:	12d2      	asrs	r2, r2, #11
 801b124:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 5; ctr++, inptr++, quantptr++, wsptr++) {
 801b126:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b12a:	3301      	adds	r3, #1
 801b12c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801b130:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 801b134:	3302      	adds	r3, #2
 801b136:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
 801b13a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801b13e:	3304      	adds	r3, #4
 801b140:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 801b144:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b148:	3304      	adds	r3, #4
 801b14a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 801b14e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b152:	2b04      	cmp	r3, #4
 801b154:	f77f ae27 	ble.w	801ada6 <jpeg_idct_5x10+0x4e>
  }

  /* Pass 2: process 10 rows from work array, store into output array.
   * 5-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/10).
   */
  wsptr = workspace;
 801b158:	f107 0314 	add.w	r3, r7, #20
 801b15c:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  for (ctr = 0; ctr < 10; ctr++) {
 801b160:	2300      	movs	r3, #0
 801b162:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801b166:	e0d9      	b.n	801b31c <jpeg_idct_5x10+0x5c4>
 801b168:	ffffba5c 	.word	0xffffba5c
    outptr = output_buf[ctr] + output_col;
 801b16c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b170:	009b      	lsls	r3, r3, #2
 801b172:	463a      	mov	r2, r7
 801b174:	6812      	ldr	r2, [r2, #0]
 801b176:	4413      	add	r3, r2
 801b178:	681a      	ldr	r2, [r3, #0]
 801b17a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 801b17e:	4413      	add	r3, r2
 801b180:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp12 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801b184:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b188:	681b      	ldr	r3, [r3, #0]
 801b18a:	3310      	adds	r3, #16
 801b18c:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp12 <<= CONST_BITS;
 801b190:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b194:	035b      	lsls	r3, r3, #13
 801b196:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
    tmp13 = (INT32) wsptr[2];
 801b19a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b19e:	3308      	adds	r3, #8
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp14 = (INT32) wsptr[4];
 801b1a6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b1aa:	3310      	adds	r3, #16
 801b1ac:	681b      	ldr	r3, [r3, #0]
 801b1ae:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
    z1 = MULTIPLY(tmp13 + tmp14, FIX(0.790569415)); /* (c2+c4)/2 */
 801b1b2:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b1b6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b1ba:	4413      	add	r3, r2
 801b1bc:	f641 124c 	movw	r2, #6476	; 0x194c
 801b1c0:	fb02 f303 	mul.w	r3, r2, r3
 801b1c4:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    z2 = MULTIPLY(tmp13 - tmp14, FIX(0.353553391)); /* (c2-c4)/2 */
 801b1c8:	f8d7 2110 	ldr.w	r2, [r7, #272]	; 0x110
 801b1cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b1d0:	1ad3      	subs	r3, r2, r3
 801b1d2:	f44f 6235 	mov.w	r2, #2896	; 0xb50
 801b1d6:	fb02 f303 	mul.w	r3, r2, r3
 801b1da:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z3 = tmp12 + z2;
 801b1de:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b1e2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801b1e6:	4413      	add	r3, r2
 801b1e8:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
    tmp10 = z3 + z1;
 801b1ec:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801b1f0:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b1f4:	4413      	add	r3, r2
 801b1f6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
    tmp11 = z3 - z1;
 801b1fa:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 801b1fe:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 801b202:	1ad3      	subs	r3, r2, r3
 801b204:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
    tmp12 -= z2 << 2;
 801b208:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801b20c:	009b      	lsls	r3, r3, #2
 801b20e:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 801b212:	1ad3      	subs	r3, r2, r3
 801b214:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114

    /* Odd part */

    z2 = (INT32) wsptr[1];
 801b218:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b21c:	3304      	adds	r3, #4
 801b21e:	681b      	ldr	r3, [r3, #0]
 801b220:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
    z3 = (INT32) wsptr[3];
 801b224:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b228:	330c      	adds	r3, #12
 801b22a:	681b      	ldr	r3, [r3, #0]
 801b22c:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

    z1 = MULTIPLY(z2 + z3, FIX(0.831253876));       /* c3 */
 801b230:	f8d7 2104 	ldr.w	r2, [r7, #260]	; 0x104
 801b234:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b238:	4413      	add	r3, r2
 801b23a:	f641 229a 	movw	r2, #6810	; 0x1a9a
 801b23e:	fb02 f303 	mul.w	r3, r2, r3
 801b242:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
    tmp13 = z1 + MULTIPLY(z2, FIX(0.513743148));    /* c1-c3 */
 801b246:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801b24a:	f241 0271 	movw	r2, #4209	; 0x1071
 801b24e:	fb02 f303 	mul.w	r3, r2, r3
 801b252:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b256:	4413      	add	r3, r2
 801b258:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
    tmp14 = z1 - MULTIPLY(z3, FIX(2.176250899));    /* c1+c3 */
 801b25c:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801b260:	4a34      	ldr	r2, [pc, #208]	; (801b334 <jpeg_idct_5x10+0x5dc>)
 801b262:	fb02 f303 	mul.w	r3, r2, r3
 801b266:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 801b26a:	4413      	add	r3, r2
 801b26c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801b270:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801b274:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b278:	4413      	add	r3, r2
 801b27a:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b27c:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp13,
 801b280:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801b284:	4413      	add	r3, r2
 801b286:	781a      	ldrb	r2, [r3, #0]
 801b288:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801b28c:	701a      	strb	r2, [r3, #0]
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 801b28e:	f8d7 20fc 	ldr.w	r2, [r7, #252]	; 0xfc
 801b292:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801b296:	1ad3      	subs	r3, r2, r3
 801b298:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b29a:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[4] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp13,
 801b29e:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801b2a2:	441a      	add	r2, r3
 801b2a4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801b2a8:	3304      	adds	r3, #4
 801b2aa:	7812      	ldrb	r2, [r2, #0]
 801b2ac:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801b2ae:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801b2b2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b2b6:	4413      	add	r3, r2
 801b2b8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b2ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp11 + tmp14,
 801b2be:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801b2c2:	441a      	add	r2, r3
 801b2c4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801b2c8:	3301      	adds	r3, #1
 801b2ca:	7812      	ldrb	r2, [r2, #0]
 801b2cc:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801b2ce:	f8d7 20f8 	ldr.w	r2, [r7, #248]	; 0xf8
 801b2d2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 801b2d6:	1ad3      	subs	r3, r2, r3
 801b2d8:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b2da:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp11 - tmp14,
 801b2de:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801b2e2:	441a      	add	r2, r3
 801b2e4:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801b2e8:	3303      	adds	r3, #3
 801b2ea:	7812      	ldrb	r2, [r2, #0]
 801b2ec:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801b2ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 801b2f2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b2f4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12,
 801b2f8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 801b2fc:	441a      	add	r2, r3
 801b2fe:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 801b302:	3302      	adds	r3, #2
 801b304:	7812      	ldrb	r2, [r2, #0]
 801b306:	701a      	strb	r2, [r3, #0]

    wsptr += 5;		/* advance pointer to next row */
 801b308:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 801b30c:	3314      	adds	r3, #20
 801b30e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
  for (ctr = 0; ctr < 10; ctr++) {
 801b312:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b316:	3301      	adds	r3, #1
 801b318:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 801b31c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 801b320:	2b09      	cmp	r3, #9
 801b322:	f77f af23 	ble.w	801b16c <jpeg_idct_5x10+0x414>
  }
}
 801b326:	bf00      	nop
 801b328:	bf00      	nop
 801b32a:	f507 7798 	add.w	r7, r7, #304	; 0x130
 801b32e:	46bd      	mov	sp, r7
 801b330:	bc90      	pop	{r4, r7}
 801b332:	4770      	bx	lr
 801b334:	ffffba5c 	.word	0xffffba5c

0801b338 <jpeg_idct_4x8>:

GLOBAL(void)
jpeg_idct_4x8 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801b338:	b480      	push	{r7}
 801b33a:	b0b7      	sub	sp, #220	; 0xdc
 801b33c:	af00      	add	r7, sp, #0
 801b33e:	60f8      	str	r0, [r7, #12]
 801b340:	60b9      	str	r1, [r7, #8]
 801b342:	607a      	str	r2, [r7, #4]
 801b344:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801b346:	68fb      	ldr	r3, [r7, #12]
 801b348:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801b34c:	3380      	adds	r3, #128	; 0x80
 801b34e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4

  /* Pass 1: process columns from input, store into work array. */
  /* Note results are scaled up by sqrt(8) compared to a true IDCT; */
  /* furthermore, we scale the results by 2**PASS1_BITS. */

  inptr = coef_block;
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801b358:	68bb      	ldr	r3, [r7, #8]
 801b35a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b35c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  wsptr = workspace;
 801b360:	f107 0310 	add.w	r3, r7, #16
 801b364:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 4; ctr > 0; ctr--) {
 801b368:	2304      	movs	r3, #4
 801b36a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b36e:	e238      	b.n	801b7e2 <jpeg_idct_4x8+0x4aa>
     * DC coefficient (with scale factor as needed).
     * With typical images and quantization tables, half or more of the
     * column DCT calculations can be simplified this way.
     */

    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801b370:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b374:	3310      	adds	r3, #16
 801b376:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b37a:	2b00      	cmp	r3, #0
 801b37c:	d175      	bne.n	801b46a <jpeg_idct_4x8+0x132>
 801b37e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b382:	3320      	adds	r3, #32
 801b384:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d16e      	bne.n	801b46a <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801b38c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b390:	3330      	adds	r3, #48	; 0x30
 801b392:	f9b3 3000 	ldrsh.w	r3, [r3]
    if (inptr[DCTSIZE*1] == 0 && inptr[DCTSIZE*2] == 0 &&
 801b396:	2b00      	cmp	r3, #0
 801b398:	d167      	bne.n	801b46a <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801b39a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b39e:	3340      	adds	r3, #64	; 0x40
 801b3a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b3a4:	2b00      	cmp	r3, #0
 801b3a6:	d160      	bne.n	801b46a <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801b3a8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b3ac:	3350      	adds	r3, #80	; 0x50
 801b3ae:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*3] == 0 && inptr[DCTSIZE*4] == 0 &&
 801b3b2:	2b00      	cmp	r3, #0
 801b3b4:	d159      	bne.n	801b46a <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801b3b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b3ba:	3360      	adds	r3, #96	; 0x60
 801b3bc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b3c0:	2b00      	cmp	r3, #0
 801b3c2:	d152      	bne.n	801b46a <jpeg_idct_4x8+0x132>
	inptr[DCTSIZE*7] == 0) {
 801b3c4:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b3c8:	3370      	adds	r3, #112	; 0x70
 801b3ca:	f9b3 3000 	ldrsh.w	r3, [r3]
	inptr[DCTSIZE*5] == 0 && inptr[DCTSIZE*6] == 0 &&
 801b3ce:	2b00      	cmp	r3, #0
 801b3d0:	d14b      	bne.n	801b46a <jpeg_idct_4x8+0x132>
      /* AC terms all zero */
      int dcval = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]) << PASS1_BITS;
 801b3d2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b3d6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b3da:	461a      	mov	r2, r3
 801b3dc:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b3e0:	681b      	ldr	r3, [r3, #0]
 801b3e2:	fb03 f302 	mul.w	r3, r3, r2
 801b3e6:	009b      	lsls	r3, r3, #2
 801b3e8:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

      wsptr[4*0] = dcval;
 801b3ec:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b3f0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b3f4:	601a      	str	r2, [r3, #0]
      wsptr[4*1] = dcval;
 801b3f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b3fa:	3310      	adds	r3, #16
 801b3fc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b400:	601a      	str	r2, [r3, #0]
      wsptr[4*2] = dcval;
 801b402:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b406:	3320      	adds	r3, #32
 801b408:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b40c:	601a      	str	r2, [r3, #0]
      wsptr[4*3] = dcval;
 801b40e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b412:	3330      	adds	r3, #48	; 0x30
 801b414:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b418:	601a      	str	r2, [r3, #0]
      wsptr[4*4] = dcval;
 801b41a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b41e:	3340      	adds	r3, #64	; 0x40
 801b420:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b424:	601a      	str	r2, [r3, #0]
      wsptr[4*5] = dcval;
 801b426:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b42a:	3350      	adds	r3, #80	; 0x50
 801b42c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b430:	601a      	str	r2, [r3, #0]
      wsptr[4*6] = dcval;
 801b432:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b436:	3360      	adds	r3, #96	; 0x60
 801b438:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b43c:	601a      	str	r2, [r3, #0]
      wsptr[4*7] = dcval;
 801b43e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b442:	3370      	adds	r3, #112	; 0x70
 801b444:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 801b448:	601a      	str	r2, [r3, #0]

      inptr++;			/* advance pointers to next column */
 801b44a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b44e:	3302      	adds	r3, #2
 801b450:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      quantptr++;
 801b454:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b458:	3304      	adds	r3, #4
 801b45a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
      wsptr++;
 801b45e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b462:	3304      	adds	r3, #4
 801b464:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
      continue;
 801b468:	e1b6      	b.n	801b7d8 <jpeg_idct_4x8+0x4a0>
    }

    /* Even part: reverse the even part of the forward DCT. */
    /* The rotator is sqrt(2)*c(-6). */

    z2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801b46a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b46e:	3320      	adds	r3, #32
 801b470:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b474:	461a      	mov	r2, r3
 801b476:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b47a:	3340      	adds	r3, #64	; 0x40
 801b47c:	681b      	ldr	r3, [r3, #0]
 801b47e:	fb03 f302 	mul.w	r3, r3, r2
 801b482:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = DEQUANTIZE(inptr[DCTSIZE*6], quantptr[DCTSIZE*6]);
 801b486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b48a:	3360      	adds	r3, #96	; 0x60
 801b48c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b490:	461a      	mov	r2, r3
 801b492:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b496:	33c0      	adds	r3, #192	; 0xc0
 801b498:	681b      	ldr	r3, [r3, #0]
 801b49a:	fb03 f302 	mul.w	r3, r3, r2
 801b49e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    
    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);
 801b4a2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b4a6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b4aa:	4413      	add	r3, r2
 801b4ac:	f241 1251 	movw	r2, #4433	; 0x1151
 801b4b0:	fb02 f303 	mul.w	r3, r2, r3
 801b4b4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp2 = z1 + MULTIPLY(z2, FIX_0_765366865);
 801b4b8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b4bc:	f641 027e 	movw	r2, #6270	; 0x187e
 801b4c0:	fb02 f303 	mul.w	r3, r2, r3
 801b4c4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b4c8:	4413      	add	r3, r2
 801b4ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp3 = z1 - MULTIPLY(z3, FIX_1_847759065);
 801b4ce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b4d2:	4aca      	ldr	r2, [pc, #808]	; (801b7fc <jpeg_idct_4x8+0x4c4>)
 801b4d4:	fb02 f303 	mul.w	r3, r2, r3
 801b4d8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b4dc:	4413      	add	r3, r2
 801b4de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    
    z2 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801b4e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b4e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b4ea:	461a      	mov	r2, r3
 801b4ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b4f0:	681b      	ldr	r3, [r3, #0]
 801b4f2:	fb03 f302 	mul.w	r3, r3, r2
 801b4f6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801b4fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b4fe:	3340      	adds	r3, #64	; 0x40
 801b500:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b504:	461a      	mov	r2, r3
 801b506:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b50a:	3380      	adds	r3, #128	; 0x80
 801b50c:	681b      	ldr	r3, [r3, #0]
 801b50e:	fb03 f302 	mul.w	r3, r3, r2
 801b512:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    z2 <<= CONST_BITS;
 801b516:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b51a:	035b      	lsls	r3, r3, #13
 801b51c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 <<= CONST_BITS;
 801b520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b524:	035b      	lsls	r3, r3, #13
 801b526:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    /* Add fudge factor here for final descale. */
    z2 += ONE << (CONST_BITS-PASS1_BITS-1);
 801b52a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b52e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801b532:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

    tmp0 = z2 + z3;
 801b536:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b53a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b53e:	4413      	add	r3, r2
 801b540:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp1 = z2 - z3;
 801b544:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b548:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b54c:	1ad3      	subs	r3, r2, r3
 801b54e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    
    tmp10 = tmp0 + tmp2;
 801b552:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b556:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b55a:	4413      	add	r3, r2
 801b55c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp13 = tmp0 - tmp2;
 801b560:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b568:	1ad3      	subs	r3, r2, r3
 801b56a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    tmp11 = tmp1 + tmp3;
 801b56e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801b572:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b576:	4413      	add	r3, r2
 801b578:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    tmp12 = tmp1 - tmp3;
 801b57c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801b580:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b584:	1ad3      	subs	r3, r2, r3
 801b586:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Odd part per figure 8; the matrix is unitary and hence its
     * transpose is its inverse.  i0..i3 are y7,y5,y3,y1 respectively.
     */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*7], quantptr[DCTSIZE*7]);
 801b58a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b58e:	3370      	adds	r3, #112	; 0x70
 801b590:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b594:	461a      	mov	r2, r3
 801b596:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b59a:	33e0      	adds	r3, #224	; 0xe0
 801b59c:	681b      	ldr	r3, [r3, #0]
 801b59e:	fb03 f302 	mul.w	r3, r3, r2
 801b5a2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp1 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801b5a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b5aa:	3350      	adds	r3, #80	; 0x50
 801b5ac:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5b0:	461a      	mov	r2, r3
 801b5b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b5b6:	33a0      	adds	r3, #160	; 0xa0
 801b5b8:	681b      	ldr	r3, [r3, #0]
 801b5ba:	fb03 f302 	mul.w	r3, r3, r2
 801b5be:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801b5c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b5c6:	3330      	adds	r3, #48	; 0x30
 801b5c8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5cc:	461a      	mov	r2, r3
 801b5ce:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b5d2:	3360      	adds	r3, #96	; 0x60
 801b5d4:	681b      	ldr	r3, [r3, #0]
 801b5d6:	fb03 f302 	mul.w	r3, r3, r2
 801b5da:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp3 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801b5de:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b5e2:	3310      	adds	r3, #16
 801b5e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b5e8:	461a      	mov	r2, r3
 801b5ea:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b5ee:	3320      	adds	r3, #32
 801b5f0:	681b      	ldr	r3, [r3, #0]
 801b5f2:	fb03 f302 	mul.w	r3, r3, r2
 801b5f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    z2 = tmp0 + tmp2;
 801b5fa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b5fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b602:	4413      	add	r3, r2
 801b604:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = tmp1 + tmp3;
 801b608:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801b60c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b610:	4413      	add	r3, r2
 801b612:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    z1 = MULTIPLY(z2 + z3, FIX_1_175875602); /* sqrt(2) * c3 */
 801b616:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b61a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b61e:	4413      	add	r3, r2
 801b620:	f242 52a1 	movw	r2, #9633	; 0x25a1
 801b624:	fb02 f303 	mul.w	r3, r2, r3
 801b628:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    z2 = MULTIPLY(z2, - FIX_1_961570560); /* sqrt(2) * (-c3-c5) */
 801b62c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b630:	4a73      	ldr	r2, [pc, #460]	; (801b800 <jpeg_idct_4x8+0x4c8>)
 801b632:	fb02 f303 	mul.w	r3, r2, r3
 801b636:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = MULTIPLY(z3, - FIX_0_390180644); /* sqrt(2) * (c5-c3) */
 801b63a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b63e:	4a71      	ldr	r2, [pc, #452]	; (801b804 <jpeg_idct_4x8+0x4cc>)
 801b640:	fb02 f303 	mul.w	r3, r2, r3
 801b644:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    z2 += z1;
 801b648:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b64c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b650:	4413      	add	r3, r2
 801b652:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 += z1;
 801b656:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801b65a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 801b65e:	4413      	add	r3, r2
 801b660:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    z1 = MULTIPLY(tmp0 + tmp3, - FIX_0_899976223); /* sqrt(2) * (c7-c3) */
 801b664:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b668:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b66c:	4413      	add	r3, r2
 801b66e:	4a66      	ldr	r2, [pc, #408]	; (801b808 <jpeg_idct_4x8+0x4d0>)
 801b670:	fb02 f303 	mul.w	r3, r2, r3
 801b674:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp0 = MULTIPLY(tmp0, FIX_0_298631336); /* sqrt(2) * (-c1+c3+c5-c7) */
 801b678:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b67c:	f640 128e 	movw	r2, #2446	; 0x98e
 801b680:	fb02 f303 	mul.w	r3, r2, r3
 801b684:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp3 = MULTIPLY(tmp3, FIX_1_501321110); /* sqrt(2) * ( c1+c3-c5-c7) */
 801b688:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b68c:	f243 020b 	movw	r2, #12299	; 0x300b
 801b690:	fb02 f303 	mul.w	r3, r2, r3
 801b694:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tmp0 += z1 + z2;
 801b698:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b69c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b6a0:	4413      	add	r3, r2
 801b6a2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b6a6:	4413      	add	r3, r2
 801b6a8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp3 += z1 + z3;
 801b6ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b6b0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b6b4:	4413      	add	r3, r2
 801b6b6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 801b6ba:	4413      	add	r3, r2
 801b6bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    z1 = MULTIPLY(tmp1 + tmp2, - FIX_2_562915447); /* sqrt(2) * (-c1-c3) */
 801b6c0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801b6c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b6c8:	4413      	add	r3, r2
 801b6ca:	4a50      	ldr	r2, [pc, #320]	; (801b80c <jpeg_idct_4x8+0x4d4>)
 801b6cc:	fb02 f303 	mul.w	r3, r2, r3
 801b6d0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp1 = MULTIPLY(tmp1, FIX_2_053119869); /* sqrt(2) * ( c1+c3-c5+c7) */
 801b6d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b6d8:	f244 12b3 	movw	r2, #16819	; 0x41b3
 801b6dc:	fb02 f303 	mul.w	r3, r2, r3
 801b6e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tmp2 = MULTIPLY(tmp2, FIX_3_072711026); /* sqrt(2) * ( c1+c3+c5-c7) */
 801b6e4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b6e8:	f246 2254 	movw	r2, #25172	; 0x6254
 801b6ec:	fb02 f303 	mul.w	r3, r2, r3
 801b6f0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    tmp1 += z1 + z3;
 801b6f4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b6f8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b6fc:	4413      	add	r3, r2
 801b6fe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801b702:	4413      	add	r3, r2
 801b704:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tmp2 += z1 + z2;
 801b708:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b70c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b710:	4413      	add	r3, r2
 801b712:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801b716:	4413      	add	r3, r2
 801b718:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Final output stage: inputs are tmp10..tmp13, tmp0..tmp3 */

    wsptr[4*0] = (int) RIGHT_SHIFT(tmp10 + tmp3, CONST_BITS-PASS1_BITS);
 801b71c:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b720:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b724:	4413      	add	r3, r2
 801b726:	12da      	asrs	r2, r3, #11
 801b728:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b72c:	601a      	str	r2, [r3, #0]
    wsptr[4*7] = (int) RIGHT_SHIFT(tmp10 - tmp3, CONST_BITS-PASS1_BITS);
 801b72e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b732:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801b736:	1ad2      	subs	r2, r2, r3
 801b738:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b73c:	3370      	adds	r3, #112	; 0x70
 801b73e:	12d2      	asrs	r2, r2, #11
 801b740:	601a      	str	r2, [r3, #0]
    wsptr[4*1] = (int) RIGHT_SHIFT(tmp11 + tmp2, CONST_BITS-PASS1_BITS);
 801b742:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b746:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b74a:	441a      	add	r2, r3
 801b74c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b750:	3310      	adds	r3, #16
 801b752:	12d2      	asrs	r2, r2, #11
 801b754:	601a      	str	r2, [r3, #0]
    wsptr[4*6] = (int) RIGHT_SHIFT(tmp11 - tmp2, CONST_BITS-PASS1_BITS);
 801b756:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801b75a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b75e:	1ad2      	subs	r2, r2, r3
 801b760:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b764:	3360      	adds	r3, #96	; 0x60
 801b766:	12d2      	asrs	r2, r2, #11
 801b768:	601a      	str	r2, [r3, #0]
    wsptr[4*2] = (int) RIGHT_SHIFT(tmp12 + tmp1, CONST_BITS-PASS1_BITS);
 801b76a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b76e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b772:	441a      	add	r2, r3
 801b774:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b778:	3320      	adds	r3, #32
 801b77a:	12d2      	asrs	r2, r2, #11
 801b77c:	601a      	str	r2, [r3, #0]
    wsptr[4*5] = (int) RIGHT_SHIFT(tmp12 - tmp1, CONST_BITS-PASS1_BITS);
 801b77e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b782:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801b786:	1ad2      	subs	r2, r2, r3
 801b788:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b78c:	3350      	adds	r3, #80	; 0x50
 801b78e:	12d2      	asrs	r2, r2, #11
 801b790:	601a      	str	r2, [r3, #0]
    wsptr[4*3] = (int) RIGHT_SHIFT(tmp13 + tmp0, CONST_BITS-PASS1_BITS);
 801b792:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b796:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b79a:	441a      	add	r2, r3
 801b79c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b7a0:	3330      	adds	r3, #48	; 0x30
 801b7a2:	12d2      	asrs	r2, r2, #11
 801b7a4:	601a      	str	r2, [r3, #0]
    wsptr[4*4] = (int) RIGHT_SHIFT(tmp13 - tmp0, CONST_BITS-PASS1_BITS);
 801b7a6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801b7aa:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b7ae:	1ad2      	subs	r2, r2, r3
 801b7b0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b7b4:	3340      	adds	r3, #64	; 0x40
 801b7b6:	12d2      	asrs	r2, r2, #11
 801b7b8:	601a      	str	r2, [r3, #0]

    inptr++;			/* advance pointers to next column */
 801b7ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 801b7be:	3302      	adds	r3, #2
 801b7c0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    quantptr++;
 801b7c4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 801b7c8:	3304      	adds	r3, #4
 801b7ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    wsptr++;
 801b7ce:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b7d2:	3304      	adds	r3, #4
 801b7d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 4; ctr > 0; ctr--) {
 801b7d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b7dc:	3b01      	subs	r3, #1
 801b7de:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b7e2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	f73f adc2 	bgt.w	801b370 <jpeg_idct_4x8+0x38>
  }

  /* Pass 2: process 8 rows from work array, store into output array.
   * 4-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/16).
   */
  wsptr = workspace;
 801b7ec:	f107 0310 	add.w	r3, r7, #16
 801b7f0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 8; ctr++) {
 801b7f4:	2300      	movs	r3, #0
 801b7f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b7fa:	e0a5      	b.n	801b948 <jpeg_idct_4x8+0x610>
 801b7fc:	ffffc4df 	.word	0xffffc4df
 801b800:	ffffc13b 	.word	0xffffc13b
 801b804:	fffff384 	.word	0xfffff384
 801b808:	ffffe333 	.word	0xffffe333
 801b80c:	ffffadfd 	.word	0xffffadfd
    outptr = output_buf[ctr] + output_col;
 801b810:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b814:	009b      	lsls	r3, r3, #2
 801b816:	683a      	ldr	r2, [r7, #0]
 801b818:	4413      	add	r3, r2
 801b81a:	681a      	ldr	r2, [r3, #0]
 801b81c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 801b820:	4413      	add	r3, r2
 801b822:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801b826:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b82a:	681b      	ldr	r3, [r3, #0]
 801b82c:	3310      	adds	r3, #16
 801b82e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp2 = (INT32) wsptr[2];
 801b832:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b836:	3308      	adds	r3, #8
 801b838:	681b      	ldr	r3, [r3, #0]
 801b83a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801b83e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b842:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b846:	4413      	add	r3, r2
 801b848:	035b      	lsls	r3, r3, #13
 801b84a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801b84e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801b852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b856:	1ad3      	subs	r3, r2, r3
 801b858:	035b      	lsls	r3, r3, #13
 801b85a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = (INT32) wsptr[1];
 801b85e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b862:	3304      	adds	r3, #4
 801b864:	681b      	ldr	r3, [r3, #0]
 801b866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    z3 = (INT32) wsptr[3];
 801b86a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b86e:	330c      	adds	r3, #12
 801b870:	681b      	ldr	r3, [r3, #0]
 801b872:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801b876:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 801b87a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b87e:	4413      	add	r3, r2
 801b880:	f241 1251 	movw	r2, #4433	; 0x1151
 801b884:	fb02 f303 	mul.w	r3, r2, r3
 801b888:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801b88c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 801b890:	f641 027e 	movw	r2, #6270	; 0x187e
 801b894:	fb02 f303 	mul.w	r3, r2, r3
 801b898:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b89c:	4413      	add	r3, r2
 801b89e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801b8a2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 801b8a6:	4a2e      	ldr	r2, [pc, #184]	; (801b960 <jpeg_idct_4x8+0x628>)
 801b8a8:	fb02 f303 	mul.w	r3, r2, r3
 801b8ac:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 801b8b0:	4413      	add	r3, r2
 801b8b2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801b8b6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b8ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b8be:	4413      	add	r3, r2
 801b8c0:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b8c2:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801b8c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b8ca:	4413      	add	r3, r2
 801b8cc:	781a      	ldrb	r2, [r3, #0]
 801b8ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b8d2:	701a      	strb	r2, [r3, #0]
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801b8d4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801b8d8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 801b8dc:	1ad3      	subs	r3, r2, r3
 801b8de:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b8e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[3] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801b8e4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b8e8:	441a      	add	r2, r3
 801b8ea:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b8ee:	3303      	adds	r3, #3
 801b8f0:	7812      	ldrb	r2, [r2, #0]
 801b8f2:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801b8f4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b8f8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b8fc:	4413      	add	r3, r2
 801b8fe:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b900:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp12 + tmp2,
 801b904:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b908:	441a      	add	r2, r3
 801b90a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b90e:	3301      	adds	r3, #1
 801b910:	7812      	ldrb	r2, [r2, #0]
 801b912:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801b914:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801b918:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801b91c:	1ad3      	subs	r3, r2, r3
 801b91e:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801b920:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp12 - tmp2,
 801b924:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 801b928:	441a      	add	r2, r3
 801b92a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 801b92e:	3302      	adds	r3, #2
 801b930:	7812      	ldrb	r2, [r2, #0]
 801b932:	701a      	strb	r2, [r3, #0]
    
    wsptr += 4;		/* advance pointer to next row */
 801b934:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 801b938:	3310      	adds	r3, #16
 801b93a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  for (ctr = 0; ctr < 8; ctr++) {
 801b93e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b942:	3301      	adds	r3, #1
 801b944:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 801b948:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 801b94c:	2b07      	cmp	r3, #7
 801b94e:	f77f af5f 	ble.w	801b810 <jpeg_idct_4x8+0x4d8>
  }
}
 801b952:	bf00      	nop
 801b954:	bf00      	nop
 801b956:	37dc      	adds	r7, #220	; 0xdc
 801b958:	46bd      	mov	sp, r7
 801b95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b95e:	4770      	bx	lr
 801b960:	ffffc4df 	.word	0xffffc4df

0801b964 <jpeg_idct_3x6>:

GLOBAL(void)
jpeg_idct_3x6 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801b964:	b480      	push	{r7}
 801b966:	b0a7      	sub	sp, #156	; 0x9c
 801b968:	af00      	add	r7, sp, #0
 801b96a:	60f8      	str	r0, [r7, #12]
 801b96c:	60b9      	str	r1, [r7, #8]
 801b96e:	607a      	str	r2, [r7, #4]
 801b970:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  int * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801b972:	68fb      	ldr	r3, [r7, #12]
 801b974:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801b978:	3380      	adds	r3, #128	; 0x80
 801b97a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  SHIFT_TEMPS

  /* Pass 1: process columns from input, store into work array.
   * 6-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/12).
   */
  inptr = coef_block;
 801b97e:	687b      	ldr	r3, [r7, #4]
 801b980:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801b984:	68bb      	ldr	r3, [r7, #8]
 801b986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801b988:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  wsptr = workspace;
 801b98c:	f107 0314 	add.w	r3, r7, #20
 801b990:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801b994:	2300      	movs	r3, #0
 801b996:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801b99a:	e0cf      	b.n	801bb3c <jpeg_idct_3x6+0x1d8>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801b99c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b9a0:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b9a4:	461a      	mov	r2, r3
 801b9a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	fb03 f302 	mul.w	r3, r3, r2
 801b9b0:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp0 <<= CONST_BITS;
 801b9b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9b4:	035b      	lsls	r3, r3, #13
 801b9b6:	67fb      	str	r3, [r7, #124]	; 0x7c
    /* Add fudge factor here for final descale. */
    tmp0 += ONE << (CONST_BITS-PASS1_BITS-1);
 801b9b8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801b9ba:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 801b9be:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*4], quantptr[DCTSIZE*4]);
 801b9c0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801b9c4:	3340      	adds	r3, #64	; 0x40
 801b9c6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801b9ca:	461a      	mov	r2, r3
 801b9cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801b9d0:	3380      	adds	r3, #128	; 0x80
 801b9d2:	681b      	ldr	r3, [r3, #0]
 801b9d4:	fb03 f302 	mul.w	r3, r3, r2
 801b9d8:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp10 = MULTIPLY(tmp2, FIX(0.707106781));   /* c4 */
 801b9da:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801b9dc:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801b9e0:	fb02 f303 	mul.w	r3, r2, r3
 801b9e4:	673b      	str	r3, [r7, #112]	; 0x70
    tmp1 = tmp0 + tmp10;
 801b9e6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b9e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b9ea:	4413      	add	r3, r2
 801b9ec:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp11 = RIGHT_SHIFT(tmp0 - tmp10 - tmp10, CONST_BITS-PASS1_BITS);
 801b9ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801b9f0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b9f2:	1ad2      	subs	r2, r2, r3
 801b9f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801b9f6:	1ad3      	subs	r3, r2, r3
 801b9f8:	12db      	asrs	r3, r3, #11
 801b9fa:	66bb      	str	r3, [r7, #104]	; 0x68
    tmp10 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801b9fc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ba00:	3320      	adds	r3, #32
 801ba02:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba06:	461a      	mov	r2, r3
 801ba08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ba0c:	3340      	adds	r3, #64	; 0x40
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	fb03 f302 	mul.w	r3, r3, r2
 801ba14:	673b      	str	r3, [r7, #112]	; 0x70
    tmp0 = MULTIPLY(tmp10, FIX(1.224744871));   /* c2 */
 801ba16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801ba18:	f242 7231 	movw	r2, #10033	; 0x2731
 801ba1c:	fb02 f303 	mul.w	r3, r2, r3
 801ba20:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp10 = tmp1 + tmp0;
 801ba22:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ba24:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba26:	4413      	add	r3, r2
 801ba28:	673b      	str	r3, [r7, #112]	; 0x70
    tmp12 = tmp1 - tmp0;
 801ba2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ba2c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801ba2e:	1ad3      	subs	r3, r2, r3
 801ba30:	677b      	str	r3, [r7, #116]	; 0x74

    /* Odd part */

    z1 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801ba32:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ba36:	3310      	adds	r3, #16
 801ba38:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba3c:	461a      	mov	r2, r3
 801ba3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ba42:	3320      	adds	r3, #32
 801ba44:	681b      	ldr	r3, [r3, #0]
 801ba46:	fb03 f302 	mul.w	r3, r3, r2
 801ba4a:	667b      	str	r3, [r7, #100]	; 0x64
    z2 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801ba4c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ba50:	3330      	adds	r3, #48	; 0x30
 801ba52:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba56:	461a      	mov	r2, r3
 801ba58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ba5c:	3360      	adds	r3, #96	; 0x60
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	fb03 f302 	mul.w	r3, r3, r2
 801ba64:	663b      	str	r3, [r7, #96]	; 0x60
    z3 = DEQUANTIZE(inptr[DCTSIZE*5], quantptr[DCTSIZE*5]);
 801ba66:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801ba6a:	3350      	adds	r3, #80	; 0x50
 801ba6c:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ba70:	461a      	mov	r2, r3
 801ba72:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801ba76:	33a0      	adds	r3, #160	; 0xa0
 801ba78:	681b      	ldr	r3, [r3, #0]
 801ba7a:	fb03 f302 	mul.w	r3, r3, r2
 801ba7e:	65fb      	str	r3, [r7, #92]	; 0x5c
    tmp1 = MULTIPLY(z1 + z3, FIX(0.366025404)); /* c5 */
 801ba80:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ba82:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801ba84:	4413      	add	r3, r2
 801ba86:	f640 32b6 	movw	r2, #2998	; 0xbb6
 801ba8a:	fb02 f303 	mul.w	r3, r2, r3
 801ba8e:	66fb      	str	r3, [r7, #108]	; 0x6c
    tmp0 = tmp1 + ((z1 + z2) << CONST_BITS);
 801ba90:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801ba92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ba94:	4413      	add	r3, r2
 801ba96:	035b      	lsls	r3, r3, #13
 801ba98:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801ba9a:	4413      	add	r3, r2
 801ba9c:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = tmp1 + ((z3 - z2) << CONST_BITS);
 801ba9e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801baa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801baa2:	1ad3      	subs	r3, r2, r3
 801baa4:	035b      	lsls	r3, r3, #13
 801baa6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801baa8:	4413      	add	r3, r2
 801baaa:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp1 = (z1 - z2 - z3) << PASS1_BITS;
 801baac:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801baae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bab0:	1ad2      	subs	r2, r2, r3
 801bab2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bab4:	1ad3      	subs	r3, r2, r3
 801bab6:	009b      	lsls	r3, r3, #2
 801bab8:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* Final output stage */

    wsptr[3*0] = (int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS-PASS1_BITS);
 801baba:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801babc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801babe:	4413      	add	r3, r2
 801bac0:	12da      	asrs	r2, r3, #11
 801bac2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bac6:	601a      	str	r2, [r3, #0]
    wsptr[3*5] = (int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS-PASS1_BITS);
 801bac8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801baca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bacc:	1ad2      	subs	r2, r2, r3
 801bace:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bad2:	333c      	adds	r3, #60	; 0x3c
 801bad4:	12d2      	asrs	r2, r2, #11
 801bad6:	601a      	str	r2, [r3, #0]
    wsptr[3*1] = (int) (tmp11 + tmp1);
 801bad8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801badc:	330c      	adds	r3, #12
 801bade:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801bae0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801bae2:	440a      	add	r2, r1
 801bae4:	601a      	str	r2, [r3, #0]
    wsptr[3*4] = (int) (tmp11 - tmp1);
 801bae6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801baea:	3330      	adds	r3, #48	; 0x30
 801baec:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 801baee:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801baf0:	1a8a      	subs	r2, r1, r2
 801baf2:	601a      	str	r2, [r3, #0]
    wsptr[3*2] = (int) RIGHT_SHIFT(tmp12 + tmp2, CONST_BITS-PASS1_BITS);
 801baf4:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801baf6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801baf8:	441a      	add	r2, r3
 801bafa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bafe:	3318      	adds	r3, #24
 801bb00:	12d2      	asrs	r2, r2, #11
 801bb02:	601a      	str	r2, [r3, #0]
    wsptr[3*3] = (int) RIGHT_SHIFT(tmp12 - tmp2, CONST_BITS-PASS1_BITS);
 801bb04:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801bb06:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bb08:	1ad2      	subs	r2, r2, r3
 801bb0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb0e:	3324      	adds	r3, #36	; 0x24
 801bb10:	12d2      	asrs	r2, r2, #11
 801bb12:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 3; ctr++, inptr++, quantptr++, wsptr++) {
 801bb14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bb18:	3301      	adds	r3, #1
 801bb1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801bb1e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801bb22:	3302      	adds	r3, #2
 801bb24:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801bb28:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801bb2c:	3304      	adds	r3, #4
 801bb2e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801bb32:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb36:	3304      	adds	r3, #4
 801bb38:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801bb3c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bb40:	2b02      	cmp	r3, #2
 801bb42:	f77f af2b 	ble.w	801b99c <jpeg_idct_3x6+0x38>
  }

  /* Pass 2: process 6 rows from work array, store into output array.
   * 3-point IDCT kernel, cK represents sqrt(2) * cos(K*pi/6).
   */
  wsptr = workspace;
 801bb46:	f107 0314 	add.w	r3, r7, #20
 801bb4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++) {
 801bb4e:	2300      	movs	r3, #0
 801bb50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801bb54:	e063      	b.n	801bc1e <jpeg_idct_3x6+0x2ba>
    outptr = output_buf[ctr] + output_col;
 801bb56:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bb5a:	009b      	lsls	r3, r3, #2
 801bb5c:	683a      	ldr	r2, [r7, #0]
 801bb5e:	4413      	add	r3, r2
 801bb60:	681a      	ldr	r2, [r3, #0]
 801bb62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 801bb66:	4413      	add	r3, r2
 801bb68:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp0 = (INT32) wsptr[0] + (ONE << (PASS1_BITS+2));
 801bb6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb70:	681b      	ldr	r3, [r3, #0]
 801bb72:	3310      	adds	r3, #16
 801bb74:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp0 <<= CONST_BITS;
 801bb76:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bb78:	035b      	lsls	r3, r3, #13
 801bb7a:	67fb      	str	r3, [r7, #124]	; 0x7c
    tmp2 = (INT32) wsptr[2];
 801bb7c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bb80:	3308      	adds	r3, #8
 801bb82:	681b      	ldr	r3, [r3, #0]
 801bb84:	67bb      	str	r3, [r7, #120]	; 0x78
    tmp12 = MULTIPLY(tmp2, FIX(0.707106781)); /* c2 */
 801bb86:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bb88:	f241 62a1 	movw	r2, #5793	; 0x16a1
 801bb8c:	fb02 f303 	mul.w	r3, r2, r3
 801bb90:	677b      	str	r3, [r7, #116]	; 0x74
    tmp10 = tmp0 + tmp12;
 801bb92:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801bb94:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bb96:	4413      	add	r3, r2
 801bb98:	673b      	str	r3, [r7, #112]	; 0x70
    tmp2 = tmp0 - tmp12 - tmp12;
 801bb9a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801bb9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bb9e:	1ad2      	subs	r2, r2, r3
 801bba0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bba2:	1ad3      	subs	r3, r2, r3
 801bba4:	67bb      	str	r3, [r7, #120]	; 0x78

    /* Odd part */

    tmp12 = (INT32) wsptr[1];
 801bba6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bbaa:	3304      	adds	r3, #4
 801bbac:	681b      	ldr	r3, [r3, #0]
 801bbae:	677b      	str	r3, [r7, #116]	; 0x74
    tmp0 = MULTIPLY(tmp12, FIX(1.224744871)); /* c1 */
 801bbb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801bbb2:	f242 7231 	movw	r2, #10033	; 0x2731
 801bbb6:	fb02 f303 	mul.w	r3, r2, r3
 801bbba:	67fb      	str	r3, [r7, #124]	; 0x7c

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801bbbc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801bbbe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bbc0:	4413      	add	r3, r2
 801bbc2:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801bbc4:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0,
 801bbc8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801bbcc:	4413      	add	r3, r2
 801bbce:	781a      	ldrb	r2, [r3, #0]
 801bbd0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bbd4:	701a      	strb	r2, [r3, #0]
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801bbd6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801bbd8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801bbda:	1ad3      	subs	r3, r2, r3
 801bbdc:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801bbde:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[2] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0,
 801bbe2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801bbe6:	441a      	add	r2, r3
 801bbe8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bbec:	3302      	adds	r3, #2
 801bbee:	7812      	ldrb	r2, [r2, #0]
 801bbf0:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801bbf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801bbf4:	149b      	asrs	r3, r3, #18
					      CONST_BITS+PASS1_BITS+3)
			    & RANGE_MASK];
 801bbf6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp2,
 801bbfa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801bbfe:	441a      	add	r2, r3
 801bc00:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801bc04:	3301      	adds	r3, #1
 801bc06:	7812      	ldrb	r2, [r2, #0]
 801bc08:	701a      	strb	r2, [r3, #0]

    wsptr += 3;		/* advance pointer to next row */
 801bc0a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 801bc0e:	330c      	adds	r3, #12
 801bc10:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  for (ctr = 0; ctr < 6; ctr++) {
 801bc14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bc18:	3301      	adds	r3, #1
 801bc1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801bc1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801bc22:	2b05      	cmp	r3, #5
 801bc24:	dd97      	ble.n	801bb56 <jpeg_idct_3x6+0x1f2>
  }
}
 801bc26:	bf00      	nop
 801bc28:	bf00      	nop
 801bc2a:	379c      	adds	r7, #156	; 0x9c
 801bc2c:	46bd      	mov	sp, r7
 801bc2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc32:	4770      	bx	lr

0801bc34 <jpeg_idct_2x4>:

GLOBAL(void)
jpeg_idct_2x4 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801bc34:	b480      	push	{r7}
 801bc36:	b09b      	sub	sp, #108	; 0x6c
 801bc38:	af00      	add	r7, sp, #0
 801bc3a:	60f8      	str	r0, [r7, #12]
 801bc3c:	60b9      	str	r1, [r7, #8]
 801bc3e:	607a      	str	r2, [r7, #4]
 801bc40:	603b      	str	r3, [r7, #0]
  INT32 z1, z2, z3;
  JCOEFPTR inptr;
  ISLOW_MULT_TYPE * quantptr;
  INT32 * wsptr;
  JSAMPROW outptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801bc42:	68fb      	ldr	r3, [r7, #12]
 801bc44:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801bc48:	3380      	adds	r3, #128	; 0x80
 801bc4a:	657b      	str	r3, [r7, #84]	; 0x54

  /* Pass 1: process columns from input, store into work array.
   * 4-point IDCT kernel,
   * cK represents sqrt(2) * cos(K*pi/16) [refers to 8-point IDCT].
   */
  inptr = coef_block;
 801bc4c:	687b      	ldr	r3, [r7, #4]
 801bc4e:	667b      	str	r3, [r7, #100]	; 0x64
  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801bc50:	68bb      	ldr	r3, [r7, #8]
 801bc52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bc54:	663b      	str	r3, [r7, #96]	; 0x60
  wsptr = workspace;
 801bc56:	f107 0314 	add.w	r3, r7, #20
 801bc5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801bc5c:	2300      	movs	r3, #0
 801bc5e:	65bb      	str	r3, [r7, #88]	; 0x58
 801bc60:	e06d      	b.n	801bd3e <jpeg_idct_2x4+0x10a>
    /* Even part */

    tmp0 = DEQUANTIZE(inptr[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801bc62:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bc64:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc68:	461a      	mov	r2, r3
 801bc6a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bc6c:	681b      	ldr	r3, [r3, #0]
 801bc6e:	fb03 f302 	mul.w	r3, r3, r2
 801bc72:	64bb      	str	r3, [r7, #72]	; 0x48
    tmp2 = DEQUANTIZE(inptr[DCTSIZE*2], quantptr[DCTSIZE*2]);
 801bc74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bc76:	3320      	adds	r3, #32
 801bc78:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bc7c:	461a      	mov	r2, r3
 801bc7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bc80:	3340      	adds	r3, #64	; 0x40
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	fb03 f302 	mul.w	r3, r3, r2
 801bc88:	647b      	str	r3, [r7, #68]	; 0x44

    tmp10 = (tmp0 + tmp2) << CONST_BITS;
 801bc8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bc8c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bc8e:	4413      	add	r3, r2
 801bc90:	035b      	lsls	r3, r3, #13
 801bc92:	64fb      	str	r3, [r7, #76]	; 0x4c
    tmp12 = (tmp0 - tmp2) << CONST_BITS;
 801bc94:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bc96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801bc98:	1ad3      	subs	r3, r2, r3
 801bc9a:	035b      	lsls	r3, r3, #13
 801bc9c:	643b      	str	r3, [r7, #64]	; 0x40

    /* Odd part */
    /* Same rotation as in the even part of the 8x8 LL&M IDCT */

    z2 = DEQUANTIZE(inptr[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801bc9e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bca0:	3310      	adds	r3, #16
 801bca2:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bca6:	461a      	mov	r2, r3
 801bca8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bcaa:	3320      	adds	r3, #32
 801bcac:	681b      	ldr	r3, [r3, #0]
 801bcae:	fb03 f302 	mul.w	r3, r3, r2
 801bcb2:	63fb      	str	r3, [r7, #60]	; 0x3c
    z3 = DEQUANTIZE(inptr[DCTSIZE*3], quantptr[DCTSIZE*3]);
 801bcb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bcb6:	3330      	adds	r3, #48	; 0x30
 801bcb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bcbc:	461a      	mov	r2, r3
 801bcbe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bcc0:	3360      	adds	r3, #96	; 0x60
 801bcc2:	681b      	ldr	r3, [r3, #0]
 801bcc4:	fb03 f302 	mul.w	r3, r3, r2
 801bcc8:	63bb      	str	r3, [r7, #56]	; 0x38

    z1 = MULTIPLY(z2 + z3, FIX_0_541196100);   /* c6 */
 801bcca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801bccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bcce:	4413      	add	r3, r2
 801bcd0:	f241 1251 	movw	r2, #4433	; 0x1151
 801bcd4:	fb02 f303 	mul.w	r3, r2, r3
 801bcd8:	637b      	str	r3, [r7, #52]	; 0x34
    tmp0 = z1 + MULTIPLY(z2, FIX_0_765366865); /* c2-c6 */
 801bcda:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801bcdc:	f641 027e 	movw	r2, #6270	; 0x187e
 801bce0:	fb02 f303 	mul.w	r3, r2, r3
 801bce4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bce6:	4413      	add	r3, r2
 801bce8:	64bb      	str	r3, [r7, #72]	; 0x48
    tmp2 = z1 - MULTIPLY(z3, FIX_1_847759065); /* c2+c6 */
 801bcea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801bcec:	4a34      	ldr	r2, [pc, #208]	; (801bdc0 <jpeg_idct_2x4+0x18c>)
 801bcee:	fb02 f303 	mul.w	r3, r2, r3
 801bcf2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801bcf4:	4413      	add	r3, r2
 801bcf6:	647b      	str	r3, [r7, #68]	; 0x44

    /* Final output stage */

    wsptr[2*0] = tmp10 + tmp0;
 801bcf8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bcfa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bcfc:	441a      	add	r2, r3
 801bcfe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd00:	601a      	str	r2, [r3, #0]
    wsptr[2*3] = tmp10 - tmp0;
 801bd02:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd04:	3318      	adds	r3, #24
 801bd06:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 801bd08:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801bd0a:	1a8a      	subs	r2, r1, r2
 801bd0c:	601a      	str	r2, [r3, #0]
    wsptr[2*1] = tmp12 + tmp2;
 801bd0e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd10:	3308      	adds	r3, #8
 801bd12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bd14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bd16:	440a      	add	r2, r1
 801bd18:	601a      	str	r2, [r3, #0]
    wsptr[2*2] = tmp12 - tmp2;
 801bd1a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd1c:	3310      	adds	r3, #16
 801bd1e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 801bd20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801bd22:	1a8a      	subs	r2, r1, r2
 801bd24:	601a      	str	r2, [r3, #0]
  for (ctr = 0; ctr < 2; ctr++, inptr++, quantptr++, wsptr++) {
 801bd26:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bd28:	3301      	adds	r3, #1
 801bd2a:	65bb      	str	r3, [r7, #88]	; 0x58
 801bd2c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801bd2e:	3302      	adds	r3, #2
 801bd30:	667b      	str	r3, [r7, #100]	; 0x64
 801bd32:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801bd34:	3304      	adds	r3, #4
 801bd36:	663b      	str	r3, [r7, #96]	; 0x60
 801bd38:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd3a:	3304      	adds	r3, #4
 801bd3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 801bd3e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bd40:	2b01      	cmp	r3, #1
 801bd42:	dd8e      	ble.n	801bc62 <jpeg_idct_2x4+0x2e>
  }

  /* Pass 2: process 4 rows from work array, store into output array. */

  wsptr = workspace;
 801bd44:	f107 0314 	add.w	r3, r7, #20
 801bd48:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 4; ctr++) {
 801bd4a:	2300      	movs	r3, #0
 801bd4c:	65bb      	str	r3, [r7, #88]	; 0x58
 801bd4e:	e02c      	b.n	801bdaa <jpeg_idct_2x4+0x176>
    outptr = output_buf[ctr] + output_col;
 801bd50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bd52:	009b      	lsls	r3, r3, #2
 801bd54:	683a      	ldr	r2, [r7, #0]
 801bd56:	4413      	add	r3, r2
 801bd58:	681a      	ldr	r2, [r3, #0]
 801bd5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801bd5c:	4413      	add	r3, r2
 801bd5e:	653b      	str	r3, [r7, #80]	; 0x50

    /* Even part */

    /* Add fudge factor here for final descale. */
    tmp10 = wsptr[0] + (ONE << (CONST_BITS+2));
 801bd60:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd62:	681b      	ldr	r3, [r3, #0]
 801bd64:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 801bd68:	64fb      	str	r3, [r7, #76]	; 0x4c

    /* Odd part */

    tmp0 = wsptr[1];
 801bd6a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bd6c:	685b      	ldr	r3, [r3, #4]
 801bd6e:	64bb      	str	r3, [r7, #72]	; 0x48

    /* Final output stage */

    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 801bd70:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bd72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bd74:	4413      	add	r3, r2
 801bd76:	141b      	asrs	r3, r3, #16
			    & RANGE_MASK];
 801bd78:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[0] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, CONST_BITS+3)
 801bd7c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bd7e:	4413      	add	r3, r2
 801bd80:	781a      	ldrb	r2, [r3, #0]
 801bd82:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd84:	701a      	strb	r2, [r3, #0]
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801bd86:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801bd88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801bd8a:	1ad3      	subs	r3, r2, r3
 801bd8c:	141b      	asrs	r3, r3, #16
			    & RANGE_MASK];
 801bd8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
    outptr[1] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, CONST_BITS+3)
 801bd92:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801bd94:	441a      	add	r2, r3
 801bd96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801bd98:	3301      	adds	r3, #1
 801bd9a:	7812      	ldrb	r2, [r2, #0]
 801bd9c:	701a      	strb	r2, [r3, #0]

    wsptr += 2;		/* advance pointer to next row */
 801bd9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801bda0:	3308      	adds	r3, #8
 801bda2:	65fb      	str	r3, [r7, #92]	; 0x5c
  for (ctr = 0; ctr < 4; ctr++) {
 801bda4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bda6:	3301      	adds	r3, #1
 801bda8:	65bb      	str	r3, [r7, #88]	; 0x58
 801bdaa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801bdac:	2b03      	cmp	r3, #3
 801bdae:	ddcf      	ble.n	801bd50 <jpeg_idct_2x4+0x11c>
  }
}
 801bdb0:	bf00      	nop
 801bdb2:	bf00      	nop
 801bdb4:	376c      	adds	r7, #108	; 0x6c
 801bdb6:	46bd      	mov	sp, r7
 801bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bdbc:	4770      	bx	lr
 801bdbe:	bf00      	nop
 801bdc0:	ffffc4df 	.word	0xffffc4df

0801bdc4 <jpeg_idct_1x2>:

GLOBAL(void)
jpeg_idct_1x2 (j_decompress_ptr cinfo, jpeg_component_info * compptr,
	       JCOEFPTR coef_block,
	       JSAMPARRAY output_buf, JDIMENSION output_col)
{
 801bdc4:	b480      	push	{r7}
 801bdc6:	b089      	sub	sp, #36	; 0x24
 801bdc8:	af00      	add	r7, sp, #0
 801bdca:	60f8      	str	r0, [r7, #12]
 801bdcc:	60b9      	str	r1, [r7, #8]
 801bdce:	607a      	str	r2, [r7, #4]
 801bdd0:	603b      	str	r3, [r7, #0]
  INT32 tmp0, tmp10;
  ISLOW_MULT_TYPE * quantptr;
  JSAMPLE *range_limit = IDCT_range_limit(cinfo);
 801bdd2:	68fb      	ldr	r3, [r7, #12]
 801bdd4:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801bdd8:	3380      	adds	r3, #128	; 0x80
 801bdda:	61fb      	str	r3, [r7, #28]
  SHIFT_TEMPS

  /* Process 1 column from input, store into output array. */

  quantptr = (ISLOW_MULT_TYPE *) compptr->dct_table;
 801bddc:	68bb      	ldr	r3, [r7, #8]
 801bdde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801bde0:	61bb      	str	r3, [r7, #24]

  /* Even part */
    
  tmp10 = DEQUANTIZE(coef_block[DCTSIZE*0], quantptr[DCTSIZE*0]);
 801bde2:	687b      	ldr	r3, [r7, #4]
 801bde4:	f9b3 3000 	ldrsh.w	r3, [r3]
 801bde8:	461a      	mov	r2, r3
 801bdea:	69bb      	ldr	r3, [r7, #24]
 801bdec:	681b      	ldr	r3, [r3, #0]
 801bdee:	fb03 f302 	mul.w	r3, r3, r2
 801bdf2:	617b      	str	r3, [r7, #20]
  /* Add fudge factor here for final descale. */
  tmp10 += ONE << 2;
 801bdf4:	697b      	ldr	r3, [r7, #20]
 801bdf6:	3304      	adds	r3, #4
 801bdf8:	617b      	str	r3, [r7, #20]

  /* Odd part */

  tmp0 = DEQUANTIZE(coef_block[DCTSIZE*1], quantptr[DCTSIZE*1]);
 801bdfa:	687b      	ldr	r3, [r7, #4]
 801bdfc:	3310      	adds	r3, #16
 801bdfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 801be02:	461a      	mov	r2, r3
 801be04:	69bb      	ldr	r3, [r7, #24]
 801be06:	3320      	adds	r3, #32
 801be08:	681b      	ldr	r3, [r3, #0]
 801be0a:	fb03 f302 	mul.w	r3, r3, r2
 801be0e:	613b      	str	r3, [r7, #16]

  /* Final output stage */

  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801be10:	697a      	ldr	r2, [r7, #20]
 801be12:	693b      	ldr	r3, [r7, #16]
 801be14:	4413      	add	r3, r2
 801be16:	10db      	asrs	r3, r3, #3
					  & RANGE_MASK];
 801be18:	f3c3 0309 	ubfx	r3, r3, #0, #10
  output_buf[0][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 + tmp0, 3)
 801be1c:	69fa      	ldr	r2, [r7, #28]
 801be1e:	441a      	add	r2, r3
 801be20:	683b      	ldr	r3, [r7, #0]
 801be22:	6819      	ldr	r1, [r3, #0]
 801be24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be26:	440b      	add	r3, r1
 801be28:	7812      	ldrb	r2, [r2, #0]
 801be2a:	701a      	strb	r2, [r3, #0]
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 801be2c:	697a      	ldr	r2, [r7, #20]
 801be2e:	693b      	ldr	r3, [r7, #16]
 801be30:	1ad3      	subs	r3, r2, r3
 801be32:	10db      	asrs	r3, r3, #3
					  & RANGE_MASK];
 801be34:	f3c3 0309 	ubfx	r3, r3, #0, #10
  output_buf[1][output_col] = range_limit[(int) RIGHT_SHIFT(tmp10 - tmp0, 3)
 801be38:	69fa      	ldr	r2, [r7, #28]
 801be3a:	441a      	add	r2, r3
 801be3c:	683b      	ldr	r3, [r7, #0]
 801be3e:	3304      	adds	r3, #4
 801be40:	6819      	ldr	r1, [r3, #0]
 801be42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801be44:	440b      	add	r3, r1
 801be46:	7812      	ldrb	r2, [r2, #0]
 801be48:	701a      	strb	r2, [r3, #0]
}
 801be4a:	bf00      	nop
 801be4c:	3724      	adds	r7, #36	; 0x24
 801be4e:	46bd      	mov	sp, r7
 801be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be54:	4770      	bx	lr

0801be56 <out_of_memory>:

LOCAL(void)
out_of_memory (j_common_ptr cinfo, int which)
/* Report an out-of-memory error and stop execution */
/* If we compiled MEM_STATS support, report alloc requests before dying */
{
 801be56:	b580      	push	{r7, lr}
 801be58:	b082      	sub	sp, #8
 801be5a:	af00      	add	r7, sp, #0
 801be5c:	6078      	str	r0, [r7, #4]
 801be5e:	6039      	str	r1, [r7, #0]
#ifdef MEM_STATS
  cinfo->err->trace_level = 2;	/* force self_destruct to report stats */
#endif
  ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, which);
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	681b      	ldr	r3, [r3, #0]
 801be64:	2238      	movs	r2, #56	; 0x38
 801be66:	615a      	str	r2, [r3, #20]
 801be68:	687b      	ldr	r3, [r7, #4]
 801be6a:	681b      	ldr	r3, [r3, #0]
 801be6c:	683a      	ldr	r2, [r7, #0]
 801be6e:	619a      	str	r2, [r3, #24]
 801be70:	687b      	ldr	r3, [r7, #4]
 801be72:	681b      	ldr	r3, [r3, #0]
 801be74:	681b      	ldr	r3, [r3, #0]
 801be76:	6878      	ldr	r0, [r7, #4]
 801be78:	4798      	blx	r3
}
 801be7a:	bf00      	nop
 801be7c:	3708      	adds	r7, #8
 801be7e:	46bd      	mov	sp, r7
 801be80:	bd80      	pop	{r7, pc}
	...

0801be84 <alloc_small>:


METHODDEF(void *)
alloc_small (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "small" object */
{
 801be84:	b580      	push	{r7, lr}
 801be86:	b08c      	sub	sp, #48	; 0x30
 801be88:	af00      	add	r7, sp, #0
 801be8a:	60f8      	str	r0, [r7, #12]
 801be8c:	60b9      	str	r1, [r7, #8]
 801be8e:	607a      	str	r2, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801be90:	68fb      	ldr	r3, [r7, #12]
 801be92:	685b      	ldr	r3, [r3, #4]
 801be94:	623b      	str	r3, [r7, #32]
  small_pool_ptr hdr_ptr, prev_hdr_ptr;
  char * data_ptr;
  size_t odd_bytes, min_request, slop;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(small_pool_hdr)))
 801be96:	687b      	ldr	r3, [r7, #4]
 801be98:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801be9c:	4293      	cmp	r3, r2
 801be9e:	d903      	bls.n	801bea8 <alloc_small+0x24>
    out_of_memory(cinfo, 1);	/* request exceeds malloc's ability */
 801bea0:	2101      	movs	r1, #1
 801bea2:	68f8      	ldr	r0, [r7, #12]
 801bea4:	f7ff ffd7 	bl	801be56 <out_of_memory>

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 801bea8:	687b      	ldr	r3, [r7, #4]
 801beaa:	f003 0307 	and.w	r3, r3, #7
 801beae:	61fb      	str	r3, [r7, #28]
  if (odd_bytes > 0)
 801beb0:	69fb      	ldr	r3, [r7, #28]
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	d004      	beq.n	801bec0 <alloc_small+0x3c>
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801beb6:	687a      	ldr	r2, [r7, #4]
 801beb8:	69fb      	ldr	r3, [r7, #28]
 801beba:	1ad3      	subs	r3, r2, r3
 801bebc:	3308      	adds	r3, #8
 801bebe:	607b      	str	r3, [r7, #4]

  /* See if space is available in any existing pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801bec0:	68bb      	ldr	r3, [r7, #8]
 801bec2:	2b00      	cmp	r3, #0
 801bec4:	db02      	blt.n	801becc <alloc_small+0x48>
 801bec6:	68bb      	ldr	r3, [r7, #8]
 801bec8:	2b01      	cmp	r3, #1
 801beca:	dd0c      	ble.n	801bee6 <alloc_small+0x62>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801becc:	68fb      	ldr	r3, [r7, #12]
 801bece:	681b      	ldr	r3, [r3, #0]
 801bed0:	220f      	movs	r2, #15
 801bed2:	615a      	str	r2, [r3, #20]
 801bed4:	68fb      	ldr	r3, [r7, #12]
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	68ba      	ldr	r2, [r7, #8]
 801beda:	619a      	str	r2, [r3, #24]
 801bedc:	68fb      	ldr	r3, [r7, #12]
 801bede:	681b      	ldr	r3, [r3, #0]
 801bee0:	681b      	ldr	r3, [r3, #0]
 801bee2:	68f8      	ldr	r0, [r7, #12]
 801bee4:	4798      	blx	r3
  prev_hdr_ptr = NULL;
 801bee6:	2300      	movs	r3, #0
 801bee8:	62bb      	str	r3, [r7, #40]	; 0x28
  hdr_ptr = mem->small_list[pool_id];
 801beea:	6a3a      	ldr	r2, [r7, #32]
 801beec:	68bb      	ldr	r3, [r7, #8]
 801beee:	330c      	adds	r3, #12
 801bef0:	009b      	lsls	r3, r3, #2
 801bef2:	4413      	add	r3, r2
 801bef4:	685b      	ldr	r3, [r3, #4]
 801bef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (hdr_ptr != NULL) {
 801bef8:	e009      	b.n	801bf0e <alloc_small+0x8a>
    if (hdr_ptr->hdr.bytes_left >= sizeofobject)
 801befa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801befc:	689b      	ldr	r3, [r3, #8]
 801befe:	687a      	ldr	r2, [r7, #4]
 801bf00:	429a      	cmp	r2, r3
 801bf02:	d908      	bls.n	801bf16 <alloc_small+0x92>
      break;			/* found pool with enough space */
    prev_hdr_ptr = hdr_ptr;
 801bf04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf06:	62bb      	str	r3, [r7, #40]	; 0x28
    hdr_ptr = hdr_ptr->hdr.next;
 801bf08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf0a:	681b      	ldr	r3, [r3, #0]
 801bf0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (hdr_ptr != NULL) {
 801bf0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf10:	2b00      	cmp	r3, #0
 801bf12:	d1f2      	bne.n	801befa <alloc_small+0x76>
 801bf14:	e000      	b.n	801bf18 <alloc_small+0x94>
      break;			/* found pool with enough space */
 801bf16:	bf00      	nop
  }

  /* Time to make a new pool? */
  if (hdr_ptr == NULL) {
 801bf18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf1a:	2b00      	cmp	r3, #0
 801bf1c:	d154      	bne.n	801bfc8 <alloc_small+0x144>
    /* min_request is what we need now, slop is what will be leftover */
    min_request = sizeofobject + SIZEOF(small_pool_hdr);
 801bf1e:	687b      	ldr	r3, [r7, #4]
 801bf20:	3310      	adds	r3, #16
 801bf22:	61bb      	str	r3, [r7, #24]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 801bf24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf26:	2b00      	cmp	r3, #0
 801bf28:	d105      	bne.n	801bf36 <alloc_small+0xb2>
      slop = first_pool_slop[pool_id];
 801bf2a:	4a34      	ldr	r2, [pc, #208]	; (801bffc <alloc_small+0x178>)
 801bf2c:	68bb      	ldr	r3, [r7, #8]
 801bf2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bf32:	627b      	str	r3, [r7, #36]	; 0x24
 801bf34:	e004      	b.n	801bf40 <alloc_small+0xbc>
    else
      slop = extra_pool_slop[pool_id];
 801bf36:	4a32      	ldr	r2, [pc, #200]	; (801c000 <alloc_small+0x17c>)
 801bf38:	68bb      	ldr	r3, [r7, #8]
 801bf3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801bf3e:	627b      	str	r3, [r7, #36]	; 0x24
    /* Don't ask for more than MAX_ALLOC_CHUNK */
    if (slop > (size_t) (MAX_ALLOC_CHUNK-min_request))
 801bf40:	69bb      	ldr	r3, [r7, #24]
 801bf42:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 801bf46:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bf48:	429a      	cmp	r2, r3
 801bf4a:	d903      	bls.n	801bf54 <alloc_small+0xd0>
      slop = (size_t) (MAX_ALLOC_CHUNK-min_request);
 801bf4c:	69bb      	ldr	r3, [r7, #24]
 801bf4e:	f5c3 3380 	rsb	r3, r3, #65536	; 0x10000
 801bf52:	627b      	str	r3, [r7, #36]	; 0x24
    /* Try to get space, if fail reduce slop and try again */
    for (;;) {
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 801bf54:	69ba      	ldr	r2, [r7, #24]
 801bf56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf58:	4413      	add	r3, r2
 801bf5a:	4619      	mov	r1, r3
 801bf5c:	68f8      	ldr	r0, [r7, #12]
 801bf5e:	f000 feff 	bl	801cd60 <jpeg_get_small>
 801bf62:	62f8      	str	r0, [r7, #44]	; 0x2c
      if (hdr_ptr != NULL)
 801bf64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf66:	2b00      	cmp	r3, #0
 801bf68:	d10a      	bne.n	801bf80 <alloc_small+0xfc>
	break;
      slop /= 2;
 801bf6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf6c:	085b      	lsrs	r3, r3, #1
 801bf6e:	627b      	str	r3, [r7, #36]	; 0x24
      if (slop < MIN_SLOP)	/* give up when it gets real small */
 801bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf72:	2b31      	cmp	r3, #49	; 0x31
 801bf74:	d8ee      	bhi.n	801bf54 <alloc_small+0xd0>
	out_of_memory(cinfo, 2); /* jpeg_get_small failed */
 801bf76:	2102      	movs	r1, #2
 801bf78:	68f8      	ldr	r0, [r7, #12]
 801bf7a:	f7ff ff6c 	bl	801be56 <out_of_memory>
      hdr_ptr = (small_pool_ptr) jpeg_get_small(cinfo, min_request + slop);
 801bf7e:	e7e9      	b.n	801bf54 <alloc_small+0xd0>
	break;
 801bf80:	bf00      	nop
    }
    mem->total_space_allocated += min_request + slop;
 801bf82:	6a3b      	ldr	r3, [r7, #32]
 801bf84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801bf86:	4619      	mov	r1, r3
 801bf88:	69ba      	ldr	r2, [r7, #24]
 801bf8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf8c:	4413      	add	r3, r2
 801bf8e:	440b      	add	r3, r1
 801bf90:	461a      	mov	r2, r3
 801bf92:	6a3b      	ldr	r3, [r7, #32]
 801bf94:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Success, initialize the new pool header and add to end of list */
    hdr_ptr->hdr.next = NULL;
 801bf96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf98:	2200      	movs	r2, #0
 801bf9a:	601a      	str	r2, [r3, #0]
    hdr_ptr->hdr.bytes_used = 0;
 801bf9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf9e:	2200      	movs	r2, #0
 801bfa0:	605a      	str	r2, [r3, #4]
    hdr_ptr->hdr.bytes_left = sizeofobject + slop;
 801bfa2:	687a      	ldr	r2, [r7, #4]
 801bfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bfa6:	441a      	add	r2, r3
 801bfa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfaa:	609a      	str	r2, [r3, #8]
    if (prev_hdr_ptr == NULL)	/* first pool in class? */
 801bfac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfae:	2b00      	cmp	r3, #0
 801bfb0:	d107      	bne.n	801bfc2 <alloc_small+0x13e>
      mem->small_list[pool_id] = hdr_ptr;
 801bfb2:	6a3a      	ldr	r2, [r7, #32]
 801bfb4:	68bb      	ldr	r3, [r7, #8]
 801bfb6:	330c      	adds	r3, #12
 801bfb8:	009b      	lsls	r3, r3, #2
 801bfba:	4413      	add	r3, r2
 801bfbc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bfbe:	605a      	str	r2, [r3, #4]
 801bfc0:	e002      	b.n	801bfc8 <alloc_small+0x144>
    else
      prev_hdr_ptr->hdr.next = hdr_ptr;
 801bfc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801bfc6:	601a      	str	r2, [r3, #0]
  }

  /* OK, allocate the object from the current pool */
  data_ptr = (char *) (hdr_ptr + 1); /* point to first data byte in pool */
 801bfc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfca:	3310      	adds	r3, #16
 801bfcc:	617b      	str	r3, [r7, #20]
  data_ptr += hdr_ptr->hdr.bytes_used; /* point to place for object */
 801bfce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfd0:	685b      	ldr	r3, [r3, #4]
 801bfd2:	697a      	ldr	r2, [r7, #20]
 801bfd4:	4413      	add	r3, r2
 801bfd6:	617b      	str	r3, [r7, #20]
  hdr_ptr->hdr.bytes_used += sizeofobject;
 801bfd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfda:	685a      	ldr	r2, [r3, #4]
 801bfdc:	687b      	ldr	r3, [r7, #4]
 801bfde:	441a      	add	r2, r3
 801bfe0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfe2:	605a      	str	r2, [r3, #4]
  hdr_ptr->hdr.bytes_left -= sizeofobject;
 801bfe4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfe6:	689a      	ldr	r2, [r3, #8]
 801bfe8:	687b      	ldr	r3, [r7, #4]
 801bfea:	1ad2      	subs	r2, r2, r3
 801bfec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bfee:	609a      	str	r2, [r3, #8]

  return (void *) data_ptr;
 801bff0:	697b      	ldr	r3, [r7, #20]
}
 801bff2:	4618      	mov	r0, r3
 801bff4:	3730      	adds	r7, #48	; 0x30
 801bff6:	46bd      	mov	sp, r7
 801bff8:	bd80      	pop	{r7, pc}
 801bffa:	bf00      	nop
 801bffc:	08021764 	.word	0x08021764
 801c000:	0802176c 	.word	0x0802176c

0801c004 <alloc_large>:
 */

METHODDEF(void FAR *)
alloc_large (j_common_ptr cinfo, int pool_id, size_t sizeofobject)
/* Allocate a "large" object */
{
 801c004:	b580      	push	{r7, lr}
 801c006:	b088      	sub	sp, #32
 801c008:	af00      	add	r7, sp, #0
 801c00a:	60f8      	str	r0, [r7, #12]
 801c00c:	60b9      	str	r1, [r7, #8]
 801c00e:	607a      	str	r2, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801c010:	68fb      	ldr	r3, [r7, #12]
 801c012:	685b      	ldr	r3, [r3, #4]
 801c014:	61fb      	str	r3, [r7, #28]
  large_pool_ptr hdr_ptr;
  size_t odd_bytes;

  /* Check for unsatisfiable request (do now to ensure no overflow below) */
  if (sizeofobject > (size_t) (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)))
 801c016:	687b      	ldr	r3, [r7, #4]
 801c018:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801c01c:	4293      	cmp	r3, r2
 801c01e:	d903      	bls.n	801c028 <alloc_large+0x24>
    out_of_memory(cinfo, 3);	/* request exceeds malloc's ability */
 801c020:	2103      	movs	r1, #3
 801c022:	68f8      	ldr	r0, [r7, #12]
 801c024:	f7ff ff17 	bl	801be56 <out_of_memory>

  /* Round up the requested size to a multiple of SIZEOF(ALIGN_TYPE) */
  odd_bytes = sizeofobject % SIZEOF(ALIGN_TYPE);
 801c028:	687b      	ldr	r3, [r7, #4]
 801c02a:	f003 0307 	and.w	r3, r3, #7
 801c02e:	61bb      	str	r3, [r7, #24]
  if (odd_bytes > 0)
 801c030:	69bb      	ldr	r3, [r7, #24]
 801c032:	2b00      	cmp	r3, #0
 801c034:	d004      	beq.n	801c040 <alloc_large+0x3c>
    sizeofobject += SIZEOF(ALIGN_TYPE) - odd_bytes;
 801c036:	687a      	ldr	r2, [r7, #4]
 801c038:	69bb      	ldr	r3, [r7, #24]
 801c03a:	1ad3      	subs	r3, r2, r3
 801c03c:	3308      	adds	r3, #8
 801c03e:	607b      	str	r3, [r7, #4]

  /* Always make a new pool */
  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801c040:	68bb      	ldr	r3, [r7, #8]
 801c042:	2b00      	cmp	r3, #0
 801c044:	db02      	blt.n	801c04c <alloc_large+0x48>
 801c046:	68bb      	ldr	r3, [r7, #8]
 801c048:	2b01      	cmp	r3, #1
 801c04a:	dd0c      	ble.n	801c066 <alloc_large+0x62>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801c04c:	68fb      	ldr	r3, [r7, #12]
 801c04e:	681b      	ldr	r3, [r3, #0]
 801c050:	220f      	movs	r2, #15
 801c052:	615a      	str	r2, [r3, #20]
 801c054:	68fb      	ldr	r3, [r7, #12]
 801c056:	681b      	ldr	r3, [r3, #0]
 801c058:	68ba      	ldr	r2, [r7, #8]
 801c05a:	619a      	str	r2, [r3, #24]
 801c05c:	68fb      	ldr	r3, [r7, #12]
 801c05e:	681b      	ldr	r3, [r3, #0]
 801c060:	681b      	ldr	r3, [r3, #0]
 801c062:	68f8      	ldr	r0, [r7, #12]
 801c064:	4798      	blx	r3

  hdr_ptr = (large_pool_ptr) jpeg_get_large(cinfo, sizeofobject +
 801c066:	687b      	ldr	r3, [r7, #4]
 801c068:	3310      	adds	r3, #16
 801c06a:	4619      	mov	r1, r3
 801c06c:	68f8      	ldr	r0, [r7, #12]
 801c06e:	f000 fe91 	bl	801cd94 <jpeg_get_large>
 801c072:	6178      	str	r0, [r7, #20]
					    SIZEOF(large_pool_hdr));
  if (hdr_ptr == NULL)
 801c074:	697b      	ldr	r3, [r7, #20]
 801c076:	2b00      	cmp	r3, #0
 801c078:	d103      	bne.n	801c082 <alloc_large+0x7e>
    out_of_memory(cinfo, 4);	/* jpeg_get_large failed */
 801c07a:	2104      	movs	r1, #4
 801c07c:	68f8      	ldr	r0, [r7, #12]
 801c07e:	f7ff feea 	bl	801be56 <out_of_memory>
  mem->total_space_allocated += sizeofobject + SIZEOF(large_pool_hdr);
 801c082:	69fb      	ldr	r3, [r7, #28]
 801c084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c086:	461a      	mov	r2, r3
 801c088:	687b      	ldr	r3, [r7, #4]
 801c08a:	4413      	add	r3, r2
 801c08c:	3310      	adds	r3, #16
 801c08e:	461a      	mov	r2, r3
 801c090:	69fb      	ldr	r3, [r7, #28]
 801c092:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Success, initialize the new pool header and add to list */
  hdr_ptr->hdr.next = mem->large_list[pool_id];
 801c094:	69fa      	ldr	r2, [r7, #28]
 801c096:	68bb      	ldr	r3, [r7, #8]
 801c098:	330e      	adds	r3, #14
 801c09a:	009b      	lsls	r3, r3, #2
 801c09c:	4413      	add	r3, r2
 801c09e:	685a      	ldr	r2, [r3, #4]
 801c0a0:	697b      	ldr	r3, [r7, #20]
 801c0a2:	601a      	str	r2, [r3, #0]
  /* We maintain space counts in each pool header for statistical purposes,
   * even though they are not needed for allocation.
   */
  hdr_ptr->hdr.bytes_used = sizeofobject;
 801c0a4:	697b      	ldr	r3, [r7, #20]
 801c0a6:	687a      	ldr	r2, [r7, #4]
 801c0a8:	605a      	str	r2, [r3, #4]
  hdr_ptr->hdr.bytes_left = 0;
 801c0aa:	697b      	ldr	r3, [r7, #20]
 801c0ac:	2200      	movs	r2, #0
 801c0ae:	609a      	str	r2, [r3, #8]
  mem->large_list[pool_id] = hdr_ptr;
 801c0b0:	69fa      	ldr	r2, [r7, #28]
 801c0b2:	68bb      	ldr	r3, [r7, #8]
 801c0b4:	330e      	adds	r3, #14
 801c0b6:	009b      	lsls	r3, r3, #2
 801c0b8:	4413      	add	r3, r2
 801c0ba:	697a      	ldr	r2, [r7, #20]
 801c0bc:	605a      	str	r2, [r3, #4]

  return (void FAR *) (hdr_ptr + 1); /* point to first data byte in pool */
 801c0be:	697b      	ldr	r3, [r7, #20]
 801c0c0:	3310      	adds	r3, #16
}
 801c0c2:	4618      	mov	r0, r3
 801c0c4:	3720      	adds	r7, #32
 801c0c6:	46bd      	mov	sp, r7
 801c0c8:	bd80      	pop	{r7, pc}

0801c0ca <alloc_sarray>:

METHODDEF(JSAMPARRAY)
alloc_sarray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION samplesperrow, JDIMENSION numrows)
/* Allocate a 2-D sample array */
{
 801c0ca:	b580      	push	{r7, lr}
 801c0cc:	b08c      	sub	sp, #48	; 0x30
 801c0ce:	af00      	add	r7, sp, #0
 801c0d0:	60f8      	str	r0, [r7, #12]
 801c0d2:	60b9      	str	r1, [r7, #8]
 801c0d4:	607a      	str	r2, [r7, #4]
 801c0d6:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801c0d8:	68fb      	ldr	r3, [r7, #12]
 801c0da:	685b      	ldr	r3, [r3, #4]
 801c0dc:	61fb      	str	r3, [r7, #28]
  JSAMPROW workspace;
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 801c0de:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801c0e2:	687b      	ldr	r3, [r7, #4]
 801c0e4:	fbb2 f3f3 	udiv	r3, r2, r3
 801c0e8:	61bb      	str	r3, [r7, #24]
	  ((long) samplesperrow * SIZEOF(JSAMPLE));
  if (ltemp <= 0)
 801c0ea:	69bb      	ldr	r3, [r7, #24]
 801c0ec:	2b00      	cmp	r3, #0
 801c0ee:	dc08      	bgt.n	801c102 <alloc_sarray+0x38>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 801c0f0:	68fb      	ldr	r3, [r7, #12]
 801c0f2:	681b      	ldr	r3, [r3, #0]
 801c0f4:	2248      	movs	r2, #72	; 0x48
 801c0f6:	615a      	str	r2, [r3, #20]
 801c0f8:	68fb      	ldr	r3, [r7, #12]
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	681b      	ldr	r3, [r3, #0]
 801c0fe:	68f8      	ldr	r0, [r7, #12]
 801c100:	4798      	blx	r3
  if (ltemp < (long) numrows)
 801c102:	683b      	ldr	r3, [r7, #0]
 801c104:	69ba      	ldr	r2, [r7, #24]
 801c106:	429a      	cmp	r2, r3
 801c108:	da02      	bge.n	801c110 <alloc_sarray+0x46>
    rowsperchunk = (JDIMENSION) ltemp;
 801c10a:	69bb      	ldr	r3, [r7, #24]
 801c10c:	62bb      	str	r3, [r7, #40]	; 0x28
 801c10e:	e001      	b.n	801c114 <alloc_sarray+0x4a>
  else
    rowsperchunk = numrows;
 801c110:	683b      	ldr	r3, [r7, #0]
 801c112:	62bb      	str	r3, [r7, #40]	; 0x28
  mem->last_rowsperchunk = rowsperchunk;
 801c114:	69fb      	ldr	r3, [r7, #28]
 801c116:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c118:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get space for row pointers (small object) */
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
				    (size_t) (numrows * SIZEOF(JSAMPROW)));
 801c11a:	683b      	ldr	r3, [r7, #0]
 801c11c:	009b      	lsls	r3, r3, #2
  result = (JSAMPARRAY) alloc_small(cinfo, pool_id,
 801c11e:	461a      	mov	r2, r3
 801c120:	68b9      	ldr	r1, [r7, #8]
 801c122:	68f8      	ldr	r0, [r7, #12]
 801c124:	f7ff feae 	bl	801be84 <alloc_small>
 801c128:	6178      	str	r0, [r7, #20]

  /* Get the rows themselves (large objects) */
  currow = 0;
 801c12a:	2300      	movs	r3, #0
 801c12c:	627b      	str	r3, [r7, #36]	; 0x24
  while (currow < numrows) {
 801c12e:	e026      	b.n	801c17e <alloc_sarray+0xb4>
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801c130:	683a      	ldr	r2, [r7, #0]
 801c132:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c134:	1ad3      	subs	r3, r2, r3
 801c136:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c138:	4293      	cmp	r3, r2
 801c13a:	bf28      	it	cs
 801c13c:	4613      	movcs	r3, r2
 801c13e:	62bb      	str	r3, [r7, #40]	; 0x28
    workspace = (JSAMPROW) alloc_large(cinfo, pool_id,
 801c140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c142:	687a      	ldr	r2, [r7, #4]
 801c144:	fb02 f303 	mul.w	r3, r2, r3
 801c148:	461a      	mov	r2, r3
 801c14a:	68b9      	ldr	r1, [r7, #8]
 801c14c:	68f8      	ldr	r0, [r7, #12]
 801c14e:	f7ff ff59 	bl	801c004 <alloc_large>
 801c152:	62f8      	str	r0, [r7, #44]	; 0x2c
	(size_t) ((size_t) rowsperchunk * (size_t) samplesperrow
		  * SIZEOF(JSAMPLE)));
    for (i = rowsperchunk; i > 0; i--) {
 801c154:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c156:	623b      	str	r3, [r7, #32]
 801c158:	e00e      	b.n	801c178 <alloc_sarray+0xae>
      result[currow++] = workspace;
 801c15a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c15c:	1c5a      	adds	r2, r3, #1
 801c15e:	627a      	str	r2, [r7, #36]	; 0x24
 801c160:	009b      	lsls	r3, r3, #2
 801c162:	697a      	ldr	r2, [r7, #20]
 801c164:	4413      	add	r3, r2
 801c166:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c168:	601a      	str	r2, [r3, #0]
      workspace += samplesperrow;
 801c16a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c16c:	687b      	ldr	r3, [r7, #4]
 801c16e:	4413      	add	r3, r2
 801c170:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = rowsperchunk; i > 0; i--) {
 801c172:	6a3b      	ldr	r3, [r7, #32]
 801c174:	3b01      	subs	r3, #1
 801c176:	623b      	str	r3, [r7, #32]
 801c178:	6a3b      	ldr	r3, [r7, #32]
 801c17a:	2b00      	cmp	r3, #0
 801c17c:	d1ed      	bne.n	801c15a <alloc_sarray+0x90>
  while (currow < numrows) {
 801c17e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c180:	683b      	ldr	r3, [r7, #0]
 801c182:	429a      	cmp	r2, r3
 801c184:	d3d4      	bcc.n	801c130 <alloc_sarray+0x66>
    }
  }

  return result;
 801c186:	697b      	ldr	r3, [r7, #20]
}
 801c188:	4618      	mov	r0, r3
 801c18a:	3730      	adds	r7, #48	; 0x30
 801c18c:	46bd      	mov	sp, r7
 801c18e:	bd80      	pop	{r7, pc}

0801c190 <alloc_barray>:

METHODDEF(JBLOCKARRAY)
alloc_barray (j_common_ptr cinfo, int pool_id,
	      JDIMENSION blocksperrow, JDIMENSION numrows)
/* Allocate a 2-D coefficient-block array */
{
 801c190:	b580      	push	{r7, lr}
 801c192:	b08c      	sub	sp, #48	; 0x30
 801c194:	af00      	add	r7, sp, #0
 801c196:	60f8      	str	r0, [r7, #12]
 801c198:	60b9      	str	r1, [r7, #8]
 801c19a:	607a      	str	r2, [r7, #4]
 801c19c:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801c19e:	68fb      	ldr	r3, [r7, #12]
 801c1a0:	685b      	ldr	r3, [r3, #4]
 801c1a2:	61fb      	str	r3, [r7, #28]
  JDIMENSION rowsperchunk, currow, i;
  long ltemp;

  /* Calculate max # of rows allowed in one allocation chunk */
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
	  ((long) blocksperrow * SIZEOF(JBLOCK));
 801c1a4:	687b      	ldr	r3, [r7, #4]
 801c1a6:	01db      	lsls	r3, r3, #7
  ltemp = (MAX_ALLOC_CHUNK-SIZEOF(large_pool_hdr)) /
 801c1a8:	f64f 72f0 	movw	r2, #65520	; 0xfff0
 801c1ac:	fbb2 f3f3 	udiv	r3, r2, r3
 801c1b0:	61bb      	str	r3, [r7, #24]
  if (ltemp <= 0)
 801c1b2:	69bb      	ldr	r3, [r7, #24]
 801c1b4:	2b00      	cmp	r3, #0
 801c1b6:	dc08      	bgt.n	801c1ca <alloc_barray+0x3a>
    ERREXIT(cinfo, JERR_WIDTH_OVERFLOW);
 801c1b8:	68fb      	ldr	r3, [r7, #12]
 801c1ba:	681b      	ldr	r3, [r3, #0]
 801c1bc:	2248      	movs	r2, #72	; 0x48
 801c1be:	615a      	str	r2, [r3, #20]
 801c1c0:	68fb      	ldr	r3, [r7, #12]
 801c1c2:	681b      	ldr	r3, [r3, #0]
 801c1c4:	681b      	ldr	r3, [r3, #0]
 801c1c6:	68f8      	ldr	r0, [r7, #12]
 801c1c8:	4798      	blx	r3
  if (ltemp < (long) numrows)
 801c1ca:	683b      	ldr	r3, [r7, #0]
 801c1cc:	69ba      	ldr	r2, [r7, #24]
 801c1ce:	429a      	cmp	r2, r3
 801c1d0:	da02      	bge.n	801c1d8 <alloc_barray+0x48>
    rowsperchunk = (JDIMENSION) ltemp;
 801c1d2:	69bb      	ldr	r3, [r7, #24]
 801c1d4:	62bb      	str	r3, [r7, #40]	; 0x28
 801c1d6:	e001      	b.n	801c1dc <alloc_barray+0x4c>
  else
    rowsperchunk = numrows;
 801c1d8:	683b      	ldr	r3, [r7, #0]
 801c1da:	62bb      	str	r3, [r7, #40]	; 0x28
  mem->last_rowsperchunk = rowsperchunk;
 801c1dc:	69fb      	ldr	r3, [r7, #28]
 801c1de:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c1e0:	651a      	str	r2, [r3, #80]	; 0x50

  /* Get space for row pointers (small object) */
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
				     (size_t) (numrows * SIZEOF(JBLOCKROW)));
 801c1e2:	683b      	ldr	r3, [r7, #0]
 801c1e4:	009b      	lsls	r3, r3, #2
  result = (JBLOCKARRAY) alloc_small(cinfo, pool_id,
 801c1e6:	461a      	mov	r2, r3
 801c1e8:	68b9      	ldr	r1, [r7, #8]
 801c1ea:	68f8      	ldr	r0, [r7, #12]
 801c1ec:	f7ff fe4a 	bl	801be84 <alloc_small>
 801c1f0:	6178      	str	r0, [r7, #20]

  /* Get the rows themselves (large objects) */
  currow = 0;
 801c1f2:	2300      	movs	r3, #0
 801c1f4:	627b      	str	r3, [r7, #36]	; 0x24
  while (currow < numrows) {
 801c1f6:	e028      	b.n	801c24a <alloc_barray+0xba>
    rowsperchunk = MIN(rowsperchunk, numrows - currow);
 801c1f8:	683a      	ldr	r2, [r7, #0]
 801c1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c1fc:	1ad3      	subs	r3, r2, r3
 801c1fe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801c200:	4293      	cmp	r3, r2
 801c202:	bf28      	it	cs
 801c204:	4613      	movcs	r3, r2
 801c206:	62bb      	str	r3, [r7, #40]	; 0x28
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
	(size_t) ((size_t) rowsperchunk * (size_t) blocksperrow
 801c208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c20a:	687a      	ldr	r2, [r7, #4]
 801c20c:	fb02 f303 	mul.w	r3, r2, r3
    workspace = (JBLOCKROW) alloc_large(cinfo, pool_id,
 801c210:	01db      	lsls	r3, r3, #7
 801c212:	461a      	mov	r2, r3
 801c214:	68b9      	ldr	r1, [r7, #8]
 801c216:	68f8      	ldr	r0, [r7, #12]
 801c218:	f7ff fef4 	bl	801c004 <alloc_large>
 801c21c:	62f8      	str	r0, [r7, #44]	; 0x2c
		  * SIZEOF(JBLOCK)));
    for (i = rowsperchunk; i > 0; i--) {
 801c21e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c220:	623b      	str	r3, [r7, #32]
 801c222:	e00f      	b.n	801c244 <alloc_barray+0xb4>
      result[currow++] = workspace;
 801c224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c226:	1c5a      	adds	r2, r3, #1
 801c228:	627a      	str	r2, [r7, #36]	; 0x24
 801c22a:	009b      	lsls	r3, r3, #2
 801c22c:	697a      	ldr	r2, [r7, #20]
 801c22e:	4413      	add	r3, r2
 801c230:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c232:	601a      	str	r2, [r3, #0]
      workspace += blocksperrow;
 801c234:	687b      	ldr	r3, [r7, #4]
 801c236:	01db      	lsls	r3, r3, #7
 801c238:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801c23a:	4413      	add	r3, r2
 801c23c:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (i = rowsperchunk; i > 0; i--) {
 801c23e:	6a3b      	ldr	r3, [r7, #32]
 801c240:	3b01      	subs	r3, #1
 801c242:	623b      	str	r3, [r7, #32]
 801c244:	6a3b      	ldr	r3, [r7, #32]
 801c246:	2b00      	cmp	r3, #0
 801c248:	d1ec      	bne.n	801c224 <alloc_barray+0x94>
  while (currow < numrows) {
 801c24a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c24c:	683b      	ldr	r3, [r7, #0]
 801c24e:	429a      	cmp	r2, r3
 801c250:	d3d2      	bcc.n	801c1f8 <alloc_barray+0x68>
    }
  }

  return result;
 801c252:	697b      	ldr	r3, [r7, #20]
}
 801c254:	4618      	mov	r0, r3
 801c256:	3730      	adds	r7, #48	; 0x30
 801c258:	46bd      	mov	sp, r7
 801c25a:	bd80      	pop	{r7, pc}

0801c25c <request_virt_sarray>:
METHODDEF(jvirt_sarray_ptr)
request_virt_sarray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION samplesperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D sample array */
{
 801c25c:	b580      	push	{r7, lr}
 801c25e:	b086      	sub	sp, #24
 801c260:	af00      	add	r7, sp, #0
 801c262:	60f8      	str	r0, [r7, #12]
 801c264:	60b9      	str	r1, [r7, #8]
 801c266:	607a      	str	r2, [r7, #4]
 801c268:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801c26a:	68fb      	ldr	r3, [r7, #12]
 801c26c:	685b      	ldr	r3, [r3, #4]
 801c26e:	617b      	str	r3, [r7, #20]
  jvirt_sarray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
 801c270:	68bb      	ldr	r3, [r7, #8]
 801c272:	2b01      	cmp	r3, #1
 801c274:	d00c      	beq.n	801c290 <request_virt_sarray+0x34>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801c276:	68fb      	ldr	r3, [r7, #12]
 801c278:	681b      	ldr	r3, [r3, #0]
 801c27a:	220f      	movs	r2, #15
 801c27c:	615a      	str	r2, [r3, #20]
 801c27e:	68fb      	ldr	r3, [r7, #12]
 801c280:	681b      	ldr	r3, [r3, #0]
 801c282:	68ba      	ldr	r2, [r7, #8]
 801c284:	619a      	str	r2, [r3, #24]
 801c286:	68fb      	ldr	r3, [r7, #12]
 801c288:	681b      	ldr	r3, [r3, #0]
 801c28a:	681b      	ldr	r3, [r3, #0]
 801c28c:	68f8      	ldr	r0, [r7, #12]
 801c28e:	4798      	blx	r3

  /* get control block */
  result = (jvirt_sarray_ptr) alloc_small(cinfo, pool_id,
 801c290:	223c      	movs	r2, #60	; 0x3c
 801c292:	68b9      	ldr	r1, [r7, #8]
 801c294:	68f8      	ldr	r0, [r7, #12]
 801c296:	f7ff fdf5 	bl	801be84 <alloc_small>
 801c29a:	6138      	str	r0, [r7, #16]
					  SIZEOF(struct jvirt_sarray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
 801c29c:	693b      	ldr	r3, [r7, #16]
 801c29e:	2200      	movs	r2, #0
 801c2a0:	601a      	str	r2, [r3, #0]
  result->rows_in_array = numrows;
 801c2a2:	693b      	ldr	r3, [r7, #16]
 801c2a4:	6a3a      	ldr	r2, [r7, #32]
 801c2a6:	605a      	str	r2, [r3, #4]
  result->samplesperrow = samplesperrow;
 801c2a8:	693b      	ldr	r3, [r7, #16]
 801c2aa:	683a      	ldr	r2, [r7, #0]
 801c2ac:	609a      	str	r2, [r3, #8]
  result->maxaccess = maxaccess;
 801c2ae:	693b      	ldr	r3, [r7, #16]
 801c2b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c2b2:	60da      	str	r2, [r3, #12]
  result->pre_zero = pre_zero;
 801c2b4:	693b      	ldr	r3, [r7, #16]
 801c2b6:	687a      	ldr	r2, [r7, #4]
 801c2b8:	621a      	str	r2, [r3, #32]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801c2ba:	693b      	ldr	r3, [r7, #16]
 801c2bc:	2200      	movs	r2, #0
 801c2be:	629a      	str	r2, [r3, #40]	; 0x28
  result->next = mem->virt_sarray_list; /* add to list of virtual arrays */
 801c2c0:	697b      	ldr	r3, [r7, #20]
 801c2c2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801c2c4:	693b      	ldr	r3, [r7, #16]
 801c2c6:	62da      	str	r2, [r3, #44]	; 0x2c
  mem->virt_sarray_list = result;
 801c2c8:	697b      	ldr	r3, [r7, #20]
 801c2ca:	693a      	ldr	r2, [r7, #16]
 801c2cc:	645a      	str	r2, [r3, #68]	; 0x44

  return result;
 801c2ce:	693b      	ldr	r3, [r7, #16]
}
 801c2d0:	4618      	mov	r0, r3
 801c2d2:	3718      	adds	r7, #24
 801c2d4:	46bd      	mov	sp, r7
 801c2d6:	bd80      	pop	{r7, pc}

0801c2d8 <request_virt_barray>:
METHODDEF(jvirt_barray_ptr)
request_virt_barray (j_common_ptr cinfo, int pool_id, boolean pre_zero,
		     JDIMENSION blocksperrow, JDIMENSION numrows,
		     JDIMENSION maxaccess)
/* Request a virtual 2-D coefficient-block array */
{
 801c2d8:	b580      	push	{r7, lr}
 801c2da:	b086      	sub	sp, #24
 801c2dc:	af00      	add	r7, sp, #0
 801c2de:	60f8      	str	r0, [r7, #12]
 801c2e0:	60b9      	str	r1, [r7, #8]
 801c2e2:	607a      	str	r2, [r7, #4]
 801c2e4:	603b      	str	r3, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801c2e6:	68fb      	ldr	r3, [r7, #12]
 801c2e8:	685b      	ldr	r3, [r3, #4]
 801c2ea:	617b      	str	r3, [r7, #20]
  jvirt_barray_ptr result;

  /* Only IMAGE-lifetime virtual arrays are currently supported */
  if (pool_id != JPOOL_IMAGE)
 801c2ec:	68bb      	ldr	r3, [r7, #8]
 801c2ee:	2b01      	cmp	r3, #1
 801c2f0:	d00c      	beq.n	801c30c <request_virt_barray+0x34>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801c2f2:	68fb      	ldr	r3, [r7, #12]
 801c2f4:	681b      	ldr	r3, [r3, #0]
 801c2f6:	220f      	movs	r2, #15
 801c2f8:	615a      	str	r2, [r3, #20]
 801c2fa:	68fb      	ldr	r3, [r7, #12]
 801c2fc:	681b      	ldr	r3, [r3, #0]
 801c2fe:	68ba      	ldr	r2, [r7, #8]
 801c300:	619a      	str	r2, [r3, #24]
 801c302:	68fb      	ldr	r3, [r7, #12]
 801c304:	681b      	ldr	r3, [r3, #0]
 801c306:	681b      	ldr	r3, [r3, #0]
 801c308:	68f8      	ldr	r0, [r7, #12]
 801c30a:	4798      	blx	r3

  /* get control block */
  result = (jvirt_barray_ptr) alloc_small(cinfo, pool_id,
 801c30c:	223c      	movs	r2, #60	; 0x3c
 801c30e:	68b9      	ldr	r1, [r7, #8]
 801c310:	68f8      	ldr	r0, [r7, #12]
 801c312:	f7ff fdb7 	bl	801be84 <alloc_small>
 801c316:	6138      	str	r0, [r7, #16]
					  SIZEOF(struct jvirt_barray_control));

  result->mem_buffer = NULL;	/* marks array not yet realized */
 801c318:	693b      	ldr	r3, [r7, #16]
 801c31a:	2200      	movs	r2, #0
 801c31c:	601a      	str	r2, [r3, #0]
  result->rows_in_array = numrows;
 801c31e:	693b      	ldr	r3, [r7, #16]
 801c320:	6a3a      	ldr	r2, [r7, #32]
 801c322:	605a      	str	r2, [r3, #4]
  result->blocksperrow = blocksperrow;
 801c324:	693b      	ldr	r3, [r7, #16]
 801c326:	683a      	ldr	r2, [r7, #0]
 801c328:	609a      	str	r2, [r3, #8]
  result->maxaccess = maxaccess;
 801c32a:	693b      	ldr	r3, [r7, #16]
 801c32c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c32e:	60da      	str	r2, [r3, #12]
  result->pre_zero = pre_zero;
 801c330:	693b      	ldr	r3, [r7, #16]
 801c332:	687a      	ldr	r2, [r7, #4]
 801c334:	621a      	str	r2, [r3, #32]
  result->b_s_open = FALSE;	/* no associated backing-store object */
 801c336:	693b      	ldr	r3, [r7, #16]
 801c338:	2200      	movs	r2, #0
 801c33a:	629a      	str	r2, [r3, #40]	; 0x28
  result->next = mem->virt_barray_list; /* add to list of virtual arrays */
 801c33c:	697b      	ldr	r3, [r7, #20]
 801c33e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801c340:	693b      	ldr	r3, [r7, #16]
 801c342:	62da      	str	r2, [r3, #44]	; 0x2c
  mem->virt_barray_list = result;
 801c344:	697b      	ldr	r3, [r7, #20]
 801c346:	693a      	ldr	r2, [r7, #16]
 801c348:	649a      	str	r2, [r3, #72]	; 0x48

  return result;
 801c34a:	693b      	ldr	r3, [r7, #16]
}
 801c34c:	4618      	mov	r0, r3
 801c34e:	3718      	adds	r7, #24
 801c350:	46bd      	mov	sp, r7
 801c352:	bd80      	pop	{r7, pc}

0801c354 <realize_virt_arrays>:


METHODDEF(void)
realize_virt_arrays (j_common_ptr cinfo)
/* Allocate the in-memory buffers for any unrealized virtual arrays */
{
 801c354:	b580      	push	{r7, lr}
 801c356:	b08a      	sub	sp, #40	; 0x28
 801c358:	af00      	add	r7, sp, #0
 801c35a:	6078      	str	r0, [r7, #4]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801c35c:	687b      	ldr	r3, [r7, #4]
 801c35e:	685b      	ldr	r3, [r3, #4]
 801c360:	613b      	str	r3, [r7, #16]

  /* Compute the minimum space needed (maxaccess rows in each buffer)
   * and the maximum space needed (full image height in each buffer).
   * These may be of use to the system-dependent jpeg_mem_available routine.
   */
  space_per_minheight = 0;
 801c362:	2300      	movs	r3, #0
 801c364:	627b      	str	r3, [r7, #36]	; 0x24
  maximum_space = 0;
 801c366:	2300      	movs	r3, #0
 801c368:	623b      	str	r3, [r7, #32]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801c36a:	693b      	ldr	r3, [r7, #16]
 801c36c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c36e:	61bb      	str	r3, [r7, #24]
 801c370:	e01c      	b.n	801c3ac <realize_virt_arrays+0x58>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 801c372:	69bb      	ldr	r3, [r7, #24]
 801c374:	681b      	ldr	r3, [r3, #0]
 801c376:	2b00      	cmp	r3, #0
 801c378:	d115      	bne.n	801c3a6 <realize_virt_arrays+0x52>
      space_per_minheight += (long) sptr->maxaccess *
 801c37a:	69bb      	ldr	r3, [r7, #24]
 801c37c:	68db      	ldr	r3, [r3, #12]
 801c37e:	461a      	mov	r2, r3
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 801c380:	69bb      	ldr	r3, [r7, #24]
 801c382:	689b      	ldr	r3, [r3, #8]
      space_per_minheight += (long) sptr->maxaccess *
 801c384:	fb03 f302 	mul.w	r3, r3, r2
			     (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 801c388:	461a      	mov	r2, r3
      space_per_minheight += (long) sptr->maxaccess *
 801c38a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c38c:	4413      	add	r3, r2
 801c38e:	627b      	str	r3, [r7, #36]	; 0x24
      maximum_space += (long) sptr->rows_in_array *
 801c390:	69bb      	ldr	r3, [r7, #24]
 801c392:	685b      	ldr	r3, [r3, #4]
 801c394:	461a      	mov	r2, r3
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 801c396:	69bb      	ldr	r3, [r7, #24]
 801c398:	689b      	ldr	r3, [r3, #8]
      maximum_space += (long) sptr->rows_in_array *
 801c39a:	fb03 f302 	mul.w	r3, r3, r2
		       (long) sptr->samplesperrow * SIZEOF(JSAMPLE);
 801c39e:	461a      	mov	r2, r3
      maximum_space += (long) sptr->rows_in_array *
 801c3a0:	6a3b      	ldr	r3, [r7, #32]
 801c3a2:	4413      	add	r3, r2
 801c3a4:	623b      	str	r3, [r7, #32]
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801c3a6:	69bb      	ldr	r3, [r7, #24]
 801c3a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3aa:	61bb      	str	r3, [r7, #24]
 801c3ac:	69bb      	ldr	r3, [r7, #24]
 801c3ae:	2b00      	cmp	r3, #0
 801c3b0:	d1df      	bne.n	801c372 <realize_virt_arrays+0x1e>
    }
  }
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801c3b2:	693b      	ldr	r3, [r7, #16]
 801c3b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c3b6:	617b      	str	r3, [r7, #20]
 801c3b8:	e01c      	b.n	801c3f4 <realize_virt_arrays+0xa0>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 801c3ba:	697b      	ldr	r3, [r7, #20]
 801c3bc:	681b      	ldr	r3, [r3, #0]
 801c3be:	2b00      	cmp	r3, #0
 801c3c0:	d115      	bne.n	801c3ee <realize_virt_arrays+0x9a>
      space_per_minheight += (long) bptr->maxaccess *
 801c3c2:	697b      	ldr	r3, [r7, #20]
 801c3c4:	68db      	ldr	r3, [r3, #12]
 801c3c6:	461a      	mov	r2, r3
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 801c3c8:	697b      	ldr	r3, [r7, #20]
 801c3ca:	689b      	ldr	r3, [r3, #8]
      space_per_minheight += (long) bptr->maxaccess *
 801c3cc:	fb03 f302 	mul.w	r3, r3, r2
			     (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 801c3d0:	01da      	lsls	r2, r3, #7
      space_per_minheight += (long) bptr->maxaccess *
 801c3d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3d4:	4413      	add	r3, r2
 801c3d6:	627b      	str	r3, [r7, #36]	; 0x24
      maximum_space += (long) bptr->rows_in_array *
 801c3d8:	697b      	ldr	r3, [r7, #20]
 801c3da:	685b      	ldr	r3, [r3, #4]
 801c3dc:	461a      	mov	r2, r3
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 801c3de:	697b      	ldr	r3, [r7, #20]
 801c3e0:	689b      	ldr	r3, [r3, #8]
      maximum_space += (long) bptr->rows_in_array *
 801c3e2:	fb03 f302 	mul.w	r3, r3, r2
		       (long) bptr->blocksperrow * SIZEOF(JBLOCK);
 801c3e6:	01da      	lsls	r2, r3, #7
      maximum_space += (long) bptr->rows_in_array *
 801c3e8:	6a3b      	ldr	r3, [r7, #32]
 801c3ea:	4413      	add	r3, r2
 801c3ec:	623b      	str	r3, [r7, #32]
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801c3ee:	697b      	ldr	r3, [r7, #20]
 801c3f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c3f2:	617b      	str	r3, [r7, #20]
 801c3f4:	697b      	ldr	r3, [r7, #20]
 801c3f6:	2b00      	cmp	r3, #0
 801c3f8:	d1df      	bne.n	801c3ba <realize_virt_arrays+0x66>
    }
  }

  if (space_per_minheight <= 0)
 801c3fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c3fc:	2b00      	cmp	r3, #0
 801c3fe:	f340 80bd 	ble.w	801c57c <realize_virt_arrays+0x228>
    return;			/* no unrealized arrays, no work */

  /* Determine amount of memory to actually use; this is system-dependent. */
  avail_mem = jpeg_mem_available(cinfo, space_per_minheight, maximum_space,
 801c402:	693b      	ldr	r3, [r7, #16]
 801c404:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801c406:	6a3a      	ldr	r2, [r7, #32]
 801c408:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c40a:	6878      	ldr	r0, [r7, #4]
 801c40c:	f000 fcdc 	bl	801cdc8 <jpeg_mem_available>
 801c410:	60f8      	str	r0, [r7, #12]

  /* If the maximum space needed is available, make all the buffers full
   * height; otherwise parcel it out with the same number of minheights
   * in each buffer.
   */
  if (avail_mem >= maximum_space)
 801c412:	68fa      	ldr	r2, [r7, #12]
 801c414:	6a3b      	ldr	r3, [r7, #32]
 801c416:	429a      	cmp	r2, r3
 801c418:	db02      	blt.n	801c420 <realize_virt_arrays+0xcc>
    max_minheights = 1000000000L;
 801c41a:	4b5a      	ldr	r3, [pc, #360]	; (801c584 <realize_virt_arrays+0x230>)
 801c41c:	61fb      	str	r3, [r7, #28]
 801c41e:	e009      	b.n	801c434 <realize_virt_arrays+0xe0>
  else {
    max_minheights = avail_mem / space_per_minheight;
 801c420:	68fa      	ldr	r2, [r7, #12]
 801c422:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c424:	fb92 f3f3 	sdiv	r3, r2, r3
 801c428:	61fb      	str	r3, [r7, #28]
    /* If there doesn't seem to be enough space, try to get the minimum
     * anyway.  This allows a "stub" implementation of jpeg_mem_available().
     */
    if (max_minheights <= 0)
 801c42a:	69fb      	ldr	r3, [r7, #28]
 801c42c:	2b00      	cmp	r3, #0
 801c42e:	dc01      	bgt.n	801c434 <realize_virt_arrays+0xe0>
      max_minheights = 1;
 801c430:	2301      	movs	r3, #1
 801c432:	61fb      	str	r3, [r7, #28]
  }

  /* Allocate the in-memory buffers and initialize backing store as needed. */

  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801c434:	693b      	ldr	r3, [r7, #16]
 801c436:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801c438:	61bb      	str	r3, [r7, #24]
 801c43a:	e049      	b.n	801c4d0 <realize_virt_arrays+0x17c>
    if (sptr->mem_buffer == NULL) { /* if not realized yet */
 801c43c:	69bb      	ldr	r3, [r7, #24]
 801c43e:	681b      	ldr	r3, [r3, #0]
 801c440:	2b00      	cmp	r3, #0
 801c442:	d142      	bne.n	801c4ca <realize_virt_arrays+0x176>
      minheights = ((long) sptr->rows_in_array - 1L) / sptr->maxaccess + 1L;
 801c444:	69bb      	ldr	r3, [r7, #24]
 801c446:	685b      	ldr	r3, [r3, #4]
 801c448:	3b01      	subs	r3, #1
 801c44a:	461a      	mov	r2, r3
 801c44c:	69bb      	ldr	r3, [r7, #24]
 801c44e:	68db      	ldr	r3, [r3, #12]
 801c450:	fbb2 f3f3 	udiv	r3, r2, r3
 801c454:	3301      	adds	r3, #1
 801c456:	60bb      	str	r3, [r7, #8]
      if (minheights <= max_minheights) {
 801c458:	68ba      	ldr	r2, [r7, #8]
 801c45a:	69fb      	ldr	r3, [r7, #28]
 801c45c:	429a      	cmp	r2, r3
 801c45e:	dc04      	bgt.n	801c46a <realize_virt_arrays+0x116>
	/* This buffer fits in memory */
	sptr->rows_in_mem = sptr->rows_in_array;
 801c460:	69bb      	ldr	r3, [r7, #24]
 801c462:	685a      	ldr	r2, [r3, #4]
 801c464:	69bb      	ldr	r3, [r7, #24]
 801c466:	611a      	str	r2, [r3, #16]
 801c468:	e017      	b.n	801c49a <realize_virt_arrays+0x146>
      } else {
	/* It doesn't fit in memory, create backing store. */
	sptr->rows_in_mem = (JDIMENSION) (max_minheights * sptr->maxaccess);
 801c46a:	69bb      	ldr	r3, [r7, #24]
 801c46c:	68db      	ldr	r3, [r3, #12]
 801c46e:	69fa      	ldr	r2, [r7, #28]
 801c470:	fb02 f203 	mul.w	r2, r2, r3
 801c474:	69bb      	ldr	r3, [r7, #24]
 801c476:	611a      	str	r2, [r3, #16]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801c478:	69bb      	ldr	r3, [r7, #24]
 801c47a:	f103 0130 	add.w	r1, r3, #48	; 0x30
				(long) sptr->rows_in_array *
 801c47e:	69bb      	ldr	r3, [r7, #24]
 801c480:	685b      	ldr	r3, [r3, #4]
 801c482:	461a      	mov	r2, r3
				(long) sptr->samplesperrow *
 801c484:	69bb      	ldr	r3, [r7, #24]
 801c486:	689b      	ldr	r3, [r3, #8]
	jpeg_open_backing_store(cinfo, & sptr->b_s_info,
 801c488:	fb03 f302 	mul.w	r3, r3, r2
 801c48c:	461a      	mov	r2, r3
 801c48e:	6878      	ldr	r0, [r7, #4]
 801c490:	f000 fca8 	bl	801cde4 <jpeg_open_backing_store>
				(long) SIZEOF(JSAMPLE));
	sptr->b_s_open = TRUE;
 801c494:	69bb      	ldr	r3, [r7, #24]
 801c496:	2201      	movs	r2, #1
 801c498:	629a      	str	r2, [r3, #40]	; 0x28
      }
      sptr->mem_buffer = alloc_sarray(cinfo, JPOOL_IMAGE,
 801c49a:	69bb      	ldr	r3, [r7, #24]
 801c49c:	689a      	ldr	r2, [r3, #8]
 801c49e:	69bb      	ldr	r3, [r7, #24]
 801c4a0:	691b      	ldr	r3, [r3, #16]
 801c4a2:	2101      	movs	r1, #1
 801c4a4:	6878      	ldr	r0, [r7, #4]
 801c4a6:	f7ff fe10 	bl	801c0ca <alloc_sarray>
 801c4aa:	4602      	mov	r2, r0
 801c4ac:	69bb      	ldr	r3, [r7, #24]
 801c4ae:	601a      	str	r2, [r3, #0]
				      sptr->samplesperrow, sptr->rows_in_mem);
      sptr->rowsperchunk = mem->last_rowsperchunk;
 801c4b0:	693b      	ldr	r3, [r7, #16]
 801c4b2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c4b4:	69bb      	ldr	r3, [r7, #24]
 801c4b6:	615a      	str	r2, [r3, #20]
      sptr->cur_start_row = 0;
 801c4b8:	69bb      	ldr	r3, [r7, #24]
 801c4ba:	2200      	movs	r2, #0
 801c4bc:	619a      	str	r2, [r3, #24]
      sptr->first_undef_row = 0;
 801c4be:	69bb      	ldr	r3, [r7, #24]
 801c4c0:	2200      	movs	r2, #0
 801c4c2:	61da      	str	r2, [r3, #28]
      sptr->dirty = FALSE;
 801c4c4:	69bb      	ldr	r3, [r7, #24]
 801c4c6:	2200      	movs	r2, #0
 801c4c8:	625a      	str	r2, [r3, #36]	; 0x24
  for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801c4ca:	69bb      	ldr	r3, [r7, #24]
 801c4cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c4ce:	61bb      	str	r3, [r7, #24]
 801c4d0:	69bb      	ldr	r3, [r7, #24]
 801c4d2:	2b00      	cmp	r3, #0
 801c4d4:	d1b2      	bne.n	801c43c <realize_virt_arrays+0xe8>
    }
  }

  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801c4d6:	693b      	ldr	r3, [r7, #16]
 801c4d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c4da:	617b      	str	r3, [r7, #20]
 801c4dc:	e04a      	b.n	801c574 <realize_virt_arrays+0x220>
    if (bptr->mem_buffer == NULL) { /* if not realized yet */
 801c4de:	697b      	ldr	r3, [r7, #20]
 801c4e0:	681b      	ldr	r3, [r3, #0]
 801c4e2:	2b00      	cmp	r3, #0
 801c4e4:	d143      	bne.n	801c56e <realize_virt_arrays+0x21a>
      minheights = ((long) bptr->rows_in_array - 1L) / bptr->maxaccess + 1L;
 801c4e6:	697b      	ldr	r3, [r7, #20]
 801c4e8:	685b      	ldr	r3, [r3, #4]
 801c4ea:	3b01      	subs	r3, #1
 801c4ec:	461a      	mov	r2, r3
 801c4ee:	697b      	ldr	r3, [r7, #20]
 801c4f0:	68db      	ldr	r3, [r3, #12]
 801c4f2:	fbb2 f3f3 	udiv	r3, r2, r3
 801c4f6:	3301      	adds	r3, #1
 801c4f8:	60bb      	str	r3, [r7, #8]
      if (minheights <= max_minheights) {
 801c4fa:	68ba      	ldr	r2, [r7, #8]
 801c4fc:	69fb      	ldr	r3, [r7, #28]
 801c4fe:	429a      	cmp	r2, r3
 801c500:	dc04      	bgt.n	801c50c <realize_virt_arrays+0x1b8>
	/* This buffer fits in memory */
	bptr->rows_in_mem = bptr->rows_in_array;
 801c502:	697b      	ldr	r3, [r7, #20]
 801c504:	685a      	ldr	r2, [r3, #4]
 801c506:	697b      	ldr	r3, [r7, #20]
 801c508:	611a      	str	r2, [r3, #16]
 801c50a:	e018      	b.n	801c53e <realize_virt_arrays+0x1ea>
      } else {
	/* It doesn't fit in memory, create backing store. */
	bptr->rows_in_mem = (JDIMENSION) (max_minheights * bptr->maxaccess);
 801c50c:	697b      	ldr	r3, [r7, #20]
 801c50e:	68db      	ldr	r3, [r3, #12]
 801c510:	69fa      	ldr	r2, [r7, #28]
 801c512:	fb02 f203 	mul.w	r2, r2, r3
 801c516:	697b      	ldr	r3, [r7, #20]
 801c518:	611a      	str	r2, [r3, #16]
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 801c51a:	697b      	ldr	r3, [r7, #20]
 801c51c:	f103 0130 	add.w	r1, r3, #48	; 0x30
				(long) bptr->rows_in_array *
 801c520:	697b      	ldr	r3, [r7, #20]
 801c522:	685b      	ldr	r3, [r3, #4]
 801c524:	461a      	mov	r2, r3
				(long) bptr->blocksperrow *
 801c526:	697b      	ldr	r3, [r7, #20]
 801c528:	689b      	ldr	r3, [r3, #8]
				(long) bptr->rows_in_array *
 801c52a:	fb03 f302 	mul.w	r3, r3, r2
	jpeg_open_backing_store(cinfo, & bptr->b_s_info,
 801c52e:	01db      	lsls	r3, r3, #7
 801c530:	461a      	mov	r2, r3
 801c532:	6878      	ldr	r0, [r7, #4]
 801c534:	f000 fc56 	bl	801cde4 <jpeg_open_backing_store>
				(long) SIZEOF(JBLOCK));
	bptr->b_s_open = TRUE;
 801c538:	697b      	ldr	r3, [r7, #20]
 801c53a:	2201      	movs	r2, #1
 801c53c:	629a      	str	r2, [r3, #40]	; 0x28
      }
      bptr->mem_buffer = alloc_barray(cinfo, JPOOL_IMAGE,
 801c53e:	697b      	ldr	r3, [r7, #20]
 801c540:	689a      	ldr	r2, [r3, #8]
 801c542:	697b      	ldr	r3, [r7, #20]
 801c544:	691b      	ldr	r3, [r3, #16]
 801c546:	2101      	movs	r1, #1
 801c548:	6878      	ldr	r0, [r7, #4]
 801c54a:	f7ff fe21 	bl	801c190 <alloc_barray>
 801c54e:	4602      	mov	r2, r0
 801c550:	697b      	ldr	r3, [r7, #20]
 801c552:	601a      	str	r2, [r3, #0]
				      bptr->blocksperrow, bptr->rows_in_mem);
      bptr->rowsperchunk = mem->last_rowsperchunk;
 801c554:	693b      	ldr	r3, [r7, #16]
 801c556:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801c558:	697b      	ldr	r3, [r7, #20]
 801c55a:	615a      	str	r2, [r3, #20]
      bptr->cur_start_row = 0;
 801c55c:	697b      	ldr	r3, [r7, #20]
 801c55e:	2200      	movs	r2, #0
 801c560:	619a      	str	r2, [r3, #24]
      bptr->first_undef_row = 0;
 801c562:	697b      	ldr	r3, [r7, #20]
 801c564:	2200      	movs	r2, #0
 801c566:	61da      	str	r2, [r3, #28]
      bptr->dirty = FALSE;
 801c568:	697b      	ldr	r3, [r7, #20]
 801c56a:	2200      	movs	r2, #0
 801c56c:	625a      	str	r2, [r3, #36]	; 0x24
  for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801c56e:	697b      	ldr	r3, [r7, #20]
 801c570:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801c572:	617b      	str	r3, [r7, #20]
 801c574:	697b      	ldr	r3, [r7, #20]
 801c576:	2b00      	cmp	r3, #0
 801c578:	d1b1      	bne.n	801c4de <realize_virt_arrays+0x18a>
 801c57a:	e000      	b.n	801c57e <realize_virt_arrays+0x22a>
    return;			/* no unrealized arrays, no work */
 801c57c:	bf00      	nop
    }
  }
}
 801c57e:	3728      	adds	r7, #40	; 0x28
 801c580:	46bd      	mov	sp, r7
 801c582:	bd80      	pop	{r7, pc}
 801c584:	3b9aca00 	.word	0x3b9aca00

0801c588 <do_sarray_io>:


LOCAL(void)
do_sarray_io (j_common_ptr cinfo, jvirt_sarray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual sample array */
{
 801c588:	b590      	push	{r4, r7, lr}
 801c58a:	b08d      	sub	sp, #52	; 0x34
 801c58c:	af02      	add	r7, sp, #8
 801c58e:	60f8      	str	r0, [r7, #12]
 801c590:	60b9      	str	r1, [r7, #8]
 801c592:	607a      	str	r2, [r7, #4]
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801c594:	68bb      	ldr	r3, [r7, #8]
 801c596:	689b      	ldr	r3, [r3, #8]
 801c598:	61fb      	str	r3, [r7, #28]
  file_offset = ptr->cur_start_row * bytesperrow;
 801c59a:	68bb      	ldr	r3, [r7, #8]
 801c59c:	699b      	ldr	r3, [r3, #24]
 801c59e:	69fa      	ldr	r2, [r7, #28]
 801c5a0:	fb02 f303 	mul.w	r3, r2, r3
 801c5a4:	627b      	str	r3, [r7, #36]	; 0x24
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801c5a6:	2300      	movs	r3, #0
 801c5a8:	623b      	str	r3, [r7, #32]
 801c5aa:	e059      	b.n	801c660 <do_sarray_io+0xd8>
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801c5ac:	68bb      	ldr	r3, [r7, #8]
 801c5ae:	691b      	ldr	r3, [r3, #16]
 801c5b0:	461a      	mov	r2, r3
 801c5b2:	6a3b      	ldr	r3, [r7, #32]
 801c5b4:	1ad3      	subs	r3, r2, r3
 801c5b6:	68ba      	ldr	r2, [r7, #8]
 801c5b8:	6952      	ldr	r2, [r2, #20]
 801c5ba:	4293      	cmp	r3, r2
 801c5bc:	bfa8      	it	ge
 801c5be:	4613      	movge	r3, r2
 801c5c0:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
 801c5c2:	68bb      	ldr	r3, [r7, #8]
 801c5c4:	699b      	ldr	r3, [r3, #24]
 801c5c6:	461a      	mov	r2, r3
 801c5c8:	6a3b      	ldr	r3, [r7, #32]
 801c5ca:	4413      	add	r3, r2
 801c5cc:	617b      	str	r3, [r7, #20]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801c5ce:	68bb      	ldr	r3, [r7, #8]
 801c5d0:	69db      	ldr	r3, [r3, #28]
 801c5d2:	461a      	mov	r2, r3
 801c5d4:	697b      	ldr	r3, [r7, #20]
 801c5d6:	1ad3      	subs	r3, r2, r3
 801c5d8:	69ba      	ldr	r2, [r7, #24]
 801c5da:	4293      	cmp	r3, r2
 801c5dc:	bfa8      	it	ge
 801c5de:	4613      	movge	r3, r2
 801c5e0:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801c5e2:	68bb      	ldr	r3, [r7, #8]
 801c5e4:	685b      	ldr	r3, [r3, #4]
 801c5e6:	461a      	mov	r2, r3
 801c5e8:	697b      	ldr	r3, [r7, #20]
 801c5ea:	1ad3      	subs	r3, r2, r3
 801c5ec:	69ba      	ldr	r2, [r7, #24]
 801c5ee:	4293      	cmp	r3, r2
 801c5f0:	bfa8      	it	ge
 801c5f2:	4613      	movge	r3, r2
 801c5f4:	61bb      	str	r3, [r7, #24]
    if (rows <= 0)		/* this chunk might be past end of file! */
 801c5f6:	69bb      	ldr	r3, [r7, #24]
 801c5f8:	2b00      	cmp	r3, #0
 801c5fa:	dd38      	ble.n	801c66e <do_sarray_io+0xe6>
      break;
    byte_count = rows * bytesperrow;
 801c5fc:	69bb      	ldr	r3, [r7, #24]
 801c5fe:	69fa      	ldr	r2, [r7, #28]
 801c600:	fb02 f303 	mul.w	r3, r2, r3
 801c604:	613b      	str	r3, [r7, #16]
    if (writing)
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	2b00      	cmp	r3, #0
 801c60a:	d010      	beq.n	801c62e <do_sarray_io+0xa6>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801c60c:	68bb      	ldr	r3, [r7, #8]
 801c60e:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801c610:	68bb      	ldr	r3, [r7, #8]
 801c612:	f103 0130 	add.w	r1, r3, #48	; 0x30
					    (void FAR *) ptr->mem_buffer[i],
 801c616:	68bb      	ldr	r3, [r7, #8]
 801c618:	681a      	ldr	r2, [r3, #0]
 801c61a:	6a3b      	ldr	r3, [r7, #32]
 801c61c:	009b      	lsls	r3, r3, #2
 801c61e:	4413      	add	r3, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801c620:	681a      	ldr	r2, [r3, #0]
 801c622:	693b      	ldr	r3, [r7, #16]
 801c624:	9300      	str	r3, [sp, #0]
 801c626:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c628:	68f8      	ldr	r0, [r7, #12]
 801c62a:	47a0      	blx	r4
 801c62c:	e00f      	b.n	801c64e <do_sarray_io+0xc6>
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801c62e:	68bb      	ldr	r3, [r7, #8]
 801c630:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 801c632:	68bb      	ldr	r3, [r7, #8]
 801c634:	f103 0130 	add.w	r1, r3, #48	; 0x30
					   (void FAR *) ptr->mem_buffer[i],
 801c638:	68bb      	ldr	r3, [r7, #8]
 801c63a:	681a      	ldr	r2, [r3, #0]
 801c63c:	6a3b      	ldr	r3, [r7, #32]
 801c63e:	009b      	lsls	r3, r3, #2
 801c640:	4413      	add	r3, r2
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801c642:	681a      	ldr	r2, [r3, #0]
 801c644:	693b      	ldr	r3, [r7, #16]
 801c646:	9300      	str	r3, [sp, #0]
 801c648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c64a:	68f8      	ldr	r0, [r7, #12]
 801c64c:	47a0      	blx	r4
					   file_offset, byte_count);
    file_offset += byte_count;
 801c64e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c650:	693b      	ldr	r3, [r7, #16]
 801c652:	4413      	add	r3, r2
 801c654:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801c656:	68bb      	ldr	r3, [r7, #8]
 801c658:	695a      	ldr	r2, [r3, #20]
 801c65a:	6a3b      	ldr	r3, [r7, #32]
 801c65c:	4413      	add	r3, r2
 801c65e:	623b      	str	r3, [r7, #32]
 801c660:	68bb      	ldr	r3, [r7, #8]
 801c662:	691b      	ldr	r3, [r3, #16]
 801c664:	461a      	mov	r2, r3
 801c666:	6a3b      	ldr	r3, [r7, #32]
 801c668:	4293      	cmp	r3, r2
 801c66a:	db9f      	blt.n	801c5ac <do_sarray_io+0x24>
  }
}
 801c66c:	e000      	b.n	801c670 <do_sarray_io+0xe8>
      break;
 801c66e:	bf00      	nop
}
 801c670:	bf00      	nop
 801c672:	372c      	adds	r7, #44	; 0x2c
 801c674:	46bd      	mov	sp, r7
 801c676:	bd90      	pop	{r4, r7, pc}

0801c678 <do_barray_io>:


LOCAL(void)
do_barray_io (j_common_ptr cinfo, jvirt_barray_ptr ptr, boolean writing)
/* Do backing store read or write of a virtual coefficient-block array */
{
 801c678:	b590      	push	{r4, r7, lr}
 801c67a:	b08d      	sub	sp, #52	; 0x34
 801c67c:	af02      	add	r7, sp, #8
 801c67e:	60f8      	str	r0, [r7, #12]
 801c680:	60b9      	str	r1, [r7, #8]
 801c682:	607a      	str	r2, [r7, #4]
  long bytesperrow, file_offset, byte_count, rows, thisrow, i;

  bytesperrow = (long) ptr->blocksperrow * SIZEOF(JBLOCK);
 801c684:	68bb      	ldr	r3, [r7, #8]
 801c686:	689b      	ldr	r3, [r3, #8]
 801c688:	01db      	lsls	r3, r3, #7
 801c68a:	61fb      	str	r3, [r7, #28]
  file_offset = ptr->cur_start_row * bytesperrow;
 801c68c:	68bb      	ldr	r3, [r7, #8]
 801c68e:	699b      	ldr	r3, [r3, #24]
 801c690:	69fa      	ldr	r2, [r7, #28]
 801c692:	fb02 f303 	mul.w	r3, r2, r3
 801c696:	627b      	str	r3, [r7, #36]	; 0x24
  /* Loop to read or write each allocation chunk in mem_buffer */
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801c698:	2300      	movs	r3, #0
 801c69a:	623b      	str	r3, [r7, #32]
 801c69c:	e059      	b.n	801c752 <do_barray_io+0xda>
    /* One chunk, but check for short chunk at end of buffer */
    rows = MIN((long) ptr->rowsperchunk, (long) ptr->rows_in_mem - i);
 801c69e:	68bb      	ldr	r3, [r7, #8]
 801c6a0:	691b      	ldr	r3, [r3, #16]
 801c6a2:	461a      	mov	r2, r3
 801c6a4:	6a3b      	ldr	r3, [r7, #32]
 801c6a6:	1ad3      	subs	r3, r2, r3
 801c6a8:	68ba      	ldr	r2, [r7, #8]
 801c6aa:	6952      	ldr	r2, [r2, #20]
 801c6ac:	4293      	cmp	r3, r2
 801c6ae:	bfa8      	it	ge
 801c6b0:	4613      	movge	r3, r2
 801c6b2:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than is currently defined */
    thisrow = (long) ptr->cur_start_row + i;
 801c6b4:	68bb      	ldr	r3, [r7, #8]
 801c6b6:	699b      	ldr	r3, [r3, #24]
 801c6b8:	461a      	mov	r2, r3
 801c6ba:	6a3b      	ldr	r3, [r7, #32]
 801c6bc:	4413      	add	r3, r2
 801c6be:	617b      	str	r3, [r7, #20]
    rows = MIN(rows, (long) ptr->first_undef_row - thisrow);
 801c6c0:	68bb      	ldr	r3, [r7, #8]
 801c6c2:	69db      	ldr	r3, [r3, #28]
 801c6c4:	461a      	mov	r2, r3
 801c6c6:	697b      	ldr	r3, [r7, #20]
 801c6c8:	1ad3      	subs	r3, r2, r3
 801c6ca:	69ba      	ldr	r2, [r7, #24]
 801c6cc:	4293      	cmp	r3, r2
 801c6ce:	bfa8      	it	ge
 801c6d0:	4613      	movge	r3, r2
 801c6d2:	61bb      	str	r3, [r7, #24]
    /* Transfer no more than fits in file */
    rows = MIN(rows, (long) ptr->rows_in_array - thisrow);
 801c6d4:	68bb      	ldr	r3, [r7, #8]
 801c6d6:	685b      	ldr	r3, [r3, #4]
 801c6d8:	461a      	mov	r2, r3
 801c6da:	697b      	ldr	r3, [r7, #20]
 801c6dc:	1ad3      	subs	r3, r2, r3
 801c6de:	69ba      	ldr	r2, [r7, #24]
 801c6e0:	4293      	cmp	r3, r2
 801c6e2:	bfa8      	it	ge
 801c6e4:	4613      	movge	r3, r2
 801c6e6:	61bb      	str	r3, [r7, #24]
    if (rows <= 0)		/* this chunk might be past end of file! */
 801c6e8:	69bb      	ldr	r3, [r7, #24]
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	dd38      	ble.n	801c760 <do_barray_io+0xe8>
      break;
    byte_count = rows * bytesperrow;
 801c6ee:	69bb      	ldr	r3, [r7, #24]
 801c6f0:	69fa      	ldr	r2, [r7, #28]
 801c6f2:	fb02 f303 	mul.w	r3, r2, r3
 801c6f6:	613b      	str	r3, [r7, #16]
    if (writing)
 801c6f8:	687b      	ldr	r3, [r7, #4]
 801c6fa:	2b00      	cmp	r3, #0
 801c6fc:	d010      	beq.n	801c720 <do_barray_io+0xa8>
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801c6fe:	68bb      	ldr	r3, [r7, #8]
 801c700:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 801c702:	68bb      	ldr	r3, [r7, #8]
 801c704:	f103 0130 	add.w	r1, r3, #48	; 0x30
					    (void FAR *) ptr->mem_buffer[i],
 801c708:	68bb      	ldr	r3, [r7, #8]
 801c70a:	681a      	ldr	r2, [r3, #0]
 801c70c:	6a3b      	ldr	r3, [r7, #32]
 801c70e:	009b      	lsls	r3, r3, #2
 801c710:	4413      	add	r3, r2
      (*ptr->b_s_info.write_backing_store) (cinfo, & ptr->b_s_info,
 801c712:	681a      	ldr	r2, [r3, #0]
 801c714:	693b      	ldr	r3, [r7, #16]
 801c716:	9300      	str	r3, [sp, #0]
 801c718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c71a:	68f8      	ldr	r0, [r7, #12]
 801c71c:	47a0      	blx	r4
 801c71e:	e00f      	b.n	801c740 <do_barray_io+0xc8>
					    file_offset, byte_count);
    else
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801c720:	68bb      	ldr	r3, [r7, #8]
 801c722:	6b1c      	ldr	r4, [r3, #48]	; 0x30
 801c724:	68bb      	ldr	r3, [r7, #8]
 801c726:	f103 0130 	add.w	r1, r3, #48	; 0x30
					   (void FAR *) ptr->mem_buffer[i],
 801c72a:	68bb      	ldr	r3, [r7, #8]
 801c72c:	681a      	ldr	r2, [r3, #0]
 801c72e:	6a3b      	ldr	r3, [r7, #32]
 801c730:	009b      	lsls	r3, r3, #2
 801c732:	4413      	add	r3, r2
      (*ptr->b_s_info.read_backing_store) (cinfo, & ptr->b_s_info,
 801c734:	681a      	ldr	r2, [r3, #0]
 801c736:	693b      	ldr	r3, [r7, #16]
 801c738:	9300      	str	r3, [sp, #0]
 801c73a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c73c:	68f8      	ldr	r0, [r7, #12]
 801c73e:	47a0      	blx	r4
					   file_offset, byte_count);
    file_offset += byte_count;
 801c740:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801c742:	693b      	ldr	r3, [r7, #16]
 801c744:	4413      	add	r3, r2
 801c746:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < (long) ptr->rows_in_mem; i += ptr->rowsperchunk) {
 801c748:	68bb      	ldr	r3, [r7, #8]
 801c74a:	695a      	ldr	r2, [r3, #20]
 801c74c:	6a3b      	ldr	r3, [r7, #32]
 801c74e:	4413      	add	r3, r2
 801c750:	623b      	str	r3, [r7, #32]
 801c752:	68bb      	ldr	r3, [r7, #8]
 801c754:	691b      	ldr	r3, [r3, #16]
 801c756:	461a      	mov	r2, r3
 801c758:	6a3b      	ldr	r3, [r7, #32]
 801c75a:	4293      	cmp	r3, r2
 801c75c:	db9f      	blt.n	801c69e <do_barray_io+0x26>
  }
}
 801c75e:	e000      	b.n	801c762 <do_barray_io+0xea>
      break;
 801c760:	bf00      	nop
}
 801c762:	bf00      	nop
 801c764:	372c      	adds	r7, #44	; 0x2c
 801c766:	46bd      	mov	sp, r7
 801c768:	bd90      	pop	{r4, r7, pc}

0801c76a <access_virt_sarray>:
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual sample array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
 801c76a:	b580      	push	{r7, lr}
 801c76c:	b088      	sub	sp, #32
 801c76e:	af00      	add	r7, sp, #0
 801c770:	60f8      	str	r0, [r7, #12]
 801c772:	60b9      	str	r1, [r7, #8]
 801c774:	607a      	str	r2, [r7, #4]
 801c776:	603b      	str	r3, [r7, #0]
  JDIMENSION end_row = start_row + num_rows;
 801c778:	687a      	ldr	r2, [r7, #4]
 801c77a:	683b      	ldr	r3, [r7, #0]
 801c77c:	4413      	add	r3, r2
 801c77e:	617b      	str	r3, [r7, #20]
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801c780:	68bb      	ldr	r3, [r7, #8]
 801c782:	685b      	ldr	r3, [r3, #4]
 801c784:	697a      	ldr	r2, [r7, #20]
 801c786:	429a      	cmp	r2, r3
 801c788:	d808      	bhi.n	801c79c <access_virt_sarray+0x32>
 801c78a:	68bb      	ldr	r3, [r7, #8]
 801c78c:	68db      	ldr	r3, [r3, #12]
 801c78e:	683a      	ldr	r2, [r7, #0]
 801c790:	429a      	cmp	r2, r3
 801c792:	d803      	bhi.n	801c79c <access_virt_sarray+0x32>
      ptr->mem_buffer == NULL)
 801c794:	68bb      	ldr	r3, [r7, #8]
 801c796:	681b      	ldr	r3, [r3, #0]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801c798:	2b00      	cmp	r3, #0
 801c79a:	d108      	bne.n	801c7ae <access_virt_sarray+0x44>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801c79c:	68fb      	ldr	r3, [r7, #12]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	2217      	movs	r2, #23
 801c7a2:	615a      	str	r2, [r3, #20]
 801c7a4:	68fb      	ldr	r3, [r7, #12]
 801c7a6:	681b      	ldr	r3, [r3, #0]
 801c7a8:	681b      	ldr	r3, [r3, #0]
 801c7aa:	68f8      	ldr	r0, [r7, #12]
 801c7ac:	4798      	blx	r3

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
 801c7ae:	68bb      	ldr	r3, [r7, #8]
 801c7b0:	699b      	ldr	r3, [r3, #24]
 801c7b2:	687a      	ldr	r2, [r7, #4]
 801c7b4:	429a      	cmp	r2, r3
 801c7b6:	d307      	bcc.n	801c7c8 <access_virt_sarray+0x5e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801c7b8:	68bb      	ldr	r3, [r7, #8]
 801c7ba:	699a      	ldr	r2, [r3, #24]
 801c7bc:	68bb      	ldr	r3, [r7, #8]
 801c7be:	691b      	ldr	r3, [r3, #16]
 801c7c0:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801c7c2:	697a      	ldr	r2, [r7, #20]
 801c7c4:	429a      	cmp	r2, r3
 801c7c6:	d933      	bls.n	801c830 <access_virt_sarray+0xc6>
    if (! ptr->b_s_open)
 801c7c8:	68bb      	ldr	r3, [r7, #8]
 801c7ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c7cc:	2b00      	cmp	r3, #0
 801c7ce:	d108      	bne.n	801c7e2 <access_virt_sarray+0x78>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801c7d0:	68fb      	ldr	r3, [r7, #12]
 801c7d2:	681b      	ldr	r3, [r3, #0]
 801c7d4:	2247      	movs	r2, #71	; 0x47
 801c7d6:	615a      	str	r2, [r3, #20]
 801c7d8:	68fb      	ldr	r3, [r7, #12]
 801c7da:	681b      	ldr	r3, [r3, #0]
 801c7dc:	681b      	ldr	r3, [r3, #0]
 801c7de:	68f8      	ldr	r0, [r7, #12]
 801c7e0:	4798      	blx	r3
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
 801c7e2:	68bb      	ldr	r3, [r7, #8]
 801c7e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c7e6:	2b00      	cmp	r3, #0
 801c7e8:	d007      	beq.n	801c7fa <access_virt_sarray+0x90>
      do_sarray_io(cinfo, ptr, TRUE);
 801c7ea:	2201      	movs	r2, #1
 801c7ec:	68b9      	ldr	r1, [r7, #8]
 801c7ee:	68f8      	ldr	r0, [r7, #12]
 801c7f0:	f7ff feca 	bl	801c588 <do_sarray_io>
      ptr->dirty = FALSE;
 801c7f4:	68bb      	ldr	r3, [r7, #8]
 801c7f6:	2200      	movs	r2, #0
 801c7f8:	625a      	str	r2, [r3, #36]	; 0x24
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
 801c7fa:	68bb      	ldr	r3, [r7, #8]
 801c7fc:	699b      	ldr	r3, [r3, #24]
 801c7fe:	687a      	ldr	r2, [r7, #4]
 801c800:	429a      	cmp	r2, r3
 801c802:	d903      	bls.n	801c80c <access_virt_sarray+0xa2>
      ptr->cur_start_row = start_row;
 801c804:	68bb      	ldr	r3, [r7, #8]
 801c806:	687a      	ldr	r2, [r7, #4]
 801c808:	619a      	str	r2, [r3, #24]
 801c80a:	e00c      	b.n	801c826 <access_virt_sarray+0xbc>
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801c80c:	697b      	ldr	r3, [r7, #20]
 801c80e:	68ba      	ldr	r2, [r7, #8]
 801c810:	6912      	ldr	r2, [r2, #16]
 801c812:	1a9b      	subs	r3, r3, r2
 801c814:	61bb      	str	r3, [r7, #24]
      if (ltemp < 0)
 801c816:	69bb      	ldr	r3, [r7, #24]
 801c818:	2b00      	cmp	r3, #0
 801c81a:	da01      	bge.n	801c820 <access_virt_sarray+0xb6>
	ltemp = 0;		/* don't fall off front end of file */
 801c81c:	2300      	movs	r3, #0
 801c81e:	61bb      	str	r3, [r7, #24]
      ptr->cur_start_row = (JDIMENSION) ltemp;
 801c820:	69ba      	ldr	r2, [r7, #24]
 801c822:	68bb      	ldr	r3, [r7, #8]
 801c824:	619a      	str	r2, [r3, #24]
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_sarray_io(cinfo, ptr, FALSE);
 801c826:	2200      	movs	r2, #0
 801c828:	68b9      	ldr	r1, [r7, #8]
 801c82a:	68f8      	ldr	r0, [r7, #12]
 801c82c:	f7ff feac 	bl	801c588 <do_sarray_io>
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
 801c830:	68bb      	ldr	r3, [r7, #8]
 801c832:	69db      	ldr	r3, [r3, #28]
 801c834:	697a      	ldr	r2, [r7, #20]
 801c836:	429a      	cmp	r2, r3
 801c838:	d94d      	bls.n	801c8d6 <access_virt_sarray+0x16c>
    if (ptr->first_undef_row < start_row) {
 801c83a:	68bb      	ldr	r3, [r7, #8]
 801c83c:	69db      	ldr	r3, [r3, #28]
 801c83e:	687a      	ldr	r2, [r7, #4]
 801c840:	429a      	cmp	r2, r3
 801c842:	d90e      	bls.n	801c862 <access_virt_sarray+0xf8>
      if (writable)		/* writer skipped over a section of array */
 801c844:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c846:	2b00      	cmp	r3, #0
 801c848:	d008      	beq.n	801c85c <access_virt_sarray+0xf2>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801c84a:	68fb      	ldr	r3, [r7, #12]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	2217      	movs	r2, #23
 801c850:	615a      	str	r2, [r3, #20]
 801c852:	68fb      	ldr	r3, [r7, #12]
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	681b      	ldr	r3, [r3, #0]
 801c858:	68f8      	ldr	r0, [r7, #12]
 801c85a:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 801c85c:	687b      	ldr	r3, [r7, #4]
 801c85e:	61fb      	str	r3, [r7, #28]
 801c860:	e002      	b.n	801c868 <access_virt_sarray+0xfe>
    } else {
      undef_row = ptr->first_undef_row;
 801c862:	68bb      	ldr	r3, [r7, #8]
 801c864:	69db      	ldr	r3, [r3, #28]
 801c866:	61fb      	str	r3, [r7, #28]
    }
    if (writable)
 801c868:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c86a:	2b00      	cmp	r3, #0
 801c86c:	d002      	beq.n	801c874 <access_virt_sarray+0x10a>
      ptr->first_undef_row = end_row;
 801c86e:	68bb      	ldr	r3, [r7, #8]
 801c870:	697a      	ldr	r2, [r7, #20]
 801c872:	61da      	str	r2, [r3, #28]
    if (ptr->pre_zero) {
 801c874:	68bb      	ldr	r3, [r7, #8]
 801c876:	6a1b      	ldr	r3, [r3, #32]
 801c878:	2b00      	cmp	r3, #0
 801c87a:	d020      	beq.n	801c8be <access_virt_sarray+0x154>
      size_t bytesperrow = (size_t) ptr->samplesperrow * SIZEOF(JSAMPLE);
 801c87c:	68bb      	ldr	r3, [r7, #8]
 801c87e:	689b      	ldr	r3, [r3, #8]
 801c880:	613b      	str	r3, [r7, #16]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801c882:	68bb      	ldr	r3, [r7, #8]
 801c884:	699b      	ldr	r3, [r3, #24]
 801c886:	69fa      	ldr	r2, [r7, #28]
 801c888:	1ad3      	subs	r3, r2, r3
 801c88a:	61fb      	str	r3, [r7, #28]
      end_row -= ptr->cur_start_row;
 801c88c:	68bb      	ldr	r3, [r7, #8]
 801c88e:	699b      	ldr	r3, [r3, #24]
 801c890:	697a      	ldr	r2, [r7, #20]
 801c892:	1ad3      	subs	r3, r2, r3
 801c894:	617b      	str	r3, [r7, #20]
      while (undef_row < end_row) {
 801c896:	e00d      	b.n	801c8b4 <access_virt_sarray+0x14a>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801c898:	68bb      	ldr	r3, [r7, #8]
 801c89a:	681a      	ldr	r2, [r3, #0]
 801c89c:	69fb      	ldr	r3, [r7, #28]
 801c89e:	009b      	lsls	r3, r3, #2
 801c8a0:	4413      	add	r3, r2
 801c8a2:	681b      	ldr	r3, [r3, #0]
 801c8a4:	693a      	ldr	r2, [r7, #16]
 801c8a6:	2100      	movs	r1, #0
 801c8a8:	4618      	mov	r0, r3
 801c8aa:	f002 fd95 	bl	801f3d8 <memset>
	undef_row++;
 801c8ae:	69fb      	ldr	r3, [r7, #28]
 801c8b0:	3301      	adds	r3, #1
 801c8b2:	61fb      	str	r3, [r7, #28]
      while (undef_row < end_row) {
 801c8b4:	69fa      	ldr	r2, [r7, #28]
 801c8b6:	697b      	ldr	r3, [r7, #20]
 801c8b8:	429a      	cmp	r2, r3
 801c8ba:	d3ed      	bcc.n	801c898 <access_virt_sarray+0x12e>
 801c8bc:	e00b      	b.n	801c8d6 <access_virt_sarray+0x16c>
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
 801c8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8c0:	2b00      	cmp	r3, #0
 801c8c2:	d108      	bne.n	801c8d6 <access_virt_sarray+0x16c>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801c8c4:	68fb      	ldr	r3, [r7, #12]
 801c8c6:	681b      	ldr	r3, [r3, #0]
 801c8c8:	2217      	movs	r2, #23
 801c8ca:	615a      	str	r2, [r3, #20]
 801c8cc:	68fb      	ldr	r3, [r7, #12]
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	681b      	ldr	r3, [r3, #0]
 801c8d2:	68f8      	ldr	r0, [r7, #12]
 801c8d4:	4798      	blx	r3
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
 801c8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c8d8:	2b00      	cmp	r3, #0
 801c8da:	d002      	beq.n	801c8e2 <access_virt_sarray+0x178>
    ptr->dirty = TRUE;
 801c8dc:	68bb      	ldr	r3, [r7, #8]
 801c8de:	2201      	movs	r2, #1
 801c8e0:	625a      	str	r2, [r3, #36]	; 0x24
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 801c8e2:	68bb      	ldr	r3, [r7, #8]
 801c8e4:	681a      	ldr	r2, [r3, #0]
 801c8e6:	68bb      	ldr	r3, [r7, #8]
 801c8e8:	699b      	ldr	r3, [r3, #24]
 801c8ea:	6879      	ldr	r1, [r7, #4]
 801c8ec:	1acb      	subs	r3, r1, r3
 801c8ee:	009b      	lsls	r3, r3, #2
 801c8f0:	4413      	add	r3, r2
}
 801c8f2:	4618      	mov	r0, r3
 801c8f4:	3720      	adds	r7, #32
 801c8f6:	46bd      	mov	sp, r7
 801c8f8:	bd80      	pop	{r7, pc}

0801c8fa <access_virt_barray>:
		    JDIMENSION start_row, JDIMENSION num_rows,
		    boolean writable)
/* Access the part of a virtual block array starting at start_row */
/* and extending for num_rows rows.  writable is true if  */
/* caller intends to modify the accessed area. */
{
 801c8fa:	b580      	push	{r7, lr}
 801c8fc:	b088      	sub	sp, #32
 801c8fe:	af00      	add	r7, sp, #0
 801c900:	60f8      	str	r0, [r7, #12]
 801c902:	60b9      	str	r1, [r7, #8]
 801c904:	607a      	str	r2, [r7, #4]
 801c906:	603b      	str	r3, [r7, #0]
  JDIMENSION end_row = start_row + num_rows;
 801c908:	687a      	ldr	r2, [r7, #4]
 801c90a:	683b      	ldr	r3, [r7, #0]
 801c90c:	4413      	add	r3, r2
 801c90e:	617b      	str	r3, [r7, #20]
  JDIMENSION undef_row;

  /* debugging check */
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801c910:	68bb      	ldr	r3, [r7, #8]
 801c912:	685b      	ldr	r3, [r3, #4]
 801c914:	697a      	ldr	r2, [r7, #20]
 801c916:	429a      	cmp	r2, r3
 801c918:	d808      	bhi.n	801c92c <access_virt_barray+0x32>
 801c91a:	68bb      	ldr	r3, [r7, #8]
 801c91c:	68db      	ldr	r3, [r3, #12]
 801c91e:	683a      	ldr	r2, [r7, #0]
 801c920:	429a      	cmp	r2, r3
 801c922:	d803      	bhi.n	801c92c <access_virt_barray+0x32>
      ptr->mem_buffer == NULL)
 801c924:	68bb      	ldr	r3, [r7, #8]
 801c926:	681b      	ldr	r3, [r3, #0]
  if (end_row > ptr->rows_in_array || num_rows > ptr->maxaccess ||
 801c928:	2b00      	cmp	r3, #0
 801c92a:	d108      	bne.n	801c93e <access_virt_barray+0x44>
    ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801c92c:	68fb      	ldr	r3, [r7, #12]
 801c92e:	681b      	ldr	r3, [r3, #0]
 801c930:	2217      	movs	r2, #23
 801c932:	615a      	str	r2, [r3, #20]
 801c934:	68fb      	ldr	r3, [r7, #12]
 801c936:	681b      	ldr	r3, [r3, #0]
 801c938:	681b      	ldr	r3, [r3, #0]
 801c93a:	68f8      	ldr	r0, [r7, #12]
 801c93c:	4798      	blx	r3

  /* Make the desired part of the virtual array accessible */
  if (start_row < ptr->cur_start_row ||
 801c93e:	68bb      	ldr	r3, [r7, #8]
 801c940:	699b      	ldr	r3, [r3, #24]
 801c942:	687a      	ldr	r2, [r7, #4]
 801c944:	429a      	cmp	r2, r3
 801c946:	d307      	bcc.n	801c958 <access_virt_barray+0x5e>
      end_row > ptr->cur_start_row+ptr->rows_in_mem) {
 801c948:	68bb      	ldr	r3, [r7, #8]
 801c94a:	699a      	ldr	r2, [r3, #24]
 801c94c:	68bb      	ldr	r3, [r7, #8]
 801c94e:	691b      	ldr	r3, [r3, #16]
 801c950:	4413      	add	r3, r2
  if (start_row < ptr->cur_start_row ||
 801c952:	697a      	ldr	r2, [r7, #20]
 801c954:	429a      	cmp	r2, r3
 801c956:	d933      	bls.n	801c9c0 <access_virt_barray+0xc6>
    if (! ptr->b_s_open)
 801c958:	68bb      	ldr	r3, [r7, #8]
 801c95a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d108      	bne.n	801c972 <access_virt_barray+0x78>
      ERREXIT(cinfo, JERR_VIRTUAL_BUG);
 801c960:	68fb      	ldr	r3, [r7, #12]
 801c962:	681b      	ldr	r3, [r3, #0]
 801c964:	2247      	movs	r2, #71	; 0x47
 801c966:	615a      	str	r2, [r3, #20]
 801c968:	68fb      	ldr	r3, [r7, #12]
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	681b      	ldr	r3, [r3, #0]
 801c96e:	68f8      	ldr	r0, [r7, #12]
 801c970:	4798      	blx	r3
    /* Flush old buffer contents if necessary */
    if (ptr->dirty) {
 801c972:	68bb      	ldr	r3, [r7, #8]
 801c974:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801c976:	2b00      	cmp	r3, #0
 801c978:	d007      	beq.n	801c98a <access_virt_barray+0x90>
      do_barray_io(cinfo, ptr, TRUE);
 801c97a:	2201      	movs	r2, #1
 801c97c:	68b9      	ldr	r1, [r7, #8]
 801c97e:	68f8      	ldr	r0, [r7, #12]
 801c980:	f7ff fe7a 	bl	801c678 <do_barray_io>
      ptr->dirty = FALSE;
 801c984:	68bb      	ldr	r3, [r7, #8]
 801c986:	2200      	movs	r2, #0
 801c988:	625a      	str	r2, [r3, #36]	; 0x24
     * load starting at target address.  If target address < current window,
     * assume backward scan, load so that target area is top of window.
     * Note that when switching from forward write to forward read, will have
     * start_row = 0, so the limiting case applies and we load from 0 anyway.
     */
    if (start_row > ptr->cur_start_row) {
 801c98a:	68bb      	ldr	r3, [r7, #8]
 801c98c:	699b      	ldr	r3, [r3, #24]
 801c98e:	687a      	ldr	r2, [r7, #4]
 801c990:	429a      	cmp	r2, r3
 801c992:	d903      	bls.n	801c99c <access_virt_barray+0xa2>
      ptr->cur_start_row = start_row;
 801c994:	68bb      	ldr	r3, [r7, #8]
 801c996:	687a      	ldr	r2, [r7, #4]
 801c998:	619a      	str	r2, [r3, #24]
 801c99a:	e00c      	b.n	801c9b6 <access_virt_barray+0xbc>
    } else {
      /* use long arithmetic here to avoid overflow & unsigned problems */
      long ltemp;

      ltemp = (long) end_row - (long) ptr->rows_in_mem;
 801c99c:	697b      	ldr	r3, [r7, #20]
 801c99e:	68ba      	ldr	r2, [r7, #8]
 801c9a0:	6912      	ldr	r2, [r2, #16]
 801c9a2:	1a9b      	subs	r3, r3, r2
 801c9a4:	61bb      	str	r3, [r7, #24]
      if (ltemp < 0)
 801c9a6:	69bb      	ldr	r3, [r7, #24]
 801c9a8:	2b00      	cmp	r3, #0
 801c9aa:	da01      	bge.n	801c9b0 <access_virt_barray+0xb6>
	ltemp = 0;		/* don't fall off front end of file */
 801c9ac:	2300      	movs	r3, #0
 801c9ae:	61bb      	str	r3, [r7, #24]
      ptr->cur_start_row = (JDIMENSION) ltemp;
 801c9b0:	69ba      	ldr	r2, [r7, #24]
 801c9b2:	68bb      	ldr	r3, [r7, #8]
 801c9b4:	619a      	str	r2, [r3, #24]
    }
    /* Read in the selected part of the array.
     * During the initial write pass, we will do no actual read
     * because the selected part is all undefined.
     */
    do_barray_io(cinfo, ptr, FALSE);
 801c9b6:	2200      	movs	r2, #0
 801c9b8:	68b9      	ldr	r1, [r7, #8]
 801c9ba:	68f8      	ldr	r0, [r7, #12]
 801c9bc:	f7ff fe5c 	bl	801c678 <do_barray_io>
  }
  /* Ensure the accessed part of the array is defined; prezero if needed.
   * To improve locality of access, we only prezero the part of the array
   * that the caller is about to access, not the entire in-memory array.
   */
  if (ptr->first_undef_row < end_row) {
 801c9c0:	68bb      	ldr	r3, [r7, #8]
 801c9c2:	69db      	ldr	r3, [r3, #28]
 801c9c4:	697a      	ldr	r2, [r7, #20]
 801c9c6:	429a      	cmp	r2, r3
 801c9c8:	d94e      	bls.n	801ca68 <access_virt_barray+0x16e>
    if (ptr->first_undef_row < start_row) {
 801c9ca:	68bb      	ldr	r3, [r7, #8]
 801c9cc:	69db      	ldr	r3, [r3, #28]
 801c9ce:	687a      	ldr	r2, [r7, #4]
 801c9d0:	429a      	cmp	r2, r3
 801c9d2:	d90e      	bls.n	801c9f2 <access_virt_barray+0xf8>
      if (writable)		/* writer skipped over a section of array */
 801c9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9d6:	2b00      	cmp	r3, #0
 801c9d8:	d008      	beq.n	801c9ec <access_virt_barray+0xf2>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801c9da:	68fb      	ldr	r3, [r7, #12]
 801c9dc:	681b      	ldr	r3, [r3, #0]
 801c9de:	2217      	movs	r2, #23
 801c9e0:	615a      	str	r2, [r3, #20]
 801c9e2:	68fb      	ldr	r3, [r7, #12]
 801c9e4:	681b      	ldr	r3, [r3, #0]
 801c9e6:	681b      	ldr	r3, [r3, #0]
 801c9e8:	68f8      	ldr	r0, [r7, #12]
 801c9ea:	4798      	blx	r3
      undef_row = start_row;	/* but reader is allowed to read ahead */
 801c9ec:	687b      	ldr	r3, [r7, #4]
 801c9ee:	61fb      	str	r3, [r7, #28]
 801c9f0:	e002      	b.n	801c9f8 <access_virt_barray+0xfe>
    } else {
      undef_row = ptr->first_undef_row;
 801c9f2:	68bb      	ldr	r3, [r7, #8]
 801c9f4:	69db      	ldr	r3, [r3, #28]
 801c9f6:	61fb      	str	r3, [r7, #28]
    }
    if (writable)
 801c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c9fa:	2b00      	cmp	r3, #0
 801c9fc:	d002      	beq.n	801ca04 <access_virt_barray+0x10a>
      ptr->first_undef_row = end_row;
 801c9fe:	68bb      	ldr	r3, [r7, #8]
 801ca00:	697a      	ldr	r2, [r7, #20]
 801ca02:	61da      	str	r2, [r3, #28]
    if (ptr->pre_zero) {
 801ca04:	68bb      	ldr	r3, [r7, #8]
 801ca06:	6a1b      	ldr	r3, [r3, #32]
 801ca08:	2b00      	cmp	r3, #0
 801ca0a:	d021      	beq.n	801ca50 <access_virt_barray+0x156>
      size_t bytesperrow = (size_t) ptr->blocksperrow * SIZEOF(JBLOCK);
 801ca0c:	68bb      	ldr	r3, [r7, #8]
 801ca0e:	689b      	ldr	r3, [r3, #8]
 801ca10:	01db      	lsls	r3, r3, #7
 801ca12:	613b      	str	r3, [r7, #16]
      undef_row -= ptr->cur_start_row; /* make indexes relative to buffer */
 801ca14:	68bb      	ldr	r3, [r7, #8]
 801ca16:	699b      	ldr	r3, [r3, #24]
 801ca18:	69fa      	ldr	r2, [r7, #28]
 801ca1a:	1ad3      	subs	r3, r2, r3
 801ca1c:	61fb      	str	r3, [r7, #28]
      end_row -= ptr->cur_start_row;
 801ca1e:	68bb      	ldr	r3, [r7, #8]
 801ca20:	699b      	ldr	r3, [r3, #24]
 801ca22:	697a      	ldr	r2, [r7, #20]
 801ca24:	1ad3      	subs	r3, r2, r3
 801ca26:	617b      	str	r3, [r7, #20]
      while (undef_row < end_row) {
 801ca28:	e00d      	b.n	801ca46 <access_virt_barray+0x14c>
	FMEMZERO((void FAR *) ptr->mem_buffer[undef_row], bytesperrow);
 801ca2a:	68bb      	ldr	r3, [r7, #8]
 801ca2c:	681a      	ldr	r2, [r3, #0]
 801ca2e:	69fb      	ldr	r3, [r7, #28]
 801ca30:	009b      	lsls	r3, r3, #2
 801ca32:	4413      	add	r3, r2
 801ca34:	681b      	ldr	r3, [r3, #0]
 801ca36:	693a      	ldr	r2, [r7, #16]
 801ca38:	2100      	movs	r1, #0
 801ca3a:	4618      	mov	r0, r3
 801ca3c:	f002 fccc 	bl	801f3d8 <memset>
	undef_row++;
 801ca40:	69fb      	ldr	r3, [r7, #28]
 801ca42:	3301      	adds	r3, #1
 801ca44:	61fb      	str	r3, [r7, #28]
      while (undef_row < end_row) {
 801ca46:	69fa      	ldr	r2, [r7, #28]
 801ca48:	697b      	ldr	r3, [r7, #20]
 801ca4a:	429a      	cmp	r2, r3
 801ca4c:	d3ed      	bcc.n	801ca2a <access_virt_barray+0x130>
 801ca4e:	e00b      	b.n	801ca68 <access_virt_barray+0x16e>
      }
    } else {
      if (! writable)		/* reader looking at undefined data */
 801ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d108      	bne.n	801ca68 <access_virt_barray+0x16e>
	ERREXIT(cinfo, JERR_BAD_VIRTUAL_ACCESS);
 801ca56:	68fb      	ldr	r3, [r7, #12]
 801ca58:	681b      	ldr	r3, [r3, #0]
 801ca5a:	2217      	movs	r2, #23
 801ca5c:	615a      	str	r2, [r3, #20]
 801ca5e:	68fb      	ldr	r3, [r7, #12]
 801ca60:	681b      	ldr	r3, [r3, #0]
 801ca62:	681b      	ldr	r3, [r3, #0]
 801ca64:	68f8      	ldr	r0, [r7, #12]
 801ca66:	4798      	blx	r3
    }
  }
  /* Flag the buffer dirty if caller will write in it */
  if (writable)
 801ca68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ca6a:	2b00      	cmp	r3, #0
 801ca6c:	d002      	beq.n	801ca74 <access_virt_barray+0x17a>
    ptr->dirty = TRUE;
 801ca6e:	68bb      	ldr	r3, [r7, #8]
 801ca70:	2201      	movs	r2, #1
 801ca72:	625a      	str	r2, [r3, #36]	; 0x24
  /* Return address of proper part of the buffer */
  return ptr->mem_buffer + (start_row - ptr->cur_start_row);
 801ca74:	68bb      	ldr	r3, [r7, #8]
 801ca76:	681a      	ldr	r2, [r3, #0]
 801ca78:	68bb      	ldr	r3, [r7, #8]
 801ca7a:	699b      	ldr	r3, [r3, #24]
 801ca7c:	6879      	ldr	r1, [r7, #4]
 801ca7e:	1acb      	subs	r3, r1, r3
 801ca80:	009b      	lsls	r3, r3, #2
 801ca82:	4413      	add	r3, r2
}
 801ca84:	4618      	mov	r0, r3
 801ca86:	3720      	adds	r7, #32
 801ca88:	46bd      	mov	sp, r7
 801ca8a:	bd80      	pop	{r7, pc}

0801ca8c <free_pool>:
 * Release all objects belonging to a specified pool.
 */

METHODDEF(void)
free_pool (j_common_ptr cinfo, int pool_id)
{
 801ca8c:	b580      	push	{r7, lr}
 801ca8e:	b08a      	sub	sp, #40	; 0x28
 801ca90:	af00      	add	r7, sp, #0
 801ca92:	6078      	str	r0, [r7, #4]
 801ca94:	6039      	str	r1, [r7, #0]
  my_mem_ptr mem = (my_mem_ptr) cinfo->mem;
 801ca96:	687b      	ldr	r3, [r7, #4]
 801ca98:	685b      	ldr	r3, [r3, #4]
 801ca9a:	617b      	str	r3, [r7, #20]
  small_pool_ptr shdr_ptr;
  large_pool_ptr lhdr_ptr;
  size_t space_freed;

  if (pool_id < 0 || pool_id >= JPOOL_NUMPOOLS)
 801ca9c:	683b      	ldr	r3, [r7, #0]
 801ca9e:	2b00      	cmp	r3, #0
 801caa0:	db02      	blt.n	801caa8 <free_pool+0x1c>
 801caa2:	683b      	ldr	r3, [r7, #0]
 801caa4:	2b01      	cmp	r3, #1
 801caa6:	dd0c      	ble.n	801cac2 <free_pool+0x36>
    ERREXIT1(cinfo, JERR_BAD_POOL_ID, pool_id);	/* safety check */
 801caa8:	687b      	ldr	r3, [r7, #4]
 801caaa:	681b      	ldr	r3, [r3, #0]
 801caac:	220f      	movs	r2, #15
 801caae:	615a      	str	r2, [r3, #20]
 801cab0:	687b      	ldr	r3, [r7, #4]
 801cab2:	681b      	ldr	r3, [r3, #0]
 801cab4:	683a      	ldr	r2, [r7, #0]
 801cab6:	619a      	str	r2, [r3, #24]
 801cab8:	687b      	ldr	r3, [r7, #4]
 801caba:	681b      	ldr	r3, [r3, #0]
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	6878      	ldr	r0, [r7, #4]
 801cac0:	4798      	blx	r3
  if (cinfo->err->trace_level > 1)
    print_mem_stats(cinfo, pool_id); /* print pool's memory usage statistics */
#endif

  /* If freeing IMAGE pool, close any virtual arrays first */
  if (pool_id == JPOOL_IMAGE) {
 801cac2:	683b      	ldr	r3, [r7, #0]
 801cac4:	2b01      	cmp	r3, #1
 801cac6:	d135      	bne.n	801cb34 <free_pool+0xa8>
    jvirt_sarray_ptr sptr;
    jvirt_barray_ptr bptr;

    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801cac8:	697b      	ldr	r3, [r7, #20]
 801caca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801cacc:	61fb      	str	r3, [r7, #28]
 801cace:	e010      	b.n	801caf2 <free_pool+0x66>
      if (sptr->b_s_open) {	/* there may be no backing store */
 801cad0:	69fb      	ldr	r3, [r7, #28]
 801cad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cad4:	2b00      	cmp	r3, #0
 801cad6:	d009      	beq.n	801caec <free_pool+0x60>
	sptr->b_s_open = FALSE;	/* prevent recursive close if error */
 801cad8:	69fb      	ldr	r3, [r7, #28]
 801cada:	2200      	movs	r2, #0
 801cadc:	629a      	str	r2, [r3, #40]	; 0x28
	(*sptr->b_s_info.close_backing_store) (cinfo, & sptr->b_s_info);
 801cade:	69fb      	ldr	r3, [r7, #28]
 801cae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cae2:	69fa      	ldr	r2, [r7, #28]
 801cae4:	3230      	adds	r2, #48	; 0x30
 801cae6:	4611      	mov	r1, r2
 801cae8:	6878      	ldr	r0, [r7, #4]
 801caea:	4798      	blx	r3
    for (sptr = mem->virt_sarray_list; sptr != NULL; sptr = sptr->next) {
 801caec:	69fb      	ldr	r3, [r7, #28]
 801caee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801caf0:	61fb      	str	r3, [r7, #28]
 801caf2:	69fb      	ldr	r3, [r7, #28]
 801caf4:	2b00      	cmp	r3, #0
 801caf6:	d1eb      	bne.n	801cad0 <free_pool+0x44>
      }
    }
    mem->virt_sarray_list = NULL;
 801caf8:	697b      	ldr	r3, [r7, #20]
 801cafa:	2200      	movs	r2, #0
 801cafc:	645a      	str	r2, [r3, #68]	; 0x44
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801cafe:	697b      	ldr	r3, [r7, #20]
 801cb00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cb02:	61bb      	str	r3, [r7, #24]
 801cb04:	e010      	b.n	801cb28 <free_pool+0x9c>
      if (bptr->b_s_open) {	/* there may be no backing store */
 801cb06:	69bb      	ldr	r3, [r7, #24]
 801cb08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801cb0a:	2b00      	cmp	r3, #0
 801cb0c:	d009      	beq.n	801cb22 <free_pool+0x96>
	bptr->b_s_open = FALSE;	/* prevent recursive close if error */
 801cb0e:	69bb      	ldr	r3, [r7, #24]
 801cb10:	2200      	movs	r2, #0
 801cb12:	629a      	str	r2, [r3, #40]	; 0x28
	(*bptr->b_s_info.close_backing_store) (cinfo, & bptr->b_s_info);
 801cb14:	69bb      	ldr	r3, [r7, #24]
 801cb16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801cb18:	69ba      	ldr	r2, [r7, #24]
 801cb1a:	3230      	adds	r2, #48	; 0x30
 801cb1c:	4611      	mov	r1, r2
 801cb1e:	6878      	ldr	r0, [r7, #4]
 801cb20:	4798      	blx	r3
    for (bptr = mem->virt_barray_list; bptr != NULL; bptr = bptr->next) {
 801cb22:	69bb      	ldr	r3, [r7, #24]
 801cb24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cb26:	61bb      	str	r3, [r7, #24]
 801cb28:	69bb      	ldr	r3, [r7, #24]
 801cb2a:	2b00      	cmp	r3, #0
 801cb2c:	d1eb      	bne.n	801cb06 <free_pool+0x7a>
      }
    }
    mem->virt_barray_list = NULL;
 801cb2e:	697b      	ldr	r3, [r7, #20]
 801cb30:	2200      	movs	r2, #0
 801cb32:	649a      	str	r2, [r3, #72]	; 0x48
  }

  /* Release large objects */
  lhdr_ptr = mem->large_list[pool_id];
 801cb34:	697a      	ldr	r2, [r7, #20]
 801cb36:	683b      	ldr	r3, [r7, #0]
 801cb38:	330e      	adds	r3, #14
 801cb3a:	009b      	lsls	r3, r3, #2
 801cb3c:	4413      	add	r3, r2
 801cb3e:	685b      	ldr	r3, [r3, #4]
 801cb40:	623b      	str	r3, [r7, #32]
  mem->large_list[pool_id] = NULL;
 801cb42:	697a      	ldr	r2, [r7, #20]
 801cb44:	683b      	ldr	r3, [r7, #0]
 801cb46:	330e      	adds	r3, #14
 801cb48:	009b      	lsls	r3, r3, #2
 801cb4a:	4413      	add	r3, r2
 801cb4c:	2200      	movs	r2, #0
 801cb4e:	605a      	str	r2, [r3, #4]

  while (lhdr_ptr != NULL) {
 801cb50:	e018      	b.n	801cb84 <free_pool+0xf8>
    large_pool_ptr next_lhdr_ptr = lhdr_ptr->hdr.next;
 801cb52:	6a3b      	ldr	r3, [r7, #32]
 801cb54:	681b      	ldr	r3, [r3, #0]
 801cb56:	60bb      	str	r3, [r7, #8]
    space_freed = lhdr_ptr->hdr.bytes_used +
 801cb58:	6a3b      	ldr	r3, [r7, #32]
 801cb5a:	685a      	ldr	r2, [r3, #4]
		  lhdr_ptr->hdr.bytes_left +
 801cb5c:	6a3b      	ldr	r3, [r7, #32]
 801cb5e:	689b      	ldr	r3, [r3, #8]
    space_freed = lhdr_ptr->hdr.bytes_used +
 801cb60:	4413      	add	r3, r2
 801cb62:	3310      	adds	r3, #16
 801cb64:	60fb      	str	r3, [r7, #12]
		  SIZEOF(large_pool_hdr);
    jpeg_free_large(cinfo, (void FAR *) lhdr_ptr, space_freed);
 801cb66:	68fa      	ldr	r2, [r7, #12]
 801cb68:	6a39      	ldr	r1, [r7, #32]
 801cb6a:	6878      	ldr	r0, [r7, #4]
 801cb6c:	f000 f91f 	bl	801cdae <jpeg_free_large>
    mem->total_space_allocated -= space_freed;
 801cb70:	697b      	ldr	r3, [r7, #20]
 801cb72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cb74:	461a      	mov	r2, r3
 801cb76:	68fb      	ldr	r3, [r7, #12]
 801cb78:	1ad3      	subs	r3, r2, r3
 801cb7a:	461a      	mov	r2, r3
 801cb7c:	697b      	ldr	r3, [r7, #20]
 801cb7e:	64da      	str	r2, [r3, #76]	; 0x4c
    lhdr_ptr = next_lhdr_ptr;
 801cb80:	68bb      	ldr	r3, [r7, #8]
 801cb82:	623b      	str	r3, [r7, #32]
  while (lhdr_ptr != NULL) {
 801cb84:	6a3b      	ldr	r3, [r7, #32]
 801cb86:	2b00      	cmp	r3, #0
 801cb88:	d1e3      	bne.n	801cb52 <free_pool+0xc6>
  }

  /* Release small objects */
  shdr_ptr = mem->small_list[pool_id];
 801cb8a:	697a      	ldr	r2, [r7, #20]
 801cb8c:	683b      	ldr	r3, [r7, #0]
 801cb8e:	330c      	adds	r3, #12
 801cb90:	009b      	lsls	r3, r3, #2
 801cb92:	4413      	add	r3, r2
 801cb94:	685b      	ldr	r3, [r3, #4]
 801cb96:	627b      	str	r3, [r7, #36]	; 0x24
  mem->small_list[pool_id] = NULL;
 801cb98:	697a      	ldr	r2, [r7, #20]
 801cb9a:	683b      	ldr	r3, [r7, #0]
 801cb9c:	330c      	adds	r3, #12
 801cb9e:	009b      	lsls	r3, r3, #2
 801cba0:	4413      	add	r3, r2
 801cba2:	2200      	movs	r2, #0
 801cba4:	605a      	str	r2, [r3, #4]

  while (shdr_ptr != NULL) {
 801cba6:	e018      	b.n	801cbda <free_pool+0x14e>
    small_pool_ptr next_shdr_ptr = shdr_ptr->hdr.next;
 801cba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbaa:	681b      	ldr	r3, [r3, #0]
 801cbac:	613b      	str	r3, [r7, #16]
    space_freed = shdr_ptr->hdr.bytes_used +
 801cbae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbb0:	685a      	ldr	r2, [r3, #4]
		  shdr_ptr->hdr.bytes_left +
 801cbb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbb4:	689b      	ldr	r3, [r3, #8]
    space_freed = shdr_ptr->hdr.bytes_used +
 801cbb6:	4413      	add	r3, r2
 801cbb8:	3310      	adds	r3, #16
 801cbba:	60fb      	str	r3, [r7, #12]
		  SIZEOF(small_pool_hdr);
    jpeg_free_small(cinfo, (void *) shdr_ptr, space_freed);
 801cbbc:	68fa      	ldr	r2, [r7, #12]
 801cbbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801cbc0:	6878      	ldr	r0, [r7, #4]
 801cbc2:	f000 f8da 	bl	801cd7a <jpeg_free_small>
    mem->total_space_allocated -= space_freed;
 801cbc6:	697b      	ldr	r3, [r7, #20]
 801cbc8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801cbca:	461a      	mov	r2, r3
 801cbcc:	68fb      	ldr	r3, [r7, #12]
 801cbce:	1ad3      	subs	r3, r2, r3
 801cbd0:	461a      	mov	r2, r3
 801cbd2:	697b      	ldr	r3, [r7, #20]
 801cbd4:	64da      	str	r2, [r3, #76]	; 0x4c
    shdr_ptr = next_shdr_ptr;
 801cbd6:	693b      	ldr	r3, [r7, #16]
 801cbd8:	627b      	str	r3, [r7, #36]	; 0x24
  while (shdr_ptr != NULL) {
 801cbda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cbdc:	2b00      	cmp	r3, #0
 801cbde:	d1e3      	bne.n	801cba8 <free_pool+0x11c>
  }
}
 801cbe0:	bf00      	nop
 801cbe2:	bf00      	nop
 801cbe4:	3728      	adds	r7, #40	; 0x28
 801cbe6:	46bd      	mov	sp, r7
 801cbe8:	bd80      	pop	{r7, pc}

0801cbea <self_destruct>:
 * Note that this cannot be called unless cinfo->mem is non-NULL.
 */

METHODDEF(void)
self_destruct (j_common_ptr cinfo)
{
 801cbea:	b580      	push	{r7, lr}
 801cbec:	b084      	sub	sp, #16
 801cbee:	af00      	add	r7, sp, #0
 801cbf0:	6078      	str	r0, [r7, #4]

  /* Close all backing store, release all memory.
   * Releasing pools in reverse order might help avoid fragmentation
   * with some (brain-damaged) malloc libraries.
   */
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801cbf2:	2301      	movs	r3, #1
 801cbf4:	60fb      	str	r3, [r7, #12]
 801cbf6:	e006      	b.n	801cc06 <self_destruct+0x1c>
    free_pool(cinfo, pool);
 801cbf8:	68f9      	ldr	r1, [r7, #12]
 801cbfa:	6878      	ldr	r0, [r7, #4]
 801cbfc:	f7ff ff46 	bl	801ca8c <free_pool>
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801cc00:	68fb      	ldr	r3, [r7, #12]
 801cc02:	3b01      	subs	r3, #1
 801cc04:	60fb      	str	r3, [r7, #12]
 801cc06:	68fb      	ldr	r3, [r7, #12]
 801cc08:	2b00      	cmp	r3, #0
 801cc0a:	daf5      	bge.n	801cbf8 <self_destruct+0xe>
  }

  /* Release the memory manager control block too. */
  jpeg_free_small(cinfo, (void *) cinfo->mem, SIZEOF(my_memory_mgr));
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	685b      	ldr	r3, [r3, #4]
 801cc10:	2254      	movs	r2, #84	; 0x54
 801cc12:	4619      	mov	r1, r3
 801cc14:	6878      	ldr	r0, [r7, #4]
 801cc16:	f000 f8b0 	bl	801cd7a <jpeg_free_small>
  cinfo->mem = NULL;		/* ensures I will be called only once */
 801cc1a:	687b      	ldr	r3, [r7, #4]
 801cc1c:	2200      	movs	r2, #0
 801cc1e:	605a      	str	r2, [r3, #4]

  jpeg_mem_term(cinfo);		/* system-dependent cleanup */
 801cc20:	6878      	ldr	r0, [r7, #4]
 801cc22:	f000 f8fd 	bl	801ce20 <jpeg_mem_term>
}
 801cc26:	bf00      	nop
 801cc28:	3710      	adds	r7, #16
 801cc2a:	46bd      	mov	sp, r7
 801cc2c:	bd80      	pop	{r7, pc}
	...

0801cc30 <jinit_memory_mgr>:
 * When this is called, only the error manager pointer is valid in cinfo!
 */

GLOBAL(void)
jinit_memory_mgr (j_common_ptr cinfo)
{
 801cc30:	b580      	push	{r7, lr}
 801cc32:	b086      	sub	sp, #24
 801cc34:	af00      	add	r7, sp, #0
 801cc36:	6078      	str	r0, [r7, #4]
  my_mem_ptr mem;
  long max_to_use;
  int pool;
  size_t test_mac;

  cinfo->mem = NULL;		/* for safety if init fails */
 801cc38:	687b      	ldr	r3, [r7, #4]
 801cc3a:	2200      	movs	r2, #0
 801cc3c:	605a      	str	r2, [r3, #4]
  /* MAX_ALLOC_CHUNK must be representable as type size_t, and must be
   * a multiple of SIZEOF(ALIGN_TYPE).
   * Again, an "unreachable code" warning may be ignored here.
   * But a "constant too large" warning means you need to fix MAX_ALLOC_CHUNK.
   */
  test_mac = (size_t) MAX_ALLOC_CHUNK;
 801cc3e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 801cc42:	613b      	str	r3, [r7, #16]
  if ((long) test_mac != MAX_ALLOC_CHUNK ||
 801cc44:	693b      	ldr	r3, [r7, #16]
 801cc46:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801cc4a:	d008      	beq.n	801cc5e <jinit_memory_mgr+0x2e>
      (MAX_ALLOC_CHUNK % SIZEOF(ALIGN_TYPE)) != 0)
    ERREXIT(cinfo, JERR_BAD_ALLOC_CHUNK);
 801cc4c:	687b      	ldr	r3, [r7, #4]
 801cc4e:	681b      	ldr	r3, [r3, #0]
 801cc50:	2202      	movs	r2, #2
 801cc52:	615a      	str	r2, [r3, #20]
 801cc54:	687b      	ldr	r3, [r7, #4]
 801cc56:	681b      	ldr	r3, [r3, #0]
 801cc58:	681b      	ldr	r3, [r3, #0]
 801cc5a:	6878      	ldr	r0, [r7, #4]
 801cc5c:	4798      	blx	r3

  max_to_use = jpeg_mem_init(cinfo); /* system-dependent initialization */
 801cc5e:	6878      	ldr	r0, [r7, #4]
 801cc60:	f000 f8d3 	bl	801ce0a <jpeg_mem_init>
 801cc64:	60f8      	str	r0, [r7, #12]

  /* Attempt to allocate memory manager's control block */
  mem = (my_mem_ptr) jpeg_get_small(cinfo, SIZEOF(my_memory_mgr));
 801cc66:	2154      	movs	r1, #84	; 0x54
 801cc68:	6878      	ldr	r0, [r7, #4]
 801cc6a:	f000 f879 	bl	801cd60 <jpeg_get_small>
 801cc6e:	60b8      	str	r0, [r7, #8]

  if (mem == NULL) {
 801cc70:	68bb      	ldr	r3, [r7, #8]
 801cc72:	2b00      	cmp	r3, #0
 801cc74:	d10f      	bne.n	801cc96 <jinit_memory_mgr+0x66>
    jpeg_mem_term(cinfo);	/* system-dependent cleanup */
 801cc76:	6878      	ldr	r0, [r7, #4]
 801cc78:	f000 f8d2 	bl	801ce20 <jpeg_mem_term>
    ERREXIT1(cinfo, JERR_OUT_OF_MEMORY, 0);
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	681b      	ldr	r3, [r3, #0]
 801cc80:	2238      	movs	r2, #56	; 0x38
 801cc82:	615a      	str	r2, [r3, #20]
 801cc84:	687b      	ldr	r3, [r7, #4]
 801cc86:	681b      	ldr	r3, [r3, #0]
 801cc88:	2200      	movs	r2, #0
 801cc8a:	619a      	str	r2, [r3, #24]
 801cc8c:	687b      	ldr	r3, [r7, #4]
 801cc8e:	681b      	ldr	r3, [r3, #0]
 801cc90:	681b      	ldr	r3, [r3, #0]
 801cc92:	6878      	ldr	r0, [r7, #4]
 801cc94:	4798      	blx	r3
  }

  /* OK, fill in the method pointers */
  mem->pub.alloc_small = alloc_small;
 801cc96:	68bb      	ldr	r3, [r7, #8]
 801cc98:	4a26      	ldr	r2, [pc, #152]	; (801cd34 <jinit_memory_mgr+0x104>)
 801cc9a:	601a      	str	r2, [r3, #0]
  mem->pub.alloc_large = alloc_large;
 801cc9c:	68bb      	ldr	r3, [r7, #8]
 801cc9e:	4a26      	ldr	r2, [pc, #152]	; (801cd38 <jinit_memory_mgr+0x108>)
 801cca0:	605a      	str	r2, [r3, #4]
  mem->pub.alloc_sarray = alloc_sarray;
 801cca2:	68bb      	ldr	r3, [r7, #8]
 801cca4:	4a25      	ldr	r2, [pc, #148]	; (801cd3c <jinit_memory_mgr+0x10c>)
 801cca6:	609a      	str	r2, [r3, #8]
  mem->pub.alloc_barray = alloc_barray;
 801cca8:	68bb      	ldr	r3, [r7, #8]
 801ccaa:	4a25      	ldr	r2, [pc, #148]	; (801cd40 <jinit_memory_mgr+0x110>)
 801ccac:	60da      	str	r2, [r3, #12]
  mem->pub.request_virt_sarray = request_virt_sarray;
 801ccae:	68bb      	ldr	r3, [r7, #8]
 801ccb0:	4a24      	ldr	r2, [pc, #144]	; (801cd44 <jinit_memory_mgr+0x114>)
 801ccb2:	611a      	str	r2, [r3, #16]
  mem->pub.request_virt_barray = request_virt_barray;
 801ccb4:	68bb      	ldr	r3, [r7, #8]
 801ccb6:	4a24      	ldr	r2, [pc, #144]	; (801cd48 <jinit_memory_mgr+0x118>)
 801ccb8:	615a      	str	r2, [r3, #20]
  mem->pub.realize_virt_arrays = realize_virt_arrays;
 801ccba:	68bb      	ldr	r3, [r7, #8]
 801ccbc:	4a23      	ldr	r2, [pc, #140]	; (801cd4c <jinit_memory_mgr+0x11c>)
 801ccbe:	619a      	str	r2, [r3, #24]
  mem->pub.access_virt_sarray = access_virt_sarray;
 801ccc0:	68bb      	ldr	r3, [r7, #8]
 801ccc2:	4a23      	ldr	r2, [pc, #140]	; (801cd50 <jinit_memory_mgr+0x120>)
 801ccc4:	61da      	str	r2, [r3, #28]
  mem->pub.access_virt_barray = access_virt_barray;
 801ccc6:	68bb      	ldr	r3, [r7, #8]
 801ccc8:	4a22      	ldr	r2, [pc, #136]	; (801cd54 <jinit_memory_mgr+0x124>)
 801ccca:	621a      	str	r2, [r3, #32]
  mem->pub.free_pool = free_pool;
 801cccc:	68bb      	ldr	r3, [r7, #8]
 801ccce:	4a22      	ldr	r2, [pc, #136]	; (801cd58 <jinit_memory_mgr+0x128>)
 801ccd0:	625a      	str	r2, [r3, #36]	; 0x24
  mem->pub.self_destruct = self_destruct;
 801ccd2:	68bb      	ldr	r3, [r7, #8]
 801ccd4:	4a21      	ldr	r2, [pc, #132]	; (801cd5c <jinit_memory_mgr+0x12c>)
 801ccd6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Make MAX_ALLOC_CHUNK accessible to other modules */
  mem->pub.max_alloc_chunk = MAX_ALLOC_CHUNK;
 801ccd8:	68bb      	ldr	r3, [r7, #8]
 801ccda:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 801ccde:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize working state */
  mem->pub.max_memory_to_use = max_to_use;
 801cce0:	68bb      	ldr	r3, [r7, #8]
 801cce2:	68fa      	ldr	r2, [r7, #12]
 801cce4:	62da      	str	r2, [r3, #44]	; 0x2c

  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801cce6:	2301      	movs	r3, #1
 801cce8:	617b      	str	r3, [r7, #20]
 801ccea:	e010      	b.n	801cd0e <jinit_memory_mgr+0xde>
    mem->small_list[pool] = NULL;
 801ccec:	68ba      	ldr	r2, [r7, #8]
 801ccee:	697b      	ldr	r3, [r7, #20]
 801ccf0:	330c      	adds	r3, #12
 801ccf2:	009b      	lsls	r3, r3, #2
 801ccf4:	4413      	add	r3, r2
 801ccf6:	2200      	movs	r2, #0
 801ccf8:	605a      	str	r2, [r3, #4]
    mem->large_list[pool] = NULL;
 801ccfa:	68ba      	ldr	r2, [r7, #8]
 801ccfc:	697b      	ldr	r3, [r7, #20]
 801ccfe:	330e      	adds	r3, #14
 801cd00:	009b      	lsls	r3, r3, #2
 801cd02:	4413      	add	r3, r2
 801cd04:	2200      	movs	r2, #0
 801cd06:	605a      	str	r2, [r3, #4]
  for (pool = JPOOL_NUMPOOLS-1; pool >= JPOOL_PERMANENT; pool--) {
 801cd08:	697b      	ldr	r3, [r7, #20]
 801cd0a:	3b01      	subs	r3, #1
 801cd0c:	617b      	str	r3, [r7, #20]
 801cd0e:	697b      	ldr	r3, [r7, #20]
 801cd10:	2b00      	cmp	r3, #0
 801cd12:	daeb      	bge.n	801ccec <jinit_memory_mgr+0xbc>
  }
  mem->virt_sarray_list = NULL;
 801cd14:	68bb      	ldr	r3, [r7, #8]
 801cd16:	2200      	movs	r2, #0
 801cd18:	645a      	str	r2, [r3, #68]	; 0x44
  mem->virt_barray_list = NULL;
 801cd1a:	68bb      	ldr	r3, [r7, #8]
 801cd1c:	2200      	movs	r2, #0
 801cd1e:	649a      	str	r2, [r3, #72]	; 0x48

  mem->total_space_allocated = SIZEOF(my_memory_mgr);
 801cd20:	68bb      	ldr	r3, [r7, #8]
 801cd22:	2254      	movs	r2, #84	; 0x54
 801cd24:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Declare ourselves open for business */
  cinfo->mem = & mem->pub;
 801cd26:	68ba      	ldr	r2, [r7, #8]
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	605a      	str	r2, [r3, #4]
      }
    }
  }
#endif

}
 801cd2c:	bf00      	nop
 801cd2e:	3718      	adds	r7, #24
 801cd30:	46bd      	mov	sp, r7
 801cd32:	bd80      	pop	{r7, pc}
 801cd34:	0801be85 	.word	0x0801be85
 801cd38:	0801c005 	.word	0x0801c005
 801cd3c:	0801c0cb 	.word	0x0801c0cb
 801cd40:	0801c191 	.word	0x0801c191
 801cd44:	0801c25d 	.word	0x0801c25d
 801cd48:	0801c2d9 	.word	0x0801c2d9
 801cd4c:	0801c355 	.word	0x0801c355
 801cd50:	0801c76b 	.word	0x0801c76b
 801cd54:	0801c8fb 	.word	0x0801c8fb
 801cd58:	0801ca8d 	.word	0x0801ca8d
 801cd5c:	0801cbeb 	.word	0x0801cbeb

0801cd60 <jpeg_get_small>:
 * routines malloc() and free().
 */

GLOBAL(void *)
jpeg_get_small (j_common_ptr cinfo, size_t sizeofobject)
{
 801cd60:	b580      	push	{r7, lr}
 801cd62:	b082      	sub	sp, #8
 801cd64:	af00      	add	r7, sp, #0
 801cd66:	6078      	str	r0, [r7, #4]
 801cd68:	6039      	str	r1, [r7, #0]
  return (void *) JMALLOC(sizeofobject);
 801cd6a:	6838      	ldr	r0, [r7, #0]
 801cd6c:	f002 fb16 	bl	801f39c <malloc>
 801cd70:	4603      	mov	r3, r0
}
 801cd72:	4618      	mov	r0, r3
 801cd74:	3708      	adds	r7, #8
 801cd76:	46bd      	mov	sp, r7
 801cd78:	bd80      	pop	{r7, pc}

0801cd7a <jpeg_free_small>:

GLOBAL(void)
jpeg_free_small (j_common_ptr cinfo, void * object, size_t sizeofobject)
{
 801cd7a:	b580      	push	{r7, lr}
 801cd7c:	b084      	sub	sp, #16
 801cd7e:	af00      	add	r7, sp, #0
 801cd80:	60f8      	str	r0, [r7, #12]
 801cd82:	60b9      	str	r1, [r7, #8]
 801cd84:	607a      	str	r2, [r7, #4]
  JFREE(object);
 801cd86:	68b8      	ldr	r0, [r7, #8]
 801cd88:	f002 fb10 	bl	801f3ac <free>
}
 801cd8c:	bf00      	nop
 801cd8e:	3710      	adds	r7, #16
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd80      	pop	{r7, pc}

0801cd94 <jpeg_get_large>:
 * you probably won't be able to process useful-size images in only 64KB.
 */

GLOBAL(void FAR *)
jpeg_get_large (j_common_ptr cinfo, size_t sizeofobject)
{
 801cd94:	b580      	push	{r7, lr}
 801cd96:	b082      	sub	sp, #8
 801cd98:	af00      	add	r7, sp, #0
 801cd9a:	6078      	str	r0, [r7, #4]
 801cd9c:	6039      	str	r1, [r7, #0]
  return (void FAR *) JMALLOC(sizeofobject);
 801cd9e:	6838      	ldr	r0, [r7, #0]
 801cda0:	f002 fafc 	bl	801f39c <malloc>
 801cda4:	4603      	mov	r3, r0
}
 801cda6:	4618      	mov	r0, r3
 801cda8:	3708      	adds	r7, #8
 801cdaa:	46bd      	mov	sp, r7
 801cdac:	bd80      	pop	{r7, pc}

0801cdae <jpeg_free_large>:

GLOBAL(void)
jpeg_free_large (j_common_ptr cinfo, void FAR * object, size_t sizeofobject)
{
 801cdae:	b580      	push	{r7, lr}
 801cdb0:	b084      	sub	sp, #16
 801cdb2:	af00      	add	r7, sp, #0
 801cdb4:	60f8      	str	r0, [r7, #12]
 801cdb6:	60b9      	str	r1, [r7, #8]
 801cdb8:	607a      	str	r2, [r7, #4]
  JFREE(object);
 801cdba:	68b8      	ldr	r0, [r7, #8]
 801cdbc:	f002 faf6 	bl	801f3ac <free>
}
 801cdc0:	bf00      	nop
 801cdc2:	3710      	adds	r7, #16
 801cdc4:	46bd      	mov	sp, r7
 801cdc6:	bd80      	pop	{r7, pc}

0801cdc8 <jpeg_mem_available>:
 */

GLOBAL(long)
jpeg_mem_available (j_common_ptr cinfo, long min_bytes_needed,
		    long max_bytes_needed, long already_allocated)
{
 801cdc8:	b480      	push	{r7}
 801cdca:	b085      	sub	sp, #20
 801cdcc:	af00      	add	r7, sp, #0
 801cdce:	60f8      	str	r0, [r7, #12]
 801cdd0:	60b9      	str	r1, [r7, #8]
 801cdd2:	607a      	str	r2, [r7, #4]
 801cdd4:	603b      	str	r3, [r7, #0]
  return max_bytes_needed;
 801cdd6:	687b      	ldr	r3, [r7, #4]
}
 801cdd8:	4618      	mov	r0, r3
 801cdda:	3714      	adds	r7, #20
 801cddc:	46bd      	mov	sp, r7
 801cdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cde2:	4770      	bx	lr

0801cde4 <jpeg_open_backing_store>:
 */

GLOBAL(void)
jpeg_open_backing_store (j_common_ptr cinfo, backing_store_ptr info,
			 long total_bytes_needed)
{
 801cde4:	b580      	push	{r7, lr}
 801cde6:	b084      	sub	sp, #16
 801cde8:	af00      	add	r7, sp, #0
 801cdea:	60f8      	str	r0, [r7, #12]
 801cdec:	60b9      	str	r1, [r7, #8]
 801cdee:	607a      	str	r2, [r7, #4]
  ERREXIT(cinfo, JERR_NO_BACKING_STORE);
 801cdf0:	68fb      	ldr	r3, [r7, #12]
 801cdf2:	681b      	ldr	r3, [r3, #0]
 801cdf4:	2233      	movs	r2, #51	; 0x33
 801cdf6:	615a      	str	r2, [r3, #20]
 801cdf8:	68fb      	ldr	r3, [r7, #12]
 801cdfa:	681b      	ldr	r3, [r3, #0]
 801cdfc:	681b      	ldr	r3, [r3, #0]
 801cdfe:	68f8      	ldr	r0, [r7, #12]
 801ce00:	4798      	blx	r3
}
 801ce02:	bf00      	nop
 801ce04:	3710      	adds	r7, #16
 801ce06:	46bd      	mov	sp, r7
 801ce08:	bd80      	pop	{r7, pc}

0801ce0a <jpeg_mem_init>:
 * cleanup required.  Here, there isn't any.
 */

GLOBAL(long)
jpeg_mem_init (j_common_ptr cinfo)
{
 801ce0a:	b480      	push	{r7}
 801ce0c:	b083      	sub	sp, #12
 801ce0e:	af00      	add	r7, sp, #0
 801ce10:	6078      	str	r0, [r7, #4]
  return 0;			/* just set max_memory_to_use to 0 */
 801ce12:	2300      	movs	r3, #0
}
 801ce14:	4618      	mov	r0, r3
 801ce16:	370c      	adds	r7, #12
 801ce18:	46bd      	mov	sp, r7
 801ce1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce1e:	4770      	bx	lr

0801ce20 <jpeg_mem_term>:

GLOBAL(void)
jpeg_mem_term (j_common_ptr cinfo)
{
 801ce20:	b480      	push	{r7}
 801ce22:	b083      	sub	sp, #12
 801ce24:	af00      	add	r7, sp, #0
 801ce26:	6078      	str	r0, [r7, #4]
}
 801ce28:	bf00      	nop
 801ce2a:	370c      	adds	r7, #12
 801ce2c:	46bd      	mov	sp, r7
 801ce2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ce32:	4770      	bx	lr

0801ce34 <select_ncolors>:
LOCAL(int)
select_ncolors (j_decompress_ptr cinfo, int Ncolors[])
/* Determine allocation of desired colors to components, */
/* and fill in Ncolors[] array to indicate choice. */
/* Return value is total number of colors (product of Ncolors[] values). */
{
 801ce34:	b580      	push	{r7, lr}
 801ce36:	b08a      	sub	sp, #40	; 0x28
 801ce38:	af00      	add	r7, sp, #0
 801ce3a:	6078      	str	r0, [r7, #4]
 801ce3c:	6039      	str	r1, [r7, #0]
  int nc = cinfo->out_color_components; /* number of color components */
 801ce3e:	687b      	ldr	r3, [r7, #4]
 801ce40:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801ce42:	613b      	str	r3, [r7, #16]
  int max_colors = cinfo->desired_number_of_colors;
 801ce44:	687b      	ldr	r3, [r7, #4]
 801ce46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801ce48:	60fb      	str	r3, [r7, #12]
  long temp;
  static const int RGB_order[3] = { RGB_GREEN, RGB_RED, RGB_BLUE };

  /* We can allocate at least the nc'th root of max_colors per component. */
  /* Compute floor(nc'th root of max_colors). */
  iroot = 1;
 801ce4a:	2301      	movs	r3, #1
 801ce4c:	623b      	str	r3, [r7, #32]
  do {
    iroot++;
 801ce4e:	6a3b      	ldr	r3, [r7, #32]
 801ce50:	3301      	adds	r3, #1
 801ce52:	623b      	str	r3, [r7, #32]
    temp = iroot;		/* set temp = iroot ** nc */
 801ce54:	6a3b      	ldr	r3, [r7, #32]
 801ce56:	617b      	str	r3, [r7, #20]
    for (i = 1; i < nc; i++)
 801ce58:	2301      	movs	r3, #1
 801ce5a:	61fb      	str	r3, [r7, #28]
 801ce5c:	e007      	b.n	801ce6e <select_ncolors+0x3a>
      temp *= iroot;
 801ce5e:	697b      	ldr	r3, [r7, #20]
 801ce60:	6a3a      	ldr	r2, [r7, #32]
 801ce62:	fb02 f303 	mul.w	r3, r2, r3
 801ce66:	617b      	str	r3, [r7, #20]
    for (i = 1; i < nc; i++)
 801ce68:	69fb      	ldr	r3, [r7, #28]
 801ce6a:	3301      	adds	r3, #1
 801ce6c:	61fb      	str	r3, [r7, #28]
 801ce6e:	69fa      	ldr	r2, [r7, #28]
 801ce70:	693b      	ldr	r3, [r7, #16]
 801ce72:	429a      	cmp	r2, r3
 801ce74:	dbf3      	blt.n	801ce5e <select_ncolors+0x2a>
  } while (temp <= (long) max_colors); /* repeat till iroot exceeds root */
 801ce76:	697a      	ldr	r2, [r7, #20]
 801ce78:	68fb      	ldr	r3, [r7, #12]
 801ce7a:	429a      	cmp	r2, r3
 801ce7c:	dde7      	ble.n	801ce4e <select_ncolors+0x1a>
  iroot--;			/* now iroot = floor(root) */
 801ce7e:	6a3b      	ldr	r3, [r7, #32]
 801ce80:	3b01      	subs	r3, #1
 801ce82:	623b      	str	r3, [r7, #32]

  /* Must have at least 2 color values per component */
  if (iroot < 2)
 801ce84:	6a3b      	ldr	r3, [r7, #32]
 801ce86:	2b01      	cmp	r3, #1
 801ce88:	dc0c      	bgt.n	801cea4 <select_ncolors+0x70>
    ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, (int) temp);
 801ce8a:	687b      	ldr	r3, [r7, #4]
 801ce8c:	681b      	ldr	r3, [r3, #0]
 801ce8e:	223a      	movs	r2, #58	; 0x3a
 801ce90:	615a      	str	r2, [r3, #20]
 801ce92:	687b      	ldr	r3, [r7, #4]
 801ce94:	681b      	ldr	r3, [r3, #0]
 801ce96:	697a      	ldr	r2, [r7, #20]
 801ce98:	619a      	str	r2, [r3, #24]
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	681b      	ldr	r3, [r3, #0]
 801cea0:	6878      	ldr	r0, [r7, #4]
 801cea2:	4798      	blx	r3

  /* Initialize to iroot color values for each component */
  total_colors = 1;
 801cea4:	2301      	movs	r3, #1
 801cea6:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < nc; i++) {
 801cea8:	2300      	movs	r3, #0
 801ceaa:	61fb      	str	r3, [r7, #28]
 801ceac:	e00d      	b.n	801ceca <select_ncolors+0x96>
    Ncolors[i] = iroot;
 801ceae:	69fb      	ldr	r3, [r7, #28]
 801ceb0:	009b      	lsls	r3, r3, #2
 801ceb2:	683a      	ldr	r2, [r7, #0]
 801ceb4:	4413      	add	r3, r2
 801ceb6:	6a3a      	ldr	r2, [r7, #32]
 801ceb8:	601a      	str	r2, [r3, #0]
    total_colors *= iroot;
 801ceba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801cebc:	6a3a      	ldr	r2, [r7, #32]
 801cebe:	fb02 f303 	mul.w	r3, r2, r3
 801cec2:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0; i < nc; i++) {
 801cec4:	69fb      	ldr	r3, [r7, #28]
 801cec6:	3301      	adds	r3, #1
 801cec8:	61fb      	str	r3, [r7, #28]
 801ceca:	69fa      	ldr	r2, [r7, #28]
 801cecc:	693b      	ldr	r3, [r7, #16]
 801cece:	429a      	cmp	r2, r3
 801ced0:	dbed      	blt.n	801ceae <select_ncolors+0x7a>
   * Sometimes, the first component can be incremented more than once!
   * (Example: for 16 colors, we start at 2*2*2, go to 3*2*2, then 4*2*2.)
   * In RGB colorspace, try to increment G first, then R, then B.
   */
  do {
    changed = FALSE;
 801ced2:	2300      	movs	r3, #0
 801ced4:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < nc; i++) {
 801ced6:	2300      	movs	r3, #0
 801ced8:	61fb      	str	r3, [r7, #28]
 801ceda:	e030      	b.n	801cf3e <select_ncolors+0x10a>
      j = (cinfo->out_color_space == JCS_RGB ? RGB_order[i] : i);
 801cedc:	687b      	ldr	r3, [r7, #4]
 801cede:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 801cee2:	2b02      	cmp	r3, #2
 801cee4:	d104      	bne.n	801cef0 <select_ncolors+0xbc>
 801cee6:	4a1d      	ldr	r2, [pc, #116]	; (801cf5c <select_ncolors+0x128>)
 801cee8:	69fb      	ldr	r3, [r7, #28]
 801ceea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801ceee:	e000      	b.n	801cef2 <select_ncolors+0xbe>
 801cef0:	69fb      	ldr	r3, [r7, #28]
 801cef2:	60bb      	str	r3, [r7, #8]
      /* calculate new total_colors if Ncolors[j] is incremented */
      temp = total_colors / Ncolors[j];
 801cef4:	68bb      	ldr	r3, [r7, #8]
 801cef6:	009b      	lsls	r3, r3, #2
 801cef8:	683a      	ldr	r2, [r7, #0]
 801cefa:	4413      	add	r3, r2
 801cefc:	681b      	ldr	r3, [r3, #0]
 801cefe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801cf00:	fb92 f3f3 	sdiv	r3, r2, r3
 801cf04:	617b      	str	r3, [r7, #20]
      temp *= Ncolors[j]+1;	/* done in long arith to avoid oflo */
 801cf06:	68bb      	ldr	r3, [r7, #8]
 801cf08:	009b      	lsls	r3, r3, #2
 801cf0a:	683a      	ldr	r2, [r7, #0]
 801cf0c:	4413      	add	r3, r2
 801cf0e:	681b      	ldr	r3, [r3, #0]
 801cf10:	1c5a      	adds	r2, r3, #1
 801cf12:	697b      	ldr	r3, [r7, #20]
 801cf14:	fb02 f303 	mul.w	r3, r2, r3
 801cf18:	617b      	str	r3, [r7, #20]
      if (temp > (long) max_colors)
 801cf1a:	697a      	ldr	r2, [r7, #20]
 801cf1c:	68fb      	ldr	r3, [r7, #12]
 801cf1e:	429a      	cmp	r2, r3
 801cf20:	dc12      	bgt.n	801cf48 <select_ncolors+0x114>
	break;			/* won't fit, done with this pass */
      Ncolors[j]++;		/* OK, apply the increment */
 801cf22:	68bb      	ldr	r3, [r7, #8]
 801cf24:	009b      	lsls	r3, r3, #2
 801cf26:	683a      	ldr	r2, [r7, #0]
 801cf28:	4413      	add	r3, r2
 801cf2a:	681a      	ldr	r2, [r3, #0]
 801cf2c:	3201      	adds	r2, #1
 801cf2e:	601a      	str	r2, [r3, #0]
      total_colors = (int) temp;
 801cf30:	697b      	ldr	r3, [r7, #20]
 801cf32:	627b      	str	r3, [r7, #36]	; 0x24
      changed = TRUE;
 801cf34:	2301      	movs	r3, #1
 801cf36:	61bb      	str	r3, [r7, #24]
    for (i = 0; i < nc; i++) {
 801cf38:	69fb      	ldr	r3, [r7, #28]
 801cf3a:	3301      	adds	r3, #1
 801cf3c:	61fb      	str	r3, [r7, #28]
 801cf3e:	69fa      	ldr	r2, [r7, #28]
 801cf40:	693b      	ldr	r3, [r7, #16]
 801cf42:	429a      	cmp	r2, r3
 801cf44:	dbca      	blt.n	801cedc <select_ncolors+0xa8>
 801cf46:	e000      	b.n	801cf4a <select_ncolors+0x116>
	break;			/* won't fit, done with this pass */
 801cf48:	bf00      	nop
    }
  } while (changed);
 801cf4a:	69bb      	ldr	r3, [r7, #24]
 801cf4c:	2b00      	cmp	r3, #0
 801cf4e:	d1c0      	bne.n	801ced2 <select_ncolors+0x9e>

  return total_colors;
 801cf50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 801cf52:	4618      	mov	r0, r3
 801cf54:	3728      	adds	r7, #40	; 0x28
 801cf56:	46bd      	mov	sp, r7
 801cf58:	bd80      	pop	{r7, pc}
 801cf5a:	bf00      	nop
 801cf5c:	08021874 	.word	0x08021874

0801cf60 <output_value>:

LOCAL(int)
output_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return j'th output value, where j will range from 0 to maxj */
/* The output values must fall in 0..MAXJSAMPLE in increasing order */
{
 801cf60:	b480      	push	{r7}
 801cf62:	b085      	sub	sp, #20
 801cf64:	af00      	add	r7, sp, #0
 801cf66:	60f8      	str	r0, [r7, #12]
 801cf68:	60b9      	str	r1, [r7, #8]
 801cf6a:	607a      	str	r2, [r7, #4]
 801cf6c:	603b      	str	r3, [r7, #0]
  /* We always provide values 0 and MAXJSAMPLE for each component;
   * any additional values are equally spaced between these limits.
   * (Forcing the upper and lower values to the limits ensures that
   * dithering can't produce a color outside the selected gamut.)
   */
  return (int) (((INT32) j * MAXJSAMPLE + maxj/2) / maxj);
 801cf6e:	687a      	ldr	r2, [r7, #4]
 801cf70:	4613      	mov	r3, r2
 801cf72:	021b      	lsls	r3, r3, #8
 801cf74:	1a9a      	subs	r2, r3, r2
 801cf76:	683b      	ldr	r3, [r7, #0]
 801cf78:	0fd9      	lsrs	r1, r3, #31
 801cf7a:	440b      	add	r3, r1
 801cf7c:	105b      	asrs	r3, r3, #1
 801cf7e:	441a      	add	r2, r3
 801cf80:	683b      	ldr	r3, [r7, #0]
 801cf82:	fb92 f3f3 	sdiv	r3, r2, r3
}
 801cf86:	4618      	mov	r0, r3
 801cf88:	3714      	adds	r7, #20
 801cf8a:	46bd      	mov	sp, r7
 801cf8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cf90:	4770      	bx	lr

0801cf92 <largest_input_value>:

LOCAL(int)
largest_input_value (j_decompress_ptr cinfo, int ci, int j, int maxj)
/* Return largest input value that should map to j'th output value */
/* Must have largest(j=0) >= 0, and largest(j=maxj) >= MAXJSAMPLE */
{
 801cf92:	b480      	push	{r7}
 801cf94:	b085      	sub	sp, #20
 801cf96:	af00      	add	r7, sp, #0
 801cf98:	60f8      	str	r0, [r7, #12]
 801cf9a:	60b9      	str	r1, [r7, #8]
 801cf9c:	607a      	str	r2, [r7, #4]
 801cf9e:	603b      	str	r3, [r7, #0]
  /* Breakpoints are halfway between values returned by output_value */
  return (int) (((INT32) (2*j + 1) * MAXJSAMPLE + maxj) / (2*maxj));
 801cfa0:	687b      	ldr	r3, [r7, #4]
 801cfa2:	005b      	lsls	r3, r3, #1
 801cfa4:	1c5a      	adds	r2, r3, #1
 801cfa6:	4613      	mov	r3, r2
 801cfa8:	021b      	lsls	r3, r3, #8
 801cfaa:	1a9a      	subs	r2, r3, r2
 801cfac:	683b      	ldr	r3, [r7, #0]
 801cfae:	441a      	add	r2, r3
 801cfb0:	683b      	ldr	r3, [r7, #0]
 801cfb2:	005b      	lsls	r3, r3, #1
 801cfb4:	fb92 f3f3 	sdiv	r3, r2, r3
}
 801cfb8:	4618      	mov	r0, r3
 801cfba:	3714      	adds	r7, #20
 801cfbc:	46bd      	mov	sp, r7
 801cfbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cfc2:	4770      	bx	lr

0801cfc4 <create_colormap>:
 * Create the colormap.
 */

LOCAL(void)
create_colormap (j_decompress_ptr cinfo)
{
 801cfc4:	b590      	push	{r4, r7, lr}
 801cfc6:	b08f      	sub	sp, #60	; 0x3c
 801cfc8:	af00      	add	r7, sp, #0
 801cfca:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801cfcc:	687b      	ldr	r3, [r7, #4]
 801cfce:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801cfd2:	623b      	str	r3, [r7, #32]
  JSAMPARRAY colormap;		/* Created colormap */
  int total_colors;		/* Number of distinct output colors */
  int i,j,k, nci, blksize, blkdist, ptr, val;

  /* Select number of colors for each component */
  total_colors = select_ncolors(cinfo, cquantize->Ncolors);
 801cfd4:	6a3b      	ldr	r3, [r7, #32]
 801cfd6:	3320      	adds	r3, #32
 801cfd8:	4619      	mov	r1, r3
 801cfda:	6878      	ldr	r0, [r7, #4]
 801cfdc:	f7ff ff2a 	bl	801ce34 <select_ncolors>
 801cfe0:	61f8      	str	r0, [r7, #28]

  /* Report selected color counts */
  if (cinfo->out_color_components == 3)
 801cfe2:	687b      	ldr	r3, [r7, #4]
 801cfe4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801cfe6:	2b03      	cmp	r3, #3
 801cfe8:	d120      	bne.n	801d02c <create_colormap+0x68>
    TRACEMS4(cinfo, 1, JTRC_QUANT_3_NCOLORS,
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	3318      	adds	r3, #24
 801cff0:	61bb      	str	r3, [r7, #24]
 801cff2:	69bb      	ldr	r3, [r7, #24]
 801cff4:	69fa      	ldr	r2, [r7, #28]
 801cff6:	601a      	str	r2, [r3, #0]
 801cff8:	69bb      	ldr	r3, [r7, #24]
 801cffa:	3304      	adds	r3, #4
 801cffc:	6a3a      	ldr	r2, [r7, #32]
 801cffe:	6a12      	ldr	r2, [r2, #32]
 801d000:	601a      	str	r2, [r3, #0]
 801d002:	69bb      	ldr	r3, [r7, #24]
 801d004:	3308      	adds	r3, #8
 801d006:	6a3a      	ldr	r2, [r7, #32]
 801d008:	6a52      	ldr	r2, [r2, #36]	; 0x24
 801d00a:	601a      	str	r2, [r3, #0]
 801d00c:	69bb      	ldr	r3, [r7, #24]
 801d00e:	330c      	adds	r3, #12
 801d010:	6a3a      	ldr	r2, [r7, #32]
 801d012:	6a92      	ldr	r2, [r2, #40]	; 0x28
 801d014:	601a      	str	r2, [r3, #0]
 801d016:	687b      	ldr	r3, [r7, #4]
 801d018:	681b      	ldr	r3, [r3, #0]
 801d01a:	2260      	movs	r2, #96	; 0x60
 801d01c:	615a      	str	r2, [r3, #20]
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	685b      	ldr	r3, [r3, #4]
 801d024:	2101      	movs	r1, #1
 801d026:	6878      	ldr	r0, [r7, #4]
 801d028:	4798      	blx	r3
 801d02a:	e00d      	b.n	801d048 <create_colormap+0x84>
	     total_colors, cquantize->Ncolors[0],
	     cquantize->Ncolors[1], cquantize->Ncolors[2]);
  else
    TRACEMS1(cinfo, 1, JTRC_QUANT_NCOLORS, total_colors);
 801d02c:	687b      	ldr	r3, [r7, #4]
 801d02e:	681b      	ldr	r3, [r3, #0]
 801d030:	2261      	movs	r2, #97	; 0x61
 801d032:	615a      	str	r2, [r3, #20]
 801d034:	687b      	ldr	r3, [r7, #4]
 801d036:	681b      	ldr	r3, [r3, #0]
 801d038:	69fa      	ldr	r2, [r7, #28]
 801d03a:	619a      	str	r2, [r3, #24]
 801d03c:	687b      	ldr	r3, [r7, #4]
 801d03e:	681b      	ldr	r3, [r3, #0]
 801d040:	685b      	ldr	r3, [r3, #4]
 801d042:	2101      	movs	r1, #1
 801d044:	6878      	ldr	r0, [r7, #4]
 801d046:	4798      	blx	r3

  /* Allocate and fill in the colormap. */
  /* The colors are ordered in the map in standard row-major order, */
  /* i.e. rightmost (highest-indexed) color changes most rapidly. */

  colormap = (*cinfo->mem->alloc_sarray)
 801d048:	687b      	ldr	r3, [r7, #4]
 801d04a:	685b      	ldr	r3, [r3, #4]
 801d04c:	689c      	ldr	r4, [r3, #8]
 801d04e:	69fa      	ldr	r2, [r7, #28]
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) total_colors, (JDIMENSION) cinfo->out_color_components);
 801d050:	687b      	ldr	r3, [r7, #4]
 801d052:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  colormap = (*cinfo->mem->alloc_sarray)
 801d054:	2101      	movs	r1, #1
 801d056:	6878      	ldr	r0, [r7, #4]
 801d058:	47a0      	blx	r4
 801d05a:	6178      	str	r0, [r7, #20]

  /* blksize is number of adjacent repeated entries for a component */
  /* blkdist is distance between groups of identical entries for a component */
  blkdist = total_colors;
 801d05c:	69fb      	ldr	r3, [r7, #28]
 801d05e:	62bb      	str	r3, [r7, #40]	; 0x28

  for (i = 0; i < cinfo->out_color_components; i++) {
 801d060:	2300      	movs	r3, #0
 801d062:	637b      	str	r3, [r7, #52]	; 0x34
 801d064:	e045      	b.n	801d0f2 <create_colormap+0x12e>
    /* fill in colormap entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801d066:	6a3b      	ldr	r3, [r7, #32]
 801d068:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d06a:	3208      	adds	r2, #8
 801d06c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d070:	613b      	str	r3, [r7, #16]
    blksize = blkdist / nci;
 801d072:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d074:	693b      	ldr	r3, [r7, #16]
 801d076:	fb92 f3f3 	sdiv	r3, r2, r3
 801d07a:	60fb      	str	r3, [r7, #12]
    for (j = 0; j < nci; j++) {
 801d07c:	2300      	movs	r3, #0
 801d07e:	633b      	str	r3, [r7, #48]	; 0x30
 801d080:	e02e      	b.n	801d0e0 <create_colormap+0x11c>
      /* Compute j'th output value (out of nci) for component */
      val = output_value(cinfo, i, j, nci-1);
 801d082:	693b      	ldr	r3, [r7, #16]
 801d084:	3b01      	subs	r3, #1
 801d086:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d088:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801d08a:	6878      	ldr	r0, [r7, #4]
 801d08c:	f7ff ff68 	bl	801cf60 <output_value>
 801d090:	60b8      	str	r0, [r7, #8]
      /* Fill in all colormap entries that have this value of this component */
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801d092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d094:	68fa      	ldr	r2, [r7, #12]
 801d096:	fb02 f303 	mul.w	r3, r2, r3
 801d09a:	627b      	str	r3, [r7, #36]	; 0x24
 801d09c:	e019      	b.n	801d0d2 <create_colormap+0x10e>
	/* fill in blksize entries beginning at ptr */
	for (k = 0; k < blksize; k++)
 801d09e:	2300      	movs	r3, #0
 801d0a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d0a2:	e00e      	b.n	801d0c2 <create_colormap+0xfe>
	  colormap[i][ptr+k] = (JSAMPLE) val;
 801d0a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0a6:	009b      	lsls	r3, r3, #2
 801d0a8:	697a      	ldr	r2, [r7, #20]
 801d0aa:	4413      	add	r3, r2
 801d0ac:	681b      	ldr	r3, [r3, #0]
 801d0ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801d0b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d0b2:	440a      	add	r2, r1
 801d0b4:	4413      	add	r3, r2
 801d0b6:	68ba      	ldr	r2, [r7, #8]
 801d0b8:	b2d2      	uxtb	r2, r2
 801d0ba:	701a      	strb	r2, [r3, #0]
	for (k = 0; k < blksize; k++)
 801d0bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d0be:	3301      	adds	r3, #1
 801d0c0:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d0c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d0c4:	68fb      	ldr	r3, [r7, #12]
 801d0c6:	429a      	cmp	r2, r3
 801d0c8:	dbec      	blt.n	801d0a4 <create_colormap+0xe0>
      for (ptr = j * blksize; ptr < total_colors; ptr += blkdist) {
 801d0ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d0cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d0ce:	4413      	add	r3, r2
 801d0d0:	627b      	str	r3, [r7, #36]	; 0x24
 801d0d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d0d4:	69fb      	ldr	r3, [r7, #28]
 801d0d6:	429a      	cmp	r2, r3
 801d0d8:	dbe1      	blt.n	801d09e <create_colormap+0xda>
    for (j = 0; j < nci; j++) {
 801d0da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d0dc:	3301      	adds	r3, #1
 801d0de:	633b      	str	r3, [r7, #48]	; 0x30
 801d0e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d0e2:	693b      	ldr	r3, [r7, #16]
 801d0e4:	429a      	cmp	r2, r3
 801d0e6:	dbcc      	blt.n	801d082 <create_colormap+0xbe>
      }
    }
    blkdist = blksize;		/* blksize of this color is blkdist of next */
 801d0e8:	68fb      	ldr	r3, [r7, #12]
 801d0ea:	62bb      	str	r3, [r7, #40]	; 0x28
  for (i = 0; i < cinfo->out_color_components; i++) {
 801d0ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d0ee:	3301      	adds	r3, #1
 801d0f0:	637b      	str	r3, [r7, #52]	; 0x34
 801d0f2:	687b      	ldr	r3, [r7, #4]
 801d0f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d0f6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801d0f8:	429a      	cmp	r2, r3
 801d0fa:	dbb4      	blt.n	801d066 <create_colormap+0xa2>
  }

  /* Save the colormap in private storage,
   * where it will survive color quantization mode changes.
   */
  cquantize->sv_colormap = colormap;
 801d0fc:	6a3b      	ldr	r3, [r7, #32]
 801d0fe:	697a      	ldr	r2, [r7, #20]
 801d100:	611a      	str	r2, [r3, #16]
  cquantize->sv_actual = total_colors;
 801d102:	6a3b      	ldr	r3, [r7, #32]
 801d104:	69fa      	ldr	r2, [r7, #28]
 801d106:	615a      	str	r2, [r3, #20]
}
 801d108:	bf00      	nop
 801d10a:	373c      	adds	r7, #60	; 0x3c
 801d10c:	46bd      	mov	sp, r7
 801d10e:	bd90      	pop	{r4, r7, pc}

0801d110 <create_colorindex>:
 * Create the color index table.
 */

LOCAL(void)
create_colorindex (j_decompress_ptr cinfo)
{
 801d110:	b590      	push	{r4, r7, lr}
 801d112:	b08d      	sub	sp, #52	; 0x34
 801d114:	af00      	add	r7, sp, #0
 801d116:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d11e:	617b      	str	r3, [r7, #20]
  /* For ordered dither, we pad the color index tables by MAXJSAMPLE in
   * each direction (input index values can be -MAXJSAMPLE .. 2*MAXJSAMPLE).
   * This is not necessary in the other dithering modes.  However, we
   * flag whether it was done in case user changes dithering mode.
   */
  if (cinfo->dither_mode == JDITHER_ORDERED) {
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801d126:	2b01      	cmp	r3, #1
 801d128:	d106      	bne.n	801d138 <create_colorindex+0x28>
    pad = MAXJSAMPLE*2;
 801d12a:	f44f 73ff 	mov.w	r3, #510	; 0x1fe
 801d12e:	61bb      	str	r3, [r7, #24]
    cquantize->is_padded = TRUE;
 801d130:	697b      	ldr	r3, [r7, #20]
 801d132:	2201      	movs	r2, #1
 801d134:	61da      	str	r2, [r3, #28]
 801d136:	e004      	b.n	801d142 <create_colorindex+0x32>
  } else {
    pad = 0;
 801d138:	2300      	movs	r3, #0
 801d13a:	61bb      	str	r3, [r7, #24]
    cquantize->is_padded = FALSE;
 801d13c:	697b      	ldr	r3, [r7, #20]
 801d13e:	2200      	movs	r2, #0
 801d140:	61da      	str	r2, [r3, #28]
  }

  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801d142:	687b      	ldr	r3, [r7, #4]
 801d144:	685b      	ldr	r3, [r3, #4]
 801d146:	689c      	ldr	r4, [r3, #8]
    ((j_common_ptr) cinfo, JPOOL_IMAGE,
     (JDIMENSION) (MAXJSAMPLE+1 + pad),
 801d148:	69bb      	ldr	r3, [r7, #24]
 801d14a:	f503 7380 	add.w	r3, r3, #256	; 0x100
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801d14e:	461a      	mov	r2, r3
     (JDIMENSION) cinfo->out_color_components);
 801d150:	687b      	ldr	r3, [r7, #4]
 801d152:	6f9b      	ldr	r3, [r3, #120]	; 0x78
  cquantize->colorindex = (*cinfo->mem->alloc_sarray)
 801d154:	2101      	movs	r1, #1
 801d156:	6878      	ldr	r0, [r7, #4]
 801d158:	47a0      	blx	r4
 801d15a:	4602      	mov	r2, r0
 801d15c:	697b      	ldr	r3, [r7, #20]
 801d15e:	619a      	str	r2, [r3, #24]

  /* blksize is number of adjacent repeated entries for a component */
  blksize = cquantize->sv_actual;
 801d160:	697b      	ldr	r3, [r7, #20]
 801d162:	695b      	ldr	r3, [r3, #20]
 801d164:	623b      	str	r3, [r7, #32]

  for (i = 0; i < cinfo->out_color_components; i++) {
 801d166:	2300      	movs	r3, #0
 801d168:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d16a:	e06e      	b.n	801d24a <create_colorindex+0x13a>
    /* fill in colorindex entries for i'th color component */
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801d16c:	697b      	ldr	r3, [r7, #20]
 801d16e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d170:	3208      	adds	r2, #8
 801d172:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d176:	613b      	str	r3, [r7, #16]
    blksize = blksize / nci;
 801d178:	6a3a      	ldr	r2, [r7, #32]
 801d17a:	693b      	ldr	r3, [r7, #16]
 801d17c:	fb92 f3f3 	sdiv	r3, r2, r3
 801d180:	623b      	str	r3, [r7, #32]

    /* adjust colorindex pointers to provide padding at negative indexes. */
    if (pad)
 801d182:	69bb      	ldr	r3, [r7, #24]
 801d184:	2b00      	cmp	r3, #0
 801d186:	d00c      	beq.n	801d1a2 <create_colorindex+0x92>
      cquantize->colorindex[i] += MAXJSAMPLE;
 801d188:	697b      	ldr	r3, [r7, #20]
 801d18a:	699a      	ldr	r2, [r3, #24]
 801d18c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d18e:	009b      	lsls	r3, r3, #2
 801d190:	4413      	add	r3, r2
 801d192:	681a      	ldr	r2, [r3, #0]
 801d194:	697b      	ldr	r3, [r7, #20]
 801d196:	6999      	ldr	r1, [r3, #24]
 801d198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d19a:	009b      	lsls	r3, r3, #2
 801d19c:	440b      	add	r3, r1
 801d19e:	32ff      	adds	r2, #255	; 0xff
 801d1a0:	601a      	str	r2, [r3, #0]

    /* in loop, val = index of current output value, */
    /* and k = largest j that maps to current val */
    indexptr = cquantize->colorindex[i];
 801d1a2:	697b      	ldr	r3, [r7, #20]
 801d1a4:	699a      	ldr	r2, [r3, #24]
 801d1a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d1a8:	009b      	lsls	r3, r3, #2
 801d1aa:	4413      	add	r3, r2
 801d1ac:	681b      	ldr	r3, [r3, #0]
 801d1ae:	60fb      	str	r3, [r7, #12]
    val = 0;
 801d1b0:	2300      	movs	r3, #0
 801d1b2:	61fb      	str	r3, [r7, #28]
    k = largest_input_value(cinfo, i, 0, nci-1);
 801d1b4:	693b      	ldr	r3, [r7, #16]
 801d1b6:	3b01      	subs	r3, #1
 801d1b8:	2200      	movs	r2, #0
 801d1ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d1bc:	6878      	ldr	r0, [r7, #4]
 801d1be:	f7ff fee8 	bl	801cf92 <largest_input_value>
 801d1c2:	6278      	str	r0, [r7, #36]	; 0x24
    for (j = 0; j <= MAXJSAMPLE; j++) {
 801d1c4:	2300      	movs	r3, #0
 801d1c6:	62bb      	str	r3, [r7, #40]	; 0x28
 801d1c8:	e01c      	b.n	801d204 <create_colorindex+0xf4>
      while (j > k)		/* advance val if past boundary */
	k = largest_input_value(cinfo, i, ++val, nci-1);
 801d1ca:	69fb      	ldr	r3, [r7, #28]
 801d1cc:	3301      	adds	r3, #1
 801d1ce:	61fb      	str	r3, [r7, #28]
 801d1d0:	693b      	ldr	r3, [r7, #16]
 801d1d2:	3b01      	subs	r3, #1
 801d1d4:	69fa      	ldr	r2, [r7, #28]
 801d1d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801d1d8:	6878      	ldr	r0, [r7, #4]
 801d1da:	f7ff feda 	bl	801cf92 <largest_input_value>
 801d1de:	6278      	str	r0, [r7, #36]	; 0x24
      while (j > k)		/* advance val if past boundary */
 801d1e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d1e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d1e4:	429a      	cmp	r2, r3
 801d1e6:	dcf0      	bgt.n	801d1ca <create_colorindex+0xba>
      /* premultiply so that no multiplication needed in main processing */
      indexptr[j] = (JSAMPLE) (val * blksize);
 801d1e8:	69fb      	ldr	r3, [r7, #28]
 801d1ea:	b2d9      	uxtb	r1, r3
 801d1ec:	6a3b      	ldr	r3, [r7, #32]
 801d1ee:	b2da      	uxtb	r2, r3
 801d1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d1f2:	68f8      	ldr	r0, [r7, #12]
 801d1f4:	4403      	add	r3, r0
 801d1f6:	fb11 f202 	smulbb	r2, r1, r2
 801d1fa:	b2d2      	uxtb	r2, r2
 801d1fc:	701a      	strb	r2, [r3, #0]
    for (j = 0; j <= MAXJSAMPLE; j++) {
 801d1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d200:	3301      	adds	r3, #1
 801d202:	62bb      	str	r3, [r7, #40]	; 0x28
 801d204:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d206:	2bff      	cmp	r3, #255	; 0xff
 801d208:	ddea      	ble.n	801d1e0 <create_colorindex+0xd0>
    }
    /* Pad at both ends if necessary */
    if (pad)
 801d20a:	69bb      	ldr	r3, [r7, #24]
 801d20c:	2b00      	cmp	r3, #0
 801d20e:	d019      	beq.n	801d244 <create_colorindex+0x134>
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801d210:	2301      	movs	r3, #1
 801d212:	62bb      	str	r3, [r7, #40]	; 0x28
 801d214:	e013      	b.n	801d23e <create_colorindex+0x12e>
	indexptr[-j] = indexptr[0];
 801d216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d218:	425b      	negs	r3, r3
 801d21a:	461a      	mov	r2, r3
 801d21c:	68fb      	ldr	r3, [r7, #12]
 801d21e:	4413      	add	r3, r2
 801d220:	68fa      	ldr	r2, [r7, #12]
 801d222:	7812      	ldrb	r2, [r2, #0]
 801d224:	701a      	strb	r2, [r3, #0]
	indexptr[MAXJSAMPLE+j] = indexptr[MAXJSAMPLE];
 801d226:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d228:	33ff      	adds	r3, #255	; 0xff
 801d22a:	461a      	mov	r2, r3
 801d22c:	68fb      	ldr	r3, [r7, #12]
 801d22e:	4413      	add	r3, r2
 801d230:	68fa      	ldr	r2, [r7, #12]
 801d232:	f892 20ff 	ldrb.w	r2, [r2, #255]	; 0xff
 801d236:	701a      	strb	r2, [r3, #0]
      for (j = 1; j <= MAXJSAMPLE; j++) {
 801d238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d23a:	3301      	adds	r3, #1
 801d23c:	62bb      	str	r3, [r7, #40]	; 0x28
 801d23e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d240:	2bff      	cmp	r3, #255	; 0xff
 801d242:	dde8      	ble.n	801d216 <create_colorindex+0x106>
  for (i = 0; i < cinfo->out_color_components; i++) {
 801d244:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d246:	3301      	adds	r3, #1
 801d248:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d24a:	687b      	ldr	r3, [r7, #4]
 801d24c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d24e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d250:	429a      	cmp	r2, r3
 801d252:	db8b      	blt.n	801d16c <create_colorindex+0x5c>
      }
  }
}
 801d254:	bf00      	nop
 801d256:	bf00      	nop
 801d258:	3734      	adds	r7, #52	; 0x34
 801d25a:	46bd      	mov	sp, r7
 801d25c:	bd90      	pop	{r4, r7, pc}
	...

0801d260 <make_odither_array>:
 * distinct output values.
 */

LOCAL(ODITHER_MATRIX_PTR)
make_odither_array (j_decompress_ptr cinfo, int ncolors)
{
 801d260:	b580      	push	{r7, lr}
 801d262:	b088      	sub	sp, #32
 801d264:	af00      	add	r7, sp, #0
 801d266:	6078      	str	r0, [r7, #4]
 801d268:	6039      	str	r1, [r7, #0]
  ODITHER_MATRIX_PTR odither;
  int j,k;
  INT32 num,den;

  odither = (ODITHER_MATRIX_PTR)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801d26a:	687b      	ldr	r3, [r7, #4]
 801d26c:	685b      	ldr	r3, [r3, #4]
 801d26e:	681b      	ldr	r3, [r3, #0]
 801d270:	f44f 6280 	mov.w	r2, #1024	; 0x400
 801d274:	2101      	movs	r1, #1
 801d276:	6878      	ldr	r0, [r7, #4]
 801d278:	4798      	blx	r3
 801d27a:	6178      	str	r0, [r7, #20]
  /* The inter-value distance for this color is MAXJSAMPLE/(ncolors-1).
   * Hence the dither value for the matrix cell with fill order f
   * (f=0..N-1) should be (N-1-2*f)/(2*N) * MAXJSAMPLE/(ncolors-1).
   * On 16-bit-int machine, be careful to avoid overflow.
   */
  den = 2 * ODITHER_CELLS * ((INT32) (ncolors - 1));
 801d27c:	683b      	ldr	r3, [r7, #0]
 801d27e:	3b01      	subs	r3, #1
 801d280:	025b      	lsls	r3, r3, #9
 801d282:	613b      	str	r3, [r7, #16]
  for (j = 0; j < ODITHER_SIZE; j++) {
 801d284:	2300      	movs	r3, #0
 801d286:	61fb      	str	r3, [r7, #28]
 801d288:	e02e      	b.n	801d2e8 <make_odither_array+0x88>
    for (k = 0; k < ODITHER_SIZE; k++) {
 801d28a:	2300      	movs	r3, #0
 801d28c:	61bb      	str	r3, [r7, #24]
 801d28e:	e025      	b.n	801d2dc <make_odither_array+0x7c>
      num = ((INT32) (ODITHER_CELLS-1 - 2*((int)base_dither_matrix[j][k])))
 801d290:	4a19      	ldr	r2, [pc, #100]	; (801d2f8 <make_odither_array+0x98>)
 801d292:	69fb      	ldr	r3, [r7, #28]
 801d294:	011b      	lsls	r3, r3, #4
 801d296:	441a      	add	r2, r3
 801d298:	69bb      	ldr	r3, [r7, #24]
 801d29a:	4413      	add	r3, r2
 801d29c:	781b      	ldrb	r3, [r3, #0]
 801d29e:	005b      	lsls	r3, r3, #1
 801d2a0:	f1c3 02ff 	rsb	r2, r3, #255	; 0xff
 801d2a4:	4613      	mov	r3, r2
 801d2a6:	021b      	lsls	r3, r3, #8
 801d2a8:	1a9b      	subs	r3, r3, r2
 801d2aa:	60fb      	str	r3, [r7, #12]
	    * MAXJSAMPLE;
      /* Ensure round towards zero despite C's lack of consistency
       * about rounding negative values in integer division...
       */
      odither[j][k] = (int) (num<0 ? -((-num)/den) : num/den);
 801d2ac:	68fb      	ldr	r3, [r7, #12]
 801d2ae:	2b00      	cmp	r3, #0
 801d2b0:	da06      	bge.n	801d2c0 <make_odither_array+0x60>
 801d2b2:	68fb      	ldr	r3, [r7, #12]
 801d2b4:	425a      	negs	r2, r3
 801d2b6:	693b      	ldr	r3, [r7, #16]
 801d2b8:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2bc:	425b      	negs	r3, r3
 801d2be:	e003      	b.n	801d2c8 <make_odither_array+0x68>
 801d2c0:	68fa      	ldr	r2, [r7, #12]
 801d2c2:	693b      	ldr	r3, [r7, #16]
 801d2c4:	fb92 f3f3 	sdiv	r3, r2, r3
 801d2c8:	69fa      	ldr	r2, [r7, #28]
 801d2ca:	0192      	lsls	r2, r2, #6
 801d2cc:	6979      	ldr	r1, [r7, #20]
 801d2ce:	440a      	add	r2, r1
 801d2d0:	69b9      	ldr	r1, [r7, #24]
 801d2d2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
    for (k = 0; k < ODITHER_SIZE; k++) {
 801d2d6:	69bb      	ldr	r3, [r7, #24]
 801d2d8:	3301      	adds	r3, #1
 801d2da:	61bb      	str	r3, [r7, #24]
 801d2dc:	69bb      	ldr	r3, [r7, #24]
 801d2de:	2b0f      	cmp	r3, #15
 801d2e0:	ddd6      	ble.n	801d290 <make_odither_array+0x30>
  for (j = 0; j < ODITHER_SIZE; j++) {
 801d2e2:	69fb      	ldr	r3, [r7, #28]
 801d2e4:	3301      	adds	r3, #1
 801d2e6:	61fb      	str	r3, [r7, #28]
 801d2e8:	69fb      	ldr	r3, [r7, #28]
 801d2ea:	2b0f      	cmp	r3, #15
 801d2ec:	ddcd      	ble.n	801d28a <make_odither_array+0x2a>
    }
  }
  return odither;
 801d2ee:	697b      	ldr	r3, [r7, #20]
}
 801d2f0:	4618      	mov	r0, r3
 801d2f2:	3720      	adds	r7, #32
 801d2f4:	46bd      	mov	sp, r7
 801d2f6:	bd80      	pop	{r7, pc}
 801d2f8:	08021774 	.word	0x08021774

0801d2fc <create_odither_tables>:
 * share a dither table.
 */

LOCAL(void)
create_odither_tables (j_decompress_ptr cinfo)
{
 801d2fc:	b580      	push	{r7, lr}
 801d2fe:	b088      	sub	sp, #32
 801d300:	af00      	add	r7, sp, #0
 801d302:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d304:	687b      	ldr	r3, [r7, #4]
 801d306:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d30a:	613b      	str	r3, [r7, #16]
  ODITHER_MATRIX_PTR odither;
  int i, j, nci;

  for (i = 0; i < cinfo->out_color_components; i++) {
 801d30c:	2300      	movs	r3, #0
 801d30e:	61bb      	str	r3, [r7, #24]
 801d310:	e033      	b.n	801d37a <create_odither_tables+0x7e>
    nci = cquantize->Ncolors[i]; /* # of distinct values for this color */
 801d312:	693b      	ldr	r3, [r7, #16]
 801d314:	69ba      	ldr	r2, [r7, #24]
 801d316:	3208      	adds	r2, #8
 801d318:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d31c:	60fb      	str	r3, [r7, #12]
    odither = NULL;		/* search for matching prior component */
 801d31e:	2300      	movs	r3, #0
 801d320:	61fb      	str	r3, [r7, #28]
    for (j = 0; j < i; j++) {
 801d322:	2300      	movs	r3, #0
 801d324:	617b      	str	r3, [r7, #20]
 801d326:	e012      	b.n	801d34e <create_odither_tables+0x52>
      if (nci == cquantize->Ncolors[j]) {
 801d328:	693b      	ldr	r3, [r7, #16]
 801d32a:	697a      	ldr	r2, [r7, #20]
 801d32c:	3208      	adds	r2, #8
 801d32e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801d332:	68fa      	ldr	r2, [r7, #12]
 801d334:	429a      	cmp	r2, r3
 801d336:	d107      	bne.n	801d348 <create_odither_tables+0x4c>
	odither = cquantize->odither[j];
 801d338:	693a      	ldr	r2, [r7, #16]
 801d33a:	697b      	ldr	r3, [r7, #20]
 801d33c:	330c      	adds	r3, #12
 801d33e:	009b      	lsls	r3, r3, #2
 801d340:	4413      	add	r3, r2
 801d342:	685b      	ldr	r3, [r3, #4]
 801d344:	61fb      	str	r3, [r7, #28]
	break;
 801d346:	e006      	b.n	801d356 <create_odither_tables+0x5a>
    for (j = 0; j < i; j++) {
 801d348:	697b      	ldr	r3, [r7, #20]
 801d34a:	3301      	adds	r3, #1
 801d34c:	617b      	str	r3, [r7, #20]
 801d34e:	697a      	ldr	r2, [r7, #20]
 801d350:	69bb      	ldr	r3, [r7, #24]
 801d352:	429a      	cmp	r2, r3
 801d354:	dbe8      	blt.n	801d328 <create_odither_tables+0x2c>
      }
    }
    if (odither == NULL)	/* need a new table? */
 801d356:	69fb      	ldr	r3, [r7, #28]
 801d358:	2b00      	cmp	r3, #0
 801d35a:	d104      	bne.n	801d366 <create_odither_tables+0x6a>
      odither = make_odither_array(cinfo, nci);
 801d35c:	68f9      	ldr	r1, [r7, #12]
 801d35e:	6878      	ldr	r0, [r7, #4]
 801d360:	f7ff ff7e 	bl	801d260 <make_odither_array>
 801d364:	61f8      	str	r0, [r7, #28]
    cquantize->odither[i] = odither;
 801d366:	693a      	ldr	r2, [r7, #16]
 801d368:	69bb      	ldr	r3, [r7, #24]
 801d36a:	330c      	adds	r3, #12
 801d36c:	009b      	lsls	r3, r3, #2
 801d36e:	4413      	add	r3, r2
 801d370:	69fa      	ldr	r2, [r7, #28]
 801d372:	605a      	str	r2, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801d374:	69bb      	ldr	r3, [r7, #24]
 801d376:	3301      	adds	r3, #1
 801d378:	61bb      	str	r3, [r7, #24]
 801d37a:	687b      	ldr	r3, [r7, #4]
 801d37c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d37e:	69ba      	ldr	r2, [r7, #24]
 801d380:	429a      	cmp	r2, r3
 801d382:	dbc6      	blt.n	801d312 <create_odither_tables+0x16>
  }
}
 801d384:	bf00      	nop
 801d386:	bf00      	nop
 801d388:	3720      	adds	r7, #32
 801d38a:	46bd      	mov	sp, r7
 801d38c:	bd80      	pop	{r7, pc}

0801d38e <color_quantize>:

METHODDEF(void)
color_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		JSAMPARRAY output_buf, int num_rows)
/* General case, no dithering */
{
 801d38e:	b4f0      	push	{r4, r5, r6, r7}
 801d390:	b08a      	sub	sp, #40	; 0x28
 801d392:	af00      	add	r7, sp, #0
 801d394:	60f8      	str	r0, [r7, #12]
 801d396:	60b9      	str	r1, [r7, #8]
 801d398:	607a      	str	r2, [r7, #4]
 801d39a:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d39c:	68fb      	ldr	r3, [r7, #12]
 801d39e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d3a2:	61fb      	str	r3, [r7, #28]
  JSAMPARRAY colorindex = cquantize->colorindex;
 801d3a4:	69fb      	ldr	r3, [r7, #28]
 801d3a6:	699b      	ldr	r3, [r3, #24]
 801d3a8:	61bb      	str	r3, [r7, #24]
  register int pixcode, ci;
  register JSAMPROW ptrin, ptrout;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801d3aa:	68fb      	ldr	r3, [r7, #12]
 801d3ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d3ae:	617b      	str	r3, [r7, #20]
  register int nc = cinfo->out_color_components;
 801d3b0:	68fb      	ldr	r3, [r7, #12]
 801d3b2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d3b4:	4618      	mov	r0, r3

  for (row = 0; row < num_rows; row++) {
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	627b      	str	r3, [r7, #36]	; 0x24
 801d3ba:	e02d      	b.n	801d418 <color_quantize+0x8a>
    ptrin = input_buf[row];
 801d3bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3be:	009b      	lsls	r3, r3, #2
 801d3c0:	68ba      	ldr	r2, [r7, #8]
 801d3c2:	4413      	add	r3, r2
 801d3c4:	681e      	ldr	r6, [r3, #0]
    ptrout = output_buf[row];
 801d3c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d3c8:	009b      	lsls	r3, r3, #2
 801d3ca:	687a      	ldr	r2, [r7, #4]
 801d3cc:	4413      	add	r3, r2
 801d3ce:	681b      	ldr	r3, [r3, #0]
 801d3d0:	4619      	mov	r1, r3
    for (col = width; col > 0; col--) {
 801d3d2:	697b      	ldr	r3, [r7, #20]
 801d3d4:	623b      	str	r3, [r7, #32]
 801d3d6:	e019      	b.n	801d40c <color_quantize+0x7e>
      pixcode = 0;
 801d3d8:	2500      	movs	r5, #0
      for (ci = 0; ci < nc; ci++) {
 801d3da:	2400      	movs	r4, #0
 801d3dc:	e00b      	b.n	801d3f6 <color_quantize+0x68>
	pixcode += GETJSAMPLE(colorindex[ci][GETJSAMPLE(*ptrin++)]);
 801d3de:	4623      	mov	r3, r4
 801d3e0:	009b      	lsls	r3, r3, #2
 801d3e2:	69ba      	ldr	r2, [r7, #24]
 801d3e4:	4413      	add	r3, r2
 801d3e6:	681a      	ldr	r2, [r3, #0]
 801d3e8:	4633      	mov	r3, r6
 801d3ea:	1c5e      	adds	r6, r3, #1
 801d3ec:	781b      	ldrb	r3, [r3, #0]
 801d3ee:	4413      	add	r3, r2
 801d3f0:	781b      	ldrb	r3, [r3, #0]
 801d3f2:	441d      	add	r5, r3
      for (ci = 0; ci < nc; ci++) {
 801d3f4:	3401      	adds	r4, #1
 801d3f6:	4603      	mov	r3, r0
 801d3f8:	429c      	cmp	r4, r3
 801d3fa:	dbf0      	blt.n	801d3de <color_quantize+0x50>
      }
      *ptrout++ = (JSAMPLE) pixcode;
 801d3fc:	460b      	mov	r3, r1
 801d3fe:	1c5a      	adds	r2, r3, #1
 801d400:	4611      	mov	r1, r2
 801d402:	b2ea      	uxtb	r2, r5
 801d404:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 801d406:	6a3b      	ldr	r3, [r7, #32]
 801d408:	3b01      	subs	r3, #1
 801d40a:	623b      	str	r3, [r7, #32]
 801d40c:	6a3b      	ldr	r3, [r7, #32]
 801d40e:	2b00      	cmp	r3, #0
 801d410:	d1e2      	bne.n	801d3d8 <color_quantize+0x4a>
  for (row = 0; row < num_rows; row++) {
 801d412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d414:	3301      	adds	r3, #1
 801d416:	627b      	str	r3, [r7, #36]	; 0x24
 801d418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d41a:	683b      	ldr	r3, [r7, #0]
 801d41c:	429a      	cmp	r2, r3
 801d41e:	dbcd      	blt.n	801d3bc <color_quantize+0x2e>
    }
  }
}
 801d420:	bf00      	nop
 801d422:	bf00      	nop
 801d424:	3728      	adds	r7, #40	; 0x28
 801d426:	46bd      	mov	sp, r7
 801d428:	bcf0      	pop	{r4, r5, r6, r7}
 801d42a:	4770      	bx	lr

0801d42c <color_quantize3>:

METHODDEF(void)
color_quantize3 (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		 JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, no dithering */
{
 801d42c:	b4f0      	push	{r4, r5, r6, r7}
 801d42e:	b08c      	sub	sp, #48	; 0x30
 801d430:	af00      	add	r7, sp, #0
 801d432:	60f8      	str	r0, [r7, #12]
 801d434:	60b9      	str	r1, [r7, #8]
 801d436:	607a      	str	r2, [r7, #4]
 801d438:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d43a:	68fb      	ldr	r3, [r7, #12]
 801d43c:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d440:	627b      	str	r3, [r7, #36]	; 0x24
  register int pixcode;
  register JSAMPROW ptrin, ptrout;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801d442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d444:	699b      	ldr	r3, [r3, #24]
 801d446:	681b      	ldr	r3, [r3, #0]
 801d448:	623b      	str	r3, [r7, #32]
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801d44a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d44c:	699b      	ldr	r3, [r3, #24]
 801d44e:	685b      	ldr	r3, [r3, #4]
 801d450:	61fb      	str	r3, [r7, #28]
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801d452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d454:	699b      	ldr	r3, [r3, #24]
 801d456:	689b      	ldr	r3, [r3, #8]
 801d458:	61bb      	str	r3, [r7, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801d45a:	68fb      	ldr	r3, [r7, #12]
 801d45c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d45e:	617b      	str	r3, [r7, #20]

  for (row = 0; row < num_rows; row++) {
 801d460:	2300      	movs	r3, #0
 801d462:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d464:	e031      	b.n	801d4ca <color_quantize3+0x9e>
    ptrin = input_buf[row];
 801d466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d468:	009b      	lsls	r3, r3, #2
 801d46a:	68ba      	ldr	r2, [r7, #8]
 801d46c:	4413      	add	r3, r2
 801d46e:	681c      	ldr	r4, [r3, #0]
    ptrout = output_buf[row];
 801d470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d472:	009b      	lsls	r3, r3, #2
 801d474:	687a      	ldr	r2, [r7, #4]
 801d476:	4413      	add	r3, r2
 801d478:	681e      	ldr	r6, [r3, #0]
    for (col = width; col > 0; col--) {
 801d47a:	697b      	ldr	r3, [r7, #20]
 801d47c:	62bb      	str	r3, [r7, #40]	; 0x28
 801d47e:	e01e      	b.n	801d4be <color_quantize3+0x92>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*ptrin++)]);
 801d480:	4623      	mov	r3, r4
 801d482:	1c5c      	adds	r4, r3, #1
 801d484:	781b      	ldrb	r3, [r3, #0]
 801d486:	461a      	mov	r2, r3
 801d488:	6a3b      	ldr	r3, [r7, #32]
 801d48a:	4413      	add	r3, r2
 801d48c:	781b      	ldrb	r3, [r3, #0]
 801d48e:	461d      	mov	r5, r3
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*ptrin++)]);
 801d490:	4623      	mov	r3, r4
 801d492:	1c5c      	adds	r4, r3, #1
 801d494:	781b      	ldrb	r3, [r3, #0]
 801d496:	461a      	mov	r2, r3
 801d498:	69fb      	ldr	r3, [r7, #28]
 801d49a:	4413      	add	r3, r2
 801d49c:	781b      	ldrb	r3, [r3, #0]
 801d49e:	441d      	add	r5, r3
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*ptrin++)]);
 801d4a0:	4623      	mov	r3, r4
 801d4a2:	1c5c      	adds	r4, r3, #1
 801d4a4:	781b      	ldrb	r3, [r3, #0]
 801d4a6:	461a      	mov	r2, r3
 801d4a8:	69bb      	ldr	r3, [r7, #24]
 801d4aa:	4413      	add	r3, r2
 801d4ac:	781b      	ldrb	r3, [r3, #0]
 801d4ae:	441d      	add	r5, r3
      *ptrout++ = (JSAMPLE) pixcode;
 801d4b0:	4633      	mov	r3, r6
 801d4b2:	1c5e      	adds	r6, r3, #1
 801d4b4:	b2ea      	uxtb	r2, r5
 801d4b6:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 801d4b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4ba:	3b01      	subs	r3, #1
 801d4bc:	62bb      	str	r3, [r7, #40]	; 0x28
 801d4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d4c0:	2b00      	cmp	r3, #0
 801d4c2:	d1dd      	bne.n	801d480 <color_quantize3+0x54>
  for (row = 0; row < num_rows; row++) {
 801d4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d4c6:	3301      	adds	r3, #1
 801d4c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d4ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d4cc:	683b      	ldr	r3, [r7, #0]
 801d4ce:	429a      	cmp	r2, r3
 801d4d0:	dbc9      	blt.n	801d466 <color_quantize3+0x3a>
    }
  }
}
 801d4d2:	bf00      	nop
 801d4d4:	bf00      	nop
 801d4d6:	3730      	adds	r7, #48	; 0x30
 801d4d8:	46bd      	mov	sp, r7
 801d4da:	bcf0      	pop	{r4, r5, r6, r7}
 801d4dc:	4770      	bx	lr

0801d4de <quantize_ord_dither>:

METHODDEF(void)
quantize_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		     JSAMPARRAY output_buf, int num_rows)
/* General case, with ordered dithering */
{
 801d4de:	b5b0      	push	{r4, r5, r7, lr}
 801d4e0:	b08e      	sub	sp, #56	; 0x38
 801d4e2:	af00      	add	r7, sp, #0
 801d4e4:	60f8      	str	r0, [r7, #12]
 801d4e6:	60b9      	str	r1, [r7, #8]
 801d4e8:	607a      	str	r2, [r7, #4]
 801d4ea:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d4ec:	68fb      	ldr	r3, [r7, #12]
 801d4ee:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d4f2:	627b      	str	r3, [r7, #36]	; 0x24
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  int * dither;			/* points to active row of dither matrix */
  int row_index, col_index;	/* current indexes into dither matrix */
  int nc = cinfo->out_color_components;
 801d4f4:	68fb      	ldr	r3, [r7, #12]
 801d4f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d4f8:	623b      	str	r3, [r7, #32]
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801d4fa:	68fb      	ldr	r3, [r7, #12]
 801d4fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d4fe:	61fb      	str	r3, [r7, #28]

  for (row = 0; row < num_rows; row++) {
 801d500:	2300      	movs	r3, #0
 801d502:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d504:	e061      	b.n	801d5ca <quantize_ord_dither+0xec>
    /* Initialize output values to 0 so can process components separately */
    FMEMZERO((void FAR *) output_buf[row],
 801d506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d508:	009b      	lsls	r3, r3, #2
 801d50a:	687a      	ldr	r2, [r7, #4]
 801d50c:	4413      	add	r3, r2
 801d50e:	681b      	ldr	r3, [r3, #0]
 801d510:	69fa      	ldr	r2, [r7, #28]
 801d512:	2100      	movs	r1, #0
 801d514:	4618      	mov	r0, r3
 801d516:	f001 ff5f 	bl	801f3d8 <memset>
	     (size_t) (width * SIZEOF(JSAMPLE)));
    row_index = cquantize->row_index;
 801d51a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d51e:	61bb      	str	r3, [r7, #24]
    for (ci = 0; ci < nc; ci++) {
 801d520:	2300      	movs	r3, #0
 801d522:	633b      	str	r3, [r7, #48]	; 0x30
 801d524:	e042      	b.n	801d5ac <quantize_ord_dither+0xce>
      input_ptr = input_buf[row] + ci;
 801d526:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d528:	009b      	lsls	r3, r3, #2
 801d52a:	68ba      	ldr	r2, [r7, #8]
 801d52c:	4413      	add	r3, r2
 801d52e:	681a      	ldr	r2, [r3, #0]
 801d530:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d532:	18d5      	adds	r5, r2, r3
      output_ptr = output_buf[row];
 801d534:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d536:	009b      	lsls	r3, r3, #2
 801d538:	687a      	ldr	r2, [r7, #4]
 801d53a:	4413      	add	r3, r2
 801d53c:	681c      	ldr	r4, [r3, #0]
      colorindex_ci = cquantize->colorindex[ci];
 801d53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d540:	699a      	ldr	r2, [r3, #24]
 801d542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d544:	009b      	lsls	r3, r3, #2
 801d546:	4413      	add	r3, r2
 801d548:	681b      	ldr	r3, [r3, #0]
 801d54a:	617b      	str	r3, [r7, #20]
      dither = cquantize->odither[ci][row_index];
 801d54c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801d54e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d550:	330c      	adds	r3, #12
 801d552:	009b      	lsls	r3, r3, #2
 801d554:	4413      	add	r3, r2
 801d556:	685a      	ldr	r2, [r3, #4]
 801d558:	69bb      	ldr	r3, [r7, #24]
 801d55a:	019b      	lsls	r3, r3, #6
 801d55c:	4413      	add	r3, r2
 801d55e:	613b      	str	r3, [r7, #16]
      col_index = 0;
 801d560:	2300      	movs	r3, #0
 801d562:	637b      	str	r3, [r7, #52]	; 0x34

      for (col = width; col > 0; col--) {
 801d564:	69fb      	ldr	r3, [r7, #28]
 801d566:	62bb      	str	r3, [r7, #40]	; 0x28
 801d568:	e01a      	b.n	801d5a0 <quantize_ord_dither+0xc2>
	 * Range-limiting need not be done explicitly, as we have extended
	 * the colorindex table to produce the right answers for out-of-range
	 * inputs.  The maximum dither is +- MAXJSAMPLE; this sets the
	 * required amount of padding.
	 */
	*output_ptr += colorindex_ci[GETJSAMPLE(*input_ptr)+dither[col_index]];
 801d56a:	7822      	ldrb	r2, [r4, #0]
 801d56c:	782b      	ldrb	r3, [r5, #0]
 801d56e:	4618      	mov	r0, r3
 801d570:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d572:	009b      	lsls	r3, r3, #2
 801d574:	6939      	ldr	r1, [r7, #16]
 801d576:	440b      	add	r3, r1
 801d578:	681b      	ldr	r3, [r3, #0]
 801d57a:	4403      	add	r3, r0
 801d57c:	4619      	mov	r1, r3
 801d57e:	697b      	ldr	r3, [r7, #20]
 801d580:	440b      	add	r3, r1
 801d582:	781b      	ldrb	r3, [r3, #0]
 801d584:	4413      	add	r3, r2
 801d586:	b2db      	uxtb	r3, r3
 801d588:	7023      	strb	r3, [r4, #0]
	input_ptr += nc;
 801d58a:	6a3b      	ldr	r3, [r7, #32]
 801d58c:	441d      	add	r5, r3
	output_ptr++;
 801d58e:	3401      	adds	r4, #1
	col_index = (col_index + 1) & ODITHER_MASK;
 801d590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d592:	3301      	adds	r3, #1
 801d594:	f003 030f 	and.w	r3, r3, #15
 801d598:	637b      	str	r3, [r7, #52]	; 0x34
      for (col = width; col > 0; col--) {
 801d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d59c:	3b01      	subs	r3, #1
 801d59e:	62bb      	str	r3, [r7, #40]	; 0x28
 801d5a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d1e1      	bne.n	801d56a <quantize_ord_dither+0x8c>
    for (ci = 0; ci < nc; ci++) {
 801d5a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5a8:	3301      	adds	r3, #1
 801d5aa:	633b      	str	r3, [r7, #48]	; 0x30
 801d5ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d5ae:	6a3b      	ldr	r3, [r7, #32]
 801d5b0:	429a      	cmp	r2, r3
 801d5b2:	dbb8      	blt.n	801d526 <quantize_ord_dither+0x48>
      }
    }
    /* Advance row index for next row */
    row_index = (row_index + 1) & ODITHER_MASK;
 801d5b4:	69bb      	ldr	r3, [r7, #24]
 801d5b6:	3301      	adds	r3, #1
 801d5b8:	f003 030f 	and.w	r3, r3, #15
 801d5bc:	61bb      	str	r3, [r7, #24]
    cquantize->row_index = row_index;
 801d5be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d5c0:	69ba      	ldr	r2, [r7, #24]
 801d5c2:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801d5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d5c6:	3301      	adds	r3, #1
 801d5c8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801d5ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d5cc:	683b      	ldr	r3, [r7, #0]
 801d5ce:	429a      	cmp	r2, r3
 801d5d0:	db99      	blt.n	801d506 <quantize_ord_dither+0x28>
  }
}
 801d5d2:	bf00      	nop
 801d5d4:	bf00      	nop
 801d5d6:	3738      	adds	r7, #56	; 0x38
 801d5d8:	46bd      	mov	sp, r7
 801d5da:	bdb0      	pop	{r4, r5, r7, pc}

0801d5dc <quantize3_ord_dither>:

METHODDEF(void)
quantize3_ord_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		      JSAMPARRAY output_buf, int num_rows)
/* Fast path for out_color_components==3, with ordered dithering */
{
 801d5dc:	b4f0      	push	{r4, r5, r6, r7}
 801d5de:	b090      	sub	sp, #64	; 0x40
 801d5e0:	af00      	add	r7, sp, #0
 801d5e2:	60f8      	str	r0, [r7, #12]
 801d5e4:	60b9      	str	r1, [r7, #8]
 801d5e6:	607a      	str	r2, [r7, #4]
 801d5e8:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d5ea:	68fb      	ldr	r3, [r7, #12]
 801d5ec:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d5f0:	633b      	str	r3, [r7, #48]	; 0x30
  register int pixcode;
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex0 = cquantize->colorindex[0];
 801d5f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5f4:	699b      	ldr	r3, [r3, #24]
 801d5f6:	681b      	ldr	r3, [r3, #0]
 801d5f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  JSAMPROW colorindex1 = cquantize->colorindex[1];
 801d5fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d5fc:	699b      	ldr	r3, [r3, #24]
 801d5fe:	685b      	ldr	r3, [r3, #4]
 801d600:	62bb      	str	r3, [r7, #40]	; 0x28
  JSAMPROW colorindex2 = cquantize->colorindex[2];
 801d602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d604:	699b      	ldr	r3, [r3, #24]
 801d606:	689b      	ldr	r3, [r3, #8]
 801d608:	627b      	str	r3, [r7, #36]	; 0x24
  int * dither1;
  int * dither2;
  int row_index, col_index;	/* current indexes into dither matrix */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801d60a:	68fb      	ldr	r3, [r7, #12]
 801d60c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d60e:	623b      	str	r3, [r7, #32]

  for (row = 0; row < num_rows; row++) {
 801d610:	2300      	movs	r3, #0
 801d612:	63bb      	str	r3, [r7, #56]	; 0x38
 801d614:	e06a      	b.n	801d6ec <quantize3_ord_dither+0x110>
    row_index = cquantize->row_index;
 801d616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801d61a:	61fb      	str	r3, [r7, #28]
    input_ptr = input_buf[row];
 801d61c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d61e:	009b      	lsls	r3, r3, #2
 801d620:	68ba      	ldr	r2, [r7, #8]
 801d622:	4413      	add	r3, r2
 801d624:	681c      	ldr	r4, [r3, #0]
    output_ptr = output_buf[row];
 801d626:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d628:	009b      	lsls	r3, r3, #2
 801d62a:	687a      	ldr	r2, [r7, #4]
 801d62c:	4413      	add	r3, r2
 801d62e:	681e      	ldr	r6, [r3, #0]
    dither0 = cquantize->odither[0][row_index];
 801d630:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d632:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801d634:	69fb      	ldr	r3, [r7, #28]
 801d636:	019b      	lsls	r3, r3, #6
 801d638:	4413      	add	r3, r2
 801d63a:	61bb      	str	r3, [r7, #24]
    dither1 = cquantize->odither[1][row_index];
 801d63c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d63e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 801d640:	69fb      	ldr	r3, [r7, #28]
 801d642:	019b      	lsls	r3, r3, #6
 801d644:	4413      	add	r3, r2
 801d646:	617b      	str	r3, [r7, #20]
    dither2 = cquantize->odither[2][row_index];
 801d648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d64a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801d64c:	69fb      	ldr	r3, [r7, #28]
 801d64e:	019b      	lsls	r3, r3, #6
 801d650:	4413      	add	r3, r2
 801d652:	613b      	str	r3, [r7, #16]
    col_index = 0;
 801d654:	2300      	movs	r3, #0
 801d656:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (col = width; col > 0; col--) {
 801d658:	6a3b      	ldr	r3, [r7, #32]
 801d65a:	637b      	str	r3, [r7, #52]	; 0x34
 801d65c:	e038      	b.n	801d6d0 <quantize3_ord_dither+0xf4>
      pixcode  = GETJSAMPLE(colorindex0[GETJSAMPLE(*input_ptr++) +
 801d65e:	4623      	mov	r3, r4
 801d660:	1c5c      	adds	r4, r3, #1
 801d662:	781b      	ldrb	r3, [r3, #0]
 801d664:	4619      	mov	r1, r3
 801d666:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d668:	009b      	lsls	r3, r3, #2
 801d66a:	69ba      	ldr	r2, [r7, #24]
 801d66c:	4413      	add	r3, r2
 801d66e:	681b      	ldr	r3, [r3, #0]
 801d670:	440b      	add	r3, r1
 801d672:	461a      	mov	r2, r3
 801d674:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d676:	4413      	add	r3, r2
 801d678:	781b      	ldrb	r3, [r3, #0]
 801d67a:	461d      	mov	r5, r3
					dither0[col_index]]);
      pixcode += GETJSAMPLE(colorindex1[GETJSAMPLE(*input_ptr++) +
 801d67c:	4623      	mov	r3, r4
 801d67e:	1c5c      	adds	r4, r3, #1
 801d680:	781b      	ldrb	r3, [r3, #0]
 801d682:	4619      	mov	r1, r3
 801d684:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d686:	009b      	lsls	r3, r3, #2
 801d688:	697a      	ldr	r2, [r7, #20]
 801d68a:	4413      	add	r3, r2
 801d68c:	681b      	ldr	r3, [r3, #0]
 801d68e:	440b      	add	r3, r1
 801d690:	461a      	mov	r2, r3
 801d692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d694:	4413      	add	r3, r2
 801d696:	781b      	ldrb	r3, [r3, #0]
 801d698:	441d      	add	r5, r3
					dither1[col_index]]);
      pixcode += GETJSAMPLE(colorindex2[GETJSAMPLE(*input_ptr++) +
 801d69a:	4623      	mov	r3, r4
 801d69c:	1c5c      	adds	r4, r3, #1
 801d69e:	781b      	ldrb	r3, [r3, #0]
 801d6a0:	4619      	mov	r1, r3
 801d6a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6a4:	009b      	lsls	r3, r3, #2
 801d6a6:	693a      	ldr	r2, [r7, #16]
 801d6a8:	4413      	add	r3, r2
 801d6aa:	681b      	ldr	r3, [r3, #0]
 801d6ac:	440b      	add	r3, r1
 801d6ae:	461a      	mov	r2, r3
 801d6b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d6b2:	4413      	add	r3, r2
 801d6b4:	781b      	ldrb	r3, [r3, #0]
 801d6b6:	441d      	add	r5, r3
					dither2[col_index]]);
      *output_ptr++ = (JSAMPLE) pixcode;
 801d6b8:	4633      	mov	r3, r6
 801d6ba:	1c5e      	adds	r6, r3, #1
 801d6bc:	b2ea      	uxtb	r2, r5
 801d6be:	701a      	strb	r2, [r3, #0]
      col_index = (col_index + 1) & ODITHER_MASK;
 801d6c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d6c2:	3301      	adds	r3, #1
 801d6c4:	f003 030f 	and.w	r3, r3, #15
 801d6c8:	63fb      	str	r3, [r7, #60]	; 0x3c
    for (col = width; col > 0; col--) {
 801d6ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6cc:	3b01      	subs	r3, #1
 801d6ce:	637b      	str	r3, [r7, #52]	; 0x34
 801d6d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d6d2:	2b00      	cmp	r3, #0
 801d6d4:	d1c3      	bne.n	801d65e <quantize3_ord_dither+0x82>
    }
    row_index = (row_index + 1) & ODITHER_MASK;
 801d6d6:	69fb      	ldr	r3, [r7, #28]
 801d6d8:	3301      	adds	r3, #1
 801d6da:	f003 030f 	and.w	r3, r3, #15
 801d6de:	61fb      	str	r3, [r7, #28]
    cquantize->row_index = row_index;
 801d6e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d6e2:	69fa      	ldr	r2, [r7, #28]
 801d6e4:	631a      	str	r2, [r3, #48]	; 0x30
  for (row = 0; row < num_rows; row++) {
 801d6e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d6e8:	3301      	adds	r3, #1
 801d6ea:	63bb      	str	r3, [r7, #56]	; 0x38
 801d6ec:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d6ee:	683b      	ldr	r3, [r7, #0]
 801d6f0:	429a      	cmp	r2, r3
 801d6f2:	db90      	blt.n	801d616 <quantize3_ord_dither+0x3a>
  }
}
 801d6f4:	bf00      	nop
 801d6f6:	bf00      	nop
 801d6f8:	3740      	adds	r7, #64	; 0x40
 801d6fa:	46bd      	mov	sp, r7
 801d6fc:	bcf0      	pop	{r4, r5, r6, r7}
 801d6fe:	4770      	bx	lr

0801d700 <quantize_fs_dither>:

METHODDEF(void)
quantize_fs_dither (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		    JSAMPARRAY output_buf, int num_rows)
/* General case, with Floyd-Steinberg dithering */
{
 801d700:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d704:	b094      	sub	sp, #80	; 0x50
 801d706:	af00      	add	r7, sp, #0
 801d708:	60f8      	str	r0, [r7, #12]
 801d70a:	60b9      	str	r1, [r7, #8]
 801d70c:	607a      	str	r2, [r7, #4]
 801d70e:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d710:	68fb      	ldr	r3, [r7, #12]
 801d712:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d716:	633b      	str	r3, [r7, #48]	; 0x30
  register JSAMPROW input_ptr;
  register JSAMPROW output_ptr;
  JSAMPROW colorindex_ci;
  JSAMPROW colormap_ci;
  int pixcode;
  int nc = cinfo->out_color_components;
 801d718:	68fb      	ldr	r3, [r7, #12]
 801d71a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d71c:	62fb      	str	r3, [r7, #44]	; 0x2c
  int dir;			/* 1 for left-to-right, -1 for right-to-left */
  int dirnc;			/* dir * nc */
  int ci;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801d71e:	68fb      	ldr	r3, [r7, #12]
 801d720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d722:	62bb      	str	r3, [r7, #40]	; 0x28
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 801d724:	68fb      	ldr	r3, [r7, #12]
 801d726:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801d72a:	627b      	str	r3, [r7, #36]	; 0x24
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 801d72c:	2300      	movs	r3, #0
 801d72e:	63bb      	str	r3, [r7, #56]	; 0x38
 801d730:	e0b1      	b.n	801d896 <quantize_fs_dither+0x196>
    /* Initialize output values to 0 so can process components separately */
    FMEMZERO((void FAR *) output_buf[row],
 801d732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d734:	009b      	lsls	r3, r3, #2
 801d736:	687a      	ldr	r2, [r7, #4]
 801d738:	4413      	add	r3, r2
 801d73a:	681b      	ldr	r3, [r3, #0]
 801d73c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801d73e:	2100      	movs	r1, #0
 801d740:	4618      	mov	r0, r3
 801d742:	f001 fe49 	bl	801f3d8 <memset>
	     (size_t) (width * SIZEOF(JSAMPLE)));
    for (ci = 0; ci < nc; ci++) {
 801d746:	2300      	movs	r3, #0
 801d748:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d74a:	e092      	b.n	801d872 <quantize_fs_dither+0x172>
      input_ptr = input_buf[row] + ci;
 801d74c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d74e:	009b      	lsls	r3, r3, #2
 801d750:	68ba      	ldr	r2, [r7, #8]
 801d752:	4413      	add	r3, r2
 801d754:	681a      	ldr	r2, [r3, #0]
 801d756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d758:	eb02 0803 	add.w	r8, r2, r3
      output_ptr = output_buf[row];
 801d75c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d75e:	009b      	lsls	r3, r3, #2
 801d760:	687a      	ldr	r2, [r7, #4]
 801d762:	4413      	add	r3, r2
 801d764:	681e      	ldr	r6, [r3, #0]
      if (cquantize->on_odd_row) {
 801d766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d768:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d76a:	2b00      	cmp	r3, #0
 801d76c:	d019      	beq.n	801d7a2 <quantize_fs_dither+0xa2>
	/* work right to left in this row */
	input_ptr += (width-1) * nc; /* so point to rightmost pixel */
 801d76e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d770:	3b01      	subs	r3, #1
 801d772:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801d774:	fb02 f303 	mul.w	r3, r2, r3
 801d778:	4498      	add	r8, r3
	output_ptr += width-1;
 801d77a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d77c:	3b01      	subs	r3, #1
 801d77e:	441e      	add	r6, r3
	dir = -1;
 801d780:	f04f 33ff 	mov.w	r3, #4294967295
 801d784:	647b      	str	r3, [r7, #68]	; 0x44
	dirnc = -nc;
 801d786:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d788:	425b      	negs	r3, r3
 801d78a:	643b      	str	r3, [r7, #64]	; 0x40
	errorptr = cquantize->fserrors[ci] + (width+1); /* => entry after last column */
 801d78c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d78e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d790:	3310      	adds	r3, #16
 801d792:	009b      	lsls	r3, r3, #2
 801d794:	4413      	add	r3, r2
 801d796:	685a      	ldr	r2, [r3, #4]
 801d798:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d79a:	3301      	adds	r3, #1
 801d79c:	005b      	lsls	r3, r3, #1
 801d79e:	18d5      	adds	r5, r2, r3
 801d7a0:	e009      	b.n	801d7b6 <quantize_fs_dither+0xb6>
      } else {
	/* work left to right in this row */
	dir = 1;
 801d7a2:	2301      	movs	r3, #1
 801d7a4:	647b      	str	r3, [r7, #68]	; 0x44
	dirnc = nc;
 801d7a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d7a8:	643b      	str	r3, [r7, #64]	; 0x40
	errorptr = cquantize->fserrors[ci]; /* => entry before first column */
 801d7aa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801d7ac:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7ae:	3310      	adds	r3, #16
 801d7b0:	009b      	lsls	r3, r3, #2
 801d7b2:	4413      	add	r3, r2
 801d7b4:	685d      	ldr	r5, [r3, #4]
      }
      colorindex_ci = cquantize->colorindex[ci];
 801d7b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7b8:	699a      	ldr	r2, [r3, #24]
 801d7ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7bc:	009b      	lsls	r3, r3, #2
 801d7be:	4413      	add	r3, r2
 801d7c0:	681b      	ldr	r3, [r3, #0]
 801d7c2:	623b      	str	r3, [r7, #32]
      colormap_ci = cquantize->sv_colormap[ci];
 801d7c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d7c6:	691a      	ldr	r2, [r3, #16]
 801d7c8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d7ca:	009b      	lsls	r3, r3, #2
 801d7cc:	4413      	add	r3, r2
 801d7ce:	681b      	ldr	r3, [r3, #0]
 801d7d0:	61fb      	str	r3, [r7, #28]
      /* Preset error values: no error propagated to first pixel from left */
      cur = 0;
 801d7d2:	2400      	movs	r4, #0
      /* and no error propagated to row below yet */
      belowerr = bpreverr = 0;
 801d7d4:	2300      	movs	r3, #0
 801d7d6:	64bb      	str	r3, [r7, #72]	; 0x48
 801d7d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d7da:	64fb      	str	r3, [r7, #76]	; 0x4c

      for (col = width; col > 0; col--) {
 801d7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801d7de:	637b      	str	r3, [r7, #52]	; 0x34
 801d7e0:	e03e      	b.n	801d860 <quantize_fs_dither+0x160>
	 * round the error term (which is expressed * 16) to an integer.
	 * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
	 * for either sign of the error value.
	 * Note: errorptr points to *previous* column's array entry.
	 */
	cur = RIGHT_SHIFT(cur + errorptr[dir] + 8, 4);
 801d7e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d7e4:	005b      	lsls	r3, r3, #1
 801d7e6:	442b      	add	r3, r5
 801d7e8:	f9b3 3000 	ldrsh.w	r3, [r3]
 801d7ec:	4423      	add	r3, r4
 801d7ee:	3308      	adds	r3, #8
 801d7f0:	111c      	asrs	r4, r3, #4
	/* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
	 * The maximum error is +- MAXJSAMPLE; this sets the required size
	 * of the range_limit array.
	 */
	cur += GETJSAMPLE(*input_ptr);
 801d7f2:	f898 3000 	ldrb.w	r3, [r8]
 801d7f6:	441c      	add	r4, r3
	cur = GETJSAMPLE(range_limit[cur]);
 801d7f8:	4622      	mov	r2, r4
 801d7fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801d7fc:	4413      	add	r3, r2
 801d7fe:	781b      	ldrb	r3, [r3, #0]
 801d800:	461c      	mov	r4, r3
	/* Select output value, accumulate into output code for this pixel */
	pixcode = GETJSAMPLE(colorindex_ci[cur]);
 801d802:	4622      	mov	r2, r4
 801d804:	6a3b      	ldr	r3, [r7, #32]
 801d806:	4413      	add	r3, r2
 801d808:	781b      	ldrb	r3, [r3, #0]
 801d80a:	61bb      	str	r3, [r7, #24]
	*output_ptr += (JSAMPLE) pixcode;
 801d80c:	7832      	ldrb	r2, [r6, #0]
 801d80e:	69bb      	ldr	r3, [r7, #24]
 801d810:	b2db      	uxtb	r3, r3
 801d812:	4413      	add	r3, r2
 801d814:	b2db      	uxtb	r3, r3
 801d816:	7033      	strb	r3, [r6, #0]
	/* Compute actual representation error at this pixel */
	/* Note: we can do this even though we don't have the final */
	/* pixel code, because the colormap is orthogonal. */
	cur -= GETJSAMPLE(colormap_ci[pixcode]);
 801d818:	69bb      	ldr	r3, [r7, #24]
 801d81a:	69fa      	ldr	r2, [r7, #28]
 801d81c:	4413      	add	r3, r2
 801d81e:	781b      	ldrb	r3, [r3, #0]
 801d820:	1ae4      	subs	r4, r4, r3
	/* Compute error fractions to be propagated to adjacent pixels.
	 * Add these into the running sums, and simultaneously shift the
	 * next-line error sums left by 1 column.
	 */
	bnexterr = cur;
 801d822:	617c      	str	r4, [r7, #20]
	delta = cur * 2;
 801d824:	0063      	lsls	r3, r4, #1
 801d826:	613b      	str	r3, [r7, #16]
	cur += delta;		/* form error * 3 */
 801d828:	693b      	ldr	r3, [r7, #16]
 801d82a:	441c      	add	r4, r3
	errorptr[0] = (FSERROR) (bpreverr + cur);
 801d82c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d82e:	b29a      	uxth	r2, r3
 801d830:	b2a3      	uxth	r3, r4
 801d832:	4413      	add	r3, r2
 801d834:	b29b      	uxth	r3, r3
 801d836:	b21b      	sxth	r3, r3
 801d838:	802b      	strh	r3, [r5, #0]
	cur += delta;		/* form error * 5 */
 801d83a:	693b      	ldr	r3, [r7, #16]
 801d83c:	441c      	add	r4, r3
	bpreverr = belowerr + cur;
 801d83e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801d840:	4423      	add	r3, r4
 801d842:	64bb      	str	r3, [r7, #72]	; 0x48
	belowerr = bnexterr;
 801d844:	697b      	ldr	r3, [r7, #20]
 801d846:	64fb      	str	r3, [r7, #76]	; 0x4c
	cur += delta;		/* form error * 7 */
 801d848:	693b      	ldr	r3, [r7, #16]
 801d84a:	441c      	add	r4, r3
	/* At this point cur contains the 7/16 error value to be propagated
	 * to the next pixel on the current line, and all the errors for the
	 * next line have been shifted over. We are therefore ready to move on.
	 */
	input_ptr += dirnc;	/* advance input ptr to next column */
 801d84c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801d84e:	4498      	add	r8, r3
	output_ptr += dir;	/* advance output ptr to next column */
 801d850:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d852:	441e      	add	r6, r3
	errorptr += dir;	/* advance errorptr to current column */
 801d854:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801d856:	005b      	lsls	r3, r3, #1
 801d858:	441d      	add	r5, r3
      for (col = width; col > 0; col--) {
 801d85a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d85c:	3b01      	subs	r3, #1
 801d85e:	637b      	str	r3, [r7, #52]	; 0x34
 801d860:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801d862:	2b00      	cmp	r3, #0
 801d864:	d1bd      	bne.n	801d7e2 <quantize_fs_dither+0xe2>
      }
      /* Post-loop cleanup: we must unload the final error value into the
       * final fserrors[] entry.  Note we need not unload belowerr because
       * it is for the dummy column before or after the actual array.
       */
      errorptr[0] = (FSERROR) bpreverr; /* unload prev err into array */
 801d866:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801d868:	b21b      	sxth	r3, r3
 801d86a:	802b      	strh	r3, [r5, #0]
    for (ci = 0; ci < nc; ci++) {
 801d86c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801d86e:	3301      	adds	r3, #1
 801d870:	63fb      	str	r3, [r7, #60]	; 0x3c
 801d872:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801d874:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801d876:	429a      	cmp	r2, r3
 801d878:	f6ff af68 	blt.w	801d74c <quantize_fs_dither+0x4c>
    }
    cquantize->on_odd_row = (cquantize->on_odd_row ? FALSE : TRUE);
 801d87c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d87e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801d880:	2b00      	cmp	r3, #0
 801d882:	bf0c      	ite	eq
 801d884:	2301      	moveq	r3, #1
 801d886:	2300      	movne	r3, #0
 801d888:	b2db      	uxtb	r3, r3
 801d88a:	461a      	mov	r2, r3
 801d88c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801d88e:	655a      	str	r2, [r3, #84]	; 0x54
  for (row = 0; row < num_rows; row++) {
 801d890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801d892:	3301      	adds	r3, #1
 801d894:	63bb      	str	r3, [r7, #56]	; 0x38
 801d896:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801d898:	683b      	ldr	r3, [r7, #0]
 801d89a:	429a      	cmp	r2, r3
 801d89c:	f6ff af49 	blt.w	801d732 <quantize_fs_dither+0x32>
  }
}
 801d8a0:	bf00      	nop
 801d8a2:	bf00      	nop
 801d8a4:	3750      	adds	r7, #80	; 0x50
 801d8a6:	46bd      	mov	sp, r7
 801d8a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801d8ac <alloc_fs_workspace>:
 * Allocate workspace for Floyd-Steinberg errors.
 */

LOCAL(void)
alloc_fs_workspace (j_decompress_ptr cinfo)
{
 801d8ac:	b580      	push	{r7, lr}
 801d8ae:	b086      	sub	sp, #24
 801d8b0:	af00      	add	r7, sp, #0
 801d8b2:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d8b4:	687b      	ldr	r3, [r7, #4]
 801d8b6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d8ba:	613b      	str	r3, [r7, #16]
  size_t arraysize;
  int i;

  arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801d8bc:	687b      	ldr	r3, [r7, #4]
 801d8be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d8c0:	3302      	adds	r3, #2
 801d8c2:	005b      	lsls	r3, r3, #1
 801d8c4:	60fb      	str	r3, [r7, #12]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801d8c6:	2300      	movs	r3, #0
 801d8c8:	617b      	str	r3, [r7, #20]
 801d8ca:	e010      	b.n	801d8ee <alloc_fs_workspace+0x42>
    cquantize->fserrors[i] = (FSERRPTR)
      (*cinfo->mem->alloc_large)((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
 801d8cc:	687b      	ldr	r3, [r7, #4]
 801d8ce:	685b      	ldr	r3, [r3, #4]
 801d8d0:	685b      	ldr	r3, [r3, #4]
 801d8d2:	68fa      	ldr	r2, [r7, #12]
 801d8d4:	2101      	movs	r1, #1
 801d8d6:	6878      	ldr	r0, [r7, #4]
 801d8d8:	4798      	blx	r3
 801d8da:	4601      	mov	r1, r0
    cquantize->fserrors[i] = (FSERRPTR)
 801d8dc:	693a      	ldr	r2, [r7, #16]
 801d8de:	697b      	ldr	r3, [r7, #20]
 801d8e0:	3310      	adds	r3, #16
 801d8e2:	009b      	lsls	r3, r3, #2
 801d8e4:	4413      	add	r3, r2
 801d8e6:	6059      	str	r1, [r3, #4]
  for (i = 0; i < cinfo->out_color_components; i++) {
 801d8e8:	697b      	ldr	r3, [r7, #20]
 801d8ea:	3301      	adds	r3, #1
 801d8ec:	617b      	str	r3, [r7, #20]
 801d8ee:	687b      	ldr	r3, [r7, #4]
 801d8f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d8f2:	697a      	ldr	r2, [r7, #20]
 801d8f4:	429a      	cmp	r2, r3
 801d8f6:	dbe9      	blt.n	801d8cc <alloc_fs_workspace+0x20>
  }
}
 801d8f8:	bf00      	nop
 801d8fa:	bf00      	nop
 801d8fc:	3718      	adds	r7, #24
 801d8fe:	46bd      	mov	sp, r7
 801d900:	bd80      	pop	{r7, pc}
	...

0801d904 <start_pass_1_quant>:
 * Initialize for one-pass color quantization.
 */

METHODDEF(void)
start_pass_1_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
 801d904:	b580      	push	{r7, lr}
 801d906:	b086      	sub	sp, #24
 801d908:	af00      	add	r7, sp, #0
 801d90a:	6078      	str	r0, [r7, #4]
 801d90c:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801d90e:	687b      	ldr	r3, [r7, #4]
 801d910:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801d914:	613b      	str	r3, [r7, #16]
  size_t arraysize;
  int i;

  /* Install my colormap. */
  cinfo->colormap = cquantize->sv_colormap;
 801d916:	693b      	ldr	r3, [r7, #16]
 801d918:	691a      	ldr	r2, [r3, #16]
 801d91a:	687b      	ldr	r3, [r7, #4]
 801d91c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  cinfo->actual_number_of_colors = cquantize->sv_actual;
 801d920:	693b      	ldr	r3, [r7, #16]
 801d922:	695a      	ldr	r2, [r3, #20]
 801d924:	687b      	ldr	r3, [r7, #4]
 801d926:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize for desired dithering mode. */
  switch (cinfo->dither_mode) {
 801d92a:	687b      	ldr	r3, [r7, #4]
 801d92c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801d930:	2b02      	cmp	r3, #2
 801d932:	d02f      	beq.n	801d994 <start_pass_1_quant+0x90>
 801d934:	2b02      	cmp	r3, #2
 801d936:	dc56      	bgt.n	801d9e6 <start_pass_1_quant+0xe2>
 801d938:	2b00      	cmp	r3, #0
 801d93a:	d002      	beq.n	801d942 <start_pass_1_quant+0x3e>
 801d93c:	2b01      	cmp	r3, #1
 801d93e:	d00c      	beq.n	801d95a <start_pass_1_quant+0x56>
 801d940:	e051      	b.n	801d9e6 <start_pass_1_quant+0xe2>
  case JDITHER_NONE:
    if (cinfo->out_color_components == 3)
 801d942:	687b      	ldr	r3, [r7, #4]
 801d944:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d946:	2b03      	cmp	r3, #3
 801d948:	d103      	bne.n	801d952 <start_pass_1_quant+0x4e>
      cquantize->pub.color_quantize = color_quantize3;
 801d94a:	693b      	ldr	r3, [r7, #16]
 801d94c:	4a2d      	ldr	r2, [pc, #180]	; (801da04 <start_pass_1_quant+0x100>)
 801d94e:	605a      	str	r2, [r3, #4]
    else
      cquantize->pub.color_quantize = color_quantize;
    break;
 801d950:	e054      	b.n	801d9fc <start_pass_1_quant+0xf8>
      cquantize->pub.color_quantize = color_quantize;
 801d952:	693b      	ldr	r3, [r7, #16]
 801d954:	4a2c      	ldr	r2, [pc, #176]	; (801da08 <start_pass_1_quant+0x104>)
 801d956:	605a      	str	r2, [r3, #4]
    break;
 801d958:	e050      	b.n	801d9fc <start_pass_1_quant+0xf8>
  case JDITHER_ORDERED:
    if (cinfo->out_color_components == 3)
 801d95a:	687b      	ldr	r3, [r7, #4]
 801d95c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d95e:	2b03      	cmp	r3, #3
 801d960:	d103      	bne.n	801d96a <start_pass_1_quant+0x66>
      cquantize->pub.color_quantize = quantize3_ord_dither;
 801d962:	693b      	ldr	r3, [r7, #16]
 801d964:	4a29      	ldr	r2, [pc, #164]	; (801da0c <start_pass_1_quant+0x108>)
 801d966:	605a      	str	r2, [r3, #4]
 801d968:	e002      	b.n	801d970 <start_pass_1_quant+0x6c>
    else
      cquantize->pub.color_quantize = quantize_ord_dither;
 801d96a:	693b      	ldr	r3, [r7, #16]
 801d96c:	4a28      	ldr	r2, [pc, #160]	; (801da10 <start_pass_1_quant+0x10c>)
 801d96e:	605a      	str	r2, [r3, #4]
    cquantize->row_index = 0;	/* initialize state for ordered dither */
 801d970:	693b      	ldr	r3, [r7, #16]
 801d972:	2200      	movs	r2, #0
 801d974:	631a      	str	r2, [r3, #48]	; 0x30
    /* If user changed to ordered dither from another mode,
     * we must recreate the color index table with padding.
     * This will cost extra space, but probably isn't very likely.
     */
    if (! cquantize->is_padded)
 801d976:	693b      	ldr	r3, [r7, #16]
 801d978:	69db      	ldr	r3, [r3, #28]
 801d97a:	2b00      	cmp	r3, #0
 801d97c:	d102      	bne.n	801d984 <start_pass_1_quant+0x80>
      create_colorindex(cinfo);
 801d97e:	6878      	ldr	r0, [r7, #4]
 801d980:	f7ff fbc6 	bl	801d110 <create_colorindex>
    /* Create ordered-dither tables if we didn't already. */
    if (cquantize->odither[0] == NULL)
 801d984:	693b      	ldr	r3, [r7, #16]
 801d986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801d988:	2b00      	cmp	r3, #0
 801d98a:	d136      	bne.n	801d9fa <start_pass_1_quant+0xf6>
      create_odither_tables(cinfo);
 801d98c:	6878      	ldr	r0, [r7, #4]
 801d98e:	f7ff fcb5 	bl	801d2fc <create_odither_tables>
    break;
 801d992:	e032      	b.n	801d9fa <start_pass_1_quant+0xf6>
  case JDITHER_FS:
    cquantize->pub.color_quantize = quantize_fs_dither;
 801d994:	693b      	ldr	r3, [r7, #16]
 801d996:	4a1f      	ldr	r2, [pc, #124]	; (801da14 <start_pass_1_quant+0x110>)
 801d998:	605a      	str	r2, [r3, #4]
    cquantize->on_odd_row = FALSE; /* initialize state for F-S dither */
 801d99a:	693b      	ldr	r3, [r7, #16]
 801d99c:	2200      	movs	r2, #0
 801d99e:	655a      	str	r2, [r3, #84]	; 0x54
    /* Allocate Floyd-Steinberg workspace if didn't already. */
    if (cquantize->fserrors[0] == NULL)
 801d9a0:	693b      	ldr	r3, [r7, #16]
 801d9a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801d9a4:	2b00      	cmp	r3, #0
 801d9a6:	d102      	bne.n	801d9ae <start_pass_1_quant+0xaa>
      alloc_fs_workspace(cinfo);
 801d9a8:	6878      	ldr	r0, [r7, #4]
 801d9aa:	f7ff ff7f 	bl	801d8ac <alloc_fs_workspace>
    /* Initialize the propagated errors to zero. */
    arraysize = (size_t) ((cinfo->output_width + 2) * SIZEOF(FSERROR));
 801d9ae:	687b      	ldr	r3, [r7, #4]
 801d9b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801d9b2:	3302      	adds	r3, #2
 801d9b4:	005b      	lsls	r3, r3, #1
 801d9b6:	60fb      	str	r3, [r7, #12]
    for (i = 0; i < cinfo->out_color_components; i++)
 801d9b8:	2300      	movs	r3, #0
 801d9ba:	617b      	str	r3, [r7, #20]
 801d9bc:	e00d      	b.n	801d9da <start_pass_1_quant+0xd6>
      FMEMZERO((void FAR *) cquantize->fserrors[i], arraysize);
 801d9be:	693a      	ldr	r2, [r7, #16]
 801d9c0:	697b      	ldr	r3, [r7, #20]
 801d9c2:	3310      	adds	r3, #16
 801d9c4:	009b      	lsls	r3, r3, #2
 801d9c6:	4413      	add	r3, r2
 801d9c8:	685b      	ldr	r3, [r3, #4]
 801d9ca:	68fa      	ldr	r2, [r7, #12]
 801d9cc:	2100      	movs	r1, #0
 801d9ce:	4618      	mov	r0, r3
 801d9d0:	f001 fd02 	bl	801f3d8 <memset>
    for (i = 0; i < cinfo->out_color_components; i++)
 801d9d4:	697b      	ldr	r3, [r7, #20]
 801d9d6:	3301      	adds	r3, #1
 801d9d8:	617b      	str	r3, [r7, #20]
 801d9da:	687b      	ldr	r3, [r7, #4]
 801d9dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801d9de:	697a      	ldr	r2, [r7, #20]
 801d9e0:	429a      	cmp	r2, r3
 801d9e2:	dbec      	blt.n	801d9be <start_pass_1_quant+0xba>
    break;
 801d9e4:	e00a      	b.n	801d9fc <start_pass_1_quant+0xf8>
  default:
    ERREXIT(cinfo, JERR_NOT_COMPILED);
 801d9e6:	687b      	ldr	r3, [r7, #4]
 801d9e8:	681b      	ldr	r3, [r3, #0]
 801d9ea:	2231      	movs	r2, #49	; 0x31
 801d9ec:	615a      	str	r2, [r3, #20]
 801d9ee:	687b      	ldr	r3, [r7, #4]
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	681b      	ldr	r3, [r3, #0]
 801d9f4:	6878      	ldr	r0, [r7, #4]
 801d9f6:	4798      	blx	r3
    break;
 801d9f8:	e000      	b.n	801d9fc <start_pass_1_quant+0xf8>
    break;
 801d9fa:	bf00      	nop
  }
}
 801d9fc:	bf00      	nop
 801d9fe:	3718      	adds	r7, #24
 801da00:	46bd      	mov	sp, r7
 801da02:	bd80      	pop	{r7, pc}
 801da04:	0801d42d 	.word	0x0801d42d
 801da08:	0801d38f 	.word	0x0801d38f
 801da0c:	0801d5dd 	.word	0x0801d5dd
 801da10:	0801d4df 	.word	0x0801d4df
 801da14:	0801d701 	.word	0x0801d701

0801da18 <finish_pass_1_quant>:
 * Finish up at the end of the pass.
 */

METHODDEF(void)
finish_pass_1_quant (j_decompress_ptr cinfo)
{
 801da18:	b480      	push	{r7}
 801da1a:	b083      	sub	sp, #12
 801da1c:	af00      	add	r7, sp, #0
 801da1e:	6078      	str	r0, [r7, #4]
  /* no work in 1-pass case */
}
 801da20:	bf00      	nop
 801da22:	370c      	adds	r7, #12
 801da24:	46bd      	mov	sp, r7
 801da26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801da2a:	4770      	bx	lr

0801da2c <new_color_map_1_quant>:
 * Shouldn't get to this module!
 */

METHODDEF(void)
new_color_map_1_quant (j_decompress_ptr cinfo)
{
 801da2c:	b580      	push	{r7, lr}
 801da2e:	b082      	sub	sp, #8
 801da30:	af00      	add	r7, sp, #0
 801da32:	6078      	str	r0, [r7, #4]
  ERREXIT(cinfo, JERR_MODE_CHANGE);
 801da34:	687b      	ldr	r3, [r7, #4]
 801da36:	681b      	ldr	r3, [r3, #0]
 801da38:	222f      	movs	r2, #47	; 0x2f
 801da3a:	615a      	str	r2, [r3, #20]
 801da3c:	687b      	ldr	r3, [r7, #4]
 801da3e:	681b      	ldr	r3, [r3, #0]
 801da40:	681b      	ldr	r3, [r3, #0]
 801da42:	6878      	ldr	r0, [r7, #4]
 801da44:	4798      	blx	r3
}
 801da46:	bf00      	nop
 801da48:	3708      	adds	r7, #8
 801da4a:	46bd      	mov	sp, r7
 801da4c:	bd80      	pop	{r7, pc}
	...

0801da50 <jinit_1pass_quantizer>:
 * Module initialization routine for 1-pass color quantization.
 */

GLOBAL(void)
jinit_1pass_quantizer (j_decompress_ptr cinfo)
{
 801da50:	b580      	push	{r7, lr}
 801da52:	b084      	sub	sp, #16
 801da54:	af00      	add	r7, sp, #0
 801da56:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801da58:	687b      	ldr	r3, [r7, #4]
 801da5a:	685b      	ldr	r3, [r3, #4]
 801da5c:	681b      	ldr	r3, [r3, #0]
 801da5e:	2258      	movs	r2, #88	; 0x58
 801da60:	2101      	movs	r1, #1
 801da62:	6878      	ldr	r0, [r7, #4]
 801da64:	4798      	blx	r3
 801da66:	60f8      	str	r0, [r7, #12]
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 801da68:	687b      	ldr	r3, [r7, #4]
 801da6a:	68fa      	ldr	r2, [r7, #12]
 801da6c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_1_quant;
 801da70:	68fb      	ldr	r3, [r7, #12]
 801da72:	4a22      	ldr	r2, [pc, #136]	; (801dafc <jinit_1pass_quantizer+0xac>)
 801da74:	601a      	str	r2, [r3, #0]
  cquantize->pub.finish_pass = finish_pass_1_quant;
 801da76:	68fb      	ldr	r3, [r7, #12]
 801da78:	4a21      	ldr	r2, [pc, #132]	; (801db00 <jinit_1pass_quantizer+0xb0>)
 801da7a:	609a      	str	r2, [r3, #8]
  cquantize->pub.new_color_map = new_color_map_1_quant;
 801da7c:	68fb      	ldr	r3, [r7, #12]
 801da7e:	4a21      	ldr	r2, [pc, #132]	; (801db04 <jinit_1pass_quantizer+0xb4>)
 801da80:	60da      	str	r2, [r3, #12]
  cquantize->fserrors[0] = NULL; /* Flag FS workspace not allocated */
 801da82:	68fb      	ldr	r3, [r7, #12]
 801da84:	2200      	movs	r2, #0
 801da86:	645a      	str	r2, [r3, #68]	; 0x44
  cquantize->odither[0] = NULL;	/* Also flag odither arrays not allocated */
 801da88:	68fb      	ldr	r3, [r7, #12]
 801da8a:	2200      	movs	r2, #0
 801da8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Make sure my internal arrays won't overflow */
  if (cinfo->out_color_components > MAX_Q_COMPS)
 801da8e:	687b      	ldr	r3, [r7, #4]
 801da90:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801da92:	2b04      	cmp	r3, #4
 801da94:	dd0c      	ble.n	801dab0 <jinit_1pass_quantizer+0x60>
    ERREXIT1(cinfo, JERR_QUANT_COMPONENTS, MAX_Q_COMPS);
 801da96:	687b      	ldr	r3, [r7, #4]
 801da98:	681b      	ldr	r3, [r3, #0]
 801da9a:	2239      	movs	r2, #57	; 0x39
 801da9c:	615a      	str	r2, [r3, #20]
 801da9e:	687b      	ldr	r3, [r7, #4]
 801daa0:	681b      	ldr	r3, [r3, #0]
 801daa2:	2204      	movs	r2, #4
 801daa4:	619a      	str	r2, [r3, #24]
 801daa6:	687b      	ldr	r3, [r7, #4]
 801daa8:	681b      	ldr	r3, [r3, #0]
 801daaa:	681b      	ldr	r3, [r3, #0]
 801daac:	6878      	ldr	r0, [r7, #4]
 801daae:	4798      	blx	r3
  /* Make sure colormap indexes can be represented by JSAMPLEs */
  if (cinfo->desired_number_of_colors > (MAXJSAMPLE+1))
 801dab0:	687b      	ldr	r3, [r7, #4]
 801dab2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801dab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801dab8:	dd0d      	ble.n	801dad6 <jinit_1pass_quantizer+0x86>
    ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXJSAMPLE+1);
 801daba:	687b      	ldr	r3, [r7, #4]
 801dabc:	681b      	ldr	r3, [r3, #0]
 801dabe:	223b      	movs	r2, #59	; 0x3b
 801dac0:	615a      	str	r2, [r3, #20]
 801dac2:	687b      	ldr	r3, [r7, #4]
 801dac4:	681b      	ldr	r3, [r3, #0]
 801dac6:	f44f 7280 	mov.w	r2, #256	; 0x100
 801daca:	619a      	str	r2, [r3, #24]
 801dacc:	687b      	ldr	r3, [r7, #4]
 801dace:	681b      	ldr	r3, [r3, #0]
 801dad0:	681b      	ldr	r3, [r3, #0]
 801dad2:	6878      	ldr	r0, [r7, #4]
 801dad4:	4798      	blx	r3

  /* Create the colormap and color index table. */
  create_colormap(cinfo);
 801dad6:	6878      	ldr	r0, [r7, #4]
 801dad8:	f7ff fa74 	bl	801cfc4 <create_colormap>
  create_colorindex(cinfo);
 801dadc:	6878      	ldr	r0, [r7, #4]
 801dade:	f7ff fb17 	bl	801d110 <create_colorindex>
   * We do this now since it is FAR storage and may affect the memory
   * manager's space calculations.  If the user changes to FS dither
   * mode in a later pass, we will allocate the space then, and will
   * possibly overrun the max_memory_to_use setting.
   */
  if (cinfo->dither_mode == JDITHER_FS)
 801dae2:	687b      	ldr	r3, [r7, #4]
 801dae4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801dae8:	2b02      	cmp	r3, #2
 801daea:	d102      	bne.n	801daf2 <jinit_1pass_quantizer+0xa2>
    alloc_fs_workspace(cinfo);
 801daec:	6878      	ldr	r0, [r7, #4]
 801daee:	f7ff fedd 	bl	801d8ac <alloc_fs_workspace>
}
 801daf2:	bf00      	nop
 801daf4:	3710      	adds	r7, #16
 801daf6:	46bd      	mov	sp, r7
 801daf8:	bd80      	pop	{r7, pc}
 801dafa:	bf00      	nop
 801dafc:	0801d905 	.word	0x0801d905
 801db00:	0801da19 	.word	0x0801da19
 801db04:	0801da2d 	.word	0x0801da2d

0801db08 <prescan_quantize>:
 */

METHODDEF(void)
prescan_quantize (j_decompress_ptr cinfo, JSAMPARRAY input_buf,
		  JSAMPARRAY output_buf, int num_rows)
{
 801db08:	b4f0      	push	{r4, r5, r6, r7}
 801db0a:	b088      	sub	sp, #32
 801db0c:	af00      	add	r7, sp, #0
 801db0e:	60f8      	str	r0, [r7, #12]
 801db10:	60b9      	str	r1, [r7, #8]
 801db12:	607a      	str	r2, [r7, #4]
 801db14:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801db16:	68fb      	ldr	r3, [r7, #12]
 801db18:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801db1c:	617b      	str	r3, [r7, #20]
  register JSAMPROW ptr;
  register histptr histp;
  register hist3d histogram = cquantize->histogram;
 801db1e:	697b      	ldr	r3, [r7, #20]
 801db20:	699e      	ldr	r6, [r3, #24]
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801db22:	68fb      	ldr	r3, [r7, #12]
 801db24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801db26:	613b      	str	r3, [r7, #16]

  for (row = 0; row < num_rows; row++) {
 801db28:	2300      	movs	r3, #0
 801db2a:	61fb      	str	r3, [r7, #28]
 801db2c:	e02e      	b.n	801db8c <prescan_quantize+0x84>
    ptr = input_buf[row];
 801db2e:	69fb      	ldr	r3, [r7, #28]
 801db30:	009b      	lsls	r3, r3, #2
 801db32:	68ba      	ldr	r2, [r7, #8]
 801db34:	4413      	add	r3, r2
 801db36:	681c      	ldr	r4, [r3, #0]
    for (col = width; col > 0; col--) {
 801db38:	693b      	ldr	r3, [r7, #16]
 801db3a:	61bb      	str	r3, [r7, #24]
 801db3c:	e020      	b.n	801db80 <prescan_quantize+0x78>
      /* get pixel value and index into the histogram */
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 801db3e:	7823      	ldrb	r3, [r4, #0]
 801db40:	08db      	lsrs	r3, r3, #3
 801db42:	b2db      	uxtb	r3, r3
 801db44:	009b      	lsls	r3, r3, #2
 801db46:	4433      	add	r3, r6
 801db48:	681a      	ldr	r2, [r3, #0]
			 [GETJSAMPLE(ptr[1]) >> C1_SHIFT]
 801db4a:	1c63      	adds	r3, r4, #1
 801db4c:	781b      	ldrb	r3, [r3, #0]
 801db4e:	089b      	lsrs	r3, r3, #2
 801db50:	b2db      	uxtb	r3, r3
 801db52:	019b      	lsls	r3, r3, #6
 801db54:	441a      	add	r2, r3
			 [GETJSAMPLE(ptr[2]) >> C2_SHIFT];
 801db56:	1ca3      	adds	r3, r4, #2
 801db58:	781b      	ldrb	r3, [r3, #0]
 801db5a:	08db      	lsrs	r3, r3, #3
 801db5c:	b2db      	uxtb	r3, r3
      histp = & histogram[GETJSAMPLE(ptr[0]) >> C0_SHIFT]
 801db5e:	005b      	lsls	r3, r3, #1
 801db60:	18d5      	adds	r5, r2, r3
      /* increment, check for overflow and undo increment if so. */
      if (++(*histp) <= 0)
 801db62:	882b      	ldrh	r3, [r5, #0]
 801db64:	3301      	adds	r3, #1
 801db66:	b29b      	uxth	r3, r3
 801db68:	802b      	strh	r3, [r5, #0]
 801db6a:	882b      	ldrh	r3, [r5, #0]
 801db6c:	2b00      	cmp	r3, #0
 801db6e:	d103      	bne.n	801db78 <prescan_quantize+0x70>
	(*histp)--;
 801db70:	882b      	ldrh	r3, [r5, #0]
 801db72:	3b01      	subs	r3, #1
 801db74:	b29b      	uxth	r3, r3
 801db76:	802b      	strh	r3, [r5, #0]
      ptr += 3;
 801db78:	3403      	adds	r4, #3
    for (col = width; col > 0; col--) {
 801db7a:	69bb      	ldr	r3, [r7, #24]
 801db7c:	3b01      	subs	r3, #1
 801db7e:	61bb      	str	r3, [r7, #24]
 801db80:	69bb      	ldr	r3, [r7, #24]
 801db82:	2b00      	cmp	r3, #0
 801db84:	d1db      	bne.n	801db3e <prescan_quantize+0x36>
  for (row = 0; row < num_rows; row++) {
 801db86:	69fb      	ldr	r3, [r7, #28]
 801db88:	3301      	adds	r3, #1
 801db8a:	61fb      	str	r3, [r7, #28]
 801db8c:	69fa      	ldr	r2, [r7, #28]
 801db8e:	683b      	ldr	r3, [r7, #0]
 801db90:	429a      	cmp	r2, r3
 801db92:	dbcc      	blt.n	801db2e <prescan_quantize+0x26>
    }
  }
}
 801db94:	bf00      	nop
 801db96:	bf00      	nop
 801db98:	3720      	adds	r7, #32
 801db9a:	46bd      	mov	sp, r7
 801db9c:	bcf0      	pop	{r4, r5, r6, r7}
 801db9e:	4770      	bx	lr

0801dba0 <find_biggest_color_pop>:

LOCAL(boxptr)
find_biggest_color_pop (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest color population */
/* Returns NULL if no splittable boxes remain */
{
 801dba0:	b4f0      	push	{r4, r5, r6, r7}
 801dba2:	b084      	sub	sp, #16
 801dba4:	af00      	add	r7, sp, #0
 801dba6:	6078      	str	r0, [r7, #4]
 801dba8:	6039      	str	r1, [r7, #0]
  register boxptr boxp;
  register int i;
  register long maxc = 0;
 801dbaa:	2600      	movs	r6, #0
  boxptr which = NULL;
 801dbac:	2300      	movs	r3, #0
 801dbae:	60fb      	str	r3, [r7, #12]
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801dbb0:	2500      	movs	r5, #0
 801dbb2:	687c      	ldr	r4, [r7, #4]
 801dbb4:	e009      	b.n	801dbca <find_biggest_color_pop+0x2a>
    if (boxp->colorcount > maxc && boxp->volume > 0) {
 801dbb6:	69e3      	ldr	r3, [r4, #28]
 801dbb8:	429e      	cmp	r6, r3
 801dbba:	da04      	bge.n	801dbc6 <find_biggest_color_pop+0x26>
 801dbbc:	69a3      	ldr	r3, [r4, #24]
 801dbbe:	2b00      	cmp	r3, #0
 801dbc0:	dd01      	ble.n	801dbc6 <find_biggest_color_pop+0x26>
      which = boxp;
 801dbc2:	60fc      	str	r4, [r7, #12]
      maxc = boxp->colorcount;
 801dbc4:	69e6      	ldr	r6, [r4, #28]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801dbc6:	3501      	adds	r5, #1
 801dbc8:	3420      	adds	r4, #32
 801dbca:	683b      	ldr	r3, [r7, #0]
 801dbcc:	429d      	cmp	r5, r3
 801dbce:	dbf2      	blt.n	801dbb6 <find_biggest_color_pop+0x16>
    }
  }
  return which;
 801dbd0:	68fb      	ldr	r3, [r7, #12]
}
 801dbd2:	4618      	mov	r0, r3
 801dbd4:	3710      	adds	r7, #16
 801dbd6:	46bd      	mov	sp, r7
 801dbd8:	bcf0      	pop	{r4, r5, r6, r7}
 801dbda:	4770      	bx	lr

0801dbdc <find_biggest_volume>:

LOCAL(boxptr)
find_biggest_volume (boxptr boxlist, int numboxes)
/* Find the splittable box with the largest (scaled) volume */
/* Returns NULL if no splittable boxes remain */
{
 801dbdc:	b4f0      	push	{r4, r5, r6, r7}
 801dbde:	b084      	sub	sp, #16
 801dbe0:	af00      	add	r7, sp, #0
 801dbe2:	6078      	str	r0, [r7, #4]
 801dbe4:	6039      	str	r1, [r7, #0]
  register boxptr boxp;
  register int i;
  register INT32 maxv = 0;
 801dbe6:	2600      	movs	r6, #0
  boxptr which = NULL;
 801dbe8:	2300      	movs	r3, #0
 801dbea:	60fb      	str	r3, [r7, #12]
  
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801dbec:	2500      	movs	r5, #0
 801dbee:	687c      	ldr	r4, [r7, #4]
 801dbf0:	e006      	b.n	801dc00 <find_biggest_volume+0x24>
    if (boxp->volume > maxv) {
 801dbf2:	69a3      	ldr	r3, [r4, #24]
 801dbf4:	429e      	cmp	r6, r3
 801dbf6:	da01      	bge.n	801dbfc <find_biggest_volume+0x20>
      which = boxp;
 801dbf8:	60fc      	str	r4, [r7, #12]
      maxv = boxp->volume;
 801dbfa:	69a6      	ldr	r6, [r4, #24]
  for (i = 0, boxp = boxlist; i < numboxes; i++, boxp++) {
 801dbfc:	3501      	adds	r5, #1
 801dbfe:	3420      	adds	r4, #32
 801dc00:	683b      	ldr	r3, [r7, #0]
 801dc02:	429d      	cmp	r5, r3
 801dc04:	dbf5      	blt.n	801dbf2 <find_biggest_volume+0x16>
    }
  }
  return which;
 801dc06:	68fb      	ldr	r3, [r7, #12]
}
 801dc08:	4618      	mov	r0, r3
 801dc0a:	3710      	adds	r7, #16
 801dc0c:	46bd      	mov	sp, r7
 801dc0e:	bcf0      	pop	{r4, r5, r6, r7}
 801dc10:	4770      	bx	lr

0801dc12 <update_box>:

LOCAL(void)
update_box (j_decompress_ptr cinfo, boxptr boxp)
/* Shrink the min/max bounds of a box to enclose only nonzero elements, */
/* and recompute its volume and population */
{
 801dc12:	b480      	push	{r7}
 801dc14:	b093      	sub	sp, #76	; 0x4c
 801dc16:	af00      	add	r7, sp, #0
 801dc18:	6078      	str	r0, [r7, #4]
 801dc1a:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801dc1c:	687b      	ldr	r3, [r7, #4]
 801dc1e:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801dc22:	61bb      	str	r3, [r7, #24]
  hist3d histogram = cquantize->histogram;
 801dc24:	69bb      	ldr	r3, [r7, #24]
 801dc26:	699b      	ldr	r3, [r3, #24]
 801dc28:	617b      	str	r3, [r7, #20]
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  INT32 dist0,dist1,dist2;
  long ccount;
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
 801dc2a:	683b      	ldr	r3, [r7, #0]
 801dc2c:	681b      	ldr	r3, [r3, #0]
 801dc2e:	637b      	str	r3, [r7, #52]	; 0x34
 801dc30:	683b      	ldr	r3, [r7, #0]
 801dc32:	685b      	ldr	r3, [r3, #4]
 801dc34:	633b      	str	r3, [r7, #48]	; 0x30
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801dc36:	683b      	ldr	r3, [r7, #0]
 801dc38:	689b      	ldr	r3, [r3, #8]
 801dc3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dc3c:	683b      	ldr	r3, [r7, #0]
 801dc3e:	68db      	ldr	r3, [r3, #12]
 801dc40:	62bb      	str	r3, [r7, #40]	; 0x28
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801dc42:	683b      	ldr	r3, [r7, #0]
 801dc44:	691b      	ldr	r3, [r3, #16]
 801dc46:	627b      	str	r3, [r7, #36]	; 0x24
 801dc48:	683b      	ldr	r3, [r7, #0]
 801dc4a:	695b      	ldr	r3, [r3, #20]
 801dc4c:	623b      	str	r3, [r7, #32]
  
  if (c0max > c0min)
 801dc4e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dc50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc52:	429a      	cmp	r2, r3
 801dc54:	dd35      	ble.n	801dcc2 <update_box+0xb0>
    for (c0 = c0min; c0 <= c0max; c0++)
 801dc56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dc58:	643b      	str	r3, [r7, #64]	; 0x40
 801dc5a:	e02e      	b.n	801dcba <update_box+0xa8>
      for (c1 = c1min; c1 <= c1max; c1++) {
 801dc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dc5e:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dc60:	e024      	b.n	801dcac <update_box+0x9a>
	histp = & histogram[c0][c1][c2min];
 801dc62:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc64:	009b      	lsls	r3, r3, #2
 801dc66:	697a      	ldr	r2, [r7, #20]
 801dc68:	4413      	add	r3, r2
 801dc6a:	681a      	ldr	r2, [r3, #0]
 801dc6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dc6e:	019b      	lsls	r3, r3, #6
 801dc70:	441a      	add	r2, r3
 801dc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc74:	005b      	lsls	r3, r3, #1
 801dc76:	4413      	add	r3, r2
 801dc78:	647b      	str	r3, [r7, #68]	; 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 801dc7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dc7c:	63bb      	str	r3, [r7, #56]	; 0x38
 801dc7e:	e00e      	b.n	801dc9e <update_box+0x8c>
	  if (*histp++ != 0) {
 801dc80:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dc82:	1c9a      	adds	r2, r3, #2
 801dc84:	647a      	str	r2, [r7, #68]	; 0x44
 801dc86:	881b      	ldrh	r3, [r3, #0]
 801dc88:	2b00      	cmp	r3, #0
 801dc8a:	d005      	beq.n	801dc98 <update_box+0x86>
	    boxp->c0min = c0min = c0;
 801dc8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dc8e:	637b      	str	r3, [r7, #52]	; 0x34
 801dc90:	683b      	ldr	r3, [r7, #0]
 801dc92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801dc94:	601a      	str	r2, [r3, #0]
	    goto have_c0min;
 801dc96:	e015      	b.n	801dcc4 <update_box+0xb2>
	for (c2 = c2min; c2 <= c2max; c2++)
 801dc98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dc9a:	3301      	adds	r3, #1
 801dc9c:	63bb      	str	r3, [r7, #56]	; 0x38
 801dc9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dca0:	6a3b      	ldr	r3, [r7, #32]
 801dca2:	429a      	cmp	r2, r3
 801dca4:	ddec      	ble.n	801dc80 <update_box+0x6e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 801dca6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dca8:	3301      	adds	r3, #1
 801dcaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dcac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dcae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dcb0:	429a      	cmp	r2, r3
 801dcb2:	ddd6      	ble.n	801dc62 <update_box+0x50>
    for (c0 = c0min; c0 <= c0max; c0++)
 801dcb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dcb6:	3301      	adds	r3, #1
 801dcb8:	643b      	str	r3, [r7, #64]	; 0x40
 801dcba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dcbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcbe:	429a      	cmp	r2, r3
 801dcc0:	ddcc      	ble.n	801dc5c <update_box+0x4a>
	  }
      }
 have_c0min:
 801dcc2:	bf00      	nop
  if (c0max > c0min)
 801dcc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dcc6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dcc8:	429a      	cmp	r2, r3
 801dcca:	dd35      	ble.n	801dd38 <update_box+0x126>
    for (c0 = c0max; c0 >= c0min; c0--)
 801dccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dcce:	643b      	str	r3, [r7, #64]	; 0x40
 801dcd0:	e02e      	b.n	801dd30 <update_box+0x11e>
      for (c1 = c1min; c1 <= c1max; c1++) {
 801dcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dcd4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dcd6:	e024      	b.n	801dd22 <update_box+0x110>
	histp = & histogram[c0][c1][c2min];
 801dcd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dcda:	009b      	lsls	r3, r3, #2
 801dcdc:	697a      	ldr	r2, [r7, #20]
 801dcde:	4413      	add	r3, r2
 801dce0:	681a      	ldr	r2, [r3, #0]
 801dce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dce4:	019b      	lsls	r3, r3, #6
 801dce6:	441a      	add	r2, r3
 801dce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcea:	005b      	lsls	r3, r3, #1
 801dcec:	4413      	add	r3, r2
 801dcee:	647b      	str	r3, [r7, #68]	; 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 801dcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dcf2:	63bb      	str	r3, [r7, #56]	; 0x38
 801dcf4:	e00e      	b.n	801dd14 <update_box+0x102>
	  if (*histp++ != 0) {
 801dcf6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dcf8:	1c9a      	adds	r2, r3, #2
 801dcfa:	647a      	str	r2, [r7, #68]	; 0x44
 801dcfc:	881b      	ldrh	r3, [r3, #0]
 801dcfe:	2b00      	cmp	r3, #0
 801dd00:	d005      	beq.n	801dd0e <update_box+0xfc>
	    boxp->c0max = c0max = c0;
 801dd02:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dd04:	633b      	str	r3, [r7, #48]	; 0x30
 801dd06:	683b      	ldr	r3, [r7, #0]
 801dd08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801dd0a:	605a      	str	r2, [r3, #4]
	    goto have_c0max;
 801dd0c:	e015      	b.n	801dd3a <update_box+0x128>
	for (c2 = c2min; c2 <= c2max; c2++)
 801dd0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd10:	3301      	adds	r3, #1
 801dd12:	63bb      	str	r3, [r7, #56]	; 0x38
 801dd14:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dd16:	6a3b      	ldr	r3, [r7, #32]
 801dd18:	429a      	cmp	r2, r3
 801dd1a:	ddec      	ble.n	801dcf6 <update_box+0xe4>
      for (c1 = c1min; c1 <= c1max; c1++) {
 801dd1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd1e:	3301      	adds	r3, #1
 801dd20:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dd22:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dd24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dd26:	429a      	cmp	r2, r3
 801dd28:	ddd6      	ble.n	801dcd8 <update_box+0xc6>
    for (c0 = c0max; c0 >= c0min; c0--)
 801dd2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dd2c:	3b01      	subs	r3, #1
 801dd2e:	643b      	str	r3, [r7, #64]	; 0x40
 801dd30:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dd32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd34:	429a      	cmp	r2, r3
 801dd36:	dacc      	bge.n	801dcd2 <update_box+0xc0>
	  }
      }
 have_c0max:
 801dd38:	bf00      	nop
  if (c1max > c1min)
 801dd3a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801dd3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd3e:	429a      	cmp	r2, r3
 801dd40:	dd35      	ble.n	801ddae <update_box+0x19c>
    for (c1 = c1min; c1 <= c1max; c1++)
 801dd42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801dd44:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dd46:	e02e      	b.n	801dda6 <update_box+0x194>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801dd48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801dd4a:	643b      	str	r3, [r7, #64]	; 0x40
 801dd4c:	e024      	b.n	801dd98 <update_box+0x186>
	histp = & histogram[c0][c1][c2min];
 801dd4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dd50:	009b      	lsls	r3, r3, #2
 801dd52:	697a      	ldr	r2, [r7, #20]
 801dd54:	4413      	add	r3, r2
 801dd56:	681a      	ldr	r2, [r3, #0]
 801dd58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd5a:	019b      	lsls	r3, r3, #6
 801dd5c:	441a      	add	r2, r3
 801dd5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd60:	005b      	lsls	r3, r3, #1
 801dd62:	4413      	add	r3, r2
 801dd64:	647b      	str	r3, [r7, #68]	; 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 801dd66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dd68:	63bb      	str	r3, [r7, #56]	; 0x38
 801dd6a:	e00e      	b.n	801dd8a <update_box+0x178>
	  if (*histp++ != 0) {
 801dd6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dd6e:	1c9a      	adds	r2, r3, #2
 801dd70:	647a      	str	r2, [r7, #68]	; 0x44
 801dd72:	881b      	ldrh	r3, [r3, #0]
 801dd74:	2b00      	cmp	r3, #0
 801dd76:	d005      	beq.n	801dd84 <update_box+0x172>
	    boxp->c1min = c1min = c1;
 801dd78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dd7a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801dd7c:	683b      	ldr	r3, [r7, #0]
 801dd7e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801dd80:	609a      	str	r2, [r3, #8]
	    goto have_c1min;
 801dd82:	e015      	b.n	801ddb0 <update_box+0x19e>
	for (c2 = c2min; c2 <= c2max; c2++)
 801dd84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dd86:	3301      	adds	r3, #1
 801dd88:	63bb      	str	r3, [r7, #56]	; 0x38
 801dd8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dd8c:	6a3b      	ldr	r3, [r7, #32]
 801dd8e:	429a      	cmp	r2, r3
 801dd90:	ddec      	ble.n	801dd6c <update_box+0x15a>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801dd92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dd94:	3301      	adds	r3, #1
 801dd96:	643b      	str	r3, [r7, #64]	; 0x40
 801dd98:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dd9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dd9c:	429a      	cmp	r2, r3
 801dd9e:	ddd6      	ble.n	801dd4e <update_box+0x13c>
    for (c1 = c1min; c1 <= c1max; c1++)
 801dda0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dda2:	3301      	adds	r3, #1
 801dda4:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dda6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dda8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddaa:	429a      	cmp	r2, r3
 801ddac:	ddcc      	ble.n	801dd48 <update_box+0x136>
	  }
      }
 have_c1min:
 801ddae:	bf00      	nop
  if (c1max > c1min)
 801ddb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ddb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801ddb4:	429a      	cmp	r2, r3
 801ddb6:	dd35      	ble.n	801de24 <update_box+0x212>
    for (c1 = c1max; c1 >= c1min; c1--)
 801ddb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ddba:	63fb      	str	r3, [r7, #60]	; 0x3c
 801ddbc:	e02e      	b.n	801de1c <update_box+0x20a>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801ddbe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ddc0:	643b      	str	r3, [r7, #64]	; 0x40
 801ddc2:	e024      	b.n	801de0e <update_box+0x1fc>
	histp = & histogram[c0][c1][c2min];
 801ddc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ddc6:	009b      	lsls	r3, r3, #2
 801ddc8:	697a      	ldr	r2, [r7, #20]
 801ddca:	4413      	add	r3, r2
 801ddcc:	681a      	ldr	r2, [r3, #0]
 801ddce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddd0:	019b      	lsls	r3, r3, #6
 801ddd2:	441a      	add	r2, r3
 801ddd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddd6:	005b      	lsls	r3, r3, #1
 801ddd8:	4413      	add	r3, r2
 801ddda:	647b      	str	r3, [r7, #68]	; 0x44
	for (c2 = c2min; c2 <= c2max; c2++)
 801dddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ddde:	63bb      	str	r3, [r7, #56]	; 0x38
 801dde0:	e00e      	b.n	801de00 <update_box+0x1ee>
	  if (*histp++ != 0) {
 801dde2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801dde4:	1c9a      	adds	r2, r3, #2
 801dde6:	647a      	str	r2, [r7, #68]	; 0x44
 801dde8:	881b      	ldrh	r3, [r3, #0]
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d005      	beq.n	801ddfa <update_box+0x1e8>
	    boxp->c1max = c1max = c1;
 801ddee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ddf0:	62bb      	str	r3, [r7, #40]	; 0x28
 801ddf2:	683b      	ldr	r3, [r7, #0]
 801ddf4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801ddf6:	60da      	str	r2, [r3, #12]
	    goto have_c1max;
 801ddf8:	e015      	b.n	801de26 <update_box+0x214>
	for (c2 = c2min; c2 <= c2max; c2++)
 801ddfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ddfc:	3301      	adds	r3, #1
 801ddfe:	63bb      	str	r3, [r7, #56]	; 0x38
 801de00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de02:	6a3b      	ldr	r3, [r7, #32]
 801de04:	429a      	cmp	r2, r3
 801de06:	ddec      	ble.n	801dde2 <update_box+0x1d0>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801de08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de0a:	3301      	adds	r3, #1
 801de0c:	643b      	str	r3, [r7, #64]	; 0x40
 801de0e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801de10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de12:	429a      	cmp	r2, r3
 801de14:	ddd6      	ble.n	801ddc4 <update_box+0x1b2>
    for (c1 = c1max; c1 >= c1min; c1--)
 801de16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de18:	3b01      	subs	r3, #1
 801de1a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801de1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801de1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de20:	429a      	cmp	r2, r3
 801de22:	dacc      	bge.n	801ddbe <update_box+0x1ac>
	  }
      }
 have_c1max:
 801de24:	bf00      	nop
  if (c2max > c2min)
 801de26:	6a3a      	ldr	r2, [r7, #32]
 801de28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de2a:	429a      	cmp	r2, r3
 801de2c:	dd36      	ble.n	801de9c <update_box+0x28a>
    for (c2 = c2min; c2 <= c2max; c2++)
 801de2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801de30:	63bb      	str	r3, [r7, #56]	; 0x38
 801de32:	e02f      	b.n	801de94 <update_box+0x282>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801de34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801de36:	643b      	str	r3, [r7, #64]	; 0x40
 801de38:	e025      	b.n	801de86 <update_box+0x274>
	histp = & histogram[c0][c1min][c2];
 801de3a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de3c:	009b      	lsls	r3, r3, #2
 801de3e:	697a      	ldr	r2, [r7, #20]
 801de40:	4413      	add	r3, r2
 801de42:	681a      	ldr	r2, [r3, #0]
 801de44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de46:	019b      	lsls	r3, r3, #6
 801de48:	441a      	add	r2, r3
 801de4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de4c:	005b      	lsls	r3, r3, #1
 801de4e:	4413      	add	r3, r2
 801de50:	647b      	str	r3, [r7, #68]	; 0x44
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801de52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801de54:	63fb      	str	r3, [r7, #60]	; 0x3c
 801de56:	e00f      	b.n	801de78 <update_box+0x266>
	  if (*histp != 0) {
 801de58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801de5a:	881b      	ldrh	r3, [r3, #0]
 801de5c:	2b00      	cmp	r3, #0
 801de5e:	d005      	beq.n	801de6c <update_box+0x25a>
	    boxp->c2min = c2min = c2;
 801de60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de62:	627b      	str	r3, [r7, #36]	; 0x24
 801de64:	683b      	ldr	r3, [r7, #0]
 801de66:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801de68:	611a      	str	r2, [r3, #16]
	    goto have_c2min;
 801de6a:	e018      	b.n	801de9e <update_box+0x28c>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801de6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801de6e:	3301      	adds	r3, #1
 801de70:	63fb      	str	r3, [r7, #60]	; 0x3c
 801de72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801de74:	3340      	adds	r3, #64	; 0x40
 801de76:	647b      	str	r3, [r7, #68]	; 0x44
 801de78:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801de7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801de7c:	429a      	cmp	r2, r3
 801de7e:	ddeb      	ble.n	801de58 <update_box+0x246>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801de80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801de82:	3301      	adds	r3, #1
 801de84:	643b      	str	r3, [r7, #64]	; 0x40
 801de86:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801de88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801de8a:	429a      	cmp	r2, r3
 801de8c:	ddd5      	ble.n	801de3a <update_box+0x228>
    for (c2 = c2min; c2 <= c2max; c2++)
 801de8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801de90:	3301      	adds	r3, #1
 801de92:	63bb      	str	r3, [r7, #56]	; 0x38
 801de94:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801de96:	6a3b      	ldr	r3, [r7, #32]
 801de98:	429a      	cmp	r2, r3
 801de9a:	ddcb      	ble.n	801de34 <update_box+0x222>
	  }
      }
 have_c2min:
 801de9c:	bf00      	nop
  if (c2max > c2min)
 801de9e:	6a3a      	ldr	r2, [r7, #32]
 801dea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801dea2:	429a      	cmp	r2, r3
 801dea4:	dd36      	ble.n	801df14 <update_box+0x302>
    for (c2 = c2max; c2 >= c2min; c2--)
 801dea6:	6a3b      	ldr	r3, [r7, #32]
 801dea8:	63bb      	str	r3, [r7, #56]	; 0x38
 801deaa:	e02f      	b.n	801df0c <update_box+0x2fa>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801deac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801deae:	643b      	str	r3, [r7, #64]	; 0x40
 801deb0:	e025      	b.n	801defe <update_box+0x2ec>
	histp = & histogram[c0][c1min][c2];
 801deb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801deb4:	009b      	lsls	r3, r3, #2
 801deb6:	697a      	ldr	r2, [r7, #20]
 801deb8:	4413      	add	r3, r2
 801deba:	681a      	ldr	r2, [r3, #0]
 801debc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801debe:	019b      	lsls	r3, r3, #6
 801dec0:	441a      	add	r2, r3
 801dec2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801dec4:	005b      	lsls	r3, r3, #1
 801dec6:	4413      	add	r3, r2
 801dec8:	647b      	str	r3, [r7, #68]	; 0x44
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801deca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801decc:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dece:	e00f      	b.n	801def0 <update_box+0x2de>
	  if (*histp != 0) {
 801ded0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ded2:	881b      	ldrh	r3, [r3, #0]
 801ded4:	2b00      	cmp	r3, #0
 801ded6:	d005      	beq.n	801dee4 <update_box+0x2d2>
	    boxp->c2max = c2max = c2;
 801ded8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801deda:	623b      	str	r3, [r7, #32]
 801dedc:	683b      	ldr	r3, [r7, #0]
 801dede:	6a3a      	ldr	r2, [r7, #32]
 801dee0:	615a      	str	r2, [r3, #20]
	    goto have_c2max;
 801dee2:	e018      	b.n	801df16 <update_box+0x304>
	for (c1 = c1min; c1 <= c1max; c1++, histp += HIST_C2_ELEMS)
 801dee4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dee6:	3301      	adds	r3, #1
 801dee8:	63fb      	str	r3, [r7, #60]	; 0x3c
 801deea:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801deec:	3340      	adds	r3, #64	; 0x40
 801deee:	647b      	str	r3, [r7, #68]	; 0x44
 801def0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801def2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801def4:	429a      	cmp	r2, r3
 801def6:	ddeb      	ble.n	801ded0 <update_box+0x2be>
      for (c0 = c0min; c0 <= c0max; c0++) {
 801def8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801defa:	3301      	adds	r3, #1
 801defc:	643b      	str	r3, [r7, #64]	; 0x40
 801defe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801df00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801df02:	429a      	cmp	r2, r3
 801df04:	ddd5      	ble.n	801deb2 <update_box+0x2a0>
    for (c2 = c2max; c2 >= c2min; c2--)
 801df06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df08:	3b01      	subs	r3, #1
 801df0a:	63bb      	str	r3, [r7, #56]	; 0x38
 801df0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801df0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df10:	429a      	cmp	r2, r3
 801df12:	dacb      	bge.n	801deac <update_box+0x29a>
	  }
      }
 have_c2max:
 801df14:	bf00      	nop
   * a box is splittable iff norm > 0.
   * Since the differences are expressed in histogram-cell units,
   * we have to shift back to JSAMPLE units to get consistent distances;
   * after which, we scale according to the selected distance scale factors.
   */
  dist0 = ((c0max - c0min) << C0_SHIFT) * C0_SCALE;
 801df16:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801df18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df1a:	1ad3      	subs	r3, r2, r3
 801df1c:	00db      	lsls	r3, r3, #3
 801df1e:	005b      	lsls	r3, r3, #1
 801df20:	613b      	str	r3, [r7, #16]
  dist1 = ((c1max - c1min) << C1_SHIFT) * C1_SCALE;
 801df22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801df24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df26:	1ad3      	subs	r3, r2, r3
 801df28:	009a      	lsls	r2, r3, #2
 801df2a:	4613      	mov	r3, r2
 801df2c:	005b      	lsls	r3, r3, #1
 801df2e:	4413      	add	r3, r2
 801df30:	60fb      	str	r3, [r7, #12]
  dist2 = ((c2max - c2min) << C2_SHIFT) * C2_SCALE;
 801df32:	6a3a      	ldr	r2, [r7, #32]
 801df34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df36:	1ad3      	subs	r3, r2, r3
 801df38:	00db      	lsls	r3, r3, #3
 801df3a:	60bb      	str	r3, [r7, #8]
  boxp->volume = dist0*dist0 + dist1*dist1 + dist2*dist2;
 801df3c:	693b      	ldr	r3, [r7, #16]
 801df3e:	fb03 f203 	mul.w	r2, r3, r3
 801df42:	68fb      	ldr	r3, [r7, #12]
 801df44:	fb03 f303 	mul.w	r3, r3, r3
 801df48:	441a      	add	r2, r3
 801df4a:	68bb      	ldr	r3, [r7, #8]
 801df4c:	fb03 f303 	mul.w	r3, r3, r3
 801df50:	441a      	add	r2, r3
 801df52:	683b      	ldr	r3, [r7, #0]
 801df54:	619a      	str	r2, [r3, #24]
  
  /* Now scan remaining volume of box and compute population */
  ccount = 0;
 801df56:	2300      	movs	r3, #0
 801df58:	61fb      	str	r3, [r7, #28]
  for (c0 = c0min; c0 <= c0max; c0++)
 801df5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801df5c:	643b      	str	r3, [r7, #64]	; 0x40
 801df5e:	e02c      	b.n	801dfba <update_box+0x3a8>
    for (c1 = c1min; c1 <= c1max; c1++) {
 801df60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801df62:	63fb      	str	r3, [r7, #60]	; 0x3c
 801df64:	e022      	b.n	801dfac <update_box+0x39a>
      histp = & histogram[c0][c1][c2min];
 801df66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801df68:	009b      	lsls	r3, r3, #2
 801df6a:	697a      	ldr	r2, [r7, #20]
 801df6c:	4413      	add	r3, r2
 801df6e:	681a      	ldr	r2, [r3, #0]
 801df70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801df72:	019b      	lsls	r3, r3, #6
 801df74:	441a      	add	r2, r3
 801df76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df78:	005b      	lsls	r3, r3, #1
 801df7a:	4413      	add	r3, r2
 801df7c:	647b      	str	r3, [r7, #68]	; 0x44
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801df7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801df80:	63bb      	str	r3, [r7, #56]	; 0x38
 801df82:	e00c      	b.n	801df9e <update_box+0x38c>
	if (*histp != 0) {
 801df84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801df86:	881b      	ldrh	r3, [r3, #0]
 801df88:	2b00      	cmp	r3, #0
 801df8a:	d002      	beq.n	801df92 <update_box+0x380>
	  ccount++;
 801df8c:	69fb      	ldr	r3, [r7, #28]
 801df8e:	3301      	adds	r3, #1
 801df90:	61fb      	str	r3, [r7, #28]
      for (c2 = c2min; c2 <= c2max; c2++, histp++)
 801df92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801df94:	3301      	adds	r3, #1
 801df96:	63bb      	str	r3, [r7, #56]	; 0x38
 801df98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801df9a:	3302      	adds	r3, #2
 801df9c:	647b      	str	r3, [r7, #68]	; 0x44
 801df9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801dfa0:	6a3b      	ldr	r3, [r7, #32]
 801dfa2:	429a      	cmp	r2, r3
 801dfa4:	ddee      	ble.n	801df84 <update_box+0x372>
    for (c1 = c1min; c1 <= c1max; c1++) {
 801dfa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801dfa8:	3301      	adds	r3, #1
 801dfaa:	63fb      	str	r3, [r7, #60]	; 0x3c
 801dfac:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801dfb0:	429a      	cmp	r2, r3
 801dfb2:	ddd8      	ble.n	801df66 <update_box+0x354>
  for (c0 = c0min; c0 <= c0max; c0++)
 801dfb4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801dfb6:	3301      	adds	r3, #1
 801dfb8:	643b      	str	r3, [r7, #64]	; 0x40
 801dfba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801dfbe:	429a      	cmp	r2, r3
 801dfc0:	ddce      	ble.n	801df60 <update_box+0x34e>
	}
    }
  boxp->colorcount = ccount;
 801dfc2:	683b      	ldr	r3, [r7, #0]
 801dfc4:	69fa      	ldr	r2, [r7, #28]
 801dfc6:	61da      	str	r2, [r3, #28]
}
 801dfc8:	bf00      	nop
 801dfca:	374c      	adds	r7, #76	; 0x4c
 801dfcc:	46bd      	mov	sp, r7
 801dfce:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dfd2:	4770      	bx	lr

0801dfd4 <median_cut>:

LOCAL(int)
median_cut (j_decompress_ptr cinfo, boxptr boxlist, int numboxes,
	    int desired_colors)
/* Repeatedly select and split the largest box until we have enough boxes */
{
 801dfd4:	b5b0      	push	{r4, r5, r7, lr}
 801dfd6:	b08a      	sub	sp, #40	; 0x28
 801dfd8:	af00      	add	r7, sp, #0
 801dfda:	60f8      	str	r0, [r7, #12]
 801dfdc:	60b9      	str	r1, [r7, #8]
 801dfde:	607a      	str	r2, [r7, #4]
 801dfe0:	603b      	str	r3, [r7, #0]
  int n,lb;
  int c0,c1,c2,cmax;
  register boxptr b1,b2;

  while (numboxes < desired_colors) {
 801dfe2:	e085      	b.n	801e0f0 <median_cut+0x11c>
    /* Select box to split.
     * Current algorithm: by population for first half, then by volume.
     */
    if (numboxes*2 <= desired_colors) {
 801dfe4:	687b      	ldr	r3, [r7, #4]
 801dfe6:	005b      	lsls	r3, r3, #1
 801dfe8:	683a      	ldr	r2, [r7, #0]
 801dfea:	429a      	cmp	r2, r3
 801dfec:	db05      	blt.n	801dffa <median_cut+0x26>
      b1 = find_biggest_color_pop(boxlist, numboxes);
 801dfee:	6879      	ldr	r1, [r7, #4]
 801dff0:	68b8      	ldr	r0, [r7, #8]
 801dff2:	f7ff fdd5 	bl	801dba0 <find_biggest_color_pop>
 801dff6:	4604      	mov	r4, r0
 801dff8:	e004      	b.n	801e004 <median_cut+0x30>
    } else {
      b1 = find_biggest_volume(boxlist, numboxes);
 801dffa:	6879      	ldr	r1, [r7, #4]
 801dffc:	68b8      	ldr	r0, [r7, #8]
 801dffe:	f7ff fded 	bl	801dbdc <find_biggest_volume>
 801e002:	4604      	mov	r4, r0
    }
    if (b1 == NULL)		/* no splittable boxes left! */
 801e004:	2c00      	cmp	r4, #0
 801e006:	d079      	beq.n	801e0fc <median_cut+0x128>
      break;
    b2 = &boxlist[numboxes];	/* where new box will go */
 801e008:	687b      	ldr	r3, [r7, #4]
 801e00a:	015b      	lsls	r3, r3, #5
 801e00c:	68ba      	ldr	r2, [r7, #8]
 801e00e:	18d5      	adds	r5, r2, r3
    /* Copy the color bounds to the new box. */
    b2->c0max = b1->c0max; b2->c1max = b1->c1max; b2->c2max = b1->c2max;
 801e010:	6863      	ldr	r3, [r4, #4]
 801e012:	606b      	str	r3, [r5, #4]
 801e014:	68e3      	ldr	r3, [r4, #12]
 801e016:	60eb      	str	r3, [r5, #12]
 801e018:	6963      	ldr	r3, [r4, #20]
 801e01a:	616b      	str	r3, [r5, #20]
    b2->c0min = b1->c0min; b2->c1min = b1->c1min; b2->c2min = b1->c2min;
 801e01c:	6823      	ldr	r3, [r4, #0]
 801e01e:	602b      	str	r3, [r5, #0]
 801e020:	68a3      	ldr	r3, [r4, #8]
 801e022:	60ab      	str	r3, [r5, #8]
 801e024:	6923      	ldr	r3, [r4, #16]
 801e026:	612b      	str	r3, [r5, #16]
    /* Choose which axis to split the box on.
     * Current algorithm: longest scaled axis.
     * See notes in update_box about scaling distances.
     */
    c0 = ((b1->c0max - b1->c0min) << C0_SHIFT) * C0_SCALE;
 801e028:	6862      	ldr	r2, [r4, #4]
 801e02a:	6823      	ldr	r3, [r4, #0]
 801e02c:	1ad3      	subs	r3, r2, r3
 801e02e:	00db      	lsls	r3, r3, #3
 801e030:	005b      	lsls	r3, r3, #1
 801e032:	61fb      	str	r3, [r7, #28]
    c1 = ((b1->c1max - b1->c1min) << C1_SHIFT) * C1_SCALE;
 801e034:	68e2      	ldr	r2, [r4, #12]
 801e036:	68a3      	ldr	r3, [r4, #8]
 801e038:	1ad3      	subs	r3, r2, r3
 801e03a:	009a      	lsls	r2, r3, #2
 801e03c:	4613      	mov	r3, r2
 801e03e:	005b      	lsls	r3, r3, #1
 801e040:	4413      	add	r3, r2
 801e042:	61bb      	str	r3, [r7, #24]
    c2 = ((b1->c2max - b1->c2min) << C2_SHIFT) * C2_SCALE;
 801e044:	6962      	ldr	r2, [r4, #20]
 801e046:	6923      	ldr	r3, [r4, #16]
 801e048:	1ad3      	subs	r3, r2, r3
 801e04a:	00db      	lsls	r3, r3, #3
 801e04c:	617b      	str	r3, [r7, #20]
    /* We want to break any ties in favor of green, then red, blue last.
     * This code does the right thing for R,G,B or B,G,R color orders only.
     */
#if RGB_RED == 0
    cmax = c1; n = 1;
 801e04e:	69bb      	ldr	r3, [r7, #24]
 801e050:	623b      	str	r3, [r7, #32]
 801e052:	2301      	movs	r3, #1
 801e054:	627b      	str	r3, [r7, #36]	; 0x24
    if (c0 > cmax) { cmax = c0; n = 0; }
 801e056:	69fa      	ldr	r2, [r7, #28]
 801e058:	6a3b      	ldr	r3, [r7, #32]
 801e05a:	429a      	cmp	r2, r3
 801e05c:	dd03      	ble.n	801e066 <median_cut+0x92>
 801e05e:	69fb      	ldr	r3, [r7, #28]
 801e060:	623b      	str	r3, [r7, #32]
 801e062:	2300      	movs	r3, #0
 801e064:	627b      	str	r3, [r7, #36]	; 0x24
    if (c2 > cmax) { n = 2; }
 801e066:	697a      	ldr	r2, [r7, #20]
 801e068:	6a3b      	ldr	r3, [r7, #32]
 801e06a:	429a      	cmp	r2, r3
 801e06c:	dd01      	ble.n	801e072 <median_cut+0x9e>
 801e06e:	2302      	movs	r3, #2
 801e070:	627b      	str	r3, [r7, #36]	; 0x24
     * Current algorithm: split at halfway point.
     * (Since the box has been shrunk to minimum volume,
     * any split will produce two nonempty subboxes.)
     * Note that lb value is max for lower box, so must be < old max.
     */
    switch (n) {
 801e072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e074:	2b02      	cmp	r3, #2
 801e076:	d023      	beq.n	801e0c0 <median_cut+0xec>
 801e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e07a:	2b02      	cmp	r3, #2
 801e07c:	dc2d      	bgt.n	801e0da <median_cut+0x106>
 801e07e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e080:	2b00      	cmp	r3, #0
 801e082:	d003      	beq.n	801e08c <median_cut+0xb8>
 801e084:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e086:	2b01      	cmp	r3, #1
 801e088:	d00d      	beq.n	801e0a6 <median_cut+0xd2>
 801e08a:	e026      	b.n	801e0da <median_cut+0x106>
    case 0:
      lb = (b1->c0max + b1->c0min) / 2;
 801e08c:	6862      	ldr	r2, [r4, #4]
 801e08e:	6823      	ldr	r3, [r4, #0]
 801e090:	4413      	add	r3, r2
 801e092:	0fda      	lsrs	r2, r3, #31
 801e094:	4413      	add	r3, r2
 801e096:	105b      	asrs	r3, r3, #1
 801e098:	613b      	str	r3, [r7, #16]
      b1->c0max = lb;
 801e09a:	693b      	ldr	r3, [r7, #16]
 801e09c:	6063      	str	r3, [r4, #4]
      b2->c0min = lb+1;
 801e09e:	693b      	ldr	r3, [r7, #16]
 801e0a0:	3301      	adds	r3, #1
 801e0a2:	602b      	str	r3, [r5, #0]
      break;
 801e0a4:	e019      	b.n	801e0da <median_cut+0x106>
    case 1:
      lb = (b1->c1max + b1->c1min) / 2;
 801e0a6:	68e2      	ldr	r2, [r4, #12]
 801e0a8:	68a3      	ldr	r3, [r4, #8]
 801e0aa:	4413      	add	r3, r2
 801e0ac:	0fda      	lsrs	r2, r3, #31
 801e0ae:	4413      	add	r3, r2
 801e0b0:	105b      	asrs	r3, r3, #1
 801e0b2:	613b      	str	r3, [r7, #16]
      b1->c1max = lb;
 801e0b4:	693b      	ldr	r3, [r7, #16]
 801e0b6:	60e3      	str	r3, [r4, #12]
      b2->c1min = lb+1;
 801e0b8:	693b      	ldr	r3, [r7, #16]
 801e0ba:	3301      	adds	r3, #1
 801e0bc:	60ab      	str	r3, [r5, #8]
      break;
 801e0be:	e00c      	b.n	801e0da <median_cut+0x106>
    case 2:
      lb = (b1->c2max + b1->c2min) / 2;
 801e0c0:	6962      	ldr	r2, [r4, #20]
 801e0c2:	6923      	ldr	r3, [r4, #16]
 801e0c4:	4413      	add	r3, r2
 801e0c6:	0fda      	lsrs	r2, r3, #31
 801e0c8:	4413      	add	r3, r2
 801e0ca:	105b      	asrs	r3, r3, #1
 801e0cc:	613b      	str	r3, [r7, #16]
      b1->c2max = lb;
 801e0ce:	693b      	ldr	r3, [r7, #16]
 801e0d0:	6163      	str	r3, [r4, #20]
      b2->c2min = lb+1;
 801e0d2:	693b      	ldr	r3, [r7, #16]
 801e0d4:	3301      	adds	r3, #1
 801e0d6:	612b      	str	r3, [r5, #16]
      break;
 801e0d8:	bf00      	nop
    }
    /* Update stats for boxes */
    update_box(cinfo, b1);
 801e0da:	4621      	mov	r1, r4
 801e0dc:	68f8      	ldr	r0, [r7, #12]
 801e0de:	f7ff fd98 	bl	801dc12 <update_box>
    update_box(cinfo, b2);
 801e0e2:	4629      	mov	r1, r5
 801e0e4:	68f8      	ldr	r0, [r7, #12]
 801e0e6:	f7ff fd94 	bl	801dc12 <update_box>
    numboxes++;
 801e0ea:	687b      	ldr	r3, [r7, #4]
 801e0ec:	3301      	adds	r3, #1
 801e0ee:	607b      	str	r3, [r7, #4]
  while (numboxes < desired_colors) {
 801e0f0:	687a      	ldr	r2, [r7, #4]
 801e0f2:	683b      	ldr	r3, [r7, #0]
 801e0f4:	429a      	cmp	r2, r3
 801e0f6:	f6ff af75 	blt.w	801dfe4 <median_cut+0x10>
 801e0fa:	e000      	b.n	801e0fe <median_cut+0x12a>
      break;
 801e0fc:	bf00      	nop
  }
  return numboxes;
 801e0fe:	687b      	ldr	r3, [r7, #4]
}
 801e100:	4618      	mov	r0, r3
 801e102:	3728      	adds	r7, #40	; 0x28
 801e104:	46bd      	mov	sp, r7
 801e106:	bdb0      	pop	{r4, r5, r7, pc}

0801e108 <compute_color>:


LOCAL(void)
compute_color (j_decompress_ptr cinfo, boxptr boxp, int icolor)
/* Compute representative color for a box, put it in colormap[icolor] */
{
 801e108:	b480      	push	{r7}
 801e10a:	b097      	sub	sp, #92	; 0x5c
 801e10c:	af00      	add	r7, sp, #0
 801e10e:	60f8      	str	r0, [r7, #12]
 801e110:	60b9      	str	r1, [r7, #8]
 801e112:	607a      	str	r2, [r7, #4]
  /* Current algorithm: mean weighted by pixels (not colors) */
  /* Note it is important to get the rounding correct! */
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801e114:	68fb      	ldr	r3, [r7, #12]
 801e116:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801e11a:	637b      	str	r3, [r7, #52]	; 0x34
  hist3d histogram = cquantize->histogram;
 801e11c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801e11e:	699b      	ldr	r3, [r3, #24]
 801e120:	633b      	str	r3, [r7, #48]	; 0x30
  histptr histp;
  int c0,c1,c2;
  int c0min,c0max,c1min,c1max,c2min,c2max;
  long count;
  long total = 0;
 801e122:	2300      	movs	r3, #0
 801e124:	647b      	str	r3, [r7, #68]	; 0x44
  long c0total = 0;
 801e126:	2300      	movs	r3, #0
 801e128:	643b      	str	r3, [r7, #64]	; 0x40
  long c1total = 0;
 801e12a:	2300      	movs	r3, #0
 801e12c:	63fb      	str	r3, [r7, #60]	; 0x3c
  long c2total = 0;
 801e12e:	2300      	movs	r3, #0
 801e130:	63bb      	str	r3, [r7, #56]	; 0x38
  
  c0min = boxp->c0min;  c0max = boxp->c0max;
 801e132:	68bb      	ldr	r3, [r7, #8]
 801e134:	681b      	ldr	r3, [r3, #0]
 801e136:	62fb      	str	r3, [r7, #44]	; 0x2c
 801e138:	68bb      	ldr	r3, [r7, #8]
 801e13a:	685b      	ldr	r3, [r3, #4]
 801e13c:	62bb      	str	r3, [r7, #40]	; 0x28
  c1min = boxp->c1min;  c1max = boxp->c1max;
 801e13e:	68bb      	ldr	r3, [r7, #8]
 801e140:	689b      	ldr	r3, [r3, #8]
 801e142:	627b      	str	r3, [r7, #36]	; 0x24
 801e144:	68bb      	ldr	r3, [r7, #8]
 801e146:	68db      	ldr	r3, [r3, #12]
 801e148:	623b      	str	r3, [r7, #32]
  c2min = boxp->c2min;  c2max = boxp->c2max;
 801e14a:	68bb      	ldr	r3, [r7, #8]
 801e14c:	691b      	ldr	r3, [r3, #16]
 801e14e:	61fb      	str	r3, [r7, #28]
 801e150:	68bb      	ldr	r3, [r7, #8]
 801e152:	695b      	ldr	r3, [r3, #20]
 801e154:	61bb      	str	r3, [r7, #24]
  
  for (c0 = c0min; c0 <= c0max; c0++)
 801e156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801e158:	653b      	str	r3, [r7, #80]	; 0x50
 801e15a:	e049      	b.n	801e1f0 <compute_color+0xe8>
    for (c1 = c1min; c1 <= c1max; c1++) {
 801e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801e15e:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e160:	e03f      	b.n	801e1e2 <compute_color+0xda>
      histp = & histogram[c0][c1][c2min];
 801e162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e164:	009b      	lsls	r3, r3, #2
 801e166:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801e168:	4413      	add	r3, r2
 801e16a:	681a      	ldr	r2, [r3, #0]
 801e16c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e16e:	019b      	lsls	r3, r3, #6
 801e170:	441a      	add	r2, r3
 801e172:	69fb      	ldr	r3, [r7, #28]
 801e174:	005b      	lsls	r3, r3, #1
 801e176:	4413      	add	r3, r2
 801e178:	657b      	str	r3, [r7, #84]	; 0x54
      for (c2 = c2min; c2 <= c2max; c2++) {
 801e17a:	69fb      	ldr	r3, [r7, #28]
 801e17c:	64bb      	str	r3, [r7, #72]	; 0x48
 801e17e:	e029      	b.n	801e1d4 <compute_color+0xcc>
	if ((count = *histp++) != 0) {
 801e180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801e182:	1c9a      	adds	r2, r3, #2
 801e184:	657a      	str	r2, [r7, #84]	; 0x54
 801e186:	881b      	ldrh	r3, [r3, #0]
 801e188:	617b      	str	r3, [r7, #20]
 801e18a:	697b      	ldr	r3, [r7, #20]
 801e18c:	2b00      	cmp	r3, #0
 801e18e:	d01e      	beq.n	801e1ce <compute_color+0xc6>
	  total += count;
 801e190:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801e192:	697b      	ldr	r3, [r7, #20]
 801e194:	4413      	add	r3, r2
 801e196:	647b      	str	r3, [r7, #68]	; 0x44
	  c0total += ((c0 << C0_SHIFT) + ((1<<C0_SHIFT)>>1)) * count;
 801e198:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e19a:	00db      	lsls	r3, r3, #3
 801e19c:	3304      	adds	r3, #4
 801e19e:	697a      	ldr	r2, [r7, #20]
 801e1a0:	fb02 f303 	mul.w	r3, r2, r3
 801e1a4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 801e1a6:	4413      	add	r3, r2
 801e1a8:	643b      	str	r3, [r7, #64]	; 0x40
	  c1total += ((c1 << C1_SHIFT) + ((1<<C1_SHIFT)>>1)) * count;
 801e1aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e1ac:	009b      	lsls	r3, r3, #2
 801e1ae:	3302      	adds	r3, #2
 801e1b0:	697a      	ldr	r2, [r7, #20]
 801e1b2:	fb02 f303 	mul.w	r3, r2, r3
 801e1b6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801e1b8:	4413      	add	r3, r2
 801e1ba:	63fb      	str	r3, [r7, #60]	; 0x3c
	  c2total += ((c2 << C2_SHIFT) + ((1<<C2_SHIFT)>>1)) * count;
 801e1bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1be:	00db      	lsls	r3, r3, #3
 801e1c0:	3304      	adds	r3, #4
 801e1c2:	697a      	ldr	r2, [r7, #20]
 801e1c4:	fb02 f303 	mul.w	r3, r2, r3
 801e1c8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801e1ca:	4413      	add	r3, r2
 801e1cc:	63bb      	str	r3, [r7, #56]	; 0x38
      for (c2 = c2min; c2 <= c2max; c2++) {
 801e1ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801e1d0:	3301      	adds	r3, #1
 801e1d2:	64bb      	str	r3, [r7, #72]	; 0x48
 801e1d4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801e1d6:	69bb      	ldr	r3, [r7, #24]
 801e1d8:	429a      	cmp	r2, r3
 801e1da:	ddd1      	ble.n	801e180 <compute_color+0x78>
    for (c1 = c1min; c1 <= c1max; c1++) {
 801e1dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801e1de:	3301      	adds	r3, #1
 801e1e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 801e1e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801e1e4:	6a3b      	ldr	r3, [r7, #32]
 801e1e6:	429a      	cmp	r2, r3
 801e1e8:	ddbb      	ble.n	801e162 <compute_color+0x5a>
  for (c0 = c0min; c0 <= c0max; c0++)
 801e1ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801e1ec:	3301      	adds	r3, #1
 801e1ee:	653b      	str	r3, [r7, #80]	; 0x50
 801e1f0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801e1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801e1f4:	429a      	cmp	r2, r3
 801e1f6:	ddb1      	ble.n	801e15c <compute_color+0x54>
	}
      }
    }
  
  cinfo->colormap[0][icolor] = (JSAMPLE) ((c0total + (total>>1)) / total);
 801e1f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e1fa:	105a      	asrs	r2, r3, #1
 801e1fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801e1fe:	441a      	add	r2, r3
 801e200:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e202:	fb92 f1f3 	sdiv	r1, r2, r3
 801e206:	68fb      	ldr	r3, [r7, #12]
 801e208:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e20c:	681a      	ldr	r2, [r3, #0]
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	4413      	add	r3, r2
 801e212:	b2ca      	uxtb	r2, r1
 801e214:	701a      	strb	r2, [r3, #0]
  cinfo->colormap[1][icolor] = (JSAMPLE) ((c1total + (total>>1)) / total);
 801e216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e218:	105a      	asrs	r2, r3, #1
 801e21a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801e21c:	441a      	add	r2, r3
 801e21e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e220:	fb92 f1f3 	sdiv	r1, r2, r3
 801e224:	68fb      	ldr	r3, [r7, #12]
 801e226:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e22a:	3304      	adds	r3, #4
 801e22c:	681a      	ldr	r2, [r3, #0]
 801e22e:	687b      	ldr	r3, [r7, #4]
 801e230:	4413      	add	r3, r2
 801e232:	b2ca      	uxtb	r2, r1
 801e234:	701a      	strb	r2, [r3, #0]
  cinfo->colormap[2][icolor] = (JSAMPLE) ((c2total + (total>>1)) / total);
 801e236:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e238:	105a      	asrs	r2, r3, #1
 801e23a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801e23c:	441a      	add	r2, r3
 801e23e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801e240:	fb92 f1f3 	sdiv	r1, r2, r3
 801e244:	68fb      	ldr	r3, [r7, #12]
 801e246:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e24a:	3308      	adds	r3, #8
 801e24c:	681a      	ldr	r2, [r3, #0]
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	4413      	add	r3, r2
 801e252:	b2ca      	uxtb	r2, r1
 801e254:	701a      	strb	r2, [r3, #0]
}
 801e256:	bf00      	nop
 801e258:	375c      	adds	r7, #92	; 0x5c
 801e25a:	46bd      	mov	sp, r7
 801e25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e260:	4770      	bx	lr

0801e262 <select_colors>:


LOCAL(void)
select_colors (j_decompress_ptr cinfo, int desired_colors)
/* Master routine for color selection */
{
 801e262:	b580      	push	{r7, lr}
 801e264:	b086      	sub	sp, #24
 801e266:	af00      	add	r7, sp, #0
 801e268:	6078      	str	r0, [r7, #4]
 801e26a:	6039      	str	r1, [r7, #0]
  boxptr boxlist;
  int numboxes;
  int i;

  /* Allocate workspace for box list */
  boxlist = (boxptr) (*cinfo->mem->alloc_small)
 801e26c:	687b      	ldr	r3, [r7, #4]
 801e26e:	685b      	ldr	r3, [r3, #4]
 801e270:	681b      	ldr	r3, [r3, #0]
 801e272:	683a      	ldr	r2, [r7, #0]
 801e274:	0152      	lsls	r2, r2, #5
 801e276:	2101      	movs	r1, #1
 801e278:	6878      	ldr	r0, [r7, #4]
 801e27a:	4798      	blx	r3
 801e27c:	6138      	str	r0, [r7, #16]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, desired_colors * SIZEOF(box));
  /* Initialize one box containing whole space */
  numboxes = 1;
 801e27e:	2301      	movs	r3, #1
 801e280:	60fb      	str	r3, [r7, #12]
  boxlist[0].c0min = 0;
 801e282:	693b      	ldr	r3, [r7, #16]
 801e284:	2200      	movs	r2, #0
 801e286:	601a      	str	r2, [r3, #0]
  boxlist[0].c0max = MAXJSAMPLE >> C0_SHIFT;
 801e288:	693b      	ldr	r3, [r7, #16]
 801e28a:	221f      	movs	r2, #31
 801e28c:	605a      	str	r2, [r3, #4]
  boxlist[0].c1min = 0;
 801e28e:	693b      	ldr	r3, [r7, #16]
 801e290:	2200      	movs	r2, #0
 801e292:	609a      	str	r2, [r3, #8]
  boxlist[0].c1max = MAXJSAMPLE >> C1_SHIFT;
 801e294:	693b      	ldr	r3, [r7, #16]
 801e296:	223f      	movs	r2, #63	; 0x3f
 801e298:	60da      	str	r2, [r3, #12]
  boxlist[0].c2min = 0;
 801e29a:	693b      	ldr	r3, [r7, #16]
 801e29c:	2200      	movs	r2, #0
 801e29e:	611a      	str	r2, [r3, #16]
  boxlist[0].c2max = MAXJSAMPLE >> C2_SHIFT;
 801e2a0:	693b      	ldr	r3, [r7, #16]
 801e2a2:	221f      	movs	r2, #31
 801e2a4:	615a      	str	r2, [r3, #20]
  /* Shrink it to actually-used volume and set its statistics */
  update_box(cinfo, & boxlist[0]);
 801e2a6:	6939      	ldr	r1, [r7, #16]
 801e2a8:	6878      	ldr	r0, [r7, #4]
 801e2aa:	f7ff fcb2 	bl	801dc12 <update_box>
  /* Perform median-cut to produce final box list */
  numboxes = median_cut(cinfo, boxlist, numboxes, desired_colors);
 801e2ae:	683b      	ldr	r3, [r7, #0]
 801e2b0:	68fa      	ldr	r2, [r7, #12]
 801e2b2:	6939      	ldr	r1, [r7, #16]
 801e2b4:	6878      	ldr	r0, [r7, #4]
 801e2b6:	f7ff fe8d 	bl	801dfd4 <median_cut>
 801e2ba:	60f8      	str	r0, [r7, #12]
  /* Compute the representative color for each box, fill colormap */
  for (i = 0; i < numboxes; i++)
 801e2bc:	2300      	movs	r3, #0
 801e2be:	617b      	str	r3, [r7, #20]
 801e2c0:	e00b      	b.n	801e2da <select_colors+0x78>
    compute_color(cinfo, & boxlist[i], i);
 801e2c2:	697b      	ldr	r3, [r7, #20]
 801e2c4:	015b      	lsls	r3, r3, #5
 801e2c6:	693a      	ldr	r2, [r7, #16]
 801e2c8:	4413      	add	r3, r2
 801e2ca:	697a      	ldr	r2, [r7, #20]
 801e2cc:	4619      	mov	r1, r3
 801e2ce:	6878      	ldr	r0, [r7, #4]
 801e2d0:	f7ff ff1a 	bl	801e108 <compute_color>
  for (i = 0; i < numboxes; i++)
 801e2d4:	697b      	ldr	r3, [r7, #20]
 801e2d6:	3301      	adds	r3, #1
 801e2d8:	617b      	str	r3, [r7, #20]
 801e2da:	697a      	ldr	r2, [r7, #20]
 801e2dc:	68fb      	ldr	r3, [r7, #12]
 801e2de:	429a      	cmp	r2, r3
 801e2e0:	dbef      	blt.n	801e2c2 <select_colors+0x60>
  cinfo->actual_number_of_colors = numboxes;
 801e2e2:	687b      	ldr	r3, [r7, #4]
 801e2e4:	68fa      	ldr	r2, [r7, #12]
 801e2e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  TRACEMS1(cinfo, 1, JTRC_QUANT_SELECTED, numboxes);
 801e2ea:	687b      	ldr	r3, [r7, #4]
 801e2ec:	681b      	ldr	r3, [r3, #0]
 801e2ee:	2262      	movs	r2, #98	; 0x62
 801e2f0:	615a      	str	r2, [r3, #20]
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	681b      	ldr	r3, [r3, #0]
 801e2f6:	68fa      	ldr	r2, [r7, #12]
 801e2f8:	619a      	str	r2, [r3, #24]
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	681b      	ldr	r3, [r3, #0]
 801e2fe:	685b      	ldr	r3, [r3, #4]
 801e300:	2101      	movs	r1, #1
 801e302:	6878      	ldr	r0, [r7, #4]
 801e304:	4798      	blx	r3
}
 801e306:	bf00      	nop
 801e308:	3718      	adds	r7, #24
 801e30a:	46bd      	mov	sp, r7
 801e30c:	bd80      	pop	{r7, pc}

0801e30e <find_nearby_colors>:
 * candidate colormap entries is returned, and their colormap indexes are
 * placed in colorlist[].
 * This routine uses Heckbert's "locally sorted search" criterion to select
 * the colors that need further consideration.
 */
{
 801e30e:	b490      	push	{r4, r7}
 801e310:	f5ad 6d89 	sub.w	sp, sp, #1096	; 0x448
 801e314:	af00      	add	r7, sp, #0
 801e316:	f107 040c 	add.w	r4, r7, #12
 801e31a:	6020      	str	r0, [r4, #0]
 801e31c:	f107 0008 	add.w	r0, r7, #8
 801e320:	6001      	str	r1, [r0, #0]
 801e322:	1d39      	adds	r1, r7, #4
 801e324:	600a      	str	r2, [r1, #0]
 801e326:	463a      	mov	r2, r7
 801e328:	6013      	str	r3, [r2, #0]
  int numcolors = cinfo->actual_number_of_colors;
 801e32a:	f107 030c 	add.w	r3, r7, #12
 801e32e:	681b      	ldr	r3, [r3, #0]
 801e330:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801e334:	f8c7 3430 	str.w	r3, [r7, #1072]	; 0x430
   * Actually we compute the coordinates of the center of the upper-corner
   * histogram cell, which are the upper bounds of the volume we care about.
   * Note that since ">>" rounds down, the "center" values may be closer to
   * min than to max; hence comparisons to them must be "<=", not "<".
   */
  maxc0 = minc0 + ((1 << BOX_C0_SHIFT) - (1 << C0_SHIFT));
 801e338:	f107 0308 	add.w	r3, r7, #8
 801e33c:	681b      	ldr	r3, [r3, #0]
 801e33e:	3318      	adds	r3, #24
 801e340:	f8c7 342c 	str.w	r3, [r7, #1068]	; 0x42c
  centerc0 = (minc0 + maxc0) >> 1;
 801e344:	f107 0308 	add.w	r3, r7, #8
 801e348:	681a      	ldr	r2, [r3, #0]
 801e34a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801e34e:	4413      	add	r3, r2
 801e350:	105b      	asrs	r3, r3, #1
 801e352:	f8c7 3428 	str.w	r3, [r7, #1064]	; 0x428
  maxc1 = minc1 + ((1 << BOX_C1_SHIFT) - (1 << C1_SHIFT));
 801e356:	1d3b      	adds	r3, r7, #4
 801e358:	681b      	ldr	r3, [r3, #0]
 801e35a:	331c      	adds	r3, #28
 801e35c:	f8c7 3424 	str.w	r3, [r7, #1060]	; 0x424
  centerc1 = (minc1 + maxc1) >> 1;
 801e360:	1d3b      	adds	r3, r7, #4
 801e362:	681a      	ldr	r2, [r3, #0]
 801e364:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801e368:	4413      	add	r3, r2
 801e36a:	105b      	asrs	r3, r3, #1
 801e36c:	f8c7 3420 	str.w	r3, [r7, #1056]	; 0x420
  maxc2 = minc2 + ((1 << BOX_C2_SHIFT) - (1 << C2_SHIFT));
 801e370:	463b      	mov	r3, r7
 801e372:	681b      	ldr	r3, [r3, #0]
 801e374:	3318      	adds	r3, #24
 801e376:	f8c7 341c 	str.w	r3, [r7, #1052]	; 0x41c
  centerc2 = (minc2 + maxc2) >> 1;
 801e37a:	463b      	mov	r3, r7
 801e37c:	681a      	ldr	r2, [r3, #0]
 801e37e:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801e382:	4413      	add	r3, r2
 801e384:	105b      	asrs	r3, r3, #1
 801e386:	f8c7 3418 	str.w	r3, [r7, #1048]	; 0x418
   *  2. its maximum squared-distance to any point in the update box.
   * Both of these can be found by considering only the corners of the box.
   * We save the minimum distance for each color in mindist[];
   * only the smallest maximum distance is of interest.
   */
  minmaxdist = 0x7FFFFFFFL;
 801e38a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 801e38e:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c

  for (i = 0; i < numcolors; i++) {
 801e392:	2300      	movs	r3, #0
 801e394:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 801e398:	e1a8      	b.n	801e6ec <find_nearby_colors+0x3de>
    /* We compute the squared-c0-distance term, then add in the other two. */
    x = GETJSAMPLE(cinfo->colormap[0][i]);
 801e39a:	f107 030c 	add.w	r3, r7, #12
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e3a4:	681a      	ldr	r2, [r3, #0]
 801e3a6:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801e3aa:	4413      	add	r3, r2
 801e3ac:	781b      	ldrb	r3, [r3, #0]
 801e3ae:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    if (x < minc0) {
 801e3b2:	f107 0308 	add.w	r3, r7, #8
 801e3b6:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e3ba:	681b      	ldr	r3, [r3, #0]
 801e3bc:	429a      	cmp	r2, r3
 801e3be:	da1d      	bge.n	801e3fc <find_nearby_colors+0xee>
      tdist = (x - minc0) * C0_SCALE;
 801e3c0:	f107 0308 	add.w	r3, r7, #8
 801e3c4:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e3c8:	681b      	ldr	r3, [r3, #0]
 801e3ca:	1ad3      	subs	r3, r2, r3
 801e3cc:	005b      	lsls	r3, r3, #1
 801e3ce:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist = tdist*tdist;
 801e3d2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e3d6:	fb03 f303 	mul.w	r3, r3, r3
 801e3da:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - maxc0) * C0_SCALE;
 801e3de:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e3e2:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801e3e6:	1ad3      	subs	r3, r2, r3
 801e3e8:	005b      	lsls	r3, r3, #1
 801e3ea:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist = tdist*tdist;
 801e3ee:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e3f2:	fb03 f303 	mul.w	r3, r3, r3
 801e3f6:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e3fa:	e04a      	b.n	801e492 <find_nearby_colors+0x184>
    } else if (x > maxc0) {
 801e3fc:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e400:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801e404:	429a      	cmp	r2, r3
 801e406:	dd1d      	ble.n	801e444 <find_nearby_colors+0x136>
      tdist = (x - maxc0) * C0_SCALE;
 801e408:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e40c:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801e410:	1ad3      	subs	r3, r2, r3
 801e412:	005b      	lsls	r3, r3, #1
 801e414:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist = tdist*tdist;
 801e418:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e41c:	fb03 f303 	mul.w	r3, r3, r3
 801e420:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - minc0) * C0_SCALE;
 801e424:	f107 0308 	add.w	r3, r7, #8
 801e428:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e42c:	681b      	ldr	r3, [r3, #0]
 801e42e:	1ad3      	subs	r3, r2, r3
 801e430:	005b      	lsls	r3, r3, #1
 801e432:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist = tdist*tdist;
 801e436:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e43a:	fb03 f303 	mul.w	r3, r3, r3
 801e43e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e442:	e026      	b.n	801e492 <find_nearby_colors+0x184>
    } else {
      /* within cell range so no contribution to min_dist */
      min_dist = 0;
 801e444:	2300      	movs	r3, #0
 801e446:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      if (x <= centerc0) {
 801e44a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e44e:	f8d7 3428 	ldr.w	r3, [r7, #1064]	; 0x428
 801e452:	429a      	cmp	r2, r3
 801e454:	dc0e      	bgt.n	801e474 <find_nearby_colors+0x166>
	tdist = (x - maxc0) * C0_SCALE;
 801e456:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e45a:	f8d7 342c 	ldr.w	r3, [r7, #1068]	; 0x42c
 801e45e:	1ad3      	subs	r3, r2, r3
 801e460:	005b      	lsls	r3, r3, #1
 801e462:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist = tdist*tdist;
 801e466:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e46a:	fb03 f303 	mul.w	r3, r3, r3
 801e46e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e472:	e00e      	b.n	801e492 <find_nearby_colors+0x184>
      } else {
	tdist = (x - minc0) * C0_SCALE;
 801e474:	f107 0308 	add.w	r3, r7, #8
 801e478:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e47c:	681b      	ldr	r3, [r3, #0]
 801e47e:	1ad3      	subs	r3, r2, r3
 801e480:	005b      	lsls	r3, r3, #1
 801e482:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist = tdist*tdist;
 801e486:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e48a:	fb03 f303 	mul.w	r3, r3, r3
 801e48e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
      }
    }

    x = GETJSAMPLE(cinfo->colormap[1][i]);
 801e492:	f107 030c 	add.w	r3, r7, #12
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e49c:	3304      	adds	r3, #4
 801e49e:	681a      	ldr	r2, [r3, #0]
 801e4a0:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801e4a4:	4413      	add	r3, r2
 801e4a6:	781b      	ldrb	r3, [r3, #0]
 801e4a8:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    if (x < minc1) {
 801e4ac:	1d3b      	adds	r3, r7, #4
 801e4ae:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	429a      	cmp	r2, r3
 801e4b6:	da26      	bge.n	801e506 <find_nearby_colors+0x1f8>
      tdist = (x - minc1) * C1_SCALE;
 801e4b8:	1d3b      	adds	r3, r7, #4
 801e4ba:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e4be:	681b      	ldr	r3, [r3, #0]
 801e4c0:	1ad2      	subs	r2, r2, r3
 801e4c2:	4613      	mov	r3, r2
 801e4c4:	005b      	lsls	r3, r3, #1
 801e4c6:	4413      	add	r3, r2
 801e4c8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist += tdist*tdist;
 801e4cc:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e4d0:	fb03 f303 	mul.w	r3, r3, r3
 801e4d4:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 801e4d8:	4413      	add	r3, r2
 801e4da:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - maxc1) * C1_SCALE;
 801e4de:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e4e2:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801e4e6:	1ad2      	subs	r2, r2, r3
 801e4e8:	4613      	mov	r3, r2
 801e4ea:	005b      	lsls	r3, r3, #1
 801e4ec:	4413      	add	r3, r2
 801e4ee:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist += tdist*tdist;
 801e4f2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e4f6:	fb03 f303 	mul.w	r3, r3, r3
 801e4fa:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e4fe:	4413      	add	r3, r2
 801e500:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e504:	e059      	b.n	801e5ba <find_nearby_colors+0x2ac>
    } else if (x > maxc1) {
 801e506:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e50a:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801e50e:	429a      	cmp	r2, r3
 801e510:	dd26      	ble.n	801e560 <find_nearby_colors+0x252>
      tdist = (x - maxc1) * C1_SCALE;
 801e512:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e516:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801e51a:	1ad2      	subs	r2, r2, r3
 801e51c:	4613      	mov	r3, r2
 801e51e:	005b      	lsls	r3, r3, #1
 801e520:	4413      	add	r3, r2
 801e522:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist += tdist*tdist;
 801e526:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e52a:	fb03 f303 	mul.w	r3, r3, r3
 801e52e:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 801e532:	4413      	add	r3, r2
 801e534:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - minc1) * C1_SCALE;
 801e538:	1d3b      	adds	r3, r7, #4
 801e53a:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e53e:	681b      	ldr	r3, [r3, #0]
 801e540:	1ad2      	subs	r2, r2, r3
 801e542:	4613      	mov	r3, r2
 801e544:	005b      	lsls	r3, r3, #1
 801e546:	4413      	add	r3, r2
 801e548:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist += tdist*tdist;
 801e54c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e550:	fb03 f303 	mul.w	r3, r3, r3
 801e554:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e558:	4413      	add	r3, r2
 801e55a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e55e:	e02c      	b.n	801e5ba <find_nearby_colors+0x2ac>
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc1) {
 801e560:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e564:	f8d7 3420 	ldr.w	r3, [r7, #1056]	; 0x420
 801e568:	429a      	cmp	r2, r3
 801e56a:	dc13      	bgt.n	801e594 <find_nearby_colors+0x286>
	tdist = (x - maxc1) * C1_SCALE;
 801e56c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e570:	f8d7 3424 	ldr.w	r3, [r7, #1060]	; 0x424
 801e574:	1ad2      	subs	r2, r2, r3
 801e576:	4613      	mov	r3, r2
 801e578:	005b      	lsls	r3, r3, #1
 801e57a:	4413      	add	r3, r2
 801e57c:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist += tdist*tdist;
 801e580:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e584:	fb03 f303 	mul.w	r3, r3, r3
 801e588:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e58c:	4413      	add	r3, r2
 801e58e:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e592:	e012      	b.n	801e5ba <find_nearby_colors+0x2ac>
      } else {
	tdist = (x - minc1) * C1_SCALE;
 801e594:	1d3b      	adds	r3, r7, #4
 801e596:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e59a:	681b      	ldr	r3, [r3, #0]
 801e59c:	1ad2      	subs	r2, r2, r3
 801e59e:	4613      	mov	r3, r2
 801e5a0:	005b      	lsls	r3, r3, #1
 801e5a2:	4413      	add	r3, r2
 801e5a4:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist += tdist*tdist;
 801e5a8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e5ac:	fb03 f303 	mul.w	r3, r3, r3
 801e5b0:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e5b4:	4413      	add	r3, r2
 801e5b6:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
      }
    }

    x = GETJSAMPLE(cinfo->colormap[2][i]);
 801e5ba:	f107 030c 	add.w	r3, r7, #12
 801e5be:	681b      	ldr	r3, [r3, #0]
 801e5c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e5c4:	3308      	adds	r3, #8
 801e5c6:	681a      	ldr	r2, [r3, #0]
 801e5c8:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801e5cc:	4413      	add	r3, r2
 801e5ce:	781b      	ldrb	r3, [r3, #0]
 801e5d0:	f8c7 3414 	str.w	r3, [r7, #1044]	; 0x414
    if (x < minc2) {
 801e5d4:	463b      	mov	r3, r7
 801e5d6:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	429a      	cmp	r2, r3
 801e5de:	da20      	bge.n	801e622 <find_nearby_colors+0x314>
      tdist = (x - minc2) * C2_SCALE;
 801e5e0:	463b      	mov	r3, r7
 801e5e2:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e5e6:	681b      	ldr	r3, [r3, #0]
 801e5e8:	1ad3      	subs	r3, r2, r3
 801e5ea:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist += tdist*tdist;
 801e5ee:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e5f2:	fb03 f303 	mul.w	r3, r3, r3
 801e5f6:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 801e5fa:	4413      	add	r3, r2
 801e5fc:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - maxc2) * C2_SCALE;
 801e600:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e604:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801e608:	1ad3      	subs	r3, r2, r3
 801e60a:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist += tdist*tdist;
 801e60e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e612:	fb03 f303 	mul.w	r3, r3, r3
 801e616:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e61a:	4413      	add	r3, r2
 801e61c:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e620:	e04d      	b.n	801e6be <find_nearby_colors+0x3b0>
    } else if (x > maxc2) {
 801e622:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e626:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801e62a:	429a      	cmp	r2, r3
 801e62c:	dd20      	ble.n	801e670 <find_nearby_colors+0x362>
      tdist = (x - maxc2) * C2_SCALE;
 801e62e:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e632:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801e636:	1ad3      	subs	r3, r2, r3
 801e638:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      min_dist += tdist*tdist;
 801e63c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e640:	fb03 f303 	mul.w	r3, r3, r3
 801e644:	f8d7 2438 	ldr.w	r2, [r7, #1080]	; 0x438
 801e648:	4413      	add	r3, r2
 801e64a:	f8c7 3438 	str.w	r3, [r7, #1080]	; 0x438
      tdist = (x - minc2) * C2_SCALE;
 801e64e:	463b      	mov	r3, r7
 801e650:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e654:	681b      	ldr	r3, [r3, #0]
 801e656:	1ad3      	subs	r3, r2, r3
 801e658:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
      max_dist += tdist*tdist;
 801e65c:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e660:	fb03 f303 	mul.w	r3, r3, r3
 801e664:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e668:	4413      	add	r3, r2
 801e66a:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e66e:	e026      	b.n	801e6be <find_nearby_colors+0x3b0>
    } else {
      /* within cell range so no contribution to min_dist */
      if (x <= centerc2) {
 801e670:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e674:	f8d7 3418 	ldr.w	r3, [r7, #1048]	; 0x418
 801e678:	429a      	cmp	r2, r3
 801e67a:	dc10      	bgt.n	801e69e <find_nearby_colors+0x390>
	tdist = (x - maxc2) * C2_SCALE;
 801e67c:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e680:	f8d7 341c 	ldr.w	r3, [r7, #1052]	; 0x41c
 801e684:	1ad3      	subs	r3, r2, r3
 801e686:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist += tdist*tdist;
 801e68a:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e68e:	fb03 f303 	mul.w	r3, r3, r3
 801e692:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e696:	4413      	add	r3, r2
 801e698:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
 801e69c:	e00f      	b.n	801e6be <find_nearby_colors+0x3b0>
      } else {
	tdist = (x - minc2) * C2_SCALE;
 801e69e:	463b      	mov	r3, r7
 801e6a0:	f8d7 2414 	ldr.w	r2, [r7, #1044]	; 0x414
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	1ad3      	subs	r3, r2, r3
 801e6a8:	f8c7 3410 	str.w	r3, [r7, #1040]	; 0x410
	max_dist += tdist*tdist;
 801e6ac:	f8d7 3410 	ldr.w	r3, [r7, #1040]	; 0x410
 801e6b0:	fb03 f303 	mul.w	r3, r3, r3
 801e6b4:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e6b8:	4413      	add	r3, r2
 801e6ba:	f8c7 3434 	str.w	r3, [r7, #1076]	; 0x434
      }
    }

    mindist[i] = min_dist;	/* save away the results */
 801e6be:	f107 0310 	add.w	r3, r7, #16
 801e6c2:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 801e6c6:	f8d7 1438 	ldr.w	r1, [r7, #1080]	; 0x438
 801e6ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (max_dist < minmaxdist)
 801e6ce:	f8d7 2434 	ldr.w	r2, [r7, #1076]	; 0x434
 801e6d2:	f8d7 343c 	ldr.w	r3, [r7, #1084]	; 0x43c
 801e6d6:	429a      	cmp	r2, r3
 801e6d8:	da03      	bge.n	801e6e2 <find_nearby_colors+0x3d4>
      minmaxdist = max_dist;
 801e6da:	f8d7 3434 	ldr.w	r3, [r7, #1076]	; 0x434
 801e6de:	f8c7 343c 	str.w	r3, [r7, #1084]	; 0x43c
  for (i = 0; i < numcolors; i++) {
 801e6e2:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801e6e6:	3301      	adds	r3, #1
 801e6e8:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 801e6ec:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 801e6f0:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 801e6f4:	429a      	cmp	r2, r3
 801e6f6:	f6ff ae50 	blt.w	801e39a <find_nearby_colors+0x8c>

  /* Now we know that no cell in the update box is more than minmaxdist
   * away from some colormap entry.  Therefore, only colors that are
   * within minmaxdist of some part of the box need be considered.
   */
  ncolors = 0;
 801e6fa:	2300      	movs	r3, #0
 801e6fc:	f8c7 3440 	str.w	r3, [r7, #1088]	; 0x440
  for (i = 0; i < numcolors; i++) {
 801e700:	2300      	movs	r3, #0
 801e702:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 801e706:	e01b      	b.n	801e740 <find_nearby_colors+0x432>
    if (mindist[i] <= minmaxdist)
 801e708:	f107 0310 	add.w	r3, r7, #16
 801e70c:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 801e710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801e714:	f8d7 243c 	ldr.w	r2, [r7, #1084]	; 0x43c
 801e718:	429a      	cmp	r2, r3
 801e71a:	db0c      	blt.n	801e736 <find_nearby_colors+0x428>
      colorlist[ncolors++] = (JSAMPLE) i;
 801e71c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
 801e720:	1c5a      	adds	r2, r3, #1
 801e722:	f8c7 2440 	str.w	r2, [r7, #1088]	; 0x440
 801e726:	461a      	mov	r2, r3
 801e728:	f8d7 3450 	ldr.w	r3, [r7, #1104]	; 0x450
 801e72c:	4413      	add	r3, r2
 801e72e:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 801e732:	b2d2      	uxtb	r2, r2
 801e734:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < numcolors; i++) {
 801e736:	f8d7 3444 	ldr.w	r3, [r7, #1092]	; 0x444
 801e73a:	3301      	adds	r3, #1
 801e73c:	f8c7 3444 	str.w	r3, [r7, #1092]	; 0x444
 801e740:	f8d7 2444 	ldr.w	r2, [r7, #1092]	; 0x444
 801e744:	f8d7 3430 	ldr.w	r3, [r7, #1072]	; 0x430
 801e748:	429a      	cmp	r2, r3
 801e74a:	dbdd      	blt.n	801e708 <find_nearby_colors+0x3fa>
  }
  return ncolors;
 801e74c:	f8d7 3440 	ldr.w	r3, [r7, #1088]	; 0x440
}
 801e750:	4618      	mov	r0, r3
 801e752:	f507 6789 	add.w	r7, r7, #1096	; 0x448
 801e756:	46bd      	mov	sp, r7
 801e758:	bc90      	pop	{r4, r7}
 801e75a:	4770      	bx	lr

0801e75c <find_best_colors>:
 * given the list of candidate colors prepared by find_nearby_colors.
 * Return the indexes of the closest entries in the bestcolor[] array.
 * This routine uses Thomas' incremental distance calculation method to
 * find the distance from a colormap entry to successive cells in the box.
 */
{
 801e75c:	b4f0      	push	{r4, r5, r6, r7}
 801e75e:	f5ad 7d12 	sub.w	sp, sp, #584	; 0x248
 801e762:	af00      	add	r7, sp, #0
 801e764:	f107 040c 	add.w	r4, r7, #12
 801e768:	6020      	str	r0, [r4, #0]
 801e76a:	f107 0008 	add.w	r0, r7, #8
 801e76e:	6001      	str	r1, [r0, #0]
 801e770:	1d39      	adds	r1, r7, #4
 801e772:	600a      	str	r2, [r1, #0]
 801e774:	463a      	mov	r2, r7
 801e776:	6013      	str	r3, [r2, #0]
  INT32 inc0, inc1, inc2;	/* initial values for increments */
  /* This array holds the distance to the nearest-so-far color for each cell */
  INT32 bestdist[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Initialize best-distance for each cell of the update box */
  bptr = bestdist;
 801e778:	f107 0414 	add.w	r4, r7, #20
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 801e77c:	237f      	movs	r3, #127	; 0x7f
 801e77e:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801e782:	e009      	b.n	801e798 <find_best_colors+0x3c>
    *bptr++ = 0x7FFFFFFFL;
 801e784:	4623      	mov	r3, r4
 801e786:	1d1c      	adds	r4, r3, #4
 801e788:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
 801e78c:	601a      	str	r2, [r3, #0]
  for (i = BOX_C0_ELEMS*BOX_C1_ELEMS*BOX_C2_ELEMS-1; i >= 0; i--)
 801e78e:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801e792:	3b01      	subs	r3, #1
 801e794:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801e798:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801e79c:	2b00      	cmp	r3, #0
 801e79e:	daf1      	bge.n	801e784 <find_best_colors+0x28>
  /* Nominal steps between cell centers ("x" in Thomas article) */
#define STEP_C0  ((1 << C0_SHIFT) * C0_SCALE)
#define STEP_C1  ((1 << C1_SHIFT) * C1_SCALE)
#define STEP_C2  ((1 << C2_SHIFT) * C2_SCALE)
  
  for (i = 0; i < numcolors; i++) {
 801e7a0:	2300      	movs	r3, #0
 801e7a2:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801e7a6:	e0d9      	b.n	801e95c <find_best_colors+0x200>
    icolor = GETJSAMPLE(colorlist[i]);
 801e7a8:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801e7ac:	f8d7 225c 	ldr.w	r2, [r7, #604]	; 0x25c
 801e7b0:	4413      	add	r3, r2
 801e7b2:	781b      	ldrb	r3, [r3, #0]
 801e7b4:	f8c7 3220 	str.w	r3, [r7, #544]	; 0x220
    /* Compute (square of) distance from minc0/c1/c2 to this color */
    inc0 = (minc0 - GETJSAMPLE(cinfo->colormap[0][icolor])) * C0_SCALE;
 801e7b8:	f107 030c 	add.w	r3, r7, #12
 801e7bc:	681b      	ldr	r3, [r3, #0]
 801e7be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e7c2:	681a      	ldr	r2, [r3, #0]
 801e7c4:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801e7c8:	4413      	add	r3, r2
 801e7ca:	781b      	ldrb	r3, [r3, #0]
 801e7cc:	461a      	mov	r2, r3
 801e7ce:	f107 0308 	add.w	r3, r7, #8
 801e7d2:	681b      	ldr	r3, [r3, #0]
 801e7d4:	1a9b      	subs	r3, r3, r2
 801e7d6:	005b      	lsls	r3, r3, #1
 801e7d8:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    dist0 = inc0*inc0;
 801e7dc:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801e7e0:	fb03 f303 	mul.w	r3, r3, r3
 801e7e4:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    inc1 = (minc1 - GETJSAMPLE(cinfo->colormap[1][icolor])) * C1_SCALE;
 801e7e8:	f107 030c 	add.w	r3, r7, #12
 801e7ec:	681b      	ldr	r3, [r3, #0]
 801e7ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e7f2:	3304      	adds	r3, #4
 801e7f4:	681a      	ldr	r2, [r3, #0]
 801e7f6:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801e7fa:	4413      	add	r3, r2
 801e7fc:	781b      	ldrb	r3, [r3, #0]
 801e7fe:	461a      	mov	r2, r3
 801e800:	1d3b      	adds	r3, r7, #4
 801e802:	681b      	ldr	r3, [r3, #0]
 801e804:	1a9a      	subs	r2, r3, r2
 801e806:	4613      	mov	r3, r2
 801e808:	005b      	lsls	r3, r3, #1
 801e80a:	4413      	add	r3, r2
 801e80c:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    dist0 += inc1*inc1;
 801e810:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801e814:	fb03 f303 	mul.w	r3, r3, r3
 801e818:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801e81c:	4413      	add	r3, r2
 801e81e:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    inc2 = (minc2 - GETJSAMPLE(cinfo->colormap[2][icolor])) * C2_SCALE;
 801e822:	f107 030c 	add.w	r3, r7, #12
 801e826:	681b      	ldr	r3, [r3, #0]
 801e828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801e82c:	3308      	adds	r3, #8
 801e82e:	681a      	ldr	r2, [r3, #0]
 801e830:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801e834:	4413      	add	r3, r2
 801e836:	781b      	ldrb	r3, [r3, #0]
 801e838:	461a      	mov	r2, r3
 801e83a:	463b      	mov	r3, r7
 801e83c:	681b      	ldr	r3, [r3, #0]
 801e83e:	1a9b      	subs	r3, r3, r2
 801e840:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    dist0 += inc2*inc2;
 801e844:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801e848:	fb03 f303 	mul.w	r3, r3, r3
 801e84c:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801e850:	4413      	add	r3, r2
 801e852:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
    /* Form the initial difference increments */
    inc0 = inc0 * (2 * STEP_C0) + STEP_C0 * STEP_C0;
 801e856:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801e85a:	3308      	adds	r3, #8
 801e85c:	015b      	lsls	r3, r3, #5
 801e85e:	f8c7 321c 	str.w	r3, [r7, #540]	; 0x21c
    inc1 = inc1 * (2 * STEP_C1) + STEP_C1 * STEP_C1;
 801e862:	f8d7 2218 	ldr.w	r2, [r7, #536]	; 0x218
 801e866:	4613      	mov	r3, r2
 801e868:	005b      	lsls	r3, r3, #1
 801e86a:	4413      	add	r3, r2
 801e86c:	00db      	lsls	r3, r3, #3
 801e86e:	3390      	adds	r3, #144	; 0x90
 801e870:	f8c7 3218 	str.w	r3, [r7, #536]	; 0x218
    inc2 = inc2 * (2 * STEP_C2) + STEP_C2 * STEP_C2;
 801e874:	f8d7 3214 	ldr.w	r3, [r7, #532]	; 0x214
 801e878:	3304      	adds	r3, #4
 801e87a:	011b      	lsls	r3, r3, #4
 801e87c:	f8c7 3214 	str.w	r3, [r7, #532]	; 0x214
    /* Now loop over all cells in box, updating distance per Thomas method */
    bptr = bestdist;
 801e880:	f107 0414 	add.w	r4, r7, #20
    cptr = bestcolor;
 801e884:	f8d7 3260 	ldr.w	r3, [r7, #608]	; 0x260
 801e888:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
    xx0 = inc0;
 801e88c:	f8d7 321c 	ldr.w	r3, [r7, #540]	; 0x21c
 801e890:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801e894:	2303      	movs	r3, #3
 801e896:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801e89a:	e056      	b.n	801e94a <find_best_colors+0x1ee>
      dist1 = dist0;
 801e89c:	f8d7 3230 	ldr.w	r3, [r7, #560]	; 0x230
 801e8a0:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
      xx1 = inc1;
 801e8a4:	f8d7 3218 	ldr.w	r3, [r7, #536]	; 0x218
 801e8a8:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 801e8ac:	2307      	movs	r3, #7
 801e8ae:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801e8b2:	e034      	b.n	801e91e <find_best_colors+0x1c2>
	dist2 = dist1;
 801e8b4:	f8d7 522c 	ldr.w	r5, [r7, #556]	; 0x22c
	xx2 = inc2;
 801e8b8:	f8d7 6214 	ldr.w	r6, [r7, #532]	; 0x214
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801e8bc:	2303      	movs	r3, #3
 801e8be:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 801e8c2:	e016      	b.n	801e8f2 <find_best_colors+0x196>
	  if (dist2 < *bptr) {
 801e8c4:	6823      	ldr	r3, [r4, #0]
 801e8c6:	429d      	cmp	r5, r3
 801e8c8:	da06      	bge.n	801e8d8 <find_best_colors+0x17c>
	    *bptr = dist2;
 801e8ca:	6025      	str	r5, [r4, #0]
	    *cptr = (JSAMPLE) icolor;
 801e8cc:	f8d7 3220 	ldr.w	r3, [r7, #544]	; 0x220
 801e8d0:	b2da      	uxtb	r2, r3
 801e8d2:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801e8d6:	701a      	strb	r2, [r3, #0]
	  }
	  dist2 += xx2;
 801e8d8:	4435      	add	r5, r6
	  xx2 += 2 * STEP_C2 * STEP_C2;
 801e8da:	3680      	adds	r6, #128	; 0x80
	  bptr++;
 801e8dc:	3404      	adds	r4, #4
	  cptr++;
 801e8de:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 801e8e2:	3301      	adds	r3, #1
 801e8e4:	f8c7 3234 	str.w	r3, [r7, #564]	; 0x234
	for (ic2 = BOX_C2_ELEMS-1; ic2 >= 0; ic2--) {
 801e8e8:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801e8ec:	3b01      	subs	r3, #1
 801e8ee:	f8c7 323c 	str.w	r3, [r7, #572]	; 0x23c
 801e8f2:	f8d7 323c 	ldr.w	r3, [r7, #572]	; 0x23c
 801e8f6:	2b00      	cmp	r3, #0
 801e8f8:	dae4      	bge.n	801e8c4 <find_best_colors+0x168>
	}
	dist1 += xx1;
 801e8fa:	f8d7 222c 	ldr.w	r2, [r7, #556]	; 0x22c
 801e8fe:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801e902:	4413      	add	r3, r2
 801e904:	f8c7 322c 	str.w	r3, [r7, #556]	; 0x22c
	xx1 += 2 * STEP_C1 * STEP_C1;
 801e908:	f8d7 3224 	ldr.w	r3, [r7, #548]	; 0x224
 801e90c:	f503 7390 	add.w	r3, r3, #288	; 0x120
 801e910:	f8c7 3224 	str.w	r3, [r7, #548]	; 0x224
      for (ic1 = BOX_C1_ELEMS-1; ic1 >= 0; ic1--) {
 801e914:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801e918:	3b01      	subs	r3, #1
 801e91a:	f8c7 3240 	str.w	r3, [r7, #576]	; 0x240
 801e91e:	f8d7 3240 	ldr.w	r3, [r7, #576]	; 0x240
 801e922:	2b00      	cmp	r3, #0
 801e924:	dac6      	bge.n	801e8b4 <find_best_colors+0x158>
      }
      dist0 += xx0;
 801e926:	f8d7 2230 	ldr.w	r2, [r7, #560]	; 0x230
 801e92a:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801e92e:	4413      	add	r3, r2
 801e930:	f8c7 3230 	str.w	r3, [r7, #560]	; 0x230
      xx0 += 2 * STEP_C0 * STEP_C0;
 801e934:	f8d7 3228 	ldr.w	r3, [r7, #552]	; 0x228
 801e938:	f503 7300 	add.w	r3, r3, #512	; 0x200
 801e93c:	f8c7 3228 	str.w	r3, [r7, #552]	; 0x228
    for (ic0 = BOX_C0_ELEMS-1; ic0 >= 0; ic0--) {
 801e940:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801e944:	3b01      	subs	r3, #1
 801e946:	f8c7 3244 	str.w	r3, [r7, #580]	; 0x244
 801e94a:	f8d7 3244 	ldr.w	r3, [r7, #580]	; 0x244
 801e94e:	2b00      	cmp	r3, #0
 801e950:	daa4      	bge.n	801e89c <find_best_colors+0x140>
  for (i = 0; i < numcolors; i++) {
 801e952:	f8d7 3238 	ldr.w	r3, [r7, #568]	; 0x238
 801e956:	3301      	adds	r3, #1
 801e958:	f8c7 3238 	str.w	r3, [r7, #568]	; 0x238
 801e95c:	f8d7 2238 	ldr.w	r2, [r7, #568]	; 0x238
 801e960:	f8d7 3258 	ldr.w	r3, [r7, #600]	; 0x258
 801e964:	429a      	cmp	r2, r3
 801e966:	f6ff af1f 	blt.w	801e7a8 <find_best_colors+0x4c>
    }
  }
}
 801e96a:	bf00      	nop
 801e96c:	bf00      	nop
 801e96e:	f507 7712 	add.w	r7, r7, #584	; 0x248
 801e972:	46bd      	mov	sp, r7
 801e974:	bcf0      	pop	{r4, r5, r6, r7}
 801e976:	4770      	bx	lr

0801e978 <fill_inverse_cmap>:
LOCAL(void)
fill_inverse_cmap (j_decompress_ptr cinfo, int c0, int c1, int c2)
/* Fill the inverse-colormap entries in the update box that contains */
/* histogram cell c0/c1/c2.  (Only that one cell MUST be filled, but */
/* we can fill as many others as we wish.) */
{
 801e978:	b5b0      	push	{r4, r5, r7, lr}
 801e97a:	b0f2      	sub	sp, #456	; 0x1c8
 801e97c:	af04      	add	r7, sp, #16
 801e97e:	f107 040c 	add.w	r4, r7, #12
 801e982:	6020      	str	r0, [r4, #0]
 801e984:	f107 0008 	add.w	r0, r7, #8
 801e988:	6001      	str	r1, [r0, #0]
 801e98a:	1d39      	adds	r1, r7, #4
 801e98c:	600a      	str	r2, [r1, #0]
 801e98e:	463a      	mov	r2, r7
 801e990:	6013      	str	r3, [r2, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801e992:	f107 030c 	add.w	r3, r7, #12
 801e996:	681b      	ldr	r3, [r3, #0]
 801e998:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801e99c:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
  hist3d histogram = cquantize->histogram;
 801e9a0:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 801e9a4:	699b      	ldr	r3, [r3, #24]
 801e9a6:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
  int numcolors;		/* number of candidate colors */
  /* This array holds the actually closest colormap index for each cell. */
  JSAMPLE bestcolor[BOX_C0_ELEMS * BOX_C1_ELEMS * BOX_C2_ELEMS];

  /* Convert cell coordinates to update box ID */
  c0 >>= BOX_C0_LOG;
 801e9aa:	f107 0308 	add.w	r3, r7, #8
 801e9ae:	f107 0208 	add.w	r2, r7, #8
 801e9b2:	6812      	ldr	r2, [r2, #0]
 801e9b4:	1092      	asrs	r2, r2, #2
 801e9b6:	601a      	str	r2, [r3, #0]
  c1 >>= BOX_C1_LOG;
 801e9b8:	1d3b      	adds	r3, r7, #4
 801e9ba:	1d3a      	adds	r2, r7, #4
 801e9bc:	6812      	ldr	r2, [r2, #0]
 801e9be:	10d2      	asrs	r2, r2, #3
 801e9c0:	601a      	str	r2, [r3, #0]
  c2 >>= BOX_C2_LOG;
 801e9c2:	463b      	mov	r3, r7
 801e9c4:	463a      	mov	r2, r7
 801e9c6:	6812      	ldr	r2, [r2, #0]
 801e9c8:	1092      	asrs	r2, r2, #2
 801e9ca:	601a      	str	r2, [r3, #0]

  /* Compute true coordinates of update box's origin corner.
   * Actually we compute the coordinates of the center of the corner
   * histogram cell, which are the lower bounds of the volume we care about.
   */
  minc0 = (c0 << BOX_C0_SHIFT) + ((1 << C0_SHIFT) >> 1);
 801e9cc:	f107 0308 	add.w	r3, r7, #8
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	015b      	lsls	r3, r3, #5
 801e9d4:	3304      	adds	r3, #4
 801e9d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
  minc1 = (c1 << BOX_C1_SHIFT) + ((1 << C1_SHIFT) >> 1);
 801e9da:	1d3b      	adds	r3, r7, #4
 801e9dc:	681b      	ldr	r3, [r3, #0]
 801e9de:	015b      	lsls	r3, r3, #5
 801e9e0:	3302      	adds	r3, #2
 801e9e2:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
  minc2 = (c2 << BOX_C2_SHIFT) + ((1 << C2_SHIFT) >> 1);
 801e9e6:	463b      	mov	r3, r7
 801e9e8:	681b      	ldr	r3, [r3, #0]
 801e9ea:	015b      	lsls	r3, r3, #5
 801e9ec:	3304      	adds	r3, #4
 801e9ee:	f8c7 3198 	str.w	r3, [r7, #408]	; 0x198
  
  /* Determine which colormap entries are close enough to be candidates
   * for the nearest entry to some cell in the update box.
   */
  numcolors = find_nearby_colors(cinfo, minc0, minc1, minc2, colorlist);
 801e9f2:	f107 000c 	add.w	r0, r7, #12
 801e9f6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801e9fa:	9300      	str	r3, [sp, #0]
 801e9fc:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801ea00:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801ea04:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 801ea08:	6800      	ldr	r0, [r0, #0]
 801ea0a:	f7ff fc80 	bl	801e30e <find_nearby_colors>
 801ea0e:	f8c7 0194 	str.w	r0, [r7, #404]	; 0x194

  /* Determine the actually nearest colors. */
  find_best_colors(cinfo, minc0, minc1, minc2, numcolors, colorlist,
 801ea12:	f107 000c 	add.w	r0, r7, #12
 801ea16:	f107 0314 	add.w	r3, r7, #20
 801ea1a:	9302      	str	r3, [sp, #8]
 801ea1c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 801ea20:	9301      	str	r3, [sp, #4]
 801ea22:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 801ea26:	9300      	str	r3, [sp, #0]
 801ea28:	f8d7 3198 	ldr.w	r3, [r7, #408]	; 0x198
 801ea2c:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 801ea30:	f8d7 11a0 	ldr.w	r1, [r7, #416]	; 0x1a0
 801ea34:	6800      	ldr	r0, [r0, #0]
 801ea36:	f7ff fe91 	bl	801e75c <find_best_colors>
		   bestcolor);

  /* Save the best color numbers (plus 1) in the main cache array */
  c0 <<= BOX_C0_LOG;		/* convert ID back to base cell indexes */
 801ea3a:	f107 0308 	add.w	r3, r7, #8
 801ea3e:	f107 0208 	add.w	r2, r7, #8
 801ea42:	6812      	ldr	r2, [r2, #0]
 801ea44:	0092      	lsls	r2, r2, #2
 801ea46:	601a      	str	r2, [r3, #0]
  c1 <<= BOX_C1_LOG;
 801ea48:	1d3b      	adds	r3, r7, #4
 801ea4a:	1d3a      	adds	r2, r7, #4
 801ea4c:	6812      	ldr	r2, [r2, #0]
 801ea4e:	00d2      	lsls	r2, r2, #3
 801ea50:	601a      	str	r2, [r3, #0]
  c2 <<= BOX_C2_LOG;
 801ea52:	463b      	mov	r3, r7
 801ea54:	463a      	mov	r2, r7
 801ea56:	6812      	ldr	r2, [r2, #0]
 801ea58:	0092      	lsls	r2, r2, #2
 801ea5a:	601a      	str	r2, [r3, #0]
  cptr = bestcolor;
 801ea5c:	f107 0414 	add.w	r4, r7, #20
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 801ea60:	2300      	movs	r3, #0
 801ea62:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 801ea66:	e03d      	b.n	801eae4 <fill_inverse_cmap+0x16c>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 801ea68:	2300      	movs	r3, #0
 801ea6a:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 801ea6e:	e030      	b.n	801ead2 <fill_inverse_cmap+0x15a>
      cachep = & histogram[c0+ic0][c1+ic1][c2];
 801ea70:	f107 0308 	add.w	r3, r7, #8
 801ea74:	681a      	ldr	r2, [r3, #0]
 801ea76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801ea7a:	4413      	add	r3, r2
 801ea7c:	009b      	lsls	r3, r3, #2
 801ea7e:	f8d7 21a4 	ldr.w	r2, [r7, #420]	; 0x1a4
 801ea82:	4413      	add	r3, r2
 801ea84:	681a      	ldr	r2, [r3, #0]
 801ea86:	1d3b      	adds	r3, r7, #4
 801ea88:	6819      	ldr	r1, [r3, #0]
 801ea8a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801ea8e:	440b      	add	r3, r1
 801ea90:	019b      	lsls	r3, r3, #6
 801ea92:	441a      	add	r2, r3
 801ea94:	463b      	mov	r3, r7
 801ea96:	681b      	ldr	r3, [r3, #0]
 801ea98:	005b      	lsls	r3, r3, #1
 801ea9a:	18d5      	adds	r5, r2, r3
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 801ea9c:	2300      	movs	r3, #0
 801ea9e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 801eaa2:	e00d      	b.n	801eac0 <fill_inverse_cmap+0x148>
	*cachep++ = (histcell) (GETJSAMPLE(*cptr++) + 1);
 801eaa4:	4623      	mov	r3, r4
 801eaa6:	1c5c      	adds	r4, r3, #1
 801eaa8:	781b      	ldrb	r3, [r3, #0]
 801eaaa:	b29a      	uxth	r2, r3
 801eaac:	462b      	mov	r3, r5
 801eaae:	1c9d      	adds	r5, r3, #2
 801eab0:	3201      	adds	r2, #1
 801eab2:	b292      	uxth	r2, r2
 801eab4:	801a      	strh	r2, [r3, #0]
      for (ic2 = 0; ic2 < BOX_C2_ELEMS; ic2++) {
 801eab6:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801eaba:	3301      	adds	r3, #1
 801eabc:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
 801eac0:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 801eac4:	2b03      	cmp	r3, #3
 801eac6:	dded      	ble.n	801eaa4 <fill_inverse_cmap+0x12c>
    for (ic1 = 0; ic1 < BOX_C1_ELEMS; ic1++) {
 801eac8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801eacc:	3301      	adds	r3, #1
 801eace:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
 801ead2:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 801ead6:	2b07      	cmp	r3, #7
 801ead8:	ddca      	ble.n	801ea70 <fill_inverse_cmap+0xf8>
  for (ic0 = 0; ic0 < BOX_C0_ELEMS; ic0++) {
 801eada:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801eade:	3301      	adds	r3, #1
 801eae0:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
 801eae4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 801eae8:	2b03      	cmp	r3, #3
 801eaea:	ddbd      	ble.n	801ea68 <fill_inverse_cmap+0xf0>
      }
    }
  }
}
 801eaec:	bf00      	nop
 801eaee:	bf00      	nop
 801eaf0:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 801eaf4:	46bd      	mov	sp, r7
 801eaf6:	bdb0      	pop	{r4, r5, r7, pc}

0801eaf8 <pass2_no_dither>:

METHODDEF(void)
pass2_no_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs no dithering */
{
 801eaf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801eafc:	b08a      	sub	sp, #40	; 0x28
 801eafe:	af00      	add	r7, sp, #0
 801eb00:	60f8      	str	r0, [r7, #12]
 801eb02:	60b9      	str	r1, [r7, #8]
 801eb04:	607a      	str	r2, [r7, #4]
 801eb06:	603b      	str	r3, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801eb08:	68fb      	ldr	r3, [r7, #12]
 801eb0a:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801eb0e:	61fb      	str	r3, [r7, #28]
  hist3d histogram = cquantize->histogram;
 801eb10:	69fb      	ldr	r3, [r7, #28]
 801eb12:	699b      	ldr	r3, [r3, #24]
 801eb14:	61bb      	str	r3, [r7, #24]
  register JSAMPROW inptr, outptr;
  register histptr cachep;
  register int c0, c1, c2;
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801eb16:	68fb      	ldr	r3, [r7, #12]
 801eb18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801eb1a:	617b      	str	r3, [r7, #20]

  for (row = 0; row < num_rows; row++) {
 801eb1c:	2300      	movs	r3, #0
 801eb1e:	627b      	str	r3, [r7, #36]	; 0x24
 801eb20:	e042      	b.n	801eba8 <pass2_no_dither+0xb0>
    inptr = input_buf[row];
 801eb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb24:	009b      	lsls	r3, r3, #2
 801eb26:	68ba      	ldr	r2, [r7, #8]
 801eb28:	4413      	add	r3, r2
 801eb2a:	681c      	ldr	r4, [r3, #0]
    outptr = output_buf[row];
 801eb2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eb2e:	009b      	lsls	r3, r3, #2
 801eb30:	687a      	ldr	r2, [r7, #4]
 801eb32:	4413      	add	r3, r2
 801eb34:	681e      	ldr	r6, [r3, #0]
    for (col = width; col > 0; col--) {
 801eb36:	697b      	ldr	r3, [r7, #20]
 801eb38:	623b      	str	r3, [r7, #32]
 801eb3a:	e02f      	b.n	801eb9c <pass2_no_dither+0xa4>
      /* get pixel value and index into the cache */
      c0 = GETJSAMPLE(*inptr++) >> C0_SHIFT;
 801eb3c:	4623      	mov	r3, r4
 801eb3e:	1c5c      	adds	r4, r3, #1
 801eb40:	781b      	ldrb	r3, [r3, #0]
 801eb42:	08db      	lsrs	r3, r3, #3
 801eb44:	b2db      	uxtb	r3, r3
 801eb46:	4699      	mov	r9, r3
      c1 = GETJSAMPLE(*inptr++) >> C1_SHIFT;
 801eb48:	4623      	mov	r3, r4
 801eb4a:	1c5c      	adds	r4, r3, #1
 801eb4c:	781b      	ldrb	r3, [r3, #0]
 801eb4e:	089b      	lsrs	r3, r3, #2
 801eb50:	b2db      	uxtb	r3, r3
 801eb52:	469a      	mov	sl, r3
      c2 = GETJSAMPLE(*inptr++) >> C2_SHIFT;
 801eb54:	4623      	mov	r3, r4
 801eb56:	1c5c      	adds	r4, r3, #1
 801eb58:	781b      	ldrb	r3, [r3, #0]
 801eb5a:	08db      	lsrs	r3, r3, #3
 801eb5c:	b2db      	uxtb	r3, r3
 801eb5e:	4698      	mov	r8, r3
      cachep = & histogram[c0][c1][c2];
 801eb60:	464b      	mov	r3, r9
 801eb62:	009b      	lsls	r3, r3, #2
 801eb64:	69ba      	ldr	r2, [r7, #24]
 801eb66:	4413      	add	r3, r2
 801eb68:	681a      	ldr	r2, [r3, #0]
 801eb6a:	4653      	mov	r3, sl
 801eb6c:	019b      	lsls	r3, r3, #6
 801eb6e:	441a      	add	r2, r3
 801eb70:	ea4f 0348 	mov.w	r3, r8, lsl #1
 801eb74:	18d5      	adds	r5, r2, r3
      /* If we have not seen this color before, find nearest colormap entry */
      /* and update the cache */
      if (*cachep == 0)
 801eb76:	882b      	ldrh	r3, [r5, #0]
 801eb78:	2b00      	cmp	r3, #0
 801eb7a:	d105      	bne.n	801eb88 <pass2_no_dither+0x90>
	fill_inverse_cmap(cinfo, c0,c1,c2);
 801eb7c:	4643      	mov	r3, r8
 801eb7e:	4652      	mov	r2, sl
 801eb80:	4649      	mov	r1, r9
 801eb82:	68f8      	ldr	r0, [r7, #12]
 801eb84:	f7ff fef8 	bl	801e978 <fill_inverse_cmap>
      /* Now emit the colormap index for this cell */
      *outptr++ = (JSAMPLE) (*cachep - 1);
 801eb88:	882b      	ldrh	r3, [r5, #0]
 801eb8a:	b2da      	uxtb	r2, r3
 801eb8c:	4633      	mov	r3, r6
 801eb8e:	1c5e      	adds	r6, r3, #1
 801eb90:	3a01      	subs	r2, #1
 801eb92:	b2d2      	uxtb	r2, r2
 801eb94:	701a      	strb	r2, [r3, #0]
    for (col = width; col > 0; col--) {
 801eb96:	6a3b      	ldr	r3, [r7, #32]
 801eb98:	3b01      	subs	r3, #1
 801eb9a:	623b      	str	r3, [r7, #32]
 801eb9c:	6a3b      	ldr	r3, [r7, #32]
 801eb9e:	2b00      	cmp	r3, #0
 801eba0:	d1cc      	bne.n	801eb3c <pass2_no_dither+0x44>
  for (row = 0; row < num_rows; row++) {
 801eba2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801eba4:	3301      	adds	r3, #1
 801eba6:	627b      	str	r3, [r7, #36]	; 0x24
 801eba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801ebaa:	683b      	ldr	r3, [r7, #0]
 801ebac:	429a      	cmp	r2, r3
 801ebae:	dbb8      	blt.n	801eb22 <pass2_no_dither+0x2a>
    }
  }
}
 801ebb0:	bf00      	nop
 801ebb2:	bf00      	nop
 801ebb4:	3728      	adds	r7, #40	; 0x28
 801ebb6:	46bd      	mov	sp, r7
 801ebb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801ebbc <pass2_fs_dither>:

METHODDEF(void)
pass2_fs_dither (j_decompress_ptr cinfo,
		 JSAMPARRAY input_buf, JSAMPARRAY output_buf, int num_rows)
/* This version performs Floyd-Steinberg dithering */
{
 801ebbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ebc0:	b09c      	sub	sp, #112	; 0x70
 801ebc2:	af00      	add	r7, sp, #0
 801ebc4:	6178      	str	r0, [r7, #20]
 801ebc6:	6139      	str	r1, [r7, #16]
 801ebc8:	60fa      	str	r2, [r7, #12]
 801ebca:	60bb      	str	r3, [r7, #8]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801ebcc:	697b      	ldr	r3, [r7, #20]
 801ebce:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801ebd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  hist3d histogram = cquantize->histogram;
 801ebd4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ebd6:	699b      	ldr	r3, [r3, #24]
 801ebd8:	63bb      	str	r3, [r7, #56]	; 0x38
  histptr cachep;
  int dir;			/* +1 or -1 depending on direction */
  int dir3;			/* 3*dir, for advancing inptr & errorptr */
  int row;
  JDIMENSION col;
  JDIMENSION width = cinfo->output_width;
 801ebda:	697b      	ldr	r3, [r7, #20]
 801ebdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801ebde:	637b      	str	r3, [r7, #52]	; 0x34
  JSAMPLE *range_limit = cinfo->sample_range_limit;
 801ebe0:	697b      	ldr	r3, [r7, #20]
 801ebe2:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
 801ebe6:	633b      	str	r3, [r7, #48]	; 0x30
  int *error_limit = cquantize->error_limiter;
 801ebe8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ebea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801ebec:	62fb      	str	r3, [r7, #44]	; 0x2c
  JSAMPROW colormap0 = cinfo->colormap[0];
 801ebee:	697b      	ldr	r3, [r7, #20]
 801ebf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ebf4:	681b      	ldr	r3, [r3, #0]
 801ebf6:	62bb      	str	r3, [r7, #40]	; 0x28
  JSAMPROW colormap1 = cinfo->colormap[1];
 801ebf8:	697b      	ldr	r3, [r7, #20]
 801ebfa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ebfe:	685b      	ldr	r3, [r3, #4]
 801ec00:	627b      	str	r3, [r7, #36]	; 0x24
  JSAMPROW colormap2 = cinfo->colormap[2];
 801ec02:	697b      	ldr	r3, [r7, #20]
 801ec04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801ec08:	689b      	ldr	r3, [r3, #8]
 801ec0a:	623b      	str	r3, [r7, #32]
  SHIFT_TEMPS

  for (row = 0; row < num_rows; row++) {
 801ec0c:	2300      	movs	r3, #0
 801ec0e:	647b      	str	r3, [r7, #68]	; 0x44
 801ec10:	e119      	b.n	801ee46 <pass2_fs_dither+0x28a>
    inptr = input_buf[row];
 801ec12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ec14:	009b      	lsls	r3, r3, #2
 801ec16:	693a      	ldr	r2, [r7, #16]
 801ec18:	4413      	add	r3, r2
 801ec1a:	681b      	ldr	r3, [r3, #0]
 801ec1c:	657b      	str	r3, [r7, #84]	; 0x54
    outptr = output_buf[row];
 801ec1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ec20:	009b      	lsls	r3, r3, #2
 801ec22:	68fa      	ldr	r2, [r7, #12]
 801ec24:	4413      	add	r3, r2
 801ec26:	681b      	ldr	r3, [r3, #0]
 801ec28:	653b      	str	r3, [r7, #80]	; 0x50
    if (cquantize->on_odd_row) {
 801ec2a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801ec2e:	2b00      	cmp	r3, #0
 801ec30:	d020      	beq.n	801ec74 <pass2_fs_dither+0xb8>
      /* work right to left in this row */
      inptr += (width-1) * 3;	/* so point to rightmost pixel */
 801ec32:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801ec34:	4613      	mov	r3, r2
 801ec36:	005b      	lsls	r3, r3, #1
 801ec38:	4413      	add	r3, r2
 801ec3a:	3b03      	subs	r3, #3
 801ec3c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ec3e:	4413      	add	r3, r2
 801ec40:	657b      	str	r3, [r7, #84]	; 0x54
      outptr += width-1;
 801ec42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec44:	3b01      	subs	r3, #1
 801ec46:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ec48:	4413      	add	r3, r2
 801ec4a:	653b      	str	r3, [r7, #80]	; 0x50
      dir = -1;
 801ec4c:	f04f 33ff 	mov.w	r3, #4294967295
 801ec50:	64fb      	str	r3, [r7, #76]	; 0x4c
      dir3 = -3;
 801ec52:	f06f 0302 	mvn.w	r3, #2
 801ec56:	64bb      	str	r3, [r7, #72]	; 0x48
      errorptr = cquantize->fserrors + (width+1)*3; /* => entry after last column */
 801ec58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec5a:	6a19      	ldr	r1, [r3, #32]
 801ec5c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ec5e:	1c5a      	adds	r2, r3, #1
 801ec60:	4613      	mov	r3, r2
 801ec62:	005b      	lsls	r3, r3, #1
 801ec64:	4413      	add	r3, r2
 801ec66:	005b      	lsls	r3, r3, #1
 801ec68:	18cb      	adds	r3, r1, r3
 801ec6a:	607b      	str	r3, [r7, #4]
      cquantize->on_odd_row = FALSE; /* flip for next time */
 801ec6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec6e:	2200      	movs	r2, #0
 801ec70:	625a      	str	r2, [r3, #36]	; 0x24
 801ec72:	e009      	b.n	801ec88 <pass2_fs_dither+0xcc>
    } else {
      /* work left to right in this row */
      dir = 1;
 801ec74:	2301      	movs	r3, #1
 801ec76:	64fb      	str	r3, [r7, #76]	; 0x4c
      dir3 = 3;
 801ec78:	2303      	movs	r3, #3
 801ec7a:	64bb      	str	r3, [r7, #72]	; 0x48
      errorptr = cquantize->fserrors; /* => entry before first real column */
 801ec7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec7e:	6a1b      	ldr	r3, [r3, #32]
 801ec80:	607b      	str	r3, [r7, #4]
      cquantize->on_odd_row = TRUE; /* flip for next time */
 801ec82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801ec84:	2201      	movs	r2, #1
 801ec86:	625a      	str	r2, [r3, #36]	; 0x24
    }
    /* Preset error values: no error propagated to first pixel from left */
    cur0 = cur1 = cur2 = 0;
 801ec88:	2400      	movs	r4, #0
 801ec8a:	4625      	mov	r5, r4
 801ec8c:	462e      	mov	r6, r5
    /* and no error propagated to row below yet */
    belowerr0 = belowerr1 = belowerr2 = 0;
 801ec8e:	2300      	movs	r3, #0
 801ec90:	667b      	str	r3, [r7, #100]	; 0x64
 801ec92:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801ec94:	66bb      	str	r3, [r7, #104]	; 0x68
 801ec96:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801ec98:	66fb      	str	r3, [r7, #108]	; 0x6c
    bpreverr0 = bpreverr1 = bpreverr2 = 0;
 801ec9a:	2300      	movs	r3, #0
 801ec9c:	65bb      	str	r3, [r7, #88]	; 0x58
 801ec9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801eca0:	65fb      	str	r3, [r7, #92]	; 0x5c
 801eca2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801eca4:	663b      	str	r3, [r7, #96]	; 0x60

    for (col = width; col > 0; col--) {
 801eca6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801eca8:	643b      	str	r3, [r7, #64]	; 0x40
 801ecaa:	e0b8      	b.n	801ee1e <pass2_fs_dither+0x262>
       * round the error term (which is expressed * 16) to an integer.
       * RIGHT_SHIFT rounds towards minus infinity, so adding 8 is correct
       * for either sign of the error value.
       * Note: errorptr points to *previous* column's array entry.
       */
      cur0 = RIGHT_SHIFT(cur0 + errorptr[dir3+0] + 8, 4);
 801ecac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ecae:	005b      	lsls	r3, r3, #1
 801ecb0:	687a      	ldr	r2, [r7, #4]
 801ecb2:	4611      	mov	r1, r2
 801ecb4:	440b      	add	r3, r1
 801ecb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ecba:	4433      	add	r3, r6
 801ecbc:	3308      	adds	r3, #8
 801ecbe:	111e      	asrs	r6, r3, #4
      cur1 = RIGHT_SHIFT(cur1 + errorptr[dir3+1] + 8, 4);
 801ecc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ecc2:	3301      	adds	r3, #1
 801ecc4:	005b      	lsls	r3, r3, #1
 801ecc6:	4611      	mov	r1, r2
 801ecc8:	440b      	add	r3, r1
 801ecca:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ecce:	442b      	add	r3, r5
 801ecd0:	3308      	adds	r3, #8
 801ecd2:	111d      	asrs	r5, r3, #4
      cur2 = RIGHT_SHIFT(cur2 + errorptr[dir3+2] + 8, 4);
 801ecd4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ecd6:	3302      	adds	r3, #2
 801ecd8:	005b      	lsls	r3, r3, #1
 801ecda:	4413      	add	r3, r2
 801ecdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 801ece0:	4423      	add	r3, r4
 801ece2:	3308      	adds	r3, #8
 801ece4:	111c      	asrs	r4, r3, #4
      /* Limit the error using transfer function set by init_error_limit.
       * See comments with init_error_limit for rationale.
       */
      cur0 = error_limit[cur0];
 801ece6:	4633      	mov	r3, r6
 801ece8:	009b      	lsls	r3, r3, #2
 801ecea:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ecec:	4413      	add	r3, r2
 801ecee:	681e      	ldr	r6, [r3, #0]
      cur1 = error_limit[cur1];
 801ecf0:	462b      	mov	r3, r5
 801ecf2:	009b      	lsls	r3, r3, #2
 801ecf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ecf6:	4413      	add	r3, r2
 801ecf8:	681d      	ldr	r5, [r3, #0]
      cur2 = error_limit[cur2];
 801ecfa:	4623      	mov	r3, r4
 801ecfc:	009b      	lsls	r3, r3, #2
 801ecfe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801ed00:	4413      	add	r3, r2
 801ed02:	681c      	ldr	r4, [r3, #0]
      /* Form pixel value + error, and range-limit to 0..MAXJSAMPLE.
       * The maximum error is +- MAXJSAMPLE (or less with error limiting);
       * this sets the required size of the range_limit array.
       */
      cur0 += GETJSAMPLE(inptr[0]);
 801ed04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ed06:	781b      	ldrb	r3, [r3, #0]
 801ed08:	441e      	add	r6, r3
      cur1 += GETJSAMPLE(inptr[1]);
 801ed0a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ed0c:	3301      	adds	r3, #1
 801ed0e:	781b      	ldrb	r3, [r3, #0]
 801ed10:	441d      	add	r5, r3
      cur2 += GETJSAMPLE(inptr[2]);
 801ed12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801ed14:	3302      	adds	r3, #2
 801ed16:	781b      	ldrb	r3, [r3, #0]
 801ed18:	441c      	add	r4, r3
      cur0 = GETJSAMPLE(range_limit[cur0]);
 801ed1a:	4632      	mov	r2, r6
 801ed1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed1e:	4413      	add	r3, r2
 801ed20:	781b      	ldrb	r3, [r3, #0]
 801ed22:	461e      	mov	r6, r3
      cur1 = GETJSAMPLE(range_limit[cur1]);
 801ed24:	462a      	mov	r2, r5
 801ed26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed28:	4413      	add	r3, r2
 801ed2a:	781b      	ldrb	r3, [r3, #0]
 801ed2c:	461d      	mov	r5, r3
      cur2 = GETJSAMPLE(range_limit[cur2]);
 801ed2e:	4622      	mov	r2, r4
 801ed30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801ed32:	4413      	add	r3, r2
 801ed34:	781b      	ldrb	r3, [r3, #0]
 801ed36:	461c      	mov	r4, r3
      /* Index into the cache with adjusted pixel value */
      cachep = & histogram[cur0>>C0_SHIFT][cur1>>C1_SHIFT][cur2>>C2_SHIFT];
 801ed38:	10f3      	asrs	r3, r6, #3
 801ed3a:	009b      	lsls	r3, r3, #2
 801ed3c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801ed3e:	4413      	add	r3, r2
 801ed40:	681a      	ldr	r2, [r3, #0]
 801ed42:	10ab      	asrs	r3, r5, #2
 801ed44:	019b      	lsls	r3, r3, #6
 801ed46:	441a      	add	r2, r3
 801ed48:	10e3      	asrs	r3, r4, #3
 801ed4a:	005b      	lsls	r3, r3, #1
 801ed4c:	4413      	add	r3, r2
 801ed4e:	61fb      	str	r3, [r7, #28]
      /* If we have not seen this color before, find nearest colormap */
      /* entry and update the cache */
      if (*cachep == 0)
 801ed50:	69fb      	ldr	r3, [r7, #28]
 801ed52:	881b      	ldrh	r3, [r3, #0]
 801ed54:	2b00      	cmp	r3, #0
 801ed56:	d105      	bne.n	801ed64 <pass2_fs_dither+0x1a8>
	fill_inverse_cmap(cinfo, cur0>>C0_SHIFT,cur1>>C1_SHIFT,cur2>>C2_SHIFT);
 801ed58:	10f1      	asrs	r1, r6, #3
 801ed5a:	10aa      	asrs	r2, r5, #2
 801ed5c:	10e3      	asrs	r3, r4, #3
 801ed5e:	6978      	ldr	r0, [r7, #20]
 801ed60:	f7ff fe0a 	bl	801e978 <fill_inverse_cmap>
      /* Now emit the colormap index for this cell */
      { register int pixcode = *cachep - 1;
 801ed64:	69fb      	ldr	r3, [r7, #28]
 801ed66:	881b      	ldrh	r3, [r3, #0]
 801ed68:	f103 38ff 	add.w	r8, r3, #4294967295
	*outptr = (JSAMPLE) pixcode;
 801ed6c:	fa5f f288 	uxtb.w	r2, r8
 801ed70:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801ed72:	701a      	strb	r2, [r3, #0]
	/* Compute representation error for this pixel */
	cur0 -= GETJSAMPLE(colormap0[pixcode]);
 801ed74:	4642      	mov	r2, r8
 801ed76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ed78:	4413      	add	r3, r2
 801ed7a:	781b      	ldrb	r3, [r3, #0]
 801ed7c:	1af6      	subs	r6, r6, r3
	cur1 -= GETJSAMPLE(colormap1[pixcode]);
 801ed7e:	4642      	mov	r2, r8
 801ed80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ed82:	4413      	add	r3, r2
 801ed84:	781b      	ldrb	r3, [r3, #0]
 801ed86:	1aed      	subs	r5, r5, r3
	cur2 -= GETJSAMPLE(colormap2[pixcode]);
 801ed88:	4642      	mov	r2, r8
 801ed8a:	6a3b      	ldr	r3, [r7, #32]
 801ed8c:	4413      	add	r3, r2
 801ed8e:	781b      	ldrb	r3, [r3, #0]
 801ed90:	1ae4      	subs	r4, r4, r3
       * Add these into the running sums, and simultaneously shift the
       * next-line error sums left by 1 column.
       */
      { register LOCFSERROR bnexterr, delta;

	bnexterr = cur0;	/* Process component 0 */
 801ed92:	4630      	mov	r0, r6
	delta = cur0 * 2;
 801ed94:	ea4f 0846 	mov.w	r8, r6, lsl #1
	cur0 += delta;		/* form error * 3 */
 801ed98:	4446      	add	r6, r8
	errorptr[0] = (FSERROR) (bpreverr0 + cur0);
 801ed9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ed9c:	b29a      	uxth	r2, r3
 801ed9e:	b2b3      	uxth	r3, r6
 801eda0:	4413      	add	r3, r2
 801eda2:	b29b      	uxth	r3, r3
 801eda4:	b21b      	sxth	r3, r3
 801eda6:	6879      	ldr	r1, [r7, #4]
 801eda8:	460a      	mov	r2, r1
 801edaa:	8013      	strh	r3, [r2, #0]
	cur0 += delta;		/* form error * 5 */
 801edac:	4446      	add	r6, r8
	bpreverr0 = belowerr0 + cur0;
 801edae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801edb0:	4433      	add	r3, r6
 801edb2:	663b      	str	r3, [r7, #96]	; 0x60
	belowerr0 = bnexterr;
 801edb4:	66f8      	str	r0, [r7, #108]	; 0x6c
	cur0 += delta;		/* form error * 7 */
 801edb6:	4446      	add	r6, r8
	bnexterr = cur1;	/* Process component 1 */
 801edb8:	4628      	mov	r0, r5
	delta = cur1 * 2;
 801edba:	ea4f 0845 	mov.w	r8, r5, lsl #1
	cur1 += delta;		/* form error * 3 */
 801edbe:	4445      	add	r5, r8
	errorptr[1] = (FSERROR) (bpreverr1 + cur1);
 801edc0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801edc2:	b29a      	uxth	r2, r3
 801edc4:	b2ab      	uxth	r3, r5
 801edc6:	4413      	add	r3, r2
 801edc8:	b29a      	uxth	r2, r3
 801edca:	1c8b      	adds	r3, r1, #2
 801edcc:	b212      	sxth	r2, r2
 801edce:	801a      	strh	r2, [r3, #0]
	cur1 += delta;		/* form error * 5 */
 801edd0:	4445      	add	r5, r8
	bpreverr1 = belowerr1 + cur1;
 801edd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801edd4:	442b      	add	r3, r5
 801edd6:	65fb      	str	r3, [r7, #92]	; 0x5c
	belowerr1 = bnexterr;
 801edd8:	66b8      	str	r0, [r7, #104]	; 0x68
	cur1 += delta;		/* form error * 7 */
 801edda:	4445      	add	r5, r8
	bnexterr = cur2;	/* Process component 2 */
 801eddc:	4620      	mov	r0, r4
	delta = cur2 * 2;
 801edde:	ea4f 0844 	mov.w	r8, r4, lsl #1
	cur2 += delta;		/* form error * 3 */
 801ede2:	4444      	add	r4, r8
	errorptr[2] = (FSERROR) (bpreverr2 + cur2);
 801ede4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801ede6:	b29a      	uxth	r2, r3
 801ede8:	b2a3      	uxth	r3, r4
 801edea:	4413      	add	r3, r2
 801edec:	b29a      	uxth	r2, r3
 801edee:	1d0b      	adds	r3, r1, #4
 801edf0:	b212      	sxth	r2, r2
 801edf2:	801a      	strh	r2, [r3, #0]
	cur2 += delta;		/* form error * 5 */
 801edf4:	4444      	add	r4, r8
	bpreverr2 = belowerr2 + cur2;
 801edf6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801edf8:	4423      	add	r3, r4
 801edfa:	65bb      	str	r3, [r7, #88]	; 0x58
	belowerr2 = bnexterr;
 801edfc:	6678      	str	r0, [r7, #100]	; 0x64
	cur2 += delta;		/* form error * 7 */
 801edfe:	4444      	add	r4, r8
      }
      /* At this point curN contains the 7/16 error value to be propagated
       * to the next pixel on the current line, and all the errors for the
       * next line have been shifted over.  We are therefore ready to move on.
       */
      inptr += dir3;		/* Advance pixel pointers to next column */
 801ee00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ee02:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801ee04:	4413      	add	r3, r2
 801ee06:	657b      	str	r3, [r7, #84]	; 0x54
      outptr += dir;
 801ee08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801ee0a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801ee0c:	4413      	add	r3, r2
 801ee0e:	653b      	str	r3, [r7, #80]	; 0x50
      errorptr += dir3;		/* advance errorptr to current column */
 801ee10:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801ee12:	005b      	lsls	r3, r3, #1
 801ee14:	18cb      	adds	r3, r1, r3
 801ee16:	607b      	str	r3, [r7, #4]
    for (col = width; col > 0; col--) {
 801ee18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ee1a:	3b01      	subs	r3, #1
 801ee1c:	643b      	str	r3, [r7, #64]	; 0x40
 801ee1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801ee20:	2b00      	cmp	r3, #0
 801ee22:	f47f af43 	bne.w	801ecac <pass2_fs_dither+0xf0>
    }
    /* Post-loop cleanup: we must unload the final error values into the
     * final fserrors[] entry.  Note we need not unload belowerrN because
     * it is for the dummy column before or after the actual array.
     */
    errorptr[0] = (FSERROR) bpreverr0; /* unload prev errs into array */
 801ee26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801ee28:	b21b      	sxth	r3, r3
 801ee2a:	6879      	ldr	r1, [r7, #4]
 801ee2c:	460a      	mov	r2, r1
 801ee2e:	8013      	strh	r3, [r2, #0]
    errorptr[1] = (FSERROR) bpreverr1;
 801ee30:	1c8b      	adds	r3, r1, #2
 801ee32:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801ee34:	b212      	sxth	r2, r2
 801ee36:	801a      	strh	r2, [r3, #0]
    errorptr[2] = (FSERROR) bpreverr2;
 801ee38:	1d0b      	adds	r3, r1, #4
 801ee3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 801ee3c:	b212      	sxth	r2, r2
 801ee3e:	801a      	strh	r2, [r3, #0]
  for (row = 0; row < num_rows; row++) {
 801ee40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801ee42:	3301      	adds	r3, #1
 801ee44:	647b      	str	r3, [r7, #68]	; 0x44
 801ee46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801ee48:	68bb      	ldr	r3, [r7, #8]
 801ee4a:	429a      	cmp	r2, r3
 801ee4c:	f6ff aee1 	blt.w	801ec12 <pass2_fs_dither+0x56>
  }
}
 801ee50:	bf00      	nop
 801ee52:	bf00      	nop
 801ee54:	3770      	adds	r7, #112	; 0x70
 801ee56:	46bd      	mov	sp, r7
 801ee58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801ee5c <init_error_limit>:
 */

LOCAL(void)
init_error_limit (j_decompress_ptr cinfo)
/* Allocate and fill in the error_limiter table */
{
 801ee5c:	b580      	push	{r7, lr}
 801ee5e:	b086      	sub	sp, #24
 801ee60:	af00      	add	r7, sp, #0
 801ee62:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801ee64:	687b      	ldr	r3, [r7, #4]
 801ee66:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801ee6a:	60fb      	str	r3, [r7, #12]
  int * table;
  int in, out;

  table = (int *) (*cinfo->mem->alloc_small)
 801ee6c:	687b      	ldr	r3, [r7, #4]
 801ee6e:	685b      	ldr	r3, [r3, #4]
 801ee70:	681b      	ldr	r3, [r3, #0]
 801ee72:	f240 72fc 	movw	r2, #2044	; 0x7fc
 801ee76:	2101      	movs	r1, #1
 801ee78:	6878      	ldr	r0, [r7, #4]
 801ee7a:	4798      	blx	r3
 801ee7c:	60b8      	str	r0, [r7, #8]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, (MAXJSAMPLE*2+1) * SIZEOF(int));
  table += MAXJSAMPLE;		/* so can index -MAXJSAMPLE .. +MAXJSAMPLE */
 801ee7e:	68bb      	ldr	r3, [r7, #8]
 801ee80:	f503 737f 	add.w	r3, r3, #1020	; 0x3fc
 801ee84:	60bb      	str	r3, [r7, #8]
  cquantize->error_limiter = table;
 801ee86:	68fb      	ldr	r3, [r7, #12]
 801ee88:	68ba      	ldr	r2, [r7, #8]
 801ee8a:	629a      	str	r2, [r3, #40]	; 0x28

#define STEPSIZE ((MAXJSAMPLE+1)/16)
  /* Map errors 1:1 up to +- MAXJSAMPLE/16 */
  out = 0;
 801ee8c:	2300      	movs	r3, #0
 801ee8e:	613b      	str	r3, [r7, #16]
  for (in = 0; in < STEPSIZE; in++, out++) {
 801ee90:	2300      	movs	r3, #0
 801ee92:	617b      	str	r3, [r7, #20]
 801ee94:	e016      	b.n	801eec4 <init_error_limit+0x68>
    table[in] = out; table[-in] = -out;
 801ee96:	697b      	ldr	r3, [r7, #20]
 801ee98:	009b      	lsls	r3, r3, #2
 801ee9a:	68ba      	ldr	r2, [r7, #8]
 801ee9c:	4413      	add	r3, r2
 801ee9e:	693a      	ldr	r2, [r7, #16]
 801eea0:	601a      	str	r2, [r3, #0]
 801eea2:	697a      	ldr	r2, [r7, #20]
 801eea4:	4613      	mov	r3, r2
 801eea6:	079b      	lsls	r3, r3, #30
 801eea8:	1a9b      	subs	r3, r3, r2
 801eeaa:	009b      	lsls	r3, r3, #2
 801eeac:	461a      	mov	r2, r3
 801eeae:	68bb      	ldr	r3, [r7, #8]
 801eeb0:	4413      	add	r3, r2
 801eeb2:	693a      	ldr	r2, [r7, #16]
 801eeb4:	4252      	negs	r2, r2
 801eeb6:	601a      	str	r2, [r3, #0]
  for (in = 0; in < STEPSIZE; in++, out++) {
 801eeb8:	697b      	ldr	r3, [r7, #20]
 801eeba:	3301      	adds	r3, #1
 801eebc:	617b      	str	r3, [r7, #20]
 801eebe:	693b      	ldr	r3, [r7, #16]
 801eec0:	3301      	adds	r3, #1
 801eec2:	613b      	str	r3, [r7, #16]
 801eec4:	697b      	ldr	r3, [r7, #20]
 801eec6:	2b0f      	cmp	r3, #15
 801eec8:	dde5      	ble.n	801ee96 <init_error_limit+0x3a>
  }
  /* Map errors 1:2 up to +- 3*MAXJSAMPLE/16 */
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 801eeca:	e01f      	b.n	801ef0c <init_error_limit+0xb0>
    table[in] = out; table[-in] = -out;
 801eecc:	697b      	ldr	r3, [r7, #20]
 801eece:	009b      	lsls	r3, r3, #2
 801eed0:	68ba      	ldr	r2, [r7, #8]
 801eed2:	4413      	add	r3, r2
 801eed4:	693a      	ldr	r2, [r7, #16]
 801eed6:	601a      	str	r2, [r3, #0]
 801eed8:	697a      	ldr	r2, [r7, #20]
 801eeda:	4613      	mov	r3, r2
 801eedc:	079b      	lsls	r3, r3, #30
 801eede:	1a9b      	subs	r3, r3, r2
 801eee0:	009b      	lsls	r3, r3, #2
 801eee2:	461a      	mov	r2, r3
 801eee4:	68bb      	ldr	r3, [r7, #8]
 801eee6:	4413      	add	r3, r2
 801eee8:	693a      	ldr	r2, [r7, #16]
 801eeea:	4252      	negs	r2, r2
 801eeec:	601a      	str	r2, [r3, #0]
  for (; in < STEPSIZE*3; in++, out += (in&1) ? 0 : 1) {
 801eeee:	697b      	ldr	r3, [r7, #20]
 801eef0:	3301      	adds	r3, #1
 801eef2:	617b      	str	r3, [r7, #20]
 801eef4:	697b      	ldr	r3, [r7, #20]
 801eef6:	f003 0301 	and.w	r3, r3, #1
 801eefa:	2b00      	cmp	r3, #0
 801eefc:	bf0c      	ite	eq
 801eefe:	2301      	moveq	r3, #1
 801ef00:	2300      	movne	r3, #0
 801ef02:	b2db      	uxtb	r3, r3
 801ef04:	461a      	mov	r2, r3
 801ef06:	693b      	ldr	r3, [r7, #16]
 801ef08:	4413      	add	r3, r2
 801ef0a:	613b      	str	r3, [r7, #16]
 801ef0c:	697b      	ldr	r3, [r7, #20]
 801ef0e:	2b2f      	cmp	r3, #47	; 0x2f
 801ef10:	dddc      	ble.n	801eecc <init_error_limit+0x70>
  }
  /* Clamp the rest to final out value (which is (MAXJSAMPLE+1)/8) */
  for (; in <= MAXJSAMPLE; in++) {
 801ef12:	e013      	b.n	801ef3c <init_error_limit+0xe0>
    table[in] = out; table[-in] = -out;
 801ef14:	697b      	ldr	r3, [r7, #20]
 801ef16:	009b      	lsls	r3, r3, #2
 801ef18:	68ba      	ldr	r2, [r7, #8]
 801ef1a:	4413      	add	r3, r2
 801ef1c:	693a      	ldr	r2, [r7, #16]
 801ef1e:	601a      	str	r2, [r3, #0]
 801ef20:	697a      	ldr	r2, [r7, #20]
 801ef22:	4613      	mov	r3, r2
 801ef24:	079b      	lsls	r3, r3, #30
 801ef26:	1a9b      	subs	r3, r3, r2
 801ef28:	009b      	lsls	r3, r3, #2
 801ef2a:	461a      	mov	r2, r3
 801ef2c:	68bb      	ldr	r3, [r7, #8]
 801ef2e:	4413      	add	r3, r2
 801ef30:	693a      	ldr	r2, [r7, #16]
 801ef32:	4252      	negs	r2, r2
 801ef34:	601a      	str	r2, [r3, #0]
  for (; in <= MAXJSAMPLE; in++) {
 801ef36:	697b      	ldr	r3, [r7, #20]
 801ef38:	3301      	adds	r3, #1
 801ef3a:	617b      	str	r3, [r7, #20]
 801ef3c:	697b      	ldr	r3, [r7, #20]
 801ef3e:	2bff      	cmp	r3, #255	; 0xff
 801ef40:	dde8      	ble.n	801ef14 <init_error_limit+0xb8>
  }
#undef STEPSIZE
}
 801ef42:	bf00      	nop
 801ef44:	bf00      	nop
 801ef46:	3718      	adds	r7, #24
 801ef48:	46bd      	mov	sp, r7
 801ef4a:	bd80      	pop	{r7, pc}

0801ef4c <finish_pass1>:
 * Finish up at the end of each pass.
 */

METHODDEF(void)
finish_pass1 (j_decompress_ptr cinfo)
{
 801ef4c:	b580      	push	{r7, lr}
 801ef4e:	b084      	sub	sp, #16
 801ef50:	af00      	add	r7, sp, #0
 801ef52:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801ef54:	687b      	ldr	r3, [r7, #4]
 801ef56:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801ef5a:	60fb      	str	r3, [r7, #12]

  /* Select the representative colors and fill in cinfo->colormap */
  cinfo->colormap = cquantize->sv_colormap;
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	691a      	ldr	r2, [r3, #16]
 801ef60:	687b      	ldr	r3, [r7, #4]
 801ef62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  select_colors(cinfo, cquantize->desired);
 801ef66:	68fb      	ldr	r3, [r7, #12]
 801ef68:	695b      	ldr	r3, [r3, #20]
 801ef6a:	4619      	mov	r1, r3
 801ef6c:	6878      	ldr	r0, [r7, #4]
 801ef6e:	f7ff f978 	bl	801e262 <select_colors>
  /* Force next pass to zero the color index table */
  cquantize->needs_zeroed = TRUE;
 801ef72:	68fb      	ldr	r3, [r7, #12]
 801ef74:	2201      	movs	r2, #1
 801ef76:	61da      	str	r2, [r3, #28]
}
 801ef78:	bf00      	nop
 801ef7a:	3710      	adds	r7, #16
 801ef7c:	46bd      	mov	sp, r7
 801ef7e:	bd80      	pop	{r7, pc}

0801ef80 <finish_pass2>:


METHODDEF(void)
finish_pass2 (j_decompress_ptr cinfo)
{
 801ef80:	b480      	push	{r7}
 801ef82:	b083      	sub	sp, #12
 801ef84:	af00      	add	r7, sp, #0
 801ef86:	6078      	str	r0, [r7, #4]
  /* no work */
}
 801ef88:	bf00      	nop
 801ef8a:	370c      	adds	r7, #12
 801ef8c:	46bd      	mov	sp, r7
 801ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef92:	4770      	bx	lr

0801ef94 <start_pass_2_quant>:
 * Initialize for each processing pass.
 */

METHODDEF(void)
start_pass_2_quant (j_decompress_ptr cinfo, boolean is_pre_scan)
{
 801ef94:	b580      	push	{r7, lr}
 801ef96:	b086      	sub	sp, #24
 801ef98:	af00      	add	r7, sp, #0
 801ef9a:	6078      	str	r0, [r7, #4]
 801ef9c:	6039      	str	r1, [r7, #0]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801ef9e:	687b      	ldr	r3, [r7, #4]
 801efa0:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801efa4:	613b      	str	r3, [r7, #16]
  hist3d histogram = cquantize->histogram;
 801efa6:	693b      	ldr	r3, [r7, #16]
 801efa8:	699b      	ldr	r3, [r3, #24]
 801efaa:	60fb      	str	r3, [r7, #12]
  int i;

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 801efac:	687b      	ldr	r3, [r7, #4]
 801efae:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801efb2:	2b00      	cmp	r3, #0
 801efb4:	d003      	beq.n	801efbe <start_pass_2_quant+0x2a>
    cinfo->dither_mode = JDITHER_FS;
 801efb6:	687b      	ldr	r3, [r7, #4]
 801efb8:	2202      	movs	r2, #2
 801efba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  if (is_pre_scan) {
 801efbe:	683b      	ldr	r3, [r7, #0]
 801efc0:	2b00      	cmp	r3, #0
 801efc2:	d009      	beq.n	801efd8 <start_pass_2_quant+0x44>
    /* Set up method pointers */
    cquantize->pub.color_quantize = prescan_quantize;
 801efc4:	693b      	ldr	r3, [r7, #16]
 801efc6:	4a44      	ldr	r2, [pc, #272]	; (801f0d8 <start_pass_2_quant+0x144>)
 801efc8:	605a      	str	r2, [r3, #4]
    cquantize->pub.finish_pass = finish_pass1;
 801efca:	693b      	ldr	r3, [r7, #16]
 801efcc:	4a43      	ldr	r2, [pc, #268]	; (801f0dc <start_pass_2_quant+0x148>)
 801efce:	609a      	str	r2, [r3, #8]
    cquantize->needs_zeroed = TRUE; /* Always zero histogram */
 801efd0:	693b      	ldr	r3, [r7, #16]
 801efd2:	2201      	movs	r2, #1
 801efd4:	61da      	str	r2, [r3, #28]
 801efd6:	e060      	b.n	801f09a <start_pass_2_quant+0x106>
  } else {
    /* Set up method pointers */
    if (cinfo->dither_mode == JDITHER_FS)
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801efde:	2b02      	cmp	r3, #2
 801efe0:	d103      	bne.n	801efea <start_pass_2_quant+0x56>
      cquantize->pub.color_quantize = pass2_fs_dither;
 801efe2:	693b      	ldr	r3, [r7, #16]
 801efe4:	4a3e      	ldr	r2, [pc, #248]	; (801f0e0 <start_pass_2_quant+0x14c>)
 801efe6:	605a      	str	r2, [r3, #4]
 801efe8:	e002      	b.n	801eff0 <start_pass_2_quant+0x5c>
    else
      cquantize->pub.color_quantize = pass2_no_dither;
 801efea:	693b      	ldr	r3, [r7, #16]
 801efec:	4a3d      	ldr	r2, [pc, #244]	; (801f0e4 <start_pass_2_quant+0x150>)
 801efee:	605a      	str	r2, [r3, #4]
    cquantize->pub.finish_pass = finish_pass2;
 801eff0:	693b      	ldr	r3, [r7, #16]
 801eff2:	4a3d      	ldr	r2, [pc, #244]	; (801f0e8 <start_pass_2_quant+0x154>)
 801eff4:	609a      	str	r2, [r3, #8]

    /* Make sure color count is acceptable */
    i = cinfo->actual_number_of_colors;
 801eff6:	687b      	ldr	r3, [r7, #4]
 801eff8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801effc:	617b      	str	r3, [r7, #20]
    if (i < 1)
 801effe:	697b      	ldr	r3, [r7, #20]
 801f000:	2b00      	cmp	r3, #0
 801f002:	dc0c      	bgt.n	801f01e <start_pass_2_quant+0x8a>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 1);
 801f004:	687b      	ldr	r3, [r7, #4]
 801f006:	681b      	ldr	r3, [r3, #0]
 801f008:	223a      	movs	r2, #58	; 0x3a
 801f00a:	615a      	str	r2, [r3, #20]
 801f00c:	687b      	ldr	r3, [r7, #4]
 801f00e:	681b      	ldr	r3, [r3, #0]
 801f010:	2201      	movs	r2, #1
 801f012:	619a      	str	r2, [r3, #24]
 801f014:	687b      	ldr	r3, [r7, #4]
 801f016:	681b      	ldr	r3, [r3, #0]
 801f018:	681b      	ldr	r3, [r3, #0]
 801f01a:	6878      	ldr	r0, [r7, #4]
 801f01c:	4798      	blx	r3
    if (i > MAXNUMCOLORS)
 801f01e:	697b      	ldr	r3, [r7, #20]
 801f020:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f024:	dd0d      	ble.n	801f042 <start_pass_2_quant+0xae>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801f026:	687b      	ldr	r3, [r7, #4]
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	223b      	movs	r2, #59	; 0x3b
 801f02c:	615a      	str	r2, [r3, #20]
 801f02e:	687b      	ldr	r3, [r7, #4]
 801f030:	681b      	ldr	r3, [r3, #0]
 801f032:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f036:	619a      	str	r2, [r3, #24]
 801f038:	687b      	ldr	r3, [r7, #4]
 801f03a:	681b      	ldr	r3, [r3, #0]
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	6878      	ldr	r0, [r7, #4]
 801f040:	4798      	blx	r3

    if (cinfo->dither_mode == JDITHER_FS) {
 801f042:	687b      	ldr	r3, [r7, #4]
 801f044:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801f048:	2b02      	cmp	r3, #2
 801f04a:	d126      	bne.n	801f09a <start_pass_2_quant+0x106>
      size_t arraysize = (size_t) ((cinfo->output_width + 2) *
 801f04c:	687b      	ldr	r3, [r7, #4]
 801f04e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 801f050:	4613      	mov	r3, r2
 801f052:	005b      	lsls	r3, r3, #1
 801f054:	4413      	add	r3, r2
 801f056:	005b      	lsls	r3, r3, #1
 801f058:	330c      	adds	r3, #12
 801f05a:	60bb      	str	r3, [r7, #8]
				   (3 * SIZEOF(FSERROR)));
      /* Allocate Floyd-Steinberg workspace if we didn't already. */
      if (cquantize->fserrors == NULL)
 801f05c:	693b      	ldr	r3, [r7, #16]
 801f05e:	6a1b      	ldr	r3, [r3, #32]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d109      	bne.n	801f078 <start_pass_2_quant+0xe4>
	cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801f064:	687b      	ldr	r3, [r7, #4]
 801f066:	685b      	ldr	r3, [r3, #4]
 801f068:	685b      	ldr	r3, [r3, #4]
 801f06a:	68ba      	ldr	r2, [r7, #8]
 801f06c:	2101      	movs	r1, #1
 801f06e:	6878      	ldr	r0, [r7, #4]
 801f070:	4798      	blx	r3
 801f072:	4602      	mov	r2, r0
 801f074:	693b      	ldr	r3, [r7, #16]
 801f076:	621a      	str	r2, [r3, #32]
	  ((j_common_ptr) cinfo, JPOOL_IMAGE, arraysize);
      /* Initialize the propagated errors to zero. */
      FMEMZERO((void FAR *) cquantize->fserrors, arraysize);
 801f078:	693b      	ldr	r3, [r7, #16]
 801f07a:	6a1b      	ldr	r3, [r3, #32]
 801f07c:	68ba      	ldr	r2, [r7, #8]
 801f07e:	2100      	movs	r1, #0
 801f080:	4618      	mov	r0, r3
 801f082:	f000 f9a9 	bl	801f3d8 <memset>
      /* Make the error-limit table if we didn't already. */
      if (cquantize->error_limiter == NULL)
 801f086:	693b      	ldr	r3, [r7, #16]
 801f088:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801f08a:	2b00      	cmp	r3, #0
 801f08c:	d102      	bne.n	801f094 <start_pass_2_quant+0x100>
	init_error_limit(cinfo);
 801f08e:	6878      	ldr	r0, [r7, #4]
 801f090:	f7ff fee4 	bl	801ee5c <init_error_limit>
      cquantize->on_odd_row = FALSE;
 801f094:	693b      	ldr	r3, [r7, #16]
 801f096:	2200      	movs	r2, #0
 801f098:	625a      	str	r2, [r3, #36]	; 0x24
    }

  }
  /* Zero the histogram or inverse color map, if necessary */
  if (cquantize->needs_zeroed) {
 801f09a:	693b      	ldr	r3, [r7, #16]
 801f09c:	69db      	ldr	r3, [r3, #28]
 801f09e:	2b00      	cmp	r3, #0
 801f0a0:	d016      	beq.n	801f0d0 <start_pass_2_quant+0x13c>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 801f0a2:	2300      	movs	r3, #0
 801f0a4:	617b      	str	r3, [r7, #20]
 801f0a6:	e00d      	b.n	801f0c4 <start_pass_2_quant+0x130>
      FMEMZERO((void FAR *) histogram[i],
 801f0a8:	697b      	ldr	r3, [r7, #20]
 801f0aa:	009b      	lsls	r3, r3, #2
 801f0ac:	68fa      	ldr	r2, [r7, #12]
 801f0ae:	4413      	add	r3, r2
 801f0b0:	681b      	ldr	r3, [r3, #0]
 801f0b2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f0b6:	2100      	movs	r1, #0
 801f0b8:	4618      	mov	r0, r3
 801f0ba:	f000 f98d 	bl	801f3d8 <memset>
    for (i = 0; i < HIST_C0_ELEMS; i++) {
 801f0be:	697b      	ldr	r3, [r7, #20]
 801f0c0:	3301      	adds	r3, #1
 801f0c2:	617b      	str	r3, [r7, #20]
 801f0c4:	697b      	ldr	r3, [r7, #20]
 801f0c6:	2b1f      	cmp	r3, #31
 801f0c8:	ddee      	ble.n	801f0a8 <start_pass_2_quant+0x114>
	       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
    }
    cquantize->needs_zeroed = FALSE;
 801f0ca:	693b      	ldr	r3, [r7, #16]
 801f0cc:	2200      	movs	r2, #0
 801f0ce:	61da      	str	r2, [r3, #28]
  }
}
 801f0d0:	bf00      	nop
 801f0d2:	3718      	adds	r7, #24
 801f0d4:	46bd      	mov	sp, r7
 801f0d6:	bd80      	pop	{r7, pc}
 801f0d8:	0801db09 	.word	0x0801db09
 801f0dc:	0801ef4d 	.word	0x0801ef4d
 801f0e0:	0801ebbd 	.word	0x0801ebbd
 801f0e4:	0801eaf9 	.word	0x0801eaf9
 801f0e8:	0801ef81 	.word	0x0801ef81

0801f0ec <new_color_map_2_quant>:
 * Switch to a new external colormap between output passes.
 */

METHODDEF(void)
new_color_map_2_quant (j_decompress_ptr cinfo)
{
 801f0ec:	b480      	push	{r7}
 801f0ee:	b085      	sub	sp, #20
 801f0f0:	af00      	add	r7, sp, #0
 801f0f2:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize = (my_cquantize_ptr) cinfo->cquantize;
 801f0f4:	687b      	ldr	r3, [r7, #4]
 801f0f6:	f8d3 31e0 	ldr.w	r3, [r3, #480]	; 0x1e0
 801f0fa:	60fb      	str	r3, [r7, #12]

  /* Reset the inverse color map */
  cquantize->needs_zeroed = TRUE;
 801f0fc:	68fb      	ldr	r3, [r7, #12]
 801f0fe:	2201      	movs	r2, #1
 801f100:	61da      	str	r2, [r3, #28]
}
 801f102:	bf00      	nop
 801f104:	3714      	adds	r7, #20
 801f106:	46bd      	mov	sp, r7
 801f108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f10c:	4770      	bx	lr
	...

0801f110 <jinit_2pass_quantizer>:
 * Module initialization routine for 2-pass color quantization.
 */

GLOBAL(void)
jinit_2pass_quantizer (j_decompress_ptr cinfo)
{
 801f110:	b590      	push	{r4, r7, lr}
 801f112:	b087      	sub	sp, #28
 801f114:	af00      	add	r7, sp, #0
 801f116:	6078      	str	r0, [r7, #4]
  my_cquantize_ptr cquantize;
  int i;

  cquantize = (my_cquantize_ptr)
    (*cinfo->mem->alloc_small) ((j_common_ptr) cinfo, JPOOL_IMAGE,
 801f118:	687b      	ldr	r3, [r7, #4]
 801f11a:	685b      	ldr	r3, [r3, #4]
 801f11c:	681b      	ldr	r3, [r3, #0]
 801f11e:	222c      	movs	r2, #44	; 0x2c
 801f120:	2101      	movs	r1, #1
 801f122:	6878      	ldr	r0, [r7, #4]
 801f124:	4798      	blx	r3
 801f126:	6138      	str	r0, [r7, #16]
				SIZEOF(my_cquantizer));
  cinfo->cquantize = (struct jpeg_color_quantizer *) cquantize;
 801f128:	687b      	ldr	r3, [r7, #4]
 801f12a:	693a      	ldr	r2, [r7, #16]
 801f12c:	f8c3 21e0 	str.w	r2, [r3, #480]	; 0x1e0
  cquantize->pub.start_pass = start_pass_2_quant;
 801f130:	693b      	ldr	r3, [r7, #16]
 801f132:	4a4f      	ldr	r2, [pc, #316]	; (801f270 <jinit_2pass_quantizer+0x160>)
 801f134:	601a      	str	r2, [r3, #0]
  cquantize->pub.new_color_map = new_color_map_2_quant;
 801f136:	693b      	ldr	r3, [r7, #16]
 801f138:	4a4e      	ldr	r2, [pc, #312]	; (801f274 <jinit_2pass_quantizer+0x164>)
 801f13a:	60da      	str	r2, [r3, #12]
  cquantize->fserrors = NULL;	/* flag optional arrays not allocated */
 801f13c:	693b      	ldr	r3, [r7, #16]
 801f13e:	2200      	movs	r2, #0
 801f140:	621a      	str	r2, [r3, #32]
  cquantize->error_limiter = NULL;
 801f142:	693b      	ldr	r3, [r7, #16]
 801f144:	2200      	movs	r2, #0
 801f146:	629a      	str	r2, [r3, #40]	; 0x28

  /* Make sure jdmaster didn't give me a case I can't handle */
  if (cinfo->out_color_components != 3)
 801f148:	687b      	ldr	r3, [r7, #4]
 801f14a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801f14c:	2b03      	cmp	r3, #3
 801f14e:	d008      	beq.n	801f162 <jinit_2pass_quantizer+0x52>
    ERREXIT(cinfo, JERR_NOTIMPL);
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	681b      	ldr	r3, [r3, #0]
 801f154:	2230      	movs	r2, #48	; 0x30
 801f156:	615a      	str	r2, [r3, #20]
 801f158:	687b      	ldr	r3, [r7, #4]
 801f15a:	681b      	ldr	r3, [r3, #0]
 801f15c:	681b      	ldr	r3, [r3, #0]
 801f15e:	6878      	ldr	r0, [r7, #4]
 801f160:	4798      	blx	r3

  /* Allocate the histogram/inverse colormap storage */
  cquantize->histogram = (hist3d) (*cinfo->mem->alloc_small)
 801f162:	687b      	ldr	r3, [r7, #4]
 801f164:	685b      	ldr	r3, [r3, #4]
 801f166:	681b      	ldr	r3, [r3, #0]
 801f168:	2280      	movs	r2, #128	; 0x80
 801f16a:	2101      	movs	r1, #1
 801f16c:	6878      	ldr	r0, [r7, #4]
 801f16e:	4798      	blx	r3
 801f170:	4602      	mov	r2, r0
 801f172:	693b      	ldr	r3, [r7, #16]
 801f174:	619a      	str	r2, [r3, #24]
    ((j_common_ptr) cinfo, JPOOL_IMAGE, HIST_C0_ELEMS * SIZEOF(hist2d));
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 801f176:	2300      	movs	r3, #0
 801f178:	617b      	str	r3, [r7, #20]
 801f17a:	e011      	b.n	801f1a0 <jinit_2pass_quantizer+0x90>
    cquantize->histogram[i] = (hist2d) (*cinfo->mem->alloc_large)
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	685b      	ldr	r3, [r3, #4]
 801f180:	685b      	ldr	r3, [r3, #4]
 801f182:	693a      	ldr	r2, [r7, #16]
 801f184:	6991      	ldr	r1, [r2, #24]
 801f186:	697a      	ldr	r2, [r7, #20]
 801f188:	0092      	lsls	r2, r2, #2
 801f18a:	188c      	adds	r4, r1, r2
 801f18c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 801f190:	2101      	movs	r1, #1
 801f192:	6878      	ldr	r0, [r7, #4]
 801f194:	4798      	blx	r3
 801f196:	4603      	mov	r3, r0
 801f198:	6023      	str	r3, [r4, #0]
  for (i = 0; i < HIST_C0_ELEMS; i++) {
 801f19a:	697b      	ldr	r3, [r7, #20]
 801f19c:	3301      	adds	r3, #1
 801f19e:	617b      	str	r3, [r7, #20]
 801f1a0:	697b      	ldr	r3, [r7, #20]
 801f1a2:	2b1f      	cmp	r3, #31
 801f1a4:	ddea      	ble.n	801f17c <jinit_2pass_quantizer+0x6c>
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       HIST_C1_ELEMS*HIST_C2_ELEMS * SIZEOF(histcell));
  }
  cquantize->needs_zeroed = TRUE; /* histogram is garbage now */
 801f1a6:	693b      	ldr	r3, [r7, #16]
 801f1a8:	2201      	movs	r2, #1
 801f1aa:	61da      	str	r2, [r3, #28]

  /* Allocate storage for the completed colormap, if required.
   * We do this now since it is FAR storage and may affect
   * the memory manager's space calculations.
   */
  if (cinfo->enable_2pass_quant) {
 801f1ac:	687b      	ldr	r3, [r7, #4]
 801f1ae:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801f1b0:	2b00      	cmp	r3, #0
 801f1b2:	d033      	beq.n	801f21c <jinit_2pass_quantizer+0x10c>
    /* Make sure color count is acceptable */
    int desired = cinfo->desired_number_of_colors;
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801f1b8:	60fb      	str	r3, [r7, #12]
    /* Lower bound on # of colors ... somewhat arbitrary as long as > 0 */
    if (desired < 8)
 801f1ba:	68fb      	ldr	r3, [r7, #12]
 801f1bc:	2b07      	cmp	r3, #7
 801f1be:	dc0c      	bgt.n	801f1da <jinit_2pass_quantizer+0xca>
      ERREXIT1(cinfo, JERR_QUANT_FEW_COLORS, 8);
 801f1c0:	687b      	ldr	r3, [r7, #4]
 801f1c2:	681b      	ldr	r3, [r3, #0]
 801f1c4:	223a      	movs	r2, #58	; 0x3a
 801f1c6:	615a      	str	r2, [r3, #20]
 801f1c8:	687b      	ldr	r3, [r7, #4]
 801f1ca:	681b      	ldr	r3, [r3, #0]
 801f1cc:	2208      	movs	r2, #8
 801f1ce:	619a      	str	r2, [r3, #24]
 801f1d0:	687b      	ldr	r3, [r7, #4]
 801f1d2:	681b      	ldr	r3, [r3, #0]
 801f1d4:	681b      	ldr	r3, [r3, #0]
 801f1d6:	6878      	ldr	r0, [r7, #4]
 801f1d8:	4798      	blx	r3
    /* Make sure colormap indexes can be represented by JSAMPLEs */
    if (desired > MAXNUMCOLORS)
 801f1da:	68fb      	ldr	r3, [r7, #12]
 801f1dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801f1e0:	dd0d      	ble.n	801f1fe <jinit_2pass_quantizer+0xee>
      ERREXIT1(cinfo, JERR_QUANT_MANY_COLORS, MAXNUMCOLORS);
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	223b      	movs	r2, #59	; 0x3b
 801f1e8:	615a      	str	r2, [r3, #20]
 801f1ea:	687b      	ldr	r3, [r7, #4]
 801f1ec:	681b      	ldr	r3, [r3, #0]
 801f1ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 801f1f2:	619a      	str	r2, [r3, #24]
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	681b      	ldr	r3, [r3, #0]
 801f1f8:	681b      	ldr	r3, [r3, #0]
 801f1fa:	6878      	ldr	r0, [r7, #4]
 801f1fc:	4798      	blx	r3
    cquantize->sv_colormap = (*cinfo->mem->alloc_sarray)
 801f1fe:	687b      	ldr	r3, [r7, #4]
 801f200:	685b      	ldr	r3, [r3, #4]
 801f202:	689c      	ldr	r4, [r3, #8]
 801f204:	68fa      	ldr	r2, [r7, #12]
 801f206:	2303      	movs	r3, #3
 801f208:	2101      	movs	r1, #1
 801f20a:	6878      	ldr	r0, [r7, #4]
 801f20c:	47a0      	blx	r4
 801f20e:	4602      	mov	r2, r0
 801f210:	693b      	ldr	r3, [r7, #16]
 801f212:	611a      	str	r2, [r3, #16]
      ((j_common_ptr) cinfo,JPOOL_IMAGE, (JDIMENSION) desired, (JDIMENSION) 3);
    cquantize->desired = desired;
 801f214:	693b      	ldr	r3, [r7, #16]
 801f216:	68fa      	ldr	r2, [r7, #12]
 801f218:	615a      	str	r2, [r3, #20]
 801f21a:	e002      	b.n	801f222 <jinit_2pass_quantizer+0x112>
  } else
    cquantize->sv_colormap = NULL;
 801f21c:	693b      	ldr	r3, [r7, #16]
 801f21e:	2200      	movs	r2, #0
 801f220:	611a      	str	r2, [r3, #16]

  /* Only F-S dithering or no dithering is supported. */
  /* If user asks for ordered dither, give him F-S. */
  if (cinfo->dither_mode != JDITHER_NONE)
 801f222:	687b      	ldr	r3, [r7, #4]
 801f224:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801f228:	2b00      	cmp	r3, #0
 801f22a:	d003      	beq.n	801f234 <jinit_2pass_quantizer+0x124>
    cinfo->dither_mode = JDITHER_FS;
 801f22c:	687b      	ldr	r3, [r7, #4]
 801f22e:	2202      	movs	r2, #2
 801f230:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Allocate Floyd-Steinberg workspace if necessary.
   * This isn't really needed until pass 2, but again it is FAR storage.
   * Although we will cope with a later change in dither_mode,
   * we do not promise to honor max_memory_to_use if dither_mode changes.
   */
  if (cinfo->dither_mode == JDITHER_FS) {
 801f234:	687b      	ldr	r3, [r7, #4]
 801f236:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 801f23a:	2b02      	cmp	r3, #2
 801f23c:	d113      	bne.n	801f266 <jinit_2pass_quantizer+0x156>
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801f23e:	687b      	ldr	r3, [r7, #4]
 801f240:	685b      	ldr	r3, [r3, #4]
 801f242:	685c      	ldr	r4, [r3, #4]
      ((j_common_ptr) cinfo, JPOOL_IMAGE,
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	6f1a      	ldr	r2, [r3, #112]	; 0x70
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801f248:	4613      	mov	r3, r2
 801f24a:	005b      	lsls	r3, r3, #1
 801f24c:	4413      	add	r3, r2
 801f24e:	005b      	lsls	r3, r3, #1
       (size_t) ((cinfo->output_width + 2) * (3 * SIZEOF(FSERROR))));
 801f250:	330c      	adds	r3, #12
    cquantize->fserrors = (FSERRPTR) (*cinfo->mem->alloc_large)
 801f252:	461a      	mov	r2, r3
 801f254:	2101      	movs	r1, #1
 801f256:	6878      	ldr	r0, [r7, #4]
 801f258:	47a0      	blx	r4
 801f25a:	4602      	mov	r2, r0
 801f25c:	693b      	ldr	r3, [r7, #16]
 801f25e:	621a      	str	r2, [r3, #32]
    /* Might as well create the error-limiting table too. */
    init_error_limit(cinfo);
 801f260:	6878      	ldr	r0, [r7, #4]
 801f262:	f7ff fdfb 	bl	801ee5c <init_error_limit>
  }
}
 801f266:	bf00      	nop
 801f268:	371c      	adds	r7, #28
 801f26a:	46bd      	mov	sp, r7
 801f26c:	bd90      	pop	{r4, r7, pc}
 801f26e:	bf00      	nop
 801f270:	0801ef95 	.word	0x0801ef95
 801f274:	0801f0ed 	.word	0x0801f0ed

0801f278 <jdiv_round_up>:

GLOBAL(long)
jdiv_round_up (long a, long b)
/* Compute a/b rounded up to next integer, ie, ceil(a/b) */
/* Assumes a >= 0, b > 0 */
{
 801f278:	b480      	push	{r7}
 801f27a:	b083      	sub	sp, #12
 801f27c:	af00      	add	r7, sp, #0
 801f27e:	6078      	str	r0, [r7, #4]
 801f280:	6039      	str	r1, [r7, #0]
  return (a + b - 1L) / b;
 801f282:	687a      	ldr	r2, [r7, #4]
 801f284:	683b      	ldr	r3, [r7, #0]
 801f286:	4413      	add	r3, r2
 801f288:	1e5a      	subs	r2, r3, #1
 801f28a:	683b      	ldr	r3, [r7, #0]
 801f28c:	fb92 f3f3 	sdiv	r3, r2, r3
}
 801f290:	4618      	mov	r0, r3
 801f292:	370c      	adds	r7, #12
 801f294:	46bd      	mov	sp, r7
 801f296:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f29a:	4770      	bx	lr

0801f29c <jround_up>:

GLOBAL(long)
jround_up (long a, long b)
/* Compute a rounded up to next multiple of b, ie, ceil(a/b)*b */
/* Assumes a >= 0, b > 0 */
{
 801f29c:	b480      	push	{r7}
 801f29e:	b083      	sub	sp, #12
 801f2a0:	af00      	add	r7, sp, #0
 801f2a2:	6078      	str	r0, [r7, #4]
 801f2a4:	6039      	str	r1, [r7, #0]
  a += b - 1L;
 801f2a6:	683b      	ldr	r3, [r7, #0]
 801f2a8:	3b01      	subs	r3, #1
 801f2aa:	687a      	ldr	r2, [r7, #4]
 801f2ac:	4413      	add	r3, r2
 801f2ae:	607b      	str	r3, [r7, #4]
  return a - (a % b);
 801f2b0:	687b      	ldr	r3, [r7, #4]
 801f2b2:	683a      	ldr	r2, [r7, #0]
 801f2b4:	fb93 f2f2 	sdiv	r2, r3, r2
 801f2b8:	6839      	ldr	r1, [r7, #0]
 801f2ba:	fb01 f202 	mul.w	r2, r1, r2
 801f2be:	1a9b      	subs	r3, r3, r2
 801f2c0:	687a      	ldr	r2, [r7, #4]
 801f2c2:	1ad3      	subs	r3, r2, r3
}
 801f2c4:	4618      	mov	r0, r3
 801f2c6:	370c      	adds	r7, #12
 801f2c8:	46bd      	mov	sp, r7
 801f2ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2ce:	4770      	bx	lr

0801f2d0 <jcopy_sample_rows>:
/* Copy some rows of samples from one place to another.
 * num_rows rows are copied from input_array[source_row++]
 * to output_array[dest_row++]; these areas may overlap for duplication.
 * The source and destination arrays must be at least as wide as num_cols.
 */
{
 801f2d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f2d2:	b085      	sub	sp, #20
 801f2d4:	af00      	add	r7, sp, #0
 801f2d6:	60f8      	str	r0, [r7, #12]
 801f2d8:	60b9      	str	r1, [r7, #8]
 801f2da:	607a      	str	r2, [r7, #4]
 801f2dc:	603b      	str	r3, [r7, #0]
  register JSAMPROW inptr, outptr;
#ifdef FMEMCOPY
  register size_t count = (size_t) (num_cols * SIZEOF(JSAMPLE));
 801f2de:	6afd      	ldr	r5, [r7, #44]	; 0x2c
#else
  register JDIMENSION count;
#endif
  register int row;

  input_array += source_row;
 801f2e0:	68bb      	ldr	r3, [r7, #8]
 801f2e2:	009b      	lsls	r3, r3, #2
 801f2e4:	68fa      	ldr	r2, [r7, #12]
 801f2e6:	4413      	add	r3, r2
 801f2e8:	60fb      	str	r3, [r7, #12]
  output_array += dest_row;
 801f2ea:	683b      	ldr	r3, [r7, #0]
 801f2ec:	009b      	lsls	r3, r3, #2
 801f2ee:	687a      	ldr	r2, [r7, #4]
 801f2f0:	4413      	add	r3, r2
 801f2f2:	607b      	str	r3, [r7, #4]

  for (row = num_rows; row > 0; row--) {
 801f2f4:	6abc      	ldr	r4, [r7, #40]	; 0x28
 801f2f6:	e00c      	b.n	801f312 <jcopy_sample_rows+0x42>
    inptr = *input_array++;
 801f2f8:	68fb      	ldr	r3, [r7, #12]
 801f2fa:	1d1a      	adds	r2, r3, #4
 801f2fc:	60fa      	str	r2, [r7, #12]
 801f2fe:	6819      	ldr	r1, [r3, #0]
    outptr = *output_array++;
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	1d1a      	adds	r2, r3, #4
 801f304:	607a      	str	r2, [r7, #4]
 801f306:	681e      	ldr	r6, [r3, #0]
#ifdef FMEMCOPY
    FMEMCOPY(outptr, inptr, count);
 801f308:	462a      	mov	r2, r5
 801f30a:	4630      	mov	r0, r6
 801f30c:	f000 f856 	bl	801f3bc <memcpy>
  for (row = num_rows; row > 0; row--) {
 801f310:	3c01      	subs	r4, #1
 801f312:	2c00      	cmp	r4, #0
 801f314:	dcf0      	bgt.n	801f2f8 <jcopy_sample_rows+0x28>
#else
    for (count = num_cols; count > 0; count--)
      *outptr++ = *inptr++;	/* needn't bother with GETJSAMPLE() here */
#endif
  }
}
 801f316:	bf00      	nop
 801f318:	bf00      	nop
 801f31a:	3714      	adds	r7, #20
 801f31c:	46bd      	mov	sp, r7
 801f31e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801f320 <jcopy_block_row>:

GLOBAL(void)
jcopy_block_row (JBLOCKROW input_row, JBLOCKROW output_row,
		 JDIMENSION num_blocks)
/* Copy a row of coefficient blocks from one place to another. */
{
 801f320:	b580      	push	{r7, lr}
 801f322:	b084      	sub	sp, #16
 801f324:	af00      	add	r7, sp, #0
 801f326:	60f8      	str	r0, [r7, #12]
 801f328:	60b9      	str	r1, [r7, #8]
 801f32a:	607a      	str	r2, [r7, #4]
#ifdef FMEMCOPY
  FMEMCOPY(output_row, input_row, num_blocks * (DCTSIZE2 * SIZEOF(JCOEF)));
 801f32c:	687b      	ldr	r3, [r7, #4]
 801f32e:	01db      	lsls	r3, r3, #7
 801f330:	461a      	mov	r2, r3
 801f332:	68f9      	ldr	r1, [r7, #12]
 801f334:	68b8      	ldr	r0, [r7, #8]
 801f336:	f000 f841 	bl	801f3bc <memcpy>
  outptr = (JCOEFPTR) output_row;
  for (count = (long) num_blocks * DCTSIZE2; count > 0; count--) {
    *outptr++ = *inptr++;
  }
#endif
}
 801f33a:	bf00      	nop
 801f33c:	3710      	adds	r7, #16
 801f33e:	46bd      	mov	sp, r7
 801f340:	bd80      	pop	{r7, pc}
	...

0801f344 <__errno>:
 801f344:	4b01      	ldr	r3, [pc, #4]	; (801f34c <__errno+0x8>)
 801f346:	6818      	ldr	r0, [r3, #0]
 801f348:	4770      	bx	lr
 801f34a:	bf00      	nop
 801f34c:	2000000c 	.word	0x2000000c

0801f350 <__libc_init_array>:
 801f350:	b570      	push	{r4, r5, r6, lr}
 801f352:	4d0d      	ldr	r5, [pc, #52]	; (801f388 <__libc_init_array+0x38>)
 801f354:	4c0d      	ldr	r4, [pc, #52]	; (801f38c <__libc_init_array+0x3c>)
 801f356:	1b64      	subs	r4, r4, r5
 801f358:	10a4      	asrs	r4, r4, #2
 801f35a:	2600      	movs	r6, #0
 801f35c:	42a6      	cmp	r6, r4
 801f35e:	d109      	bne.n	801f374 <__libc_init_array+0x24>
 801f360:	4d0b      	ldr	r5, [pc, #44]	; (801f390 <__libc_init_array+0x40>)
 801f362:	4c0c      	ldr	r4, [pc, #48]	; (801f394 <__libc_init_array+0x44>)
 801f364:	f000 fc5e 	bl	801fc24 <_init>
 801f368:	1b64      	subs	r4, r4, r5
 801f36a:	10a4      	asrs	r4, r4, #2
 801f36c:	2600      	movs	r6, #0
 801f36e:	42a6      	cmp	r6, r4
 801f370:	d105      	bne.n	801f37e <__libc_init_array+0x2e>
 801f372:	bd70      	pop	{r4, r5, r6, pc}
 801f374:	f855 3b04 	ldr.w	r3, [r5], #4
 801f378:	4798      	blx	r3
 801f37a:	3601      	adds	r6, #1
 801f37c:	e7ee      	b.n	801f35c <__libc_init_array+0xc>
 801f37e:	f855 3b04 	ldr.w	r3, [r5], #4
 801f382:	4798      	blx	r3
 801f384:	3601      	adds	r6, #1
 801f386:	e7f2      	b.n	801f36e <__libc_init_array+0x1e>
 801f388:	08021e08 	.word	0x08021e08
 801f38c:	08021e08 	.word	0x08021e08
 801f390:	08021e08 	.word	0x08021e08
 801f394:	08021e0c 	.word	0x08021e0c

0801f398 <__retarget_lock_acquire_recursive>:
 801f398:	4770      	bx	lr

0801f39a <__retarget_lock_release_recursive>:
 801f39a:	4770      	bx	lr

0801f39c <malloc>:
 801f39c:	4b02      	ldr	r3, [pc, #8]	; (801f3a8 <malloc+0xc>)
 801f39e:	4601      	mov	r1, r0
 801f3a0:	6818      	ldr	r0, [r3, #0]
 801f3a2:	f000 b871 	b.w	801f488 <_malloc_r>
 801f3a6:	bf00      	nop
 801f3a8:	2000000c 	.word	0x2000000c

0801f3ac <free>:
 801f3ac:	4b02      	ldr	r3, [pc, #8]	; (801f3b8 <free+0xc>)
 801f3ae:	4601      	mov	r1, r0
 801f3b0:	6818      	ldr	r0, [r3, #0]
 801f3b2:	f000 b819 	b.w	801f3e8 <_free_r>
 801f3b6:	bf00      	nop
 801f3b8:	2000000c 	.word	0x2000000c

0801f3bc <memcpy>:
 801f3bc:	440a      	add	r2, r1
 801f3be:	4291      	cmp	r1, r2
 801f3c0:	f100 33ff 	add.w	r3, r0, #4294967295
 801f3c4:	d100      	bne.n	801f3c8 <memcpy+0xc>
 801f3c6:	4770      	bx	lr
 801f3c8:	b510      	push	{r4, lr}
 801f3ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 801f3ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 801f3d2:	4291      	cmp	r1, r2
 801f3d4:	d1f9      	bne.n	801f3ca <memcpy+0xe>
 801f3d6:	bd10      	pop	{r4, pc}

0801f3d8 <memset>:
 801f3d8:	4402      	add	r2, r0
 801f3da:	4603      	mov	r3, r0
 801f3dc:	4293      	cmp	r3, r2
 801f3de:	d100      	bne.n	801f3e2 <memset+0xa>
 801f3e0:	4770      	bx	lr
 801f3e2:	f803 1b01 	strb.w	r1, [r3], #1
 801f3e6:	e7f9      	b.n	801f3dc <memset+0x4>

0801f3e8 <_free_r>:
 801f3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801f3ea:	2900      	cmp	r1, #0
 801f3ec:	d048      	beq.n	801f480 <_free_r+0x98>
 801f3ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801f3f2:	9001      	str	r0, [sp, #4]
 801f3f4:	2b00      	cmp	r3, #0
 801f3f6:	f1a1 0404 	sub.w	r4, r1, #4
 801f3fa:	bfb8      	it	lt
 801f3fc:	18e4      	addlt	r4, r4, r3
 801f3fe:	f000 f8cd 	bl	801f59c <__malloc_lock>
 801f402:	4a20      	ldr	r2, [pc, #128]	; (801f484 <_free_r+0x9c>)
 801f404:	9801      	ldr	r0, [sp, #4]
 801f406:	6813      	ldr	r3, [r2, #0]
 801f408:	4615      	mov	r5, r2
 801f40a:	b933      	cbnz	r3, 801f41a <_free_r+0x32>
 801f40c:	6063      	str	r3, [r4, #4]
 801f40e:	6014      	str	r4, [r2, #0]
 801f410:	b003      	add	sp, #12
 801f412:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801f416:	f000 b8c7 	b.w	801f5a8 <__malloc_unlock>
 801f41a:	42a3      	cmp	r3, r4
 801f41c:	d90b      	bls.n	801f436 <_free_r+0x4e>
 801f41e:	6821      	ldr	r1, [r4, #0]
 801f420:	1862      	adds	r2, r4, r1
 801f422:	4293      	cmp	r3, r2
 801f424:	bf04      	itt	eq
 801f426:	681a      	ldreq	r2, [r3, #0]
 801f428:	685b      	ldreq	r3, [r3, #4]
 801f42a:	6063      	str	r3, [r4, #4]
 801f42c:	bf04      	itt	eq
 801f42e:	1852      	addeq	r2, r2, r1
 801f430:	6022      	streq	r2, [r4, #0]
 801f432:	602c      	str	r4, [r5, #0]
 801f434:	e7ec      	b.n	801f410 <_free_r+0x28>
 801f436:	461a      	mov	r2, r3
 801f438:	685b      	ldr	r3, [r3, #4]
 801f43a:	b10b      	cbz	r3, 801f440 <_free_r+0x58>
 801f43c:	42a3      	cmp	r3, r4
 801f43e:	d9fa      	bls.n	801f436 <_free_r+0x4e>
 801f440:	6811      	ldr	r1, [r2, #0]
 801f442:	1855      	adds	r5, r2, r1
 801f444:	42a5      	cmp	r5, r4
 801f446:	d10b      	bne.n	801f460 <_free_r+0x78>
 801f448:	6824      	ldr	r4, [r4, #0]
 801f44a:	4421      	add	r1, r4
 801f44c:	1854      	adds	r4, r2, r1
 801f44e:	42a3      	cmp	r3, r4
 801f450:	6011      	str	r1, [r2, #0]
 801f452:	d1dd      	bne.n	801f410 <_free_r+0x28>
 801f454:	681c      	ldr	r4, [r3, #0]
 801f456:	685b      	ldr	r3, [r3, #4]
 801f458:	6053      	str	r3, [r2, #4]
 801f45a:	4421      	add	r1, r4
 801f45c:	6011      	str	r1, [r2, #0]
 801f45e:	e7d7      	b.n	801f410 <_free_r+0x28>
 801f460:	d902      	bls.n	801f468 <_free_r+0x80>
 801f462:	230c      	movs	r3, #12
 801f464:	6003      	str	r3, [r0, #0]
 801f466:	e7d3      	b.n	801f410 <_free_r+0x28>
 801f468:	6825      	ldr	r5, [r4, #0]
 801f46a:	1961      	adds	r1, r4, r5
 801f46c:	428b      	cmp	r3, r1
 801f46e:	bf04      	itt	eq
 801f470:	6819      	ldreq	r1, [r3, #0]
 801f472:	685b      	ldreq	r3, [r3, #4]
 801f474:	6063      	str	r3, [r4, #4]
 801f476:	bf04      	itt	eq
 801f478:	1949      	addeq	r1, r1, r5
 801f47a:	6021      	streq	r1, [r4, #0]
 801f47c:	6054      	str	r4, [r2, #4]
 801f47e:	e7c7      	b.n	801f410 <_free_r+0x28>
 801f480:	b003      	add	sp, #12
 801f482:	bd30      	pop	{r4, r5, pc}
 801f484:	20000090 	.word	0x20000090

0801f488 <_malloc_r>:
 801f488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f48a:	1ccd      	adds	r5, r1, #3
 801f48c:	f025 0503 	bic.w	r5, r5, #3
 801f490:	3508      	adds	r5, #8
 801f492:	2d0c      	cmp	r5, #12
 801f494:	bf38      	it	cc
 801f496:	250c      	movcc	r5, #12
 801f498:	2d00      	cmp	r5, #0
 801f49a:	4606      	mov	r6, r0
 801f49c:	db01      	blt.n	801f4a2 <_malloc_r+0x1a>
 801f49e:	42a9      	cmp	r1, r5
 801f4a0:	d903      	bls.n	801f4aa <_malloc_r+0x22>
 801f4a2:	230c      	movs	r3, #12
 801f4a4:	6033      	str	r3, [r6, #0]
 801f4a6:	2000      	movs	r0, #0
 801f4a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801f4aa:	f000 f877 	bl	801f59c <__malloc_lock>
 801f4ae:	4921      	ldr	r1, [pc, #132]	; (801f534 <_malloc_r+0xac>)
 801f4b0:	680a      	ldr	r2, [r1, #0]
 801f4b2:	4614      	mov	r4, r2
 801f4b4:	b99c      	cbnz	r4, 801f4de <_malloc_r+0x56>
 801f4b6:	4f20      	ldr	r7, [pc, #128]	; (801f538 <_malloc_r+0xb0>)
 801f4b8:	683b      	ldr	r3, [r7, #0]
 801f4ba:	b923      	cbnz	r3, 801f4c6 <_malloc_r+0x3e>
 801f4bc:	4621      	mov	r1, r4
 801f4be:	4630      	mov	r0, r6
 801f4c0:	f000 f83c 	bl	801f53c <_sbrk_r>
 801f4c4:	6038      	str	r0, [r7, #0]
 801f4c6:	4629      	mov	r1, r5
 801f4c8:	4630      	mov	r0, r6
 801f4ca:	f000 f837 	bl	801f53c <_sbrk_r>
 801f4ce:	1c43      	adds	r3, r0, #1
 801f4d0:	d123      	bne.n	801f51a <_malloc_r+0x92>
 801f4d2:	230c      	movs	r3, #12
 801f4d4:	6033      	str	r3, [r6, #0]
 801f4d6:	4630      	mov	r0, r6
 801f4d8:	f000 f866 	bl	801f5a8 <__malloc_unlock>
 801f4dc:	e7e3      	b.n	801f4a6 <_malloc_r+0x1e>
 801f4de:	6823      	ldr	r3, [r4, #0]
 801f4e0:	1b5b      	subs	r3, r3, r5
 801f4e2:	d417      	bmi.n	801f514 <_malloc_r+0x8c>
 801f4e4:	2b0b      	cmp	r3, #11
 801f4e6:	d903      	bls.n	801f4f0 <_malloc_r+0x68>
 801f4e8:	6023      	str	r3, [r4, #0]
 801f4ea:	441c      	add	r4, r3
 801f4ec:	6025      	str	r5, [r4, #0]
 801f4ee:	e004      	b.n	801f4fa <_malloc_r+0x72>
 801f4f0:	6863      	ldr	r3, [r4, #4]
 801f4f2:	42a2      	cmp	r2, r4
 801f4f4:	bf0c      	ite	eq
 801f4f6:	600b      	streq	r3, [r1, #0]
 801f4f8:	6053      	strne	r3, [r2, #4]
 801f4fa:	4630      	mov	r0, r6
 801f4fc:	f000 f854 	bl	801f5a8 <__malloc_unlock>
 801f500:	f104 000b 	add.w	r0, r4, #11
 801f504:	1d23      	adds	r3, r4, #4
 801f506:	f020 0007 	bic.w	r0, r0, #7
 801f50a:	1ac2      	subs	r2, r0, r3
 801f50c:	d0cc      	beq.n	801f4a8 <_malloc_r+0x20>
 801f50e:	1a1b      	subs	r3, r3, r0
 801f510:	50a3      	str	r3, [r4, r2]
 801f512:	e7c9      	b.n	801f4a8 <_malloc_r+0x20>
 801f514:	4622      	mov	r2, r4
 801f516:	6864      	ldr	r4, [r4, #4]
 801f518:	e7cc      	b.n	801f4b4 <_malloc_r+0x2c>
 801f51a:	1cc4      	adds	r4, r0, #3
 801f51c:	f024 0403 	bic.w	r4, r4, #3
 801f520:	42a0      	cmp	r0, r4
 801f522:	d0e3      	beq.n	801f4ec <_malloc_r+0x64>
 801f524:	1a21      	subs	r1, r4, r0
 801f526:	4630      	mov	r0, r6
 801f528:	f000 f808 	bl	801f53c <_sbrk_r>
 801f52c:	3001      	adds	r0, #1
 801f52e:	d1dd      	bne.n	801f4ec <_malloc_r+0x64>
 801f530:	e7cf      	b.n	801f4d2 <_malloc_r+0x4a>
 801f532:	bf00      	nop
 801f534:	20000090 	.word	0x20000090
 801f538:	20000094 	.word	0x20000094

0801f53c <_sbrk_r>:
 801f53c:	b538      	push	{r3, r4, r5, lr}
 801f53e:	4d06      	ldr	r5, [pc, #24]	; (801f558 <_sbrk_r+0x1c>)
 801f540:	2300      	movs	r3, #0
 801f542:	4604      	mov	r4, r0
 801f544:	4608      	mov	r0, r1
 801f546:	602b      	str	r3, [r5, #0]
 801f548:	f7e1 ffa4 	bl	8001494 <_sbrk>
 801f54c:	1c43      	adds	r3, r0, #1
 801f54e:	d102      	bne.n	801f556 <_sbrk_r+0x1a>
 801f550:	682b      	ldr	r3, [r5, #0]
 801f552:	b103      	cbz	r3, 801f556 <_sbrk_r+0x1a>
 801f554:	6023      	str	r3, [r4, #0]
 801f556:	bd38      	pop	{r3, r4, r5, pc}
 801f558:	200000ec 	.word	0x200000ec

0801f55c <siprintf>:
 801f55c:	b40e      	push	{r1, r2, r3}
 801f55e:	b500      	push	{lr}
 801f560:	b09c      	sub	sp, #112	; 0x70
 801f562:	ab1d      	add	r3, sp, #116	; 0x74
 801f564:	9002      	str	r0, [sp, #8]
 801f566:	9006      	str	r0, [sp, #24]
 801f568:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801f56c:	4809      	ldr	r0, [pc, #36]	; (801f594 <siprintf+0x38>)
 801f56e:	9107      	str	r1, [sp, #28]
 801f570:	9104      	str	r1, [sp, #16]
 801f572:	4909      	ldr	r1, [pc, #36]	; (801f598 <siprintf+0x3c>)
 801f574:	f853 2b04 	ldr.w	r2, [r3], #4
 801f578:	9105      	str	r1, [sp, #20]
 801f57a:	6800      	ldr	r0, [r0, #0]
 801f57c:	9301      	str	r3, [sp, #4]
 801f57e:	a902      	add	r1, sp, #8
 801f580:	f000 f874 	bl	801f66c <_svfiprintf_r>
 801f584:	9b02      	ldr	r3, [sp, #8]
 801f586:	2200      	movs	r2, #0
 801f588:	701a      	strb	r2, [r3, #0]
 801f58a:	b01c      	add	sp, #112	; 0x70
 801f58c:	f85d eb04 	ldr.w	lr, [sp], #4
 801f590:	b003      	add	sp, #12
 801f592:	4770      	bx	lr
 801f594:	2000000c 	.word	0x2000000c
 801f598:	ffff0208 	.word	0xffff0208

0801f59c <__malloc_lock>:
 801f59c:	4801      	ldr	r0, [pc, #4]	; (801f5a4 <__malloc_lock+0x8>)
 801f59e:	f7ff befb 	b.w	801f398 <__retarget_lock_acquire_recursive>
 801f5a2:	bf00      	nop
 801f5a4:	200000e4 	.word	0x200000e4

0801f5a8 <__malloc_unlock>:
 801f5a8:	4801      	ldr	r0, [pc, #4]	; (801f5b0 <__malloc_unlock+0x8>)
 801f5aa:	f7ff bef6 	b.w	801f39a <__retarget_lock_release_recursive>
 801f5ae:	bf00      	nop
 801f5b0:	200000e4 	.word	0x200000e4

0801f5b4 <__ssputs_r>:
 801f5b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f5b8:	688e      	ldr	r6, [r1, #8]
 801f5ba:	429e      	cmp	r6, r3
 801f5bc:	4682      	mov	sl, r0
 801f5be:	460c      	mov	r4, r1
 801f5c0:	4690      	mov	r8, r2
 801f5c2:	461f      	mov	r7, r3
 801f5c4:	d838      	bhi.n	801f638 <__ssputs_r+0x84>
 801f5c6:	898a      	ldrh	r2, [r1, #12]
 801f5c8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801f5cc:	d032      	beq.n	801f634 <__ssputs_r+0x80>
 801f5ce:	6825      	ldr	r5, [r4, #0]
 801f5d0:	6909      	ldr	r1, [r1, #16]
 801f5d2:	eba5 0901 	sub.w	r9, r5, r1
 801f5d6:	6965      	ldr	r5, [r4, #20]
 801f5d8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f5dc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801f5e0:	3301      	adds	r3, #1
 801f5e2:	444b      	add	r3, r9
 801f5e4:	106d      	asrs	r5, r5, #1
 801f5e6:	429d      	cmp	r5, r3
 801f5e8:	bf38      	it	cc
 801f5ea:	461d      	movcc	r5, r3
 801f5ec:	0553      	lsls	r3, r2, #21
 801f5ee:	d531      	bpl.n	801f654 <__ssputs_r+0xa0>
 801f5f0:	4629      	mov	r1, r5
 801f5f2:	f7ff ff49 	bl	801f488 <_malloc_r>
 801f5f6:	4606      	mov	r6, r0
 801f5f8:	b950      	cbnz	r0, 801f610 <__ssputs_r+0x5c>
 801f5fa:	230c      	movs	r3, #12
 801f5fc:	f8ca 3000 	str.w	r3, [sl]
 801f600:	89a3      	ldrh	r3, [r4, #12]
 801f602:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801f606:	81a3      	strh	r3, [r4, #12]
 801f608:	f04f 30ff 	mov.w	r0, #4294967295
 801f60c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f610:	6921      	ldr	r1, [r4, #16]
 801f612:	464a      	mov	r2, r9
 801f614:	f7ff fed2 	bl	801f3bc <memcpy>
 801f618:	89a3      	ldrh	r3, [r4, #12]
 801f61a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801f61e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801f622:	81a3      	strh	r3, [r4, #12]
 801f624:	6126      	str	r6, [r4, #16]
 801f626:	6165      	str	r5, [r4, #20]
 801f628:	444e      	add	r6, r9
 801f62a:	eba5 0509 	sub.w	r5, r5, r9
 801f62e:	6026      	str	r6, [r4, #0]
 801f630:	60a5      	str	r5, [r4, #8]
 801f632:	463e      	mov	r6, r7
 801f634:	42be      	cmp	r6, r7
 801f636:	d900      	bls.n	801f63a <__ssputs_r+0x86>
 801f638:	463e      	mov	r6, r7
 801f63a:	4632      	mov	r2, r6
 801f63c:	6820      	ldr	r0, [r4, #0]
 801f63e:	4641      	mov	r1, r8
 801f640:	f000 faa8 	bl	801fb94 <memmove>
 801f644:	68a3      	ldr	r3, [r4, #8]
 801f646:	6822      	ldr	r2, [r4, #0]
 801f648:	1b9b      	subs	r3, r3, r6
 801f64a:	4432      	add	r2, r6
 801f64c:	60a3      	str	r3, [r4, #8]
 801f64e:	6022      	str	r2, [r4, #0]
 801f650:	2000      	movs	r0, #0
 801f652:	e7db      	b.n	801f60c <__ssputs_r+0x58>
 801f654:	462a      	mov	r2, r5
 801f656:	f000 fab7 	bl	801fbc8 <_realloc_r>
 801f65a:	4606      	mov	r6, r0
 801f65c:	2800      	cmp	r0, #0
 801f65e:	d1e1      	bne.n	801f624 <__ssputs_r+0x70>
 801f660:	6921      	ldr	r1, [r4, #16]
 801f662:	4650      	mov	r0, sl
 801f664:	f7ff fec0 	bl	801f3e8 <_free_r>
 801f668:	e7c7      	b.n	801f5fa <__ssputs_r+0x46>
	...

0801f66c <_svfiprintf_r>:
 801f66c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f670:	4698      	mov	r8, r3
 801f672:	898b      	ldrh	r3, [r1, #12]
 801f674:	061b      	lsls	r3, r3, #24
 801f676:	b09d      	sub	sp, #116	; 0x74
 801f678:	4607      	mov	r7, r0
 801f67a:	460d      	mov	r5, r1
 801f67c:	4614      	mov	r4, r2
 801f67e:	d50e      	bpl.n	801f69e <_svfiprintf_r+0x32>
 801f680:	690b      	ldr	r3, [r1, #16]
 801f682:	b963      	cbnz	r3, 801f69e <_svfiprintf_r+0x32>
 801f684:	2140      	movs	r1, #64	; 0x40
 801f686:	f7ff feff 	bl	801f488 <_malloc_r>
 801f68a:	6028      	str	r0, [r5, #0]
 801f68c:	6128      	str	r0, [r5, #16]
 801f68e:	b920      	cbnz	r0, 801f69a <_svfiprintf_r+0x2e>
 801f690:	230c      	movs	r3, #12
 801f692:	603b      	str	r3, [r7, #0]
 801f694:	f04f 30ff 	mov.w	r0, #4294967295
 801f698:	e0d1      	b.n	801f83e <_svfiprintf_r+0x1d2>
 801f69a:	2340      	movs	r3, #64	; 0x40
 801f69c:	616b      	str	r3, [r5, #20]
 801f69e:	2300      	movs	r3, #0
 801f6a0:	9309      	str	r3, [sp, #36]	; 0x24
 801f6a2:	2320      	movs	r3, #32
 801f6a4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801f6a8:	f8cd 800c 	str.w	r8, [sp, #12]
 801f6ac:	2330      	movs	r3, #48	; 0x30
 801f6ae:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801f858 <_svfiprintf_r+0x1ec>
 801f6b2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801f6b6:	f04f 0901 	mov.w	r9, #1
 801f6ba:	4623      	mov	r3, r4
 801f6bc:	469a      	mov	sl, r3
 801f6be:	f813 2b01 	ldrb.w	r2, [r3], #1
 801f6c2:	b10a      	cbz	r2, 801f6c8 <_svfiprintf_r+0x5c>
 801f6c4:	2a25      	cmp	r2, #37	; 0x25
 801f6c6:	d1f9      	bne.n	801f6bc <_svfiprintf_r+0x50>
 801f6c8:	ebba 0b04 	subs.w	fp, sl, r4
 801f6cc:	d00b      	beq.n	801f6e6 <_svfiprintf_r+0x7a>
 801f6ce:	465b      	mov	r3, fp
 801f6d0:	4622      	mov	r2, r4
 801f6d2:	4629      	mov	r1, r5
 801f6d4:	4638      	mov	r0, r7
 801f6d6:	f7ff ff6d 	bl	801f5b4 <__ssputs_r>
 801f6da:	3001      	adds	r0, #1
 801f6dc:	f000 80aa 	beq.w	801f834 <_svfiprintf_r+0x1c8>
 801f6e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801f6e2:	445a      	add	r2, fp
 801f6e4:	9209      	str	r2, [sp, #36]	; 0x24
 801f6e6:	f89a 3000 	ldrb.w	r3, [sl]
 801f6ea:	2b00      	cmp	r3, #0
 801f6ec:	f000 80a2 	beq.w	801f834 <_svfiprintf_r+0x1c8>
 801f6f0:	2300      	movs	r3, #0
 801f6f2:	f04f 32ff 	mov.w	r2, #4294967295
 801f6f6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801f6fa:	f10a 0a01 	add.w	sl, sl, #1
 801f6fe:	9304      	str	r3, [sp, #16]
 801f700:	9307      	str	r3, [sp, #28]
 801f702:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801f706:	931a      	str	r3, [sp, #104]	; 0x68
 801f708:	4654      	mov	r4, sl
 801f70a:	2205      	movs	r2, #5
 801f70c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f710:	4851      	ldr	r0, [pc, #324]	; (801f858 <_svfiprintf_r+0x1ec>)
 801f712:	f7e0 fd5d 	bl	80001d0 <memchr>
 801f716:	9a04      	ldr	r2, [sp, #16]
 801f718:	b9d8      	cbnz	r0, 801f752 <_svfiprintf_r+0xe6>
 801f71a:	06d0      	lsls	r0, r2, #27
 801f71c:	bf44      	itt	mi
 801f71e:	2320      	movmi	r3, #32
 801f720:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f724:	0711      	lsls	r1, r2, #28
 801f726:	bf44      	itt	mi
 801f728:	232b      	movmi	r3, #43	; 0x2b
 801f72a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801f72e:	f89a 3000 	ldrb.w	r3, [sl]
 801f732:	2b2a      	cmp	r3, #42	; 0x2a
 801f734:	d015      	beq.n	801f762 <_svfiprintf_r+0xf6>
 801f736:	9a07      	ldr	r2, [sp, #28]
 801f738:	4654      	mov	r4, sl
 801f73a:	2000      	movs	r0, #0
 801f73c:	f04f 0c0a 	mov.w	ip, #10
 801f740:	4621      	mov	r1, r4
 801f742:	f811 3b01 	ldrb.w	r3, [r1], #1
 801f746:	3b30      	subs	r3, #48	; 0x30
 801f748:	2b09      	cmp	r3, #9
 801f74a:	d94e      	bls.n	801f7ea <_svfiprintf_r+0x17e>
 801f74c:	b1b0      	cbz	r0, 801f77c <_svfiprintf_r+0x110>
 801f74e:	9207      	str	r2, [sp, #28]
 801f750:	e014      	b.n	801f77c <_svfiprintf_r+0x110>
 801f752:	eba0 0308 	sub.w	r3, r0, r8
 801f756:	fa09 f303 	lsl.w	r3, r9, r3
 801f75a:	4313      	orrs	r3, r2
 801f75c:	9304      	str	r3, [sp, #16]
 801f75e:	46a2      	mov	sl, r4
 801f760:	e7d2      	b.n	801f708 <_svfiprintf_r+0x9c>
 801f762:	9b03      	ldr	r3, [sp, #12]
 801f764:	1d19      	adds	r1, r3, #4
 801f766:	681b      	ldr	r3, [r3, #0]
 801f768:	9103      	str	r1, [sp, #12]
 801f76a:	2b00      	cmp	r3, #0
 801f76c:	bfbb      	ittet	lt
 801f76e:	425b      	neglt	r3, r3
 801f770:	f042 0202 	orrlt.w	r2, r2, #2
 801f774:	9307      	strge	r3, [sp, #28]
 801f776:	9307      	strlt	r3, [sp, #28]
 801f778:	bfb8      	it	lt
 801f77a:	9204      	strlt	r2, [sp, #16]
 801f77c:	7823      	ldrb	r3, [r4, #0]
 801f77e:	2b2e      	cmp	r3, #46	; 0x2e
 801f780:	d10c      	bne.n	801f79c <_svfiprintf_r+0x130>
 801f782:	7863      	ldrb	r3, [r4, #1]
 801f784:	2b2a      	cmp	r3, #42	; 0x2a
 801f786:	d135      	bne.n	801f7f4 <_svfiprintf_r+0x188>
 801f788:	9b03      	ldr	r3, [sp, #12]
 801f78a:	1d1a      	adds	r2, r3, #4
 801f78c:	681b      	ldr	r3, [r3, #0]
 801f78e:	9203      	str	r2, [sp, #12]
 801f790:	2b00      	cmp	r3, #0
 801f792:	bfb8      	it	lt
 801f794:	f04f 33ff 	movlt.w	r3, #4294967295
 801f798:	3402      	adds	r4, #2
 801f79a:	9305      	str	r3, [sp, #20]
 801f79c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801f868 <_svfiprintf_r+0x1fc>
 801f7a0:	7821      	ldrb	r1, [r4, #0]
 801f7a2:	2203      	movs	r2, #3
 801f7a4:	4650      	mov	r0, sl
 801f7a6:	f7e0 fd13 	bl	80001d0 <memchr>
 801f7aa:	b140      	cbz	r0, 801f7be <_svfiprintf_r+0x152>
 801f7ac:	2340      	movs	r3, #64	; 0x40
 801f7ae:	eba0 000a 	sub.w	r0, r0, sl
 801f7b2:	fa03 f000 	lsl.w	r0, r3, r0
 801f7b6:	9b04      	ldr	r3, [sp, #16]
 801f7b8:	4303      	orrs	r3, r0
 801f7ba:	3401      	adds	r4, #1
 801f7bc:	9304      	str	r3, [sp, #16]
 801f7be:	f814 1b01 	ldrb.w	r1, [r4], #1
 801f7c2:	4826      	ldr	r0, [pc, #152]	; (801f85c <_svfiprintf_r+0x1f0>)
 801f7c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801f7c8:	2206      	movs	r2, #6
 801f7ca:	f7e0 fd01 	bl	80001d0 <memchr>
 801f7ce:	2800      	cmp	r0, #0
 801f7d0:	d038      	beq.n	801f844 <_svfiprintf_r+0x1d8>
 801f7d2:	4b23      	ldr	r3, [pc, #140]	; (801f860 <_svfiprintf_r+0x1f4>)
 801f7d4:	bb1b      	cbnz	r3, 801f81e <_svfiprintf_r+0x1b2>
 801f7d6:	9b03      	ldr	r3, [sp, #12]
 801f7d8:	3307      	adds	r3, #7
 801f7da:	f023 0307 	bic.w	r3, r3, #7
 801f7de:	3308      	adds	r3, #8
 801f7e0:	9303      	str	r3, [sp, #12]
 801f7e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801f7e4:	4433      	add	r3, r6
 801f7e6:	9309      	str	r3, [sp, #36]	; 0x24
 801f7e8:	e767      	b.n	801f6ba <_svfiprintf_r+0x4e>
 801f7ea:	fb0c 3202 	mla	r2, ip, r2, r3
 801f7ee:	460c      	mov	r4, r1
 801f7f0:	2001      	movs	r0, #1
 801f7f2:	e7a5      	b.n	801f740 <_svfiprintf_r+0xd4>
 801f7f4:	2300      	movs	r3, #0
 801f7f6:	3401      	adds	r4, #1
 801f7f8:	9305      	str	r3, [sp, #20]
 801f7fa:	4619      	mov	r1, r3
 801f7fc:	f04f 0c0a 	mov.w	ip, #10
 801f800:	4620      	mov	r0, r4
 801f802:	f810 2b01 	ldrb.w	r2, [r0], #1
 801f806:	3a30      	subs	r2, #48	; 0x30
 801f808:	2a09      	cmp	r2, #9
 801f80a:	d903      	bls.n	801f814 <_svfiprintf_r+0x1a8>
 801f80c:	2b00      	cmp	r3, #0
 801f80e:	d0c5      	beq.n	801f79c <_svfiprintf_r+0x130>
 801f810:	9105      	str	r1, [sp, #20]
 801f812:	e7c3      	b.n	801f79c <_svfiprintf_r+0x130>
 801f814:	fb0c 2101 	mla	r1, ip, r1, r2
 801f818:	4604      	mov	r4, r0
 801f81a:	2301      	movs	r3, #1
 801f81c:	e7f0      	b.n	801f800 <_svfiprintf_r+0x194>
 801f81e:	ab03      	add	r3, sp, #12
 801f820:	9300      	str	r3, [sp, #0]
 801f822:	462a      	mov	r2, r5
 801f824:	4b0f      	ldr	r3, [pc, #60]	; (801f864 <_svfiprintf_r+0x1f8>)
 801f826:	a904      	add	r1, sp, #16
 801f828:	4638      	mov	r0, r7
 801f82a:	f3af 8000 	nop.w
 801f82e:	1c42      	adds	r2, r0, #1
 801f830:	4606      	mov	r6, r0
 801f832:	d1d6      	bne.n	801f7e2 <_svfiprintf_r+0x176>
 801f834:	89ab      	ldrh	r3, [r5, #12]
 801f836:	065b      	lsls	r3, r3, #25
 801f838:	f53f af2c 	bmi.w	801f694 <_svfiprintf_r+0x28>
 801f83c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801f83e:	b01d      	add	sp, #116	; 0x74
 801f840:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f844:	ab03      	add	r3, sp, #12
 801f846:	9300      	str	r3, [sp, #0]
 801f848:	462a      	mov	r2, r5
 801f84a:	4b06      	ldr	r3, [pc, #24]	; (801f864 <_svfiprintf_r+0x1f8>)
 801f84c:	a904      	add	r1, sp, #16
 801f84e:	4638      	mov	r0, r7
 801f850:	f000 f87a 	bl	801f948 <_printf_i>
 801f854:	e7eb      	b.n	801f82e <_svfiprintf_r+0x1c2>
 801f856:	bf00      	nop
 801f858:	08021dcc 	.word	0x08021dcc
 801f85c:	08021dd6 	.word	0x08021dd6
 801f860:	00000000 	.word	0x00000000
 801f864:	0801f5b5 	.word	0x0801f5b5
 801f868:	08021dd2 	.word	0x08021dd2

0801f86c <_printf_common>:
 801f86c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801f870:	4616      	mov	r6, r2
 801f872:	4699      	mov	r9, r3
 801f874:	688a      	ldr	r2, [r1, #8]
 801f876:	690b      	ldr	r3, [r1, #16]
 801f878:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801f87c:	4293      	cmp	r3, r2
 801f87e:	bfb8      	it	lt
 801f880:	4613      	movlt	r3, r2
 801f882:	6033      	str	r3, [r6, #0]
 801f884:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801f888:	4607      	mov	r7, r0
 801f88a:	460c      	mov	r4, r1
 801f88c:	b10a      	cbz	r2, 801f892 <_printf_common+0x26>
 801f88e:	3301      	adds	r3, #1
 801f890:	6033      	str	r3, [r6, #0]
 801f892:	6823      	ldr	r3, [r4, #0]
 801f894:	0699      	lsls	r1, r3, #26
 801f896:	bf42      	ittt	mi
 801f898:	6833      	ldrmi	r3, [r6, #0]
 801f89a:	3302      	addmi	r3, #2
 801f89c:	6033      	strmi	r3, [r6, #0]
 801f89e:	6825      	ldr	r5, [r4, #0]
 801f8a0:	f015 0506 	ands.w	r5, r5, #6
 801f8a4:	d106      	bne.n	801f8b4 <_printf_common+0x48>
 801f8a6:	f104 0a19 	add.w	sl, r4, #25
 801f8aa:	68e3      	ldr	r3, [r4, #12]
 801f8ac:	6832      	ldr	r2, [r6, #0]
 801f8ae:	1a9b      	subs	r3, r3, r2
 801f8b0:	42ab      	cmp	r3, r5
 801f8b2:	dc26      	bgt.n	801f902 <_printf_common+0x96>
 801f8b4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801f8b8:	1e13      	subs	r3, r2, #0
 801f8ba:	6822      	ldr	r2, [r4, #0]
 801f8bc:	bf18      	it	ne
 801f8be:	2301      	movne	r3, #1
 801f8c0:	0692      	lsls	r2, r2, #26
 801f8c2:	d42b      	bmi.n	801f91c <_printf_common+0xb0>
 801f8c4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f8c8:	4649      	mov	r1, r9
 801f8ca:	4638      	mov	r0, r7
 801f8cc:	47c0      	blx	r8
 801f8ce:	3001      	adds	r0, #1
 801f8d0:	d01e      	beq.n	801f910 <_printf_common+0xa4>
 801f8d2:	6823      	ldr	r3, [r4, #0]
 801f8d4:	68e5      	ldr	r5, [r4, #12]
 801f8d6:	6832      	ldr	r2, [r6, #0]
 801f8d8:	f003 0306 	and.w	r3, r3, #6
 801f8dc:	2b04      	cmp	r3, #4
 801f8de:	bf08      	it	eq
 801f8e0:	1aad      	subeq	r5, r5, r2
 801f8e2:	68a3      	ldr	r3, [r4, #8]
 801f8e4:	6922      	ldr	r2, [r4, #16]
 801f8e6:	bf0c      	ite	eq
 801f8e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801f8ec:	2500      	movne	r5, #0
 801f8ee:	4293      	cmp	r3, r2
 801f8f0:	bfc4      	itt	gt
 801f8f2:	1a9b      	subgt	r3, r3, r2
 801f8f4:	18ed      	addgt	r5, r5, r3
 801f8f6:	2600      	movs	r6, #0
 801f8f8:	341a      	adds	r4, #26
 801f8fa:	42b5      	cmp	r5, r6
 801f8fc:	d11a      	bne.n	801f934 <_printf_common+0xc8>
 801f8fe:	2000      	movs	r0, #0
 801f900:	e008      	b.n	801f914 <_printf_common+0xa8>
 801f902:	2301      	movs	r3, #1
 801f904:	4652      	mov	r2, sl
 801f906:	4649      	mov	r1, r9
 801f908:	4638      	mov	r0, r7
 801f90a:	47c0      	blx	r8
 801f90c:	3001      	adds	r0, #1
 801f90e:	d103      	bne.n	801f918 <_printf_common+0xac>
 801f910:	f04f 30ff 	mov.w	r0, #4294967295
 801f914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801f918:	3501      	adds	r5, #1
 801f91a:	e7c6      	b.n	801f8aa <_printf_common+0x3e>
 801f91c:	18e1      	adds	r1, r4, r3
 801f91e:	1c5a      	adds	r2, r3, #1
 801f920:	2030      	movs	r0, #48	; 0x30
 801f922:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801f926:	4422      	add	r2, r4
 801f928:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801f92c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801f930:	3302      	adds	r3, #2
 801f932:	e7c7      	b.n	801f8c4 <_printf_common+0x58>
 801f934:	2301      	movs	r3, #1
 801f936:	4622      	mov	r2, r4
 801f938:	4649      	mov	r1, r9
 801f93a:	4638      	mov	r0, r7
 801f93c:	47c0      	blx	r8
 801f93e:	3001      	adds	r0, #1
 801f940:	d0e6      	beq.n	801f910 <_printf_common+0xa4>
 801f942:	3601      	adds	r6, #1
 801f944:	e7d9      	b.n	801f8fa <_printf_common+0x8e>
	...

0801f948 <_printf_i>:
 801f948:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801f94c:	460c      	mov	r4, r1
 801f94e:	4691      	mov	r9, r2
 801f950:	7e27      	ldrb	r7, [r4, #24]
 801f952:	990c      	ldr	r1, [sp, #48]	; 0x30
 801f954:	2f78      	cmp	r7, #120	; 0x78
 801f956:	4680      	mov	r8, r0
 801f958:	469a      	mov	sl, r3
 801f95a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801f95e:	d807      	bhi.n	801f970 <_printf_i+0x28>
 801f960:	2f62      	cmp	r7, #98	; 0x62
 801f962:	d80a      	bhi.n	801f97a <_printf_i+0x32>
 801f964:	2f00      	cmp	r7, #0
 801f966:	f000 80d8 	beq.w	801fb1a <_printf_i+0x1d2>
 801f96a:	2f58      	cmp	r7, #88	; 0x58
 801f96c:	f000 80a3 	beq.w	801fab6 <_printf_i+0x16e>
 801f970:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f974:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801f978:	e03a      	b.n	801f9f0 <_printf_i+0xa8>
 801f97a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801f97e:	2b15      	cmp	r3, #21
 801f980:	d8f6      	bhi.n	801f970 <_printf_i+0x28>
 801f982:	a001      	add	r0, pc, #4	; (adr r0, 801f988 <_printf_i+0x40>)
 801f984:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801f988:	0801f9e1 	.word	0x0801f9e1
 801f98c:	0801f9f5 	.word	0x0801f9f5
 801f990:	0801f971 	.word	0x0801f971
 801f994:	0801f971 	.word	0x0801f971
 801f998:	0801f971 	.word	0x0801f971
 801f99c:	0801f971 	.word	0x0801f971
 801f9a0:	0801f9f5 	.word	0x0801f9f5
 801f9a4:	0801f971 	.word	0x0801f971
 801f9a8:	0801f971 	.word	0x0801f971
 801f9ac:	0801f971 	.word	0x0801f971
 801f9b0:	0801f971 	.word	0x0801f971
 801f9b4:	0801fb01 	.word	0x0801fb01
 801f9b8:	0801fa25 	.word	0x0801fa25
 801f9bc:	0801fae3 	.word	0x0801fae3
 801f9c0:	0801f971 	.word	0x0801f971
 801f9c4:	0801f971 	.word	0x0801f971
 801f9c8:	0801fb23 	.word	0x0801fb23
 801f9cc:	0801f971 	.word	0x0801f971
 801f9d0:	0801fa25 	.word	0x0801fa25
 801f9d4:	0801f971 	.word	0x0801f971
 801f9d8:	0801f971 	.word	0x0801f971
 801f9dc:	0801faeb 	.word	0x0801faeb
 801f9e0:	680b      	ldr	r3, [r1, #0]
 801f9e2:	1d1a      	adds	r2, r3, #4
 801f9e4:	681b      	ldr	r3, [r3, #0]
 801f9e6:	600a      	str	r2, [r1, #0]
 801f9e8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801f9ec:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801f9f0:	2301      	movs	r3, #1
 801f9f2:	e0a3      	b.n	801fb3c <_printf_i+0x1f4>
 801f9f4:	6825      	ldr	r5, [r4, #0]
 801f9f6:	6808      	ldr	r0, [r1, #0]
 801f9f8:	062e      	lsls	r6, r5, #24
 801f9fa:	f100 0304 	add.w	r3, r0, #4
 801f9fe:	d50a      	bpl.n	801fa16 <_printf_i+0xce>
 801fa00:	6805      	ldr	r5, [r0, #0]
 801fa02:	600b      	str	r3, [r1, #0]
 801fa04:	2d00      	cmp	r5, #0
 801fa06:	da03      	bge.n	801fa10 <_printf_i+0xc8>
 801fa08:	232d      	movs	r3, #45	; 0x2d
 801fa0a:	426d      	negs	r5, r5
 801fa0c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fa10:	485e      	ldr	r0, [pc, #376]	; (801fb8c <_printf_i+0x244>)
 801fa12:	230a      	movs	r3, #10
 801fa14:	e019      	b.n	801fa4a <_printf_i+0x102>
 801fa16:	f015 0f40 	tst.w	r5, #64	; 0x40
 801fa1a:	6805      	ldr	r5, [r0, #0]
 801fa1c:	600b      	str	r3, [r1, #0]
 801fa1e:	bf18      	it	ne
 801fa20:	b22d      	sxthne	r5, r5
 801fa22:	e7ef      	b.n	801fa04 <_printf_i+0xbc>
 801fa24:	680b      	ldr	r3, [r1, #0]
 801fa26:	6825      	ldr	r5, [r4, #0]
 801fa28:	1d18      	adds	r0, r3, #4
 801fa2a:	6008      	str	r0, [r1, #0]
 801fa2c:	0628      	lsls	r0, r5, #24
 801fa2e:	d501      	bpl.n	801fa34 <_printf_i+0xec>
 801fa30:	681d      	ldr	r5, [r3, #0]
 801fa32:	e002      	b.n	801fa3a <_printf_i+0xf2>
 801fa34:	0669      	lsls	r1, r5, #25
 801fa36:	d5fb      	bpl.n	801fa30 <_printf_i+0xe8>
 801fa38:	881d      	ldrh	r5, [r3, #0]
 801fa3a:	4854      	ldr	r0, [pc, #336]	; (801fb8c <_printf_i+0x244>)
 801fa3c:	2f6f      	cmp	r7, #111	; 0x6f
 801fa3e:	bf0c      	ite	eq
 801fa40:	2308      	moveq	r3, #8
 801fa42:	230a      	movne	r3, #10
 801fa44:	2100      	movs	r1, #0
 801fa46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801fa4a:	6866      	ldr	r6, [r4, #4]
 801fa4c:	60a6      	str	r6, [r4, #8]
 801fa4e:	2e00      	cmp	r6, #0
 801fa50:	bfa2      	ittt	ge
 801fa52:	6821      	ldrge	r1, [r4, #0]
 801fa54:	f021 0104 	bicge.w	r1, r1, #4
 801fa58:	6021      	strge	r1, [r4, #0]
 801fa5a:	b90d      	cbnz	r5, 801fa60 <_printf_i+0x118>
 801fa5c:	2e00      	cmp	r6, #0
 801fa5e:	d04d      	beq.n	801fafc <_printf_i+0x1b4>
 801fa60:	4616      	mov	r6, r2
 801fa62:	fbb5 f1f3 	udiv	r1, r5, r3
 801fa66:	fb03 5711 	mls	r7, r3, r1, r5
 801fa6a:	5dc7      	ldrb	r7, [r0, r7]
 801fa6c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801fa70:	462f      	mov	r7, r5
 801fa72:	42bb      	cmp	r3, r7
 801fa74:	460d      	mov	r5, r1
 801fa76:	d9f4      	bls.n	801fa62 <_printf_i+0x11a>
 801fa78:	2b08      	cmp	r3, #8
 801fa7a:	d10b      	bne.n	801fa94 <_printf_i+0x14c>
 801fa7c:	6823      	ldr	r3, [r4, #0]
 801fa7e:	07df      	lsls	r7, r3, #31
 801fa80:	d508      	bpl.n	801fa94 <_printf_i+0x14c>
 801fa82:	6923      	ldr	r3, [r4, #16]
 801fa84:	6861      	ldr	r1, [r4, #4]
 801fa86:	4299      	cmp	r1, r3
 801fa88:	bfde      	ittt	le
 801fa8a:	2330      	movle	r3, #48	; 0x30
 801fa8c:	f806 3c01 	strble.w	r3, [r6, #-1]
 801fa90:	f106 36ff 	addle.w	r6, r6, #4294967295
 801fa94:	1b92      	subs	r2, r2, r6
 801fa96:	6122      	str	r2, [r4, #16]
 801fa98:	f8cd a000 	str.w	sl, [sp]
 801fa9c:	464b      	mov	r3, r9
 801fa9e:	aa03      	add	r2, sp, #12
 801faa0:	4621      	mov	r1, r4
 801faa2:	4640      	mov	r0, r8
 801faa4:	f7ff fee2 	bl	801f86c <_printf_common>
 801faa8:	3001      	adds	r0, #1
 801faaa:	d14c      	bne.n	801fb46 <_printf_i+0x1fe>
 801faac:	f04f 30ff 	mov.w	r0, #4294967295
 801fab0:	b004      	add	sp, #16
 801fab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fab6:	4835      	ldr	r0, [pc, #212]	; (801fb8c <_printf_i+0x244>)
 801fab8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801fabc:	6823      	ldr	r3, [r4, #0]
 801fabe:	680e      	ldr	r6, [r1, #0]
 801fac0:	061f      	lsls	r7, r3, #24
 801fac2:	f856 5b04 	ldr.w	r5, [r6], #4
 801fac6:	600e      	str	r6, [r1, #0]
 801fac8:	d514      	bpl.n	801faf4 <_printf_i+0x1ac>
 801faca:	07d9      	lsls	r1, r3, #31
 801facc:	bf44      	itt	mi
 801face:	f043 0320 	orrmi.w	r3, r3, #32
 801fad2:	6023      	strmi	r3, [r4, #0]
 801fad4:	b91d      	cbnz	r5, 801fade <_printf_i+0x196>
 801fad6:	6823      	ldr	r3, [r4, #0]
 801fad8:	f023 0320 	bic.w	r3, r3, #32
 801fadc:	6023      	str	r3, [r4, #0]
 801fade:	2310      	movs	r3, #16
 801fae0:	e7b0      	b.n	801fa44 <_printf_i+0xfc>
 801fae2:	6823      	ldr	r3, [r4, #0]
 801fae4:	f043 0320 	orr.w	r3, r3, #32
 801fae8:	6023      	str	r3, [r4, #0]
 801faea:	2378      	movs	r3, #120	; 0x78
 801faec:	4828      	ldr	r0, [pc, #160]	; (801fb90 <_printf_i+0x248>)
 801faee:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801faf2:	e7e3      	b.n	801fabc <_printf_i+0x174>
 801faf4:	065e      	lsls	r6, r3, #25
 801faf6:	bf48      	it	mi
 801faf8:	b2ad      	uxthmi	r5, r5
 801fafa:	e7e6      	b.n	801faca <_printf_i+0x182>
 801fafc:	4616      	mov	r6, r2
 801fafe:	e7bb      	b.n	801fa78 <_printf_i+0x130>
 801fb00:	680b      	ldr	r3, [r1, #0]
 801fb02:	6826      	ldr	r6, [r4, #0]
 801fb04:	6960      	ldr	r0, [r4, #20]
 801fb06:	1d1d      	adds	r5, r3, #4
 801fb08:	600d      	str	r5, [r1, #0]
 801fb0a:	0635      	lsls	r5, r6, #24
 801fb0c:	681b      	ldr	r3, [r3, #0]
 801fb0e:	d501      	bpl.n	801fb14 <_printf_i+0x1cc>
 801fb10:	6018      	str	r0, [r3, #0]
 801fb12:	e002      	b.n	801fb1a <_printf_i+0x1d2>
 801fb14:	0671      	lsls	r1, r6, #25
 801fb16:	d5fb      	bpl.n	801fb10 <_printf_i+0x1c8>
 801fb18:	8018      	strh	r0, [r3, #0]
 801fb1a:	2300      	movs	r3, #0
 801fb1c:	6123      	str	r3, [r4, #16]
 801fb1e:	4616      	mov	r6, r2
 801fb20:	e7ba      	b.n	801fa98 <_printf_i+0x150>
 801fb22:	680b      	ldr	r3, [r1, #0]
 801fb24:	1d1a      	adds	r2, r3, #4
 801fb26:	600a      	str	r2, [r1, #0]
 801fb28:	681e      	ldr	r6, [r3, #0]
 801fb2a:	6862      	ldr	r2, [r4, #4]
 801fb2c:	2100      	movs	r1, #0
 801fb2e:	4630      	mov	r0, r6
 801fb30:	f7e0 fb4e 	bl	80001d0 <memchr>
 801fb34:	b108      	cbz	r0, 801fb3a <_printf_i+0x1f2>
 801fb36:	1b80      	subs	r0, r0, r6
 801fb38:	6060      	str	r0, [r4, #4]
 801fb3a:	6863      	ldr	r3, [r4, #4]
 801fb3c:	6123      	str	r3, [r4, #16]
 801fb3e:	2300      	movs	r3, #0
 801fb40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801fb44:	e7a8      	b.n	801fa98 <_printf_i+0x150>
 801fb46:	6923      	ldr	r3, [r4, #16]
 801fb48:	4632      	mov	r2, r6
 801fb4a:	4649      	mov	r1, r9
 801fb4c:	4640      	mov	r0, r8
 801fb4e:	47d0      	blx	sl
 801fb50:	3001      	adds	r0, #1
 801fb52:	d0ab      	beq.n	801faac <_printf_i+0x164>
 801fb54:	6823      	ldr	r3, [r4, #0]
 801fb56:	079b      	lsls	r3, r3, #30
 801fb58:	d413      	bmi.n	801fb82 <_printf_i+0x23a>
 801fb5a:	68e0      	ldr	r0, [r4, #12]
 801fb5c:	9b03      	ldr	r3, [sp, #12]
 801fb5e:	4298      	cmp	r0, r3
 801fb60:	bfb8      	it	lt
 801fb62:	4618      	movlt	r0, r3
 801fb64:	e7a4      	b.n	801fab0 <_printf_i+0x168>
 801fb66:	2301      	movs	r3, #1
 801fb68:	4632      	mov	r2, r6
 801fb6a:	4649      	mov	r1, r9
 801fb6c:	4640      	mov	r0, r8
 801fb6e:	47d0      	blx	sl
 801fb70:	3001      	adds	r0, #1
 801fb72:	d09b      	beq.n	801faac <_printf_i+0x164>
 801fb74:	3501      	adds	r5, #1
 801fb76:	68e3      	ldr	r3, [r4, #12]
 801fb78:	9903      	ldr	r1, [sp, #12]
 801fb7a:	1a5b      	subs	r3, r3, r1
 801fb7c:	42ab      	cmp	r3, r5
 801fb7e:	dcf2      	bgt.n	801fb66 <_printf_i+0x21e>
 801fb80:	e7eb      	b.n	801fb5a <_printf_i+0x212>
 801fb82:	2500      	movs	r5, #0
 801fb84:	f104 0619 	add.w	r6, r4, #25
 801fb88:	e7f5      	b.n	801fb76 <_printf_i+0x22e>
 801fb8a:	bf00      	nop
 801fb8c:	08021ddd 	.word	0x08021ddd
 801fb90:	08021dee 	.word	0x08021dee

0801fb94 <memmove>:
 801fb94:	4288      	cmp	r0, r1
 801fb96:	b510      	push	{r4, lr}
 801fb98:	eb01 0402 	add.w	r4, r1, r2
 801fb9c:	d902      	bls.n	801fba4 <memmove+0x10>
 801fb9e:	4284      	cmp	r4, r0
 801fba0:	4623      	mov	r3, r4
 801fba2:	d807      	bhi.n	801fbb4 <memmove+0x20>
 801fba4:	1e43      	subs	r3, r0, #1
 801fba6:	42a1      	cmp	r1, r4
 801fba8:	d008      	beq.n	801fbbc <memmove+0x28>
 801fbaa:	f811 2b01 	ldrb.w	r2, [r1], #1
 801fbae:	f803 2f01 	strb.w	r2, [r3, #1]!
 801fbb2:	e7f8      	b.n	801fba6 <memmove+0x12>
 801fbb4:	4402      	add	r2, r0
 801fbb6:	4601      	mov	r1, r0
 801fbb8:	428a      	cmp	r2, r1
 801fbba:	d100      	bne.n	801fbbe <memmove+0x2a>
 801fbbc:	bd10      	pop	{r4, pc}
 801fbbe:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801fbc2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801fbc6:	e7f7      	b.n	801fbb8 <memmove+0x24>

0801fbc8 <_realloc_r>:
 801fbc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fbca:	4607      	mov	r7, r0
 801fbcc:	4614      	mov	r4, r2
 801fbce:	460e      	mov	r6, r1
 801fbd0:	b921      	cbnz	r1, 801fbdc <_realloc_r+0x14>
 801fbd2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801fbd6:	4611      	mov	r1, r2
 801fbd8:	f7ff bc56 	b.w	801f488 <_malloc_r>
 801fbdc:	b922      	cbnz	r2, 801fbe8 <_realloc_r+0x20>
 801fbde:	f7ff fc03 	bl	801f3e8 <_free_r>
 801fbe2:	4625      	mov	r5, r4
 801fbe4:	4628      	mov	r0, r5
 801fbe6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801fbe8:	f000 f814 	bl	801fc14 <_malloc_usable_size_r>
 801fbec:	42a0      	cmp	r0, r4
 801fbee:	d20f      	bcs.n	801fc10 <_realloc_r+0x48>
 801fbf0:	4621      	mov	r1, r4
 801fbf2:	4638      	mov	r0, r7
 801fbf4:	f7ff fc48 	bl	801f488 <_malloc_r>
 801fbf8:	4605      	mov	r5, r0
 801fbfa:	2800      	cmp	r0, #0
 801fbfc:	d0f2      	beq.n	801fbe4 <_realloc_r+0x1c>
 801fbfe:	4631      	mov	r1, r6
 801fc00:	4622      	mov	r2, r4
 801fc02:	f7ff fbdb 	bl	801f3bc <memcpy>
 801fc06:	4631      	mov	r1, r6
 801fc08:	4638      	mov	r0, r7
 801fc0a:	f7ff fbed 	bl	801f3e8 <_free_r>
 801fc0e:	e7e9      	b.n	801fbe4 <_realloc_r+0x1c>
 801fc10:	4635      	mov	r5, r6
 801fc12:	e7e7      	b.n	801fbe4 <_realloc_r+0x1c>

0801fc14 <_malloc_usable_size_r>:
 801fc14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801fc18:	1f18      	subs	r0, r3, #4
 801fc1a:	2b00      	cmp	r3, #0
 801fc1c:	bfbc      	itt	lt
 801fc1e:	580b      	ldrlt	r3, [r1, r0]
 801fc20:	18c0      	addlt	r0, r0, r3
 801fc22:	4770      	bx	lr

0801fc24 <_init>:
 801fc24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc26:	bf00      	nop
 801fc28:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc2a:	bc08      	pop	{r3}
 801fc2c:	469e      	mov	lr, r3
 801fc2e:	4770      	bx	lr

0801fc30 <_fini>:
 801fc30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801fc32:	bf00      	nop
 801fc34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801fc36:	bc08      	pop	{r3}
 801fc38:	469e      	mov	lr, r3
 801fc3a:	4770      	bx	lr
